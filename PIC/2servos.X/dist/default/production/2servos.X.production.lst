

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Apr 09 01:04:55 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    11                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    12  0000                     
    13                           ; Version 2.05
    14                           ; Generated 20/12/2018 GMT
    15                           ; 
    16                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC18F4620 Definitions
    45                           ; 
    46                           ; SFR Addresses
    47  0000                     _LATBbits	set	3978
    48  0000                     _TRISBbits	set	3987
    49  0000                     _TRISD	set	3989
    50  0000                     _TRISC	set	3988
    51  0000                     _TRISB	set	3987
    52  0000                     _RD0	set	31768
    53  0000                     _RD1	set	31769
    54  0000                     _RC2	set	31762
    55  0000                     _RC1	set	31761
    56                           
    57                           ; #config settings
    58  0000                     
    59                           	psect	cinit
    60  00FD9C                     __pcinit:
    61                           	opt callstack 0
    62  00FD9C                     start_initialization:
    63                           	opt callstack 0
    64  00FD9C                     __initialization:
    65                           	opt callstack 0
    66  00FD9C                     end_of_initialization:
    67                           	opt callstack 0
    68  00FD9C                     __end_of__initialization:
    69                           	opt callstack 0
    70  00FD9C  0100               	movlb	0
    71  00FD9E  EFD1  F07E         	goto	_main	;jump to C main() function
    72                           
    73                           	psect	cstackCOMRAM
    74  000001                     __pcstackCOMRAM:
    75                           	opt callstack 0
    76  000001                     servoRotate0@servo:
    77                           	opt callstack 0
    78  000001                     servoRotate180@servo:
    79                           	opt callstack 0
    80                           
    81                           ; 2 bytes @ 0x0
    82  000001                     	ds	2
    83  000003                     ??_servoRotate0:
    84  000003                     ??_servoRotate180:
    85                           
    86                           ; 1 bytes @ 0x2
    87  000003                     	ds	1
    88  000004                     servoRotate0@i:
    89                           	opt callstack 0
    90  000004                     servoRotate180@i:
    91                           	opt callstack 0
    92                           
    93                           ; 2 bytes @ 0x3
    94  000004                     	ds	2
    95  000006                     ??_main:
    96                           
    97                           ; 1 bytes @ 0x5
    98  000006                     	ds	2
    99                           
   100 ;;
   101 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   102 ;;
   103 ;; *************** function _main *****************
   104 ;; Defined at:
   105 ;;		line 98 in file "main.c"
   106 ;; Parameters:    Size  Location     Type
   107 ;;		None
   108 ;; Auto vars:     Size  Location     Type
   109 ;;		None
   110 ;; Return value:  Size  Location     Type
   111 ;;                  1    wreg      void 
   112 ;; Registers used:
   113 ;;		wreg, status,2, status,0, cstack
   114 ;; Tracked objects:
   115 ;;		On entry : 0/0
   116 ;;		On exit  : 0/0
   117 ;;		Unchanged: 0/0
   118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   121 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   122 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   123 ;;Total ram usage:        2 bytes
   124 ;; Hardware stack levels required when called:    1
   125 ;; This function calls:
   126 ;;		_servoRotate0
   127 ;;		_servoRotate180
   128 ;; This function is called by:
   129 ;;		Startup code after reset
   130 ;; This function uses a non-reentrant model
   131 ;;
   132                           
   133                           	psect	text0
   134  00FDA2                     __ptext0:
   135                           	opt callstack 0
   136  00FDA2                     _main:
   137                           	opt callstack 30
   138                           
   139                           ;main.c: 100:   TRISB = 0;
   140                           
   141                           ;incstack = 0
   142  00FDA2  0E00               	movlw	0
   143  00FDA4  6E93               	movwf	3987,c	;volatile
   144                           
   145                           ;main.c: 101:     TRISC = 0;
   146  00FDA6  0E00               	movlw	0
   147  00FDA8  6E94               	movwf	3988,c	;volatile
   148                           
   149                           ;main.c: 102:     TRISD = 0;
   150  00FDAA  0E00               	movlw	0
   151  00FDAC  6E95               	movwf	3989,c	;volatile
   152                           
   153                           ;main.c: 104:       TRISBbits.RB0 = 0;
   154  00FDAE  9093               	bcf	3987,0,c	;volatile
   155                           
   156                           ;main.c: 105:     LATBbits.LATB0 = 1;
   157  00FDB0  808A               	bsf	3978,0,c	;volatile
   158                           
   159                           ;main.c: 106:     {;main.c: 108:     servoRotate0(1);
   160  00FDB2  0E00               	movlw	0
   161  00FDB4  6E02               	movwf	servoRotate0@servo+1,c
   162  00FDB6  0E01               	movlw	1
   163  00FDB8  6E01               	movwf	servoRotate0@servo,c
   164  00FDBA  EC24  F07F         	call	_servoRotate0	;wreg free
   165                           
   166                           ;main.c: 112:     servoRotate180(1);
   167  00FDBE  0E00               	movlw	0
   168  00FDC0  6E02               	movwf	servoRotate180@servo+1,c
   169  00FDC2  0E01               	movlw	1
   170  00FDC4  6E01               	movwf	servoRotate180@servo,c
   171  00FDC6  EC91  F07F         	call	_servoRotate180	;wreg free
   172                           
   173                           ;main.c: 113:     _delay((unsigned long)((400)*(10000000/4000.0)));
   174  00FDCA  0E06               	movlw	6
   175  00FDCC  6E07               	movwf	(??_main+1)& (0+255),c
   176  00FDCE  0E13               	movlw	19
   177  00FDD0  6E06               	movwf	??_main& (0+255),c
   178  00FDD2  0EAE               	movlw	174
   179  00FDD4                     u257:
   180  00FDD4  2EE8               	decfsz	wreg,f,c
   181  00FDD6  D7FE               	bra	u257
   182  00FDD8  2E06               	decfsz	??_main& (0+255),f,c
   183  00FDDA  D7FC               	bra	u257
   184  00FDDC  2E07               	decfsz	(??_main+1)& (0+255),f,c
   185  00FDDE  D7FA               	bra	u257
   186                           
   187                           ;main.c: 114:     servoRotate0(1);
   188  00FDE0  0E00               	movlw	0
   189  00FDE2  6E02               	movwf	servoRotate0@servo+1,c
   190  00FDE4  0E01               	movlw	1
   191  00FDE6  6E01               	movwf	servoRotate0@servo,c
   192  00FDE8  EC24  F07F         	call	_servoRotate0	;wreg free
   193                           
   194                           ;main.c: 116:     servoRotate180(2);
   195  00FDEC  0E00               	movlw	0
   196  00FDEE  6E02               	movwf	servoRotate180@servo+1,c
   197  00FDF0  0E02               	movlw	2
   198  00FDF2  6E01               	movwf	servoRotate180@servo,c
   199  00FDF4  EC91  F07F         	call	_servoRotate180	;wreg free
   200                           
   201                           ;main.c: 117:     servoRotate0(2);
   202  00FDF8  0E00               	movlw	0
   203  00FDFA  6E02               	movwf	servoRotate0@servo+1,c
   204  00FDFC  0E02               	movlw	2
   205  00FDFE  6E01               	movwf	servoRotate0@servo,c
   206  00FE00  EC24  F07F         	call	_servoRotate0	;wreg free
   207                           
   208                           ;main.c: 118:     servoRotate180(2);
   209  00FE04  0E00               	movlw	0
   210  00FE06  6E02               	movwf	servoRotate180@servo+1,c
   211  00FE08  0E02               	movlw	2
   212  00FE0A  6E01               	movwf	servoRotate180@servo,c
   213  00FE0C  EC91  F07F         	call	_servoRotate180	;wreg free
   214                           
   215                           ;main.c: 120:     _delay((unsigned long)((50)*(10000000/4000.0)));
   216  00FE10  0EA3               	movlw	163
   217  00FE12  6E06               	movwf	??_main& (0+255),c
   218  00FE14  0E55               	movlw	85
   219  00FE16                     u267:
   220  00FE16  2EE8               	decfsz	wreg,f,c
   221  00FE18  D7FE               	bra	u267
   222  00FE1A  2E06               	decfsz	??_main& (0+255),f,c
   223  00FE1C  D7FC               	bra	u267
   224  00FE1E  F000               	nop	
   225                           
   226                           ;main.c: 121:     servoRotate180(3);
   227  00FE20  0E00               	movlw	0
   228  00FE22  6E02               	movwf	servoRotate180@servo+1,c
   229  00FE24  0E03               	movlw	3
   230  00FE26  6E01               	movwf	servoRotate180@servo,c
   231  00FE28  EC91  F07F         	call	_servoRotate180	;wreg free
   232                           
   233                           ;main.c: 122:     servoRotate0(3);
   234  00FE2C  0E00               	movlw	0
   235  00FE2E  6E02               	movwf	servoRotate0@servo+1,c
   236  00FE30  0E03               	movlw	3
   237  00FE32  6E01               	movwf	servoRotate0@servo,c
   238  00FE34  EC24  F07F         	call	_servoRotate0	;wreg free
   239                           
   240                           ;main.c: 123:     servoRotate180(3);
   241  00FE38  0E00               	movlw	0
   242  00FE3A  6E02               	movwf	servoRotate180@servo+1,c
   243  00FE3C  0E03               	movlw	3
   244  00FE3E  6E01               	movwf	servoRotate180@servo,c
   245  00FE40  EC91  F07F         	call	_servoRotate180	;wreg free
   246  00FE44  EF00  F000         	goto	start
   247  00FE48                     __end_of_main:
   248                           	opt callstack 0
   249                           
   250 ;; *************** function _servoRotate180 *****************
   251 ;; Defined at:
   252 ;;		line 50 in file "main.c"
   253 ;; Parameters:    Size  Location     Type
   254 ;;  servo           2    0[COMRAM] int 
   255 ;; Auto vars:     Size  Location     Type
   256 ;;  i               2    3[COMRAM] unsigned int 
   257 ;; Return value:  Size  Location     Type
   258 ;;                  1    wreg      void 
   259 ;; Registers used:
   260 ;;		wreg, status,2, status,0
   261 ;; Tracked objects:
   262 ;;		On entry : 0/0
   263 ;;		On exit  : 0/0
   264 ;;		Unchanged: 0/0
   265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   266 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   267 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   268 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   269 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   270 ;;Total ram usage:        5 bytes
   271 ;; Hardware stack levels used:    1
   272 ;; This function calls:
   273 ;;		Nothing
   274 ;; This function is called by:
   275 ;;		_main
   276 ;; This function uses a non-reentrant model
   277 ;;
   278                           
   279                           	psect	text1
   280  00FF22                     __ptext1:
   281                           	opt callstack 0
   282  00FF22                     _servoRotate180:
   283                           	opt callstack 30
   284                           
   285                           ;main.c: 50: void servoRotate180(int servo);main.c: 51: {;main.c: 52:   unsigned int i;;
      +                          main.c: 53:     if (servo==1){
   286                           
   287                           ;incstack = 0
   288  00FF22  0401               	decf	servoRotate180@servo,w,c
   289  00FF24  1002               	iorwf	servoRotate180@servo+1,w,c
   290  00FF26  A4D8               	btfss	status,2,c
   291  00FF28  D024               	goto	u200
   292                           
   293                           ;main.c: 54:     for(i=0;i<300;i++)
   294  00FF2A  0E00               	movlw	0
   295  00FF2C  6E05               	movwf	servoRotate180@i+1,c
   296  00FF2E  0E00               	movlw	0
   297  00FF30  6E04               	movwf	servoRotate180@i,c
   298  00FF32                     l36:
   299                           
   300                           ;main.c: 55:         {;main.c: 56:           RC1 = 1;
   301  00FF32  8282               	bsf	3970,1,c	;volatile
   302                           
   303                           ;main.c: 57:             RC2 = 1;
   304  00FF34  8482               	bsf	3970,2,c	;volatile
   305                           
   306                           ;main.c: 58:           _delay((unsigned long)((450)*(10000000/4000000.0)));
   307  00FF36  0EE1               	movlw	225
   308  00FF38                     u277:
   309  00FF38  D000               	nop2	
   310  00FF3A  2EE8               	decfsz	wreg,f,c
   311  00FF3C  D7FD               	bra	u277
   312                           
   313                           ;main.c: 60:           RC2 =0;
   314  00FF3E  9482               	bcf	3970,2,c	;volatile
   315                           
   316                           ;main.c: 61:           _delay((unsigned long)((2100)*(10000000/4000000.0)));
   317  00FF40  0E07               	movlw	7
   318  00FF42  6E03               	movwf	??_servoRotate180& (0+255),c
   319  00FF44  0ED0               	movlw	208
   320  00FF46                     u287:
   321  00FF46  2EE8               	decfsz	wreg,f,c
   322  00FF48  D7FE               	bra	u287
   323  00FF4A  2E03               	decfsz	??_servoRotate180& (0+255),f,c
   324  00FF4C  D7FC               	bra	u287
   325  00FF4E  D000               	nop2	
   326                           
   327                           ;main.c: 63:           RC1 = 0;
   328  00FF50  9282               	bcf	3970,1,c	;volatile
   329                           
   330                           ;main.c: 64:           _delay((unsigned long)((13550)*(10000000/4000000.0)));
   331  00FF52  0E2C               	movlw	44
   332  00FF54  6E03               	movwf	??_servoRotate180& (0+255),c
   333  00FF56  0EFD               	movlw	253
   334  00FF58                     u297:
   335  00FF58  2EE8               	decfsz	wreg,f,c
   336  00FF5A  D7FE               	bra	u297
   337  00FF5C  2E03               	decfsz	??_servoRotate180& (0+255),f,c
   338  00FF5E  D7FC               	bra	u297
   339  00FF60  D000               	nop2	
   340                           
   341                           ;main.c: 65:         }
   342  00FF62  4A04               	infsnz	servoRotate180@i,f,c
   343  00FF64  2A05               	incf	servoRotate180@i+1,f,c
   344  00FF66  0E2C               	movlw	44
   345  00FF68  5C04               	subwf	servoRotate180@i,w,c
   346  00FF6A  0E01               	movlw	1
   347  00FF6C  5805               	subwfb	servoRotate180@i+1,w,c
   348  00FF6E  A0D8               	btfss	status,0,c
   349  00FF70  D7E0               	goto	l36
   350  00FF72                     u200:
   351                           
   352                           ;main.c: 67:   if (servo==2){
   353  00FF72  0E02               	movlw	2
   354  00FF74  1801               	xorwf	servoRotate180@servo,w,c
   355  00FF76  1002               	iorwf	servoRotate180@servo+1,w,c
   356  00FF78  A4D8               	btfss	status,2,c
   357  00FF7A  D01E               	goto	u220
   358                           
   359                           ;main.c: 68:     for(i=0;i<30;i++)
   360  00FF7C  0E00               	movlw	0
   361  00FF7E  6E05               	movwf	servoRotate180@i+1,c
   362  00FF80  0E00               	movlw	0
   363  00FF82  6E04               	movwf	servoRotate180@i,c
   364  00FF84                     l39:
   365                           
   366                           ;main.c: 69:           {;main.c: 71:     RD1 = 1;
   367  00FF84  8283               	bsf	3971,1,c	;volatile
   368                           
   369                           ;main.c: 75:     _delay((unsigned long)((950)*(10000000/4000000.0)));
   370  00FF86  0E04               	movlw	4
   371  00FF88  6E03               	movwf	??_servoRotate180& (0+255),c
   372  00FF8A  0E14               	movlw	20
   373  00FF8C                     u307:
   374  00FF8C  2EE8               	decfsz	wreg,f,c
   375  00FF8E  D7FE               	bra	u307
   376  00FF90  2E03               	decfsz	??_servoRotate180& (0+255),f,c
   377  00FF92  D7FC               	bra	u307
   378  00FF94  F000               	nop	
   379                           
   380                           ;main.c: 77:     RD1 = 0;
   381  00FF96  9283               	bcf	3971,1,c	;volatile
   382                           
   383                           ;main.c: 80:     _delay((unsigned long)((26650)*(10000000/4000000.0)));
   384  00FF98  0E57               	movlw	87
   385  00FF9A  6E03               	movwf	??_servoRotate180& (0+255),c
   386  00FF9C  0E85               	movlw	133
   387  00FF9E                     u317:
   388  00FF9E  2EE8               	decfsz	wreg,f,c
   389  00FFA0  D7FE               	bra	u317
   390  00FFA2  2E03               	decfsz	??_servoRotate180& (0+255),f,c
   391  00FFA4  D7FC               	bra	u317
   392  00FFA6  D000               	nop2	
   393                           
   394                           ;main.c: 82:           }
   395  00FFA8  4A04               	infsnz	servoRotate180@i,f,c
   396  00FFAA  2A05               	incf	servoRotate180@i+1,f,c
   397  00FFAC  5005               	movf	servoRotate180@i+1,w,c
   398  00FFAE  E104               	bnz	u220
   399  00FFB0  0E1E               	movlw	30
   400  00FFB2  5C04               	subwf	servoRotate180@i,w,c
   401  00FFB4  A0D8               	btfss	status,0,c
   402  00FFB6  D7E6               	goto	l39
   403  00FFB8                     u220:
   404                           
   405                           ;main.c: 84:     if (servo==3){
   406  00FFB8  0E03               	movlw	3
   407  00FFBA  1801               	xorwf	servoRotate180@servo,w,c
   408  00FFBC  1002               	iorwf	servoRotate180@servo+1,w,c
   409  00FFBE  A4D8               	btfss	status,2,c
   410  00FFC0  0012               	return	
   411                           
   412                           ;main.c: 85:       for(i=0;i<30;i++)
   413  00FFC2  0E00               	movlw	0
   414  00FFC4  6E05               	movwf	servoRotate180@i+1,c
   415  00FFC6  0E00               	movlw	0
   416  00FFC8  6E04               	movwf	servoRotate180@i,c
   417  00FFCA                     l42:
   418                           
   419                           ;main.c: 86:         {;main.c: 87:         RD0 = 1;
   420  00FFCA  8083               	bsf	3971,0,c	;volatile
   421                           
   422                           ;main.c: 89:         _delay((unsigned long)((2500)*(10000000/4000000.0)));
   423  00FFCC  0E09               	movlw	9
   424  00FFCE  6E03               	movwf	??_servoRotate180& (0+255),c
   425  00FFD0  0E1C               	movlw	28
   426  00FFD2                     u327:
   427  00FFD2  2EE8               	decfsz	wreg,f,c
   428  00FFD4  D7FE               	bra	u327
   429  00FFD6  2E03               	decfsz	??_servoRotate180& (0+255),f,c
   430  00FFD8  D7FC               	bra	u327
   431  00FFDA  D000               	nop2	
   432                           
   433                           ;main.c: 92:             RD0 = 0;
   434  00FFDC  9083               	bcf	3971,0,c	;volatile
   435                           
   436                           ;main.c: 94:         _delay((unsigned long)((10500)*(10000000/4000000.0)));
   437  00FFDE  0E23               	movlw	35
   438  00FFE0  6E03               	movwf	??_servoRotate180& (0+255),c
   439  00FFE2  0E16               	movlw	22
   440  00FFE4                     u337:
   441  00FFE4  2EE8               	decfsz	wreg,f,c
   442  00FFE6  D7FE               	bra	u337
   443  00FFE8  2E03               	decfsz	??_servoRotate180& (0+255),f,c
   444  00FFEA  D7FC               	bra	u337
   445                           
   446                           ;main.c: 95:         }
   447  00FFEC  4A04               	infsnz	servoRotate180@i,f,c
   448  00FFEE  2A05               	incf	servoRotate180@i+1,f,c
   449  00FFF0  5005               	movf	servoRotate180@i+1,w,c
   450  00FFF2  E105               	bnz	u240
   451  00FFF4  0E1E               	movlw	30
   452  00FFF6  5C04               	subwf	servoRotate180@i,w,c
   453  00FFF8  B0D8               	btfsc	status,0,c
   454  00FFFA  0012               	return	
   455  00FFFC  D7E6               	goto	l42
   456  00FFFE                     u240:
   457  00FFFE  0012               	return		;funcret
   458  010000                     __end_of_servoRotate180:
   459                           	opt callstack 0
   460                           
   461 ;; *************** function _servoRotate0 *****************
   462 ;; Defined at:
   463 ;;		line 6 in file "main.c"
   464 ;; Parameters:    Size  Location     Type
   465 ;;  servo           2    0[COMRAM] int 
   466 ;; Auto vars:     Size  Location     Type
   467 ;;  i               2    3[COMRAM] unsigned int 
   468 ;; Return value:  Size  Location     Type
   469 ;;                  1    wreg      void 
   470 ;; Registers used:
   471 ;;		wreg, status,2, status,0
   472 ;; Tracked objects:
   473 ;;		On entry : 0/0
   474 ;;		On exit  : 0/0
   475 ;;		Unchanged: 0/0
   476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   477 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   478 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   479 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   480 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   481 ;;Total ram usage:        5 bytes
   482 ;; Hardware stack levels used:    1
   483 ;; This function calls:
   484 ;;		Nothing
   485 ;; This function is called by:
   486 ;;		_main
   487 ;; This function uses a non-reentrant model
   488 ;;
   489                           
   490                           	psect	text2
   491  00FE48                     __ptext2:
   492                           	opt callstack 0
   493  00FE48                     _servoRotate0:
   494                           	opt callstack 30
   495                           
   496                           ;main.c: 7:     unsigned int i;;main.c: 8:     if (servo==1){
   497                           
   498                           ;incstack = 0
   499  00FE48  0401               	decf	servoRotate0@servo,w,c
   500  00FE4A  1002               	iorwf	servoRotate0@servo+1,w,c
   501  00FE4C  A4D8               	btfss	status,2,c
   502  00FE4E  D023               	goto	u140
   503                           
   504                           ;main.c: 9:       for(i=0;i<300;i++)
   505  00FE50  0E00               	movlw	0
   506  00FE52  6E05               	movwf	servoRotate0@i+1,c
   507  00FE54  0E00               	movlw	0
   508  00FE56  6E04               	movwf	servoRotate0@i,c
   509  00FE58                     l24:
   510                           
   511                           ;main.c: 10:           {;main.c: 11:             RC1 = 1;
   512  00FE58  8282               	bsf	3970,1,c	;volatile
   513                           
   514                           ;main.c: 12:             RC2 = 1;
   515  00FE5A  8482               	bsf	3970,2,c	;volatile
   516                           
   517                           ;main.c: 13:             _delay((unsigned long)((1100)*(10000000/4000000.0)));
   518  00FE5C  0E04               	movlw	4
   519  00FE5E  6E03               	movwf	??_servoRotate0& (0+255),c
   520  00FE60  0E91               	movlw	145
   521  00FE62                     u347:
   522  00FE62  2EE8               	decfsz	wreg,f,c
   523  00FE64  D7FE               	bra	u347
   524  00FE66  2E03               	decfsz	??_servoRotate0& (0+255),f,c
   525  00FE68  D7FC               	bra	u347
   526  00FE6A  F000               	nop	
   527                           
   528                           ;main.c: 14:             RC2 = 0;
   529  00FE6C  9482               	bcf	3970,2,c	;volatile
   530                           
   531                           ;main.c: 15:             _delay((unsigned long)((300)*(10000000/4000000.0)));
   532  00FE6E  0EFA               	movlw	250
   533  00FE70                     u357:
   534  00FE70  2EE8               	decfsz	wreg,f,c
   535  00FE72  D7FE               	bra	u357
   536                           
   537                           ;main.c: 16:             RC1 = 0;
   538  00FE74  9282               	bcf	3970,1,c	;volatile
   539                           
   540                           ;main.c: 20:             _delay((unsigned long)((18600)*(10000000/4000000.0)));
   541  00FE76  0E3D               	movlw	61
   542  00FE78  6E03               	movwf	??_servoRotate0& (0+255),c
   543  00FE7A  0E62               	movlw	98
   544  00FE7C                     u367:
   545  00FE7C  2EE8               	decfsz	wreg,f,c
   546  00FE7E  D7FE               	bra	u367
   547  00FE80  2E03               	decfsz	??_servoRotate0& (0+255),f,c
   548  00FE82  D7FC               	bra	u367
   549  00FE84  D000               	nop2	
   550                           
   551                           ;main.c: 21:           }
   552  00FE86  4A04               	infsnz	servoRotate0@i,f,c
   553  00FE88  2A05               	incf	servoRotate0@i+1,f,c
   554  00FE8A  0E2C               	movlw	44
   555  00FE8C  5C04               	subwf	servoRotate0@i,w,c
   556  00FE8E  0E01               	movlw	1
   557  00FE90  5805               	subwfb	servoRotate0@i+1,w,c
   558  00FE92  A0D8               	btfss	status,0,c
   559  00FE94  D7E1               	goto	l24
   560  00FE96                     u140:
   561                           
   562                           ;main.c: 23:     if (servo==2){
   563  00FE96  0E02               	movlw	2
   564  00FE98  1801               	xorwf	servoRotate0@servo,w,c
   565  00FE9A  1002               	iorwf	servoRotate0@servo+1,w,c
   566  00FE9C  A4D8               	btfss	status,2,c
   567  00FE9E  D01D               	goto	u160
   568                           
   569                           ;main.c: 24:       for(i=0;i<30;i++)
   570  00FEA0  0E00               	movlw	0
   571  00FEA2  6E05               	movwf	servoRotate0@i+1,c
   572  00FEA4  0E00               	movlw	0
   573  00FEA6  6E04               	movwf	servoRotate0@i,c
   574  00FEA8                     l27:
   575                           
   576                           ;main.c: 25:         {;main.c: 27:         RD1 = 1;
   577  00FEA8  8283               	bsf	3971,1,c	;volatile
   578                           
   579                           ;main.c: 30:           _delay((unsigned long)((1250)*(10000000/4000000.0)));
   580  00FEAA  0E05               	movlw	5
   581  00FEAC  6E03               	movwf	??_servoRotate0& (0+255),c
   582  00FEAE  0E0D               	movlw	13
   583  00FEB0                     u377:
   584  00FEB0  2EE8               	decfsz	wreg,f,c
   585  00FEB2  D7FE               	bra	u377
   586  00FEB4  2E03               	decfsz	??_servoRotate0& (0+255),f,c
   587  00FEB6  D7FC               	bra	u377
   588  00FEB8  D000               	nop2	
   589                           
   590                           ;main.c: 32:         RD1 = 0;
   591  00FEBA  9283               	bcf	3971,1,c	;volatile
   592                           
   593                           ;main.c: 35:           _delay((unsigned long)((16950)*(10000000/4000000.0)));
   594  00FEBC  0E38               	movlw	56
   595  00FEBE  6E03               	movwf	??_servoRotate0& (0+255),c
   596  00FEC0  0E07               	movlw	7
   597  00FEC2                     u387:
   598  00FEC2  2EE8               	decfsz	wreg,f,c
   599  00FEC4  D7FE               	bra	u387
   600  00FEC6  2E03               	decfsz	??_servoRotate0& (0+255),f,c
   601  00FEC8  D7FC               	bra	u387
   602                           
   603                           ;main.c: 36:         }
   604  00FECA  4A04               	infsnz	servoRotate0@i,f,c
   605  00FECC  2A05               	incf	servoRotate0@i+1,f,c
   606  00FECE  5005               	movf	servoRotate0@i+1,w,c
   607  00FED0  E104               	bnz	u160
   608  00FED2  0E1E               	movlw	30
   609  00FED4  5C04               	subwf	servoRotate0@i,w,c
   610  00FED6  A0D8               	btfss	status,0,c
   611  00FED8  D7E7               	goto	l27
   612  00FEDA                     u160:
   613                           
   614                           ;main.c: 38:     if (servo==3){
   615  00FEDA  0E03               	movlw	3
   616  00FEDC  1801               	xorwf	servoRotate0@servo,w,c
   617  00FEDE  1002               	iorwf	servoRotate0@servo+1,w,c
   618  00FEE0  A4D8               	btfss	status,2,c
   619  00FEE2  0012               	return	
   620                           
   621                           ;main.c: 39:       for(i=0;i<30;i++)
   622  00FEE4  0E00               	movlw	0
   623  00FEE6  6E05               	movwf	servoRotate0@i+1,c
   624  00FEE8  0E00               	movlw	0
   625  00FEEA  6E04               	movwf	servoRotate0@i,c
   626  00FEEC                     l30:
   627                           
   628                           ;main.c: 40:         {;main.c: 41:         RD0 = 1;
   629  00FEEC  8083               	bsf	3971,0,c	;volatile
   630                           
   631                           ;main.c: 42:         _delay((unsigned long)((2000)*(10000000/4000000.0)));
   632  00FEEE  0E07               	movlw	7
   633  00FEF0  6E03               	movwf	??_servoRotate0& (0+255),c
   634  00FEF2  0E7D               	movlw	125
   635  00FEF4                     u397:
   636  00FEF4  2EE8               	decfsz	wreg,f,c
   637  00FEF6  D7FE               	bra	u397
   638  00FEF8  2E03               	decfsz	??_servoRotate0& (0+255),f,c
   639  00FEFA  D7FC               	bra	u397
   640  00FEFC  F000               	nop	
   641                           
   642                           ;main.c: 45:         RD0 = 0;
   643  00FEFE  9083               	bcf	3971,0,c	;volatile
   644                           
   645                           ;main.c: 46:         _delay((unsigned long)((11000)*(10000000/4000000.0)));
   646  00FF00  0E24               	movlw	36
   647  00FF02  6E03               	movwf	??_servoRotate0& (0+255),c
   648  00FF04  0EB6               	movlw	182
   649  00FF06                     u407:
   650  00FF06  2EE8               	decfsz	wreg,f,c
   651  00FF08  D7FE               	bra	u407
   652  00FF0A  2E03               	decfsz	??_servoRotate0& (0+255),f,c
   653  00FF0C  D7FC               	bra	u407
   654                           
   655                           ;main.c: 47:         }
   656  00FF0E  4A04               	infsnz	servoRotate0@i,f,c
   657  00FF10  2A05               	incf	servoRotate0@i+1,f,c
   658  00FF12  5005               	movf	servoRotate0@i+1,w,c
   659  00FF14  E105               	bnz	u180
   660  00FF16  0E1E               	movlw	30
   661  00FF18  5C04               	subwf	servoRotate0@i,w,c
   662  00FF1A  B0D8               	btfsc	status,0,c
   663  00FF1C  0012               	return	
   664  00FF1E  D7E6               	goto	l30
   665  00FF20                     u180:
   666  00FF20  0012               	return		;funcret
   667  00FF22                     __end_of_servoRotate0:
   668                           	opt callstack 0
   669  0000                     
   670                           	psect	rparam
   671  0000                     tosu	equ	0xFFF
   672                           tosh	equ	0xFFE
   673                           tosl	equ	0xFFD
   674                           stkptr	equ	0xFFC
   675                           pclatu	equ	0xFFB
   676                           pclath	equ	0xFFA
   677                           pcl	equ	0xFF9
   678                           tblptru	equ	0xFF8
   679                           tblptrh	equ	0xFF7
   680                           tblptrl	equ	0xFF6
   681                           tablat	equ	0xFF5
   682                           prodh	equ	0xFF4
   683                           prodl	equ	0xFF3
   684                           indf0	equ	0xFEF
   685                           postinc0	equ	0xFEE
   686                           postdec0	equ	0xFED
   687                           preinc0	equ	0xFEC
   688                           plusw0	equ	0xFEB
   689                           fsr0h	equ	0xFEA
   690                           fsr0l	equ	0xFE9
   691                           wreg	equ	0xFE8
   692                           indf1	equ	0xFE7
   693                           postinc1	equ	0xFE6
   694                           postdec1	equ	0xFE5
   695                           preinc1	equ	0xFE4
   696                           plusw1	equ	0xFE3
   697                           fsr1h	equ	0xFE2
   698                           fsr1l	equ	0xFE1
   699                           bsr	equ	0xFE0
   700                           indf2	equ	0xFDF
   701                           postinc2	equ	0xFDE
   702                           postdec2	equ	0xFDD
   703                           preinc2	equ	0xFDC
   704                           plusw2	equ	0xFDB
   705                           fsr2h	equ	0xFDA
   706                           fsr2l	equ	0xFD9
   707                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127      7       7
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_servoRotate0
    _main->_servoRotate180

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1092
                                              5 COMRAM     2     2      0
                       _servoRotate0
                     _servoRotate180
 ---------------------------------------------------------------------------------
 (1) _servoRotate180                                       5     3      2     584
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _servoRotate0                                         5     3      2     508
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _servoRotate0
   _servoRotate180

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      7       7       1        5.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Apr 09 01:04:55 2019

                     l30 FEEC                       l24 FE58                       l42 FFCA  
                     l27 FEA8                       l36 FF32                       l39 FF84  
            __CFG_CPD$ON 000000      servoRotate180@servo 0001              __CFG_BORV$3 000000  
          servoRotate0@i 0004             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000  
           __CFG_CPB$OFF 000000                      _RC1 007C11                      _RC2 007C12  
                    _RD0 007C18                      _RD1 007C19                      u200 FF72  
                    u140 FE96                      u220 FFB8                      u160 FEDA  
                    u240 FFFE                      u307 FF8C                      u180 FF20  
                    u317 FF9E                      u407 FF06                      u327 FFD2  
                    u337 FFE4                      u257 FDD4                      u347 FE62  
                    u267 FE16                      u357 FE70                      u277 FF38  
                    u367 FE7C                      u287 FF46                      u377 FEB0  
                    u297 FF58                      u387 FEC2                      u397 FEF4  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   _main FDA2                     start 0000            __CFG_IESO$OFF 000000  
        servoRotate180@i 0004            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ?_main 0001                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  status 000FD8         ??_servoRotate180 0003           __CFG_PBADEN$ON 000000  
        __initialization FD9C             __end_of_main FE48                   ??_main 0006  
          __activetblptr 000000           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
             __accesstop 0080  __end_of__initialization FD9C            ___rparam_used 000001  
         __pcstackCOMRAM 0001        servoRotate0@servo 0001                  __Hparam 0000  
                __Lparam 0000                  __pcinit FD9C                  __ramtop 1000  
                __ptext0 FDA2                  __ptext1 FF22                  __ptext2 FE48  
   end_of_initialization FD9C            ?_servoRotate0 0001                _TRISBbits 000F93  
         ??_servoRotate0 0003  __size_of_servoRotate180 00DE      start_initialization FD9C  
       __CFG_LPT1OSC$OFF 000000        __CFG_CCP2MX$PORTC 000000     __end_of_servoRotate0 FF22  
               _LATBbits 000F8A         __CFG_WDTPS$32768 000000           _servoRotate180 FF22  
               __Hrparam 0000                 __Lrparam 0000       __CFG_BOREN$SBORDIS 000000  
 __end_of_servoRotate180 0000            __size_of_main 00A6          ?_servoRotate180 0001  
  __size_of_servoRotate0 00DA             _servoRotate0 FE48  
