

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Apr 06 23:14:43 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,inline
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30  0000                     
    31                           ; Version 2.05
    32                           ; Generated 20/12/2018 GMT
    33                           ; 
    34                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4620 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	smallconst
    67  001000                     __psmallconst:
    68                           	opt callstack 0
    69  001000  00                 	db	0
    70  001001                     _LCD_LINE4_ADDR:
    71                           	opt callstack 0
    72  001001  50                 	db	80
    73  001002                     __end_of_LCD_LINE4_ADDR:
    74                           	opt callstack 0
    75  001002                     _LCD_LINE3_ADDR:
    76                           	opt callstack 0
    77  001002  10                 	db	16
    78  001003                     __end_of_LCD_LINE3_ADDR:
    79                           	opt callstack 0
    80  001003                     _LCD_LINE1_ADDR:
    81                           	opt callstack 0
    82  001003  00                 	db	0
    83  001004                     __end_of_LCD_LINE1_ADDR:
    84                           	opt callstack 0
    85  001004                     _LCD_SIZE_VERT:
    86                           	opt callstack 0
    87  001004  04                 	db	4
    88  001005                     __end_of_LCD_SIZE_VERT:
    89                           	opt callstack 0
    90  001005                     _LCD_SIZE_HORZ:
    91                           	opt callstack 0
    92  001005  10                 	db	16
    93  001006                     __end_of_LCD_SIZE_HORZ:
    94                           	opt callstack 0
    95  001006  40                 	db	64
    96  001007                     __end_of_LCD_LINE2_ADDR:
    97                           	opt callstack 0
    98  0000                     _LATDbits	set	3980
    99  0000                     _INTCONbits	set	4082
   100  0000                     _SSPBUF	set	4041
   101  0000                     _SSPCON2bits	set	4037
   102  0000                     _SSPCON1	set	4038
   103  0000                     _SSPADD	set	4040
   104  0000                     _TRISCbits	set	3988
   105  0000                     _SSPCON1bits	set	4038
   106  0000                     _SSPCON2	set	4037
   107  0000                     _SSPSTAT	set	4039
   108  0000                     _PORTDbits	set	3971
   109  0000                     _LATD	set	3980
   110  0000                     _TRISD	set	3989
   111  001007                     STR_1:
   112  001007  73                 	db	115	;'s'
   113  001008  65                 	db	101	;'e'
   114  001009  6E                 	db	110	;'n'
   115  00100A  73                 	db	115	;'s'
   116  00100B  6F                 	db	111	;'o'
   117  00100C  72                 	db	114	;'r'
   118  00100D  53                 	db	83	;'S'
   119  00100E  74                 	db	116	;'t'
   120  00100F  61                 	db	97	;'a'
   121  001010  74                 	db	116	;'t'
   122  001011  65                 	db	101	;'e'
   123  001012  2C                 	db	44
   124  001013  20                 	db	32
   125  001014  25                 	db	37
   126  001015  64                 	db	100	;'d'
   127  001016  00                 	db	0
   128  001017                     STR_2:
   129  001017  6C                 	db	108	;'l'
   130  001018  61                 	db	97	;'a'
   131  001019  73                 	db	115	;'s'
   132  00101A  74                 	db	116	;'t'
   133  00101B  53                 	db	83	;'S'
   134  00101C  74                 	db	116	;'t'
   135  00101D  61                 	db	97	;'a'
   136  00101E  74                 	db	116	;'t'
   137  00101F  65                 	db	101	;'e'
   138  001020  2C                 	db	44
   139  001021  20                 	db	32
   140  001022  25                 	db	37
   141  001023  64                 	db	100	;'d'
   142  001024  00                 	db	0
   143                           
   144                           ; #config settings
   145  001025  00                 	db	0	; dummy byte at the end
   146  0000                     
   147                           	psect	cinit
   148  00194E                     __pcinit:
   149                           	opt callstack 0
   150  00194E                     start_initialization:
   151                           	opt callstack 0
   152  00194E                     __initialization:
   153                           	opt callstack 0
   154                           
   155                           ; Clear objects allocated to BANK0 (32 bytes)
   156  00194E  EE00  F080         	lfsr	0,__pbssBANK0
   157  001952  0E20               	movlw	32
   158  001954                     clear_0:
   159  001954  6AEE               	clrf	postinc0,c
   160  001956  06E8               	decf	wreg,f,c
   161  001958  E1FD               	bnz	clear_0
   162                           
   163                           ; Clear objects allocated to COMRAM (15 bytes)
   164  00195A  EE00  F06B         	lfsr	0,__pbssCOMRAM
   165  00195E  0E0F               	movlw	15
   166  001960                     clear_1:
   167  001960  6AEE               	clrf	postinc0,c
   168  001962  06E8               	decf	wreg,f,c
   169  001964  E1FD               	bnz	clear_1
   170  001966                     end_of_initialization:
   171                           	opt callstack 0
   172  001966                     __end_of__initialization:
   173                           	opt callstack 0
   174  001966  0E00               	movlw	low (__Lsmallconst shr (0+16))
   175  001968  6EF8               	movwf	tblptru,c
   176  00196A  0E10               	movlw	high __Lsmallconst
   177  00196C  6EF7               	movwf	tblptrh,c
   178  00196E  0100               	movlb	0
   179  001970  EF75  F00B         	goto	_main	;jump to C main() function
   180                           
   181                           	psect	bssCOMRAM
   182  00006B                     __pbssCOMRAM:
   183                           	opt callstack 0
   184  00006B                     _time:
   185                           	opt callstack 0
   186  00006B                     	ds	7
   187  000072                     _nout:
   188                           	opt callstack 0
   189  000072                     	ds	2
   190  000074                     _width:
   191                           	opt callstack 0
   192  000074                     	ds	2
   193  000076                     _prec:
   194                           	opt callstack 0
   195  000076                     	ds	2
   196  000078                     _flags:
   197                           	opt callstack 0
   198  000078                     	ds	2
   199                           
   200                           	psect	bssBANK0
   201  000080                     __pbssBANK0:
   202                           	opt callstack 0
   203  000080                     _dbuf:
   204                           	opt callstack 0
   205  000080                     	ds	32
   206                           
   207                           	psect	cstackCOMRAM
   208  000001                     __pcstackCOMRAM:
   209                           	opt callstack 0
   210  000001                     ?_strlen:
   211                           	opt callstack 0
   212  000001                     ?___aodiv:
   213                           	opt callstack 0
   214  000001                     ?___aomod:
   215                           	opt callstack 0
   216  000001                     pulse_e@interruptState:
   217                           	opt callstack 0
   218  000001                     strlen@s:
   219                           	opt callstack 0
   220  000001                     ___aodiv@dividend:
   221                           	opt callstack 0
   222  000001                     ___aomod@dividend:
   223                           	opt callstack 0
   224                           
   225                           ; 8 bytes @ 0x0
   226  000001                     	ds	1
   227  000002                     send_nibble@data:
   228                           	opt callstack 0
   229                           
   230                           ; 1 bytes @ 0x1
   231  000002                     	ds	1
   232  000003                     send_byte@data:
   233                           	opt callstack 0
   234  000003                     strlen@a:
   235                           	opt callstack 0
   236                           
   237                           ; 2 bytes @ 0x2
   238  000003                     	ds	1
   239  000004                     lcdInst@data:
   240                           	opt callstack 0
   241  000004                     putch@data:
   242                           	opt callstack 0
   243                           
   244                           ; 1 bytes @ 0x3
   245  000004                     	ds	1
   246  000005                     ??_initLCD:
   247  000005                     fputc@c:
   248                           	opt callstack 0
   249                           
   250                           ; 2 bytes @ 0x4
   251  000005                     	ds	2
   252  000007                     fputc@fp:
   253                           	opt callstack 0
   254                           
   255                           ; 2 bytes @ 0x6
   256  000007                     	ds	2
   257  000009                     ??_fputc:
   258  000009                     ___aodiv@divisor:
   259                           	opt callstack 0
   260  000009                     ___aomod@divisor:
   261                           	opt callstack 0
   262                           
   263                           ; 8 bytes @ 0x8
   264  000009                     	ds	5
   265  00000E                     fputs@s:
   266                           	opt callstack 0
   267                           
   268                           ; 2 bytes @ 0xD
   269  00000E                     	ds	2
   270  000010                     fputs@fp:
   271                           	opt callstack 0
   272                           
   273                           ; 2 bytes @ 0xF
   274  000010                     	ds	1
   275  000011                     ___aodiv@counter:
   276                           	opt callstack 0
   277  000011                     ___aomod@counter:
   278                           	opt callstack 0
   279                           
   280                           ; 1 bytes @ 0x10
   281  000011                     	ds	1
   282  000012                     ___aodiv@sign:
   283                           	opt callstack 0
   284  000012                     ___aomod@sign:
   285                           	opt callstack 0
   286  000012                     fputs@c:
   287                           	opt callstack 0
   288                           
   289                           ; 1 bytes @ 0x11
   290  000012                     	ds	1
   291  000013                     ?_abs:
   292                           	opt callstack 0
   293  000013                     abs@a:
   294                           	opt callstack 0
   295  000013                     fputs@i:
   296                           	opt callstack 0
   297  000013                     ___aodiv@quotient:
   298                           	opt callstack 0
   299                           
   300                           ; 8 bytes @ 0x12
   301  000013                     	ds	2
   302  000015                     ??_abs:
   303  000015                     ?_pad:
   304                           	opt callstack 0
   305  000015                     pad@fp:
   306                           	opt callstack 0
   307                           
   308                           ; 2 bytes @ 0x14
   309  000015                     	ds	2
   310  000017                     pad@buf:
   311                           	opt callstack 0
   312                           
   313                           ; 2 bytes @ 0x16
   314  000017                     	ds	2
   315  000019                     pad@p:
   316                           	opt callstack 0
   317                           
   318                           ; 2 bytes @ 0x18
   319  000019                     	ds	2
   320  00001B                     ??_pad:
   321                           
   322                           ; 1 bytes @ 0x1A
   323  00001B                     	ds	1
   324  00001C                     pad@i:
   325                           	opt callstack 0
   326                           
   327                           ; 2 bytes @ 0x1B
   328  00001C                     	ds	2
   329  00001E                     pad@w:
   330                           	opt callstack 0
   331                           
   332                           ; 2 bytes @ 0x1D
   333  00001E                     	ds	2
   334  000020                     ?_dtoa:
   335                           	opt callstack 0
   336  000020                     dtoa@fp:
   337                           	opt callstack 0
   338                           
   339                           ; 2 bytes @ 0x1F
   340  000020                     	ds	2
   341  000022                     dtoa@d:
   342                           	opt callstack 0
   343                           
   344                           ; 8 bytes @ 0x21
   345  000022                     	ds	8
   346  00002A                     ??_dtoa:
   347                           
   348                           ; 1 bytes @ 0x29
   349  00002A                     	ds	8
   350  000032                     _dtoa$438:
   351                           	opt callstack 0
   352                           
   353                           ; 2 bytes @ 0x31
   354  000032                     	ds	2
   355  000034                     dtoa@p:
   356                           	opt callstack 0
   357                           
   358                           ; 2 bytes @ 0x33
   359  000034                     	ds	2
   360  000036                     dtoa@w:
   361                           	opt callstack 0
   362                           
   363                           ; 2 bytes @ 0x35
   364  000036                     	ds	2
   365  000038                     dtoa@s:
   366                           	opt callstack 0
   367                           
   368                           ; 2 bytes @ 0x37
   369  000038                     	ds	2
   370  00003A                     dtoa@n:
   371                           	opt callstack 0
   372                           
   373                           ; 8 bytes @ 0x39
   374  00003A                     	ds	8
   375  000042                     dtoa@i:
   376                           	opt callstack 0
   377                           
   378                           ; 2 bytes @ 0x41
   379  000042                     	ds	2
   380  000044                     ?_vfpfcnvrt:
   381                           	opt callstack 0
   382  000044                     vfpfcnvrt@fp:
   383                           	opt callstack 0
   384                           
   385                           ; 2 bytes @ 0x43
   386  000044                     	ds	2
   387  000046                     vfpfcnvrt@fmt:
   388                           	opt callstack 0
   389                           
   390                           ; 2 bytes @ 0x45
   391  000046                     	ds	2
   392  000048                     vfpfcnvrt@ap:
   393                           	opt callstack 0
   394                           
   395                           ; 2 bytes @ 0x47
   396  000048                     	ds	2
   397  00004A                     ??_vfpfcnvrt:
   398                           
   399                           ; 1 bytes @ 0x49
   400  00004A                     	ds	2
   401  00004C                     vfpfcnvrt@ll:
   402                           	opt callstack 0
   403                           
   404                           ; 8 bytes @ 0x4B
   405  00004C                     	ds	8
   406  000054                     ?_vfprintf:
   407                           	opt callstack 0
   408  000054                     vfprintf@fp:
   409                           	opt callstack 0
   410                           
   411                           ; 2 bytes @ 0x53
   412  000054                     	ds	2
   413  000056                     vfprintf@fmt:
   414                           	opt callstack 0
   415                           
   416                           ; 2 bytes @ 0x55
   417  000056                     	ds	2
   418  000058                     vfprintf@ap:
   419                           	opt callstack 0
   420                           
   421                           ; 2 bytes @ 0x57
   422  000058                     	ds	2
   423  00005A                     vfprintf@cfmt:
   424                           	opt callstack 0
   425                           
   426                           ; 2 bytes @ 0x59
   427  00005A                     	ds	2
   428  00005C                     ?_printf:
   429                           	opt callstack 0
   430  00005C                     printf@fmt:
   431                           	opt callstack 0
   432                           
   433                           ; 2 bytes @ 0x5B
   434  00005C                     	ds	4
   435  000060                     
   436                           ; 1 bytes @ 0x5F
   437  000060                     	ds	2
   438  000062                     printf@ap:
   439                           	opt callstack 0
   440                           
   441                           ; 2 bytes @ 0x61
   442  000062                     	ds	2
   443  000064                     ??_main:
   444                           
   445                           ; 1 bytes @ 0x63
   446  000064                     	ds	1
   447  000065                     main@ir_break:
   448                           	opt callstack 0
   449                           
   450                           ; 1 bytes @ 0x64
   451  000065                     	ds	1
   452  000066                     main@ir:
   453                           	opt callstack 0
   454                           
   455                           ; 1 bytes @ 0x65
   456  000066                     	ds	1
   457  000067                     main@lastState:
   458                           	opt callstack 0
   459                           
   460                           ; 2 bytes @ 0x66
   461  000067                     	ds	2
   462  000069                     main@sensorState:
   463                           	opt callstack 0
   464                           
   465                           ; 2 bytes @ 0x68
   466  000069                     	ds	2
   467                           
   468 ;;
   469 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   470 ;;
   471 ;; *************** function _main *****************
   472 ;; Defined at:
   473 ;;		line 18 in file "main.c"
   474 ;; Parameters:    Size  Location     Type
   475 ;;		None
   476 ;; Auto vars:     Size  Location     Type
   477 ;;  sensorState     2  104[COMRAM] int 
   478 ;;  lastState       2  102[COMRAM] int 
   479 ;;  ir              1  101[COMRAM] _Bool 
   480 ;;  ir_break        1  100[COMRAM] _Bool 
   481 ;; Return value:  Size  Location     Type
   482 ;;                  1    wreg      void 
   483 ;; Registers used:
   484 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   491 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   492 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   493 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   494 ;;Total ram usage:        7 bytes
   495 ;; Hardware stack levels required when called:   11
   496 ;; This function calls:
   497 ;;		_initLCD
   498 ;;		_lcdInst
   499 ;;		_printf
   500 ;; This function is called by:
   501 ;;		Startup code after reset
   502 ;; This function uses a non-reentrant model
   503 ;;
   504                           
   505                           	psect	text0
   506  0016EA                     __ptext0:
   507                           	opt callstack 0
   508  0016EA                     _main:
   509                           	opt callstack 20
   510                           
   511                           ;main.c: 19:     TRISD = 0b00000001;
   512                           
   513                           ;incstack = 0
   514  0016EA  0E01               	movlw	1
   515  0016EC  6E95               	movwf	3989,c	;volatile
   516                           
   517                           ;main.c: 20:     LATD = 0b00000000;
   518  0016EE  0E00               	movlw	0
   519  0016F0  6E8C               	movwf	3980,c	;volatile
   520                           
   521                           ;main.c: 22:     int lastState=0;
   522  0016F2  0E00               	movlw	0
   523  0016F4  6E68               	movwf	main@lastState+1,c
   524  0016F6  0E00               	movlw	0
   525  0016F8  6E67               	movwf	main@lastState,c
   526                           
   527                           ;main.c: 23:     _Bool ir_break = 0;
   528  0016FA  0E00               	movlw	0
   529  0016FC  6E65               	movwf	main@ir_break,c
   530                           
   531                           ;main.c: 24:     _Bool ir = 0;
   532  0016FE  0E00               	movlw	0
   533  001700  6E66               	movwf	main@ir,c
   534                           
   535                           ;main.c: 25:     initLCD();
   536  001702  ECEA  F00B         	call	_initLCD	;wreg free
   537                           
   538                           ;main.c: 26:     sensorState = PORTDbits.RD0;
   539  001706  A083               	btfss	3971,0,c	;volatile
   540  001708  D003               	goto	u1000
   541  00170A  6A64               	clrf	??_main& (0+255),c
   542  00170C  2A64               	incf	??_main& (0+255),f,c
   543  00170E  D001               	goto	u1008
   544  001710                     u1000:
   545  001710  6A64               	clrf	??_main& (0+255),c
   546  001712                     u1008:
   547  001712  5064               	movf	??_main,w,c
   548  001714  6E69               	movwf	main@sensorState,c
   549  001716  6A6A               	clrf	main@sensorState+1,c
   550                           
   551                           ;main.c: 27:     if (!sensorState){
   552  001718  5069               	movf	main@sensorState,w,c
   553  00171A  106A               	iorwf	main@sensorState+1,w,c
   554                           
   555                           ;main.c: 35:     if (sensorState && !lastState){
   556                           
   557                           ;main.c: 31:     }
   558  00171C  5069               	movf	main@sensorState,w,c
   559  00171E  106A               	iorwf	main@sensorState+1,w,c
   560                           
   561                           ;main.c: 41:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   562  001720  0E01               	movlw	1
   563  001722  ECE7  F00C         	call	_lcdInst
   564  001726  0E11               	movlw	17
   565  001728  6E64               	movwf	??_main& (0+255),c
   566  00172A  0E3A               	movlw	58
   567  00172C                     u1057:
   568  00172C  2EE8               	decfsz	wreg,f,c
   569  00172E  D7FE               	bra	u1057
   570  001730  2E64               	decfsz	??_main& (0+255),f,c
   571  001732  D7FC               	bra	u1057
   572  001734  D000               	nop2	
   573                           
   574                           ;main.c: 42:     printf("sensorState, %d", sensorState);
   575  001736  0E07               	movlw	low STR_1
   576  001738  6E5C               	movwf	printf@fmt,c
   577  00173A  0E10               	movlw	high STR_1
   578  00173C  6E5D               	movwf	printf@fmt+1,c
   579  00173E  C069  F05E         	movff	main@sensorState,?_printf+2
   580  001742  C06A  F05F         	movff	main@sensorState+1,?_printf+3
   581  001746  ECBA  F00C         	call	_printf	;wreg free
   582  00174A  0EC0               	movlw	192
   583  00174C  ECE7  F00C         	call	_lcdInst
   584                           
   585                           ;main.c: 44:     printf("lastState, %d", lastState);
   586  001750  0E17               	movlw	low STR_2
   587  001752  6E5C               	movwf	printf@fmt,c
   588  001754  0E10               	movlw	high STR_2
   589  001756  6E5D               	movwf	printf@fmt+1,c
   590  001758  0E00               	movlw	0
   591  00175A  6E5F               	movwf	?_printf+3,c
   592  00175C  0E00               	movlw	0
   593  00175E  6E5E               	movwf	?_printf+2,c
   594  001760  ECBA  F00C         	call	_printf	;wreg free
   595  001764  EF00  F000         	goto	start
   596  001768                     __end_of_main:
   597                           	opt callstack 0
   598                           
   599 ;; *************** function _printf *****************
   600 ;; Defined at:
   601 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;  fmt             2   91[COMRAM] PTR const unsigned char 
   604 ;;		 -> STR_2(14), STR_1(16), 
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  ap              2   97[COMRAM] PTR void [1]
   607 ;;		 -> ?_printf(2), 
   608 ;;  ret             2    0        int 
   609 ;; Return value:  Size  Location     Type
   610 ;;                  2   91[COMRAM] int 
   611 ;; Registers used:
   612 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   613 ;; Tracked objects:
   614 ;;		On entry : 0/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   618 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   619 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   621 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   622 ;;Total ram usage:        8 bytes
   623 ;; Hardware stack levels used:    1
   624 ;; Hardware stack levels required when called:   10
   625 ;; This function calls:
   626 ;;		_vfprintf
   627 ;; This function is called by:
   628 ;;		_main
   629 ;; This function uses a non-reentrant model
   630 ;;
   631                           
   632                           	psect	text1
   633  001974                     __ptext1:
   634                           	opt callstack 0
   635  001974                     _printf:
   636                           	opt callstack 20
   637                           
   638                           ;incstack = 0
   639  001974  0E5E               	movlw	low (?_printf+2)
   640  001976  6E62               	movwf	printf@ap,c
   641  001978  0E00               	movlw	high (?_printf+2)
   642  00197A  6E63               	movwf	printf@ap+1,c
   643  00197C  0E00               	movlw	0
   644  00197E  6E54               	movwf	vfprintf@fp,c
   645  001980  0E00               	movlw	0
   646  001982  6E55               	movwf	vfprintf@fp+1,c
   647  001984  C05C  F056         	movff	printf@fmt,vfprintf@fmt
   648  001988  C05D  F057         	movff	printf@fmt+1,vfprintf@fmt+1
   649  00198C  0E62               	movlw	low printf@ap
   650  00198E  6E58               	movwf	vfprintf@ap,c
   651  001990  0E00               	movlw	high printf@ap
   652  001992  6E59               	movwf	vfprintf@ap+1,c
   653  001994  EC1F  F00C         	call	_vfprintf	;wreg free
   654  001998  0012               	return		;funcret
   655  00199A                     __end_of_printf:
   656                           	opt callstack 0
   657                           
   658 ;; *************** function _vfprintf *****************
   659 ;; Defined at:
   660 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;  fp              2   83[COMRAM] PTR struct _IO_FILE
   663 ;;		 -> NULL(0), 
   664 ;;  fmt             2   85[COMRAM] PTR const unsigned char 
   665 ;;		 -> STR_2(14), STR_1(16), 
   666 ;;  ap              2   87[COMRAM] PTR PTR void 
   667 ;;		 -> printf@ap(2), 
   668 ;; Auto vars:     Size  Location     Type
   669 ;;  cfmt            2   89[COMRAM] PTR unsigned char 
   670 ;;		 -> STR_2(14), STR_1(16), 
   671 ;; Return value:  Size  Location     Type
   672 ;;                  2   83[COMRAM] int 
   673 ;; Registers used:
   674 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   675 ;; Tracked objects:
   676 ;;		On entry : 0/0
   677 ;;		On exit  : 0/0
   678 ;;		Unchanged: 0/0
   679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   680 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   681 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   683 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   684 ;;Total ram usage:        8 bytes
   685 ;; Hardware stack levels used:    1
   686 ;; Hardware stack levels required when called:    9
   687 ;; This function calls:
   688 ;;		_vfpfcnvrt
   689 ;; This function is called by:
   690 ;;		_printf
   691 ;; This function uses a non-reentrant model
   692 ;;
   693                           
   694                           	psect	text2
   695  00183E                     __ptext2:
   696                           	opt callstack 0
   697  00183E                     _vfprintf:
   698                           	opt callstack 20
   699                           
   700                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   701                           
   702                           ;incstack = 0
   703  00183E  C056  F05A         	movff	vfprintf@fmt,vfprintf@cfmt
   704  001842  C057  F05B         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   705                           
   706                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   707  001846  0E00               	movlw	0
   708  001848  6E73               	movwf	_nout+1,c
   709  00184A  0E00               	movlw	0
   710  00184C  6E72               	movwf	_nout,c
   711                           
   712                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   713  00184E  D012               	goto	l1579
   714  001850                     l1577:
   715                           
   716                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   717  001850  C054  F044         	movff	vfprintf@fp,vfpfcnvrt@fp
   718  001854  C055  F045         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   719  001858  0E5A               	movlw	low vfprintf@cfmt
   720  00185A  6E46               	movwf	vfpfcnvrt@fmt,c
   721  00185C  0E00               	movlw	high vfprintf@cfmt
   722  00185E  6E47               	movwf	vfpfcnvrt@fmt+1,c
   723  001860  C058  F048         	movff	vfprintf@ap,vfpfcnvrt@ap
   724  001864  C059  F049         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   725  001868  EC34  F009         	call	_vfpfcnvrt	;wreg free
   726  00186C  5044               	movf	?_vfpfcnvrt,w,c
   727  00186E  2672               	addwf	_nout,f,c
   728  001870  5045               	movf	?_vfpfcnvrt+1,w,c
   729  001872  2273               	addwfc	_nout+1,f,c
   730  001874                     l1579:
   731                           
   732                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   733  001874  C05A  FFF6         	movff	vfprintf@cfmt,tblptrl
   734  001878  C05B  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   735  00187C                     	if	0	;tblptru may be non-zero
   736  00187C                     	endif
   737  00187C                     	if	0	;tblptru may be non-zero
   738  00187C                     	endif
   739  00187C  0008               	tblrd		*
   740  00187E  50F5               	movf	tablat,w,c
   741  001880  0900               	iorlw	0
   742  001882  A4D8               	btfss	status,2,c
   743  001884  D7E5               	goto	l1577
   744                           
   745                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   746  001886  C072  F054         	movff	_nout,?_vfprintf
   747  00188A  C073  F055         	movff	_nout+1,?_vfprintf+1
   748  00188E  0012               	return		;funcret
   749  001890                     __end_of_vfprintf:
   750                           	opt callstack 0
   751                           
   752 ;; *************** function _vfpfcnvrt *****************
   753 ;; Defined at:
   754 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   755 ;; Parameters:    Size  Location     Type
   756 ;;  fp              2   67[COMRAM] PTR struct _IO_FILE
   757 ;;		 -> NULL(0), 
   758 ;;  fmt             2   69[COMRAM] PTR PTR unsigned char 
   759 ;;		 -> vfprintf@cfmt(2), 
   760 ;;  ap              2   71[COMRAM] PTR PTR void 
   761 ;;		 -> printf@ap(2), 
   762 ;; Auto vars:     Size  Location     Type
   763 ;;  ll              8   75[COMRAM] long long 
   764 ;;  llu             8    0        unsigned long long 
   765 ;;  f               4    0        unsigned long long 
   766 ;;  vp              3    0        PTR void 
   767 ;;  ct              3    0        unsigned char [3]
   768 ;;  cp              3    0        PTR unsigned char 
   769 ;;  i               2    0        int 
   770 ;;  done            2    0        int 
   771 ;;  c               1    0        unsigned char 
   772 ;; Return value:  Size  Location     Type
   773 ;;                  2   67[COMRAM] int 
   774 ;; Registers used:
   775 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   776 ;; Tracked objects:
   777 ;;		On entry : 0/0
   778 ;;		On exit  : 0/0
   779 ;;		Unchanged: 0/0
   780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   781 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   782 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   783 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   784 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   785 ;;Total ram usage:       16 bytes
   786 ;; Hardware stack levels used:    1
   787 ;; Hardware stack levels required when called:    8
   788 ;; This function calls:
   789 ;;		_dtoa
   790 ;;		_fputc
   791 ;; This function is called by:
   792 ;;		_vfprintf
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796                           	psect	text3
   797  001268                     __ptext3:
   798                           	opt callstack 0
   799  001268                     _vfpfcnvrt:
   800                           	opt callstack 20
   801                           
   802                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   803                           
   804                           ;incstack = 0
   805  001268  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   806  00126C  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   807  001270  CFDE FFF6          	movff	postinc2,tblptrl
   808  001274  CFDD FFF7          	movff	postdec2,tblptrh
   809  001278                     	if	0	;tblptru may be non-zero
   810  001278                     	endif
   811  001278                     	if	0	;tblptru may be non-zero
   812  001278                     	endif
   813  001278  0008               	tblrd		*
   814  00127A  50F5               	movf	tablat,w,c
   815  00127C  0A25               	xorlw	37
   816  00127E  A4D8               	btfss	status,2,c
   817  001280  D099               	goto	l1561
   818                           
   819                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   820  001282  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   821  001286  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   822  00128A  2ADE               	incf	postinc2,f,c
   823  00128C  0E00               	movlw	0
   824  00128E  22DD               	addwfc	postdec2,f,c
   825                           
   826                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   827  001290  0E00               	movlw	0
   828  001292  6E75               	movwf	_width+1,c
   829  001294  0E00               	movlw	0
   830  001296  6E74               	movwf	_width,c
   831  001298  C074  F078         	movff	_width,_flags
   832  00129C  C075  F079         	movff	_width+1,_flags+1
   833                           
   834                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   835  0012A0  6876               	setf	_prec,c
   836  0012A2  6877               	setf	_prec+1,c
   837                           
   838                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
   839  0012A4  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   840  0012A8  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   841  0012AC  CFDE FFF6          	movff	postinc2,tblptrl
   842  0012B0  CFDD FFF7          	movff	postdec2,tblptrh
   843  0012B4                     	if	0	;tblptru may be non-zero
   844  0012B4                     	endif
   845  0012B4                     	if	0	;tblptru may be non-zero
   846  0012B4                     	endif
   847  0012B4  0008               	tblrd		*
   848  0012B6  50F5               	movf	tablat,w,c
   849  0012B8  0A64               	xorlw	100
   850  0012BA  B4D8               	btfsc	status,2,c
   851  0012BC  D00D               	goto	u970
   852  0012BE  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   853  0012C2  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   854  0012C6  CFDE FFF6          	movff	postinc2,tblptrl
   855  0012CA  CFDD FFF7          	movff	postdec2,tblptrh
   856  0012CE                     	if	0	;tblptru may be non-zero
   857  0012CE                     	endif
   858  0012CE                     	if	0	;tblptru may be non-zero
   859  0012CE                     	endif
   860  0012CE  0008               	tblrd		*
   861  0012D0  50F5               	movf	tablat,w,c
   862  0012D2  0A69               	xorlw	105
   863  0012D4  A4D8               	btfss	status,2,c
   864  0012D6  D03F               	goto	l1545
   865  0012D8                     u970:
   866                           
   867                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
   868  0012D8  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   869  0012DC  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   870  0012E0  2ADE               	incf	postinc2,f,c
   871  0012E2  0E00               	movlw	0
   872  0012E4  22DD               	addwfc	postdec2,f,c
   873                           
   874                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
   875  0012E6  C048  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   876  0012EA  C049  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   877  0012EE  CFDF F04A          	movff	indf2,??_vfpfcnvrt
   878  0012F2  0E02               	movlw	2
   879  0012F4  26DE               	addwf	postinc2,f,c
   880  0012F6  CFDF F04B          	movff	indf2,??_vfpfcnvrt+1
   881  0012FA  0E00               	movlw	0
   882  0012FC  22DD               	addwfc	postdec2,f,c
   883  0012FE  C04A  FFD9         	movff	??_vfpfcnvrt,fsr2l
   884  001302  C04B  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   885  001306  CFDE F04C          	movff	postinc2,vfpfcnvrt@ll
   886  00130A  CFDD F04D          	movff	postdec2,vfpfcnvrt@ll+1
   887  00130E  0E00               	movlw	0
   888  001310  BE4D               	btfsc	vfpfcnvrt@ll+1,7,c
   889  001312  0EFF               	movlw	-1
   890  001314  6E4E               	movwf	vfpfcnvrt@ll+2,c
   891  001316  6E4F               	movwf	vfpfcnvrt@ll+3,c
   892  001318  6E50               	movwf	vfpfcnvrt@ll+4,c
   893  00131A  6E51               	movwf	vfpfcnvrt@ll+5,c
   894  00131C  6E52               	movwf	vfpfcnvrt@ll+6,c
   895  00131E  6E53               	movwf	vfpfcnvrt@ll+7,c
   896                           
   897                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
   898  001320  C044  F020         	movff	vfpfcnvrt@fp,dtoa@fp
   899  001324  C045  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
   900  001328  C04C  F022         	movff	vfpfcnvrt@ll,dtoa@d
   901  00132C  C04D  F023         	movff	vfpfcnvrt@ll+1,dtoa@d+1
   902  001330  C04E  F024         	movff	vfpfcnvrt@ll+2,dtoa@d+2
   903  001334  C04F  F025         	movff	vfpfcnvrt@ll+3,dtoa@d+3
   904  001338  C050  F026         	movff	vfpfcnvrt@ll+4,dtoa@d+4
   905  00133C  C051  F027         	movff	vfpfcnvrt@ll+5,dtoa@d+5
   906  001340  C052  F028         	movff	vfpfcnvrt@ll+6,dtoa@d+6
   907  001344  C053  F029         	movff	vfpfcnvrt@ll+7,dtoa@d+7
   908  001348  EC13  F008         	call	_dtoa	;wreg free
   909  00134C  C020  F044         	movff	?_dtoa,?_vfpfcnvrt
   910  001350  C021  F045         	movff	?_dtoa+1,?_vfpfcnvrt+1
   911  001354  0012               	return	
   912  001356                     l1545:
   913                           
   914                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
   915  001356  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   916  00135A  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   917  00135E  CFDE FFF6          	movff	postinc2,tblptrl
   918  001362  CFDD FFF7          	movff	postdec2,tblptrh
   919  001366                     	if	0	;tblptru may be non-zero
   920  001366                     	endif
   921  001366                     	if	0	;tblptru may be non-zero
   922  001366                     	endif
   923  001366  0008               	tblrd		*
   924  001368  50F5               	movf	tablat,w,c
   925  00136A  0A25               	xorlw	37
   926  00136C  A4D8               	btfss	status,2,c
   927  00136E  D016               	goto	l1555
   928                           
   929                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
   930  001370  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   931  001374  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   932  001378  2ADE               	incf	postinc2,f,c
   933  00137A  0E00               	movlw	0
   934  00137C  22DD               	addwfc	postdec2,f,c
   935                           
   936                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
   937  00137E  0E00               	movlw	0
   938  001380  6E06               	movwf	fputc@c+1,c
   939  001382  0E25               	movlw	37
   940  001384  6E05               	movwf	fputc@c,c
   941  001386  C044  F007         	movff	vfpfcnvrt@fp,fputc@fp
   942  00138A  C045  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   943  00138E  ECB4  F00B         	call	_fputc	;wreg free
   944  001392                     l1551:
   945                           
   946                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
   947  001392  0E00               	movlw	0
   948  001394  6E45               	movwf	?_vfpfcnvrt+1,c
   949  001396  0E01               	movlw	1
   950  001398  6E44               	movwf	?_vfpfcnvrt,c
   951  00139A  0012               	return	
   952  00139C                     l1555:
   953                           
   954                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
   955  00139C  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   956  0013A0  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   957  0013A4  2ADE               	incf	postinc2,f,c
   958  0013A6  0E00               	movlw	0
   959  0013A8  22DD               	addwfc	postdec2,f,c
   960                           
   961                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
   962  0013AA  0E00               	movlw	0
   963  0013AC  6E45               	movwf	?_vfpfcnvrt+1,c
   964  0013AE  0E00               	movlw	0
   965  0013B0  6E44               	movwf	?_vfpfcnvrt,c
   966  0013B2  0012               	return	
   967  0013B4                     l1561:
   968                           
   969                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
   970  0013B4  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   971  0013B8  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   972  0013BC  CFDE FFF6          	movff	postinc2,tblptrl
   973  0013C0  CFDD FFF7          	movff	postdec2,tblptrh
   974  0013C4                     	if	0	;tblptru may be non-zero
   975  0013C4                     	endif
   976  0013C4                     	if	0	;tblptru may be non-zero
   977  0013C4                     	endif
   978  0013C4  0008               	tblrd		*
   979  0013C6  50F5               	movf	tablat,w,c
   980  0013C8  6E05               	movwf	fputc@c,c
   981  0013CA  6A06               	clrf	fputc@c+1,c
   982  0013CC  C044  F007         	movff	vfpfcnvrt@fp,fputc@fp
   983  0013D0  C045  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   984  0013D4  ECB4  F00B         	call	_fputc	;wreg free
   985                           
   986                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
   987  0013D8  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   988  0013DC  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   989  0013E0  2ADE               	incf	postinc2,f,c
   990  0013E2  0E00               	movlw	0
   991  0013E4  22DD               	addwfc	postdec2,f,c
   992  0013E6  D7D5               	goto	l1551
   993  0013E8                     __end_of_vfpfcnvrt:
   994                           	opt callstack 0
   995                           
   996 ;; *************** function _dtoa *****************
   997 ;; Defined at:
   998 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  1001 ;;		 -> NULL(0), 
  1002 ;;  d               8   33[COMRAM] long long 
  1003 ;; Auto vars:     Size  Location     Type
  1004 ;;  n               8   57[COMRAM] long long 
  1005 ;;  i               2   65[COMRAM] int 
  1006 ;;  s               2   55[COMRAM] int 
  1007 ;;  w               2   53[COMRAM] int 
  1008 ;;  p               2   51[COMRAM] int 
  1009 ;; Return value:  Size  Location     Type
  1010 ;;                  2   31[COMRAM] int 
  1011 ;; Registers used:
  1012 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1013 ;; Tracked objects:
  1014 ;;		On entry : 0/0
  1015 ;;		On exit  : 0/0
  1016 ;;		Unchanged: 0/0
  1017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1018 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1019 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1020 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1021 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1022 ;;Total ram usage:       36 bytes
  1023 ;; Hardware stack levels used:    1
  1024 ;; Hardware stack levels required when called:    7
  1025 ;; This function calls:
  1026 ;;		___aodiv
  1027 ;;		___aomod
  1028 ;;		_abs
  1029 ;;		_pad
  1030 ;; This function is called by:
  1031 ;;		_vfpfcnvrt
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           	psect	text4
  1036  001026                     __ptext4:
  1037                           	opt callstack 0
  1038  001026                     _dtoa:
  1039                           	opt callstack 20
  1040                           
  1041                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1042                           
  1043                           ;incstack = 0
  1044  001026  C022  F03A         	movff	dtoa@d,dtoa@n
  1045  00102A  C023  F03B         	movff	dtoa@d+1,dtoa@n+1
  1046  00102E  C024  F03C         	movff	dtoa@d+2,dtoa@n+2
  1047  001032  C025  F03D         	movff	dtoa@d+3,dtoa@n+3
  1048  001036  C026  F03E         	movff	dtoa@d+4,dtoa@n+4
  1049  00103A  C027  F03F         	movff	dtoa@d+5,dtoa@n+5
  1050  00103E  C028  F040         	movff	dtoa@d+6,dtoa@n+6
  1051  001042  C029  F041         	movff	dtoa@d+7,dtoa@n+7
  1052                           
  1053                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1054  001046  AE41               	btfss	dtoa@n+7,7,c
  1055  001048  D002               	goto	u800
  1056  00104A  0E01               	movlw	1
  1057  00104C  D001               	goto	u810
  1058  00104E                     u800:
  1059  00104E  0E00               	movlw	0
  1060  001050                     u810:
  1061  001050  6E38               	movwf	dtoa@s,c
  1062  001052  6A39               	clrf	dtoa@s+1,c
  1063                           
  1064                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1065  001054  5038               	movf	dtoa@s,w,c
  1066  001056  1039               	iorwf	dtoa@s+1,w,c
  1067  001058  B4D8               	btfsc	status,2,c
  1068  00105A  D010               	goto	l1471
  1069                           
  1070                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1071  00105C  1E41               	comf	dtoa@n+7,f,c
  1072  00105E  1E40               	comf	dtoa@n+6,f,c
  1073  001060  1E3F               	comf	dtoa@n+5,f,c
  1074  001062  1E3E               	comf	dtoa@n+4,f,c
  1075  001064  1E3D               	comf	dtoa@n+3,f,c
  1076  001066  1E3C               	comf	dtoa@n+2,f,c
  1077  001068  1E3B               	comf	dtoa@n+1,f,c
  1078  00106A  6C3A               	negf	dtoa@n,c
  1079  00106C  0E00               	movlw	0
  1080  00106E  223B               	addwfc	dtoa@n+1,f,c
  1081  001070  223C               	addwfc	dtoa@n+2,f,c
  1082  001072  223D               	addwfc	dtoa@n+3,f,c
  1083  001074  223E               	addwfc	dtoa@n+4,f,c
  1084  001076  223F               	addwfc	dtoa@n+5,f,c
  1085  001078  2240               	addwfc	dtoa@n+6,f,c
  1086  00107A  2241               	addwfc	dtoa@n+7,f,c
  1087  00107C                     l1471:
  1088                           
  1089                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1090  00107C  AE77               	btfss	_prec+1,7,c
  1091                           
  1092                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1093  00107E  9278               	bcf	_flags,1,c
  1094                           
  1095                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1096  001080  BE77               	btfsc	_prec+1,7,c
  1097  001082  D005               	goto	u840
  1098  001084  5077               	movf	_prec+1,w,c
  1099  001086  E108               	bnz	l153
  1100  001088  0476               	decf	_prec,w,c
  1101  00108A  B0D8               	btfsc	status,0,c
  1102  00108C  D005               	goto	l153
  1103  00108E                     u840:
  1104  00108E  0E00               	movlw	0
  1105  001090  6E35               	movwf	dtoa@p+1,c
  1106  001092  0E01               	movlw	1
  1107  001094  6E34               	movwf	dtoa@p,c
  1108  001096  D004               	goto	l155
  1109  001098                     l153:
  1110  001098  C076  F034         	movff	_prec,dtoa@p
  1111  00109C  C077  F035         	movff	_prec+1,dtoa@p+1
  1112  0010A0                     l155:
  1113                           
  1114                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1115  0010A0  C074  F036         	movff	_width,dtoa@w
  1116  0010A4  C075  F037         	movff	_width+1,dtoa@w+1
  1117                           
  1118                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1119  0010A8  5038               	movf	dtoa@s,w,c
  1120  0010AA  1039               	iorwf	dtoa@s+1,w,c
  1121  0010AC  A4D8               	btfss	status,2,c
  1122  0010AE  D002               	goto	u860
  1123  0010B0  A478               	btfss	_flags,2,c
  1124  0010B2  D003               	goto	l1485
  1125  0010B4                     u860:
  1126                           
  1127                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1128  0010B4  0636               	decf	dtoa@w,f,c
  1129  0010B6  A0D8               	btfss	status,0,c
  1130  0010B8  0637               	decf	dtoa@w+1,f,c
  1131  0010BA                     l1485:
  1132                           
  1133                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1134  0010BA  0E00               	movlw	0
  1135  0010BC  6E43               	movwf	dtoa@i+1,c
  1136  0010BE  0E1F               	movlw	31
  1137  0010C0  6E42               	movwf	dtoa@i,c
  1138                           
  1139                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1140  0010C2  0E00               	movlw	0
  1141  0010C4  0100               	movlb	0	; () banked
  1142  0010C6  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1143                           
  1144                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1145  0010C8  D07C               	goto	l1499
  1146  0010CA                     l1489:
  1147                           
  1148                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1149  0010CA  0642               	decf	dtoa@i,f,c
  1150  0010CC  A0D8               	btfss	status,0,c
  1151  0010CE  0643               	decf	dtoa@i+1,f,c
  1152                           
  1153                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1154  0010D0  0E80               	movlw	low _dbuf
  1155  0010D2  2442               	addwf	dtoa@i,w,c
  1156  0010D4  6ED9               	movwf	fsr2l,c
  1157  0010D6  0E00               	movlw	high _dbuf
  1158  0010D8  2043               	addwfc	dtoa@i+1,w,c
  1159  0010DA  6EDA               	movwf	fsr2h,c
  1160  0010DC  C03A  F001         	movff	dtoa@n,___aomod@dividend
  1161  0010E0  C03B  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1162  0010E4  C03C  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1163  0010E8  C03D  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1164  0010EC  C03E  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1165  0010F0  C03F  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1166  0010F4  C040  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1167  0010F8  C041  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1168  0010FC  0E0A               	movlw	10
  1169  0010FE  6E09               	movwf	___aomod@divisor,c
  1170  001100  0E00               	movlw	0
  1171  001102  6E0A               	movwf	___aomod@divisor+1,c
  1172  001104  0E00               	movlw	0
  1173  001106  6E0B               	movwf	___aomod@divisor+2,c
  1174  001108  0E00               	movlw	0
  1175  00110A  6E0C               	movwf	___aomod@divisor+3,c
  1176  00110C  0E00               	movlw	0
  1177  00110E  6E0D               	movwf	___aomod@divisor+4,c
  1178  001110  0E00               	movlw	0
  1179  001112  6E0E               	movwf	___aomod@divisor+5,c
  1180  001114  0E00               	movlw	0
  1181  001116  6E0F               	movwf	___aomod@divisor+6,c
  1182  001118  0E00               	movlw	0
  1183  00111A  6E10               	movwf	___aomod@divisor+7,c
  1184  00111C  EC98  F00A         	call	___aomod	;wreg free
  1185  001120  C001  F02A         	movff	?___aomod,??_dtoa
  1186  001124  C002  F02B         	movff	?___aomod+1,??_dtoa+1
  1187  001128  C003  F02C         	movff	?___aomod+2,??_dtoa+2
  1188  00112C  C004  F02D         	movff	?___aomod+3,??_dtoa+3
  1189  001130  C005  F02E         	movff	?___aomod+4,??_dtoa+4
  1190  001134  C006  F02F         	movff	?___aomod+5,??_dtoa+5
  1191  001138  C007  F030         	movff	?___aomod+6,??_dtoa+6
  1192  00113C  C008  F031         	movff	?___aomod+7,??_dtoa+7
  1193  001140  C02A  F013         	movff	??_dtoa,abs@a
  1194  001144  C02C  F014         	movff	??_dtoa+2,abs@a+1
  1195  001148  EC64  F00C         	call	_abs	;wreg free
  1196  00114C  5013               	movf	?_abs,w,c
  1197  00114E  0F30               	addlw	48
  1198  001150  6EDF               	movwf	indf2,c
  1199                           
  1200                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1201  001152  0634               	decf	dtoa@p,f,c
  1202  001154  A0D8               	btfss	status,0,c
  1203  001156  0635               	decf	dtoa@p+1,f,c
  1204                           
  1205                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1206  001158  0636               	decf	dtoa@w,f,c
  1207  00115A  A0D8               	btfss	status,0,c
  1208  00115C  0637               	decf	dtoa@w+1,f,c
  1209                           
  1210                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1211  00115E  C03A  F001         	movff	dtoa@n,___aodiv@dividend
  1212  001162  C03B  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1213  001166  C03C  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1214  00116A  C03D  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1215  00116E  C03E  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1216  001172  C03F  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1217  001176  C040  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1218  00117A  C041  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1219  00117E  0E0A               	movlw	10
  1220  001180  6E09               	movwf	___aodiv@divisor,c
  1221  001182  0E00               	movlw	0
  1222  001184  6E0A               	movwf	___aodiv@divisor+1,c
  1223  001186  0E00               	movlw	0
  1224  001188  6E0B               	movwf	___aodiv@divisor+2,c
  1225  00118A  0E00               	movlw	0
  1226  00118C  6E0C               	movwf	___aodiv@divisor+3,c
  1227  00118E  0E00               	movlw	0
  1228  001190  6E0D               	movwf	___aodiv@divisor+4,c
  1229  001192  0E00               	movlw	0
  1230  001194  6E0E               	movwf	___aodiv@divisor+5,c
  1231  001196  0E00               	movlw	0
  1232  001198  6E0F               	movwf	___aodiv@divisor+6,c
  1233  00119A  0E00               	movlw	0
  1234  00119C  6E10               	movwf	___aodiv@divisor+7,c
  1235  00119E  ECF4  F009         	call	___aodiv	;wreg free
  1236  0011A2  C001  F03A         	movff	?___aodiv,dtoa@n
  1237  0011A6  C002  F03B         	movff	?___aodiv+1,dtoa@n+1
  1238  0011AA  C003  F03C         	movff	?___aodiv+2,dtoa@n+2
  1239  0011AE  C004  F03D         	movff	?___aodiv+3,dtoa@n+3
  1240  0011B2  C005  F03E         	movff	?___aodiv+4,dtoa@n+4
  1241  0011B6  C006  F03F         	movff	?___aodiv+5,dtoa@n+5
  1242  0011BA  C007  F040         	movff	?___aodiv+6,dtoa@n+6
  1243  0011BE  C008  F041         	movff	?___aodiv+7,dtoa@n+7
  1244  0011C2                     l1499:
  1245                           
  1246                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1247  0011C2  BE43               	btfsc	dtoa@i+1,7,c
  1248  0011C4  D01F               	goto	u910
  1249  0011C6  5043               	movf	dtoa@i+1,w,c
  1250  0011C8  E103               	bnz	u870
  1251  0011CA  0442               	decf	dtoa@i,w,c
  1252  0011CC  A0D8               	btfss	status,0,c
  1253  0011CE  D01A               	goto	u910
  1254  0011D0                     u870:
  1255  0011D0  503A               	movf	dtoa@n,w,c
  1256  0011D2  103B               	iorwf	dtoa@n+1,w,c
  1257  0011D4  103C               	iorwf	dtoa@n+2,w,c
  1258  0011D6  103D               	iorwf	dtoa@n+3,w,c
  1259  0011D8  103E               	iorwf	dtoa@n+4,w,c
  1260  0011DA  103F               	iorwf	dtoa@n+5,w,c
  1261  0011DC  1040               	iorwf	dtoa@n+6,w,c
  1262  0011DE  1041               	iorwf	dtoa@n+7,w,c
  1263  0011E0  A4D8               	btfss	status,2,c
  1264  0011E2  D773               	goto	l1489
  1265  0011E4  BE35               	btfsc	dtoa@p+1,7,c
  1266  0011E6  D005               	goto	u890
  1267  0011E8  5035               	movf	dtoa@p+1,w,c
  1268  0011EA  E102               	bnz	u891
  1269  0011EC  0434               	decf	dtoa@p,w,c
  1270  0011EE  B0D8               	btfsc	status,0,c
  1271  0011F0                     u891:
  1272  0011F0  D76C               	goto	l1489
  1273  0011F2                     u890:
  1274  0011F2  BE37               	btfsc	dtoa@w+1,7,c
  1275  0011F4  D007               	goto	u910
  1276  0011F6  5037               	movf	dtoa@w+1,w,c
  1277  0011F8  E103               	bnz	u900
  1278  0011FA  0436               	decf	dtoa@w,w,c
  1279  0011FC  A0D8               	btfss	status,0,c
  1280  0011FE  D002               	goto	u910
  1281  001200                     u900:
  1282  001200  B278               	btfsc	_flags,1,c
  1283  001202  D763               	goto	l1489
  1284  001204                     u910:
  1285                           
  1286                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1287  001204  5038               	movf	dtoa@s,w,c
  1288  001206  1039               	iorwf	dtoa@s+1,w,c
  1289  001208  A4D8               	btfss	status,2,c
  1290  00120A  D002               	goto	u930
  1291  00120C  A478               	btfss	_flags,2,c
  1292  00120E  D017               	goto	l1523
  1293  001210                     u930:
  1294                           
  1295                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1296  001210  0642               	decf	dtoa@i,f,c
  1297  001212  A0D8               	btfss	status,0,c
  1298  001214  0643               	decf	dtoa@i+1,f,c
  1299                           
  1300                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1301  001216  5038               	movf	dtoa@s,w,c
  1302  001218  1039               	iorwf	dtoa@s+1,w,c
  1303  00121A  A4D8               	btfss	status,2,c
  1304  00121C  D004               	goto	l1519
  1305  00121E  0E00               	movlw	0
  1306  001220  6E33               	movwf	_dtoa$438+1,c
  1307  001222  0E2B               	movlw	43
  1308  001224  D003               	goto	L1
  1309  001226                     l1519:
  1310  001226  0E00               	movlw	0
  1311  001228  6E33               	movwf	_dtoa$438+1,c
  1312  00122A  0E2D               	movlw	45
  1313  00122C                     L1:
  1314  00122C  6E32               	movwf	_dtoa$438,c
  1315  00122E  0E80               	movlw	low _dbuf
  1316  001230  2442               	addwf	dtoa@i,w,c
  1317  001232  6ED9               	movwf	fsr2l,c
  1318  001234  0E00               	movlw	high _dbuf
  1319  001236  2043               	addwfc	dtoa@i+1,w,c
  1320  001238  6EDA               	movwf	fsr2h,c
  1321  00123A  C032  FFDF         	movff	_dtoa$438,indf2
  1322  00123E                     l1523:
  1323                           
  1324                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1325  00123E  C020  F015         	movff	dtoa@fp,pad@fp
  1326  001242  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  1327  001246  0E80               	movlw	low _dbuf
  1328  001248  2442               	addwf	dtoa@i,w,c
  1329  00124A  6E17               	movwf	pad@buf,c
  1330  00124C  0E00               	movlw	high _dbuf
  1331  00124E  2043               	addwfc	dtoa@i+1,w,c
  1332  001250  6E18               	movwf	pad@buf+1,c
  1333  001252  C036  F019         	movff	dtoa@w,pad@p
  1334  001256  C037  F01A         	movff	dtoa@w+1,pad@p+1
  1335  00125A  EC2A  F00B         	call	_pad	;wreg free
  1336  00125E  C015  F020         	movff	?_pad,?_dtoa
  1337  001262  C016  F021         	movff	?_pad+1,?_dtoa+1
  1338  001266  0012               	return		;funcret
  1339  001268                     __end_of_dtoa:
  1340                           	opt callstack 0
  1341                           
  1342 ;; *************** function _pad *****************
  1343 ;; Defined at:
  1344 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  1347 ;;		 -> NULL(0), 
  1348 ;;  buf             2   22[COMRAM] PTR unsigned char 
  1349 ;;		 -> dbuf(32), 
  1350 ;;  p               2   24[COMRAM] int 
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;  w               2   29[COMRAM] int 
  1353 ;;  i               2   27[COMRAM] int 
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  2   20[COMRAM] int 
  1356 ;; Registers used:
  1357 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1363 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1364 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1366 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1367 ;;Total ram usage:       11 bytes
  1368 ;; Hardware stack levels used:    1
  1369 ;; Hardware stack levels required when called:    6
  1370 ;; This function calls:
  1371 ;;		_fputc
  1372 ;;		_fputs
  1373 ;;		_strlen
  1374 ;; This function is called by:
  1375 ;;		_dtoa
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           	psect	text5
  1380  001654                     __ptext5:
  1381                           	opt callstack 0
  1382  001654                     _pad:
  1383                           	opt callstack 20
  1384                           
  1385                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1386                           
  1387                           ;incstack = 0
  1388  001654  A078               	btfss	_flags,0,c
  1389  001656  D00A               	goto	l1363
  1390                           
  1391                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1392  001658  C017  F00E         	movff	pad@buf,fputs@s
  1393  00165C  C018  F00F         	movff	pad@buf+1,fputs@s+1
  1394  001660  C015  F010         	movff	pad@fp,fputs@fp
  1395  001664  C016  F011         	movff	pad@fp+1,fputs@fp+1
  1396  001668  EC48  F00C         	call	_fputs	;wreg free
  1397  00166C                     l1363:
  1398                           
  1399                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1400  00166C  BE1A               	btfsc	pad@p+1,7,c
  1401  00166E  D005               	goto	l1367
  1402  001670  C019  F01E         	movff	pad@p,pad@w
  1403  001674  C01A  F01F         	movff	pad@p+1,pad@w+1
  1404  001678  D004               	goto	l142
  1405  00167A                     l1367:
  1406  00167A  0E00               	movlw	0
  1407  00167C  6E1F               	movwf	pad@w+1,c
  1408  00167E  0E00               	movlw	0
  1409  001680  6E1E               	movwf	pad@w,c
  1410  001682                     l142:
  1411                           
  1412                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1413  001682  0E00               	movlw	0
  1414  001684  6E1D               	movwf	pad@i+1,c
  1415  001686  0E00               	movlw	0
  1416  001688  6E1C               	movwf	pad@i,c
  1417                           
  1418                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1419  00168A  D00C               	goto	l1373
  1420  00168C                     l1369:
  1421                           
  1422                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1423  00168C  0E00               	movlw	0
  1424  00168E  6E06               	movwf	fputc@c+1,c
  1425  001690  0E20               	movlw	32
  1426  001692  6E05               	movwf	fputc@c,c
  1427  001694  C015  F007         	movff	pad@fp,fputc@fp
  1428  001698  C016  F008         	movff	pad@fp+1,fputc@fp+1
  1429  00169C  ECB4  F00B         	call	_fputc	;wreg free
  1430                           
  1431                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1432  0016A0  4A1C               	infsnz	pad@i,f,c
  1433  0016A2  2A1D               	incf	pad@i+1,f,c
  1434  0016A4                     l1373:
  1435                           
  1436                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1437  0016A4  501E               	movf	pad@w,w,c
  1438  0016A6  5C1C               	subwf	pad@i,w,c
  1439  0016A8  501D               	movf	pad@i+1,w,c
  1440  0016AA  0A80               	xorlw	128
  1441  0016AC  6E1B               	movwf	??_pad& (0+255),c
  1442  0016AE  501F               	movf	pad@w+1,w,c
  1443  0016B0  0A80               	xorlw	128
  1444  0016B2  581B               	subwfb	??_pad& (0+255),w,c
  1445  0016B4  A0D8               	btfss	status,0,c
  1446  0016B6  D7EA               	goto	l1369
  1447                           
  1448                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1449  0016B8  B078               	btfsc	_flags,0,c
  1450  0016BA  D00A               	goto	l1377
  1451                           
  1452                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1453  0016BC  C017  F00E         	movff	pad@buf,fputs@s
  1454  0016C0  C018  F00F         	movff	pad@buf+1,fputs@s+1
  1455  0016C4  C015  F010         	movff	pad@fp,fputs@fp
  1456  0016C8  C016  F011         	movff	pad@fp+1,fputs@fp+1
  1457  0016CC  EC48  F00C         	call	_fputs	;wreg free
  1458  0016D0                     l1377:
  1459                           
  1460                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1461  0016D0  C017  F001         	movff	pad@buf,strlen@s
  1462  0016D4  C018  F002         	movff	pad@buf+1,strlen@s+1
  1463  0016D8  EC7D  F00C         	call	_strlen	;wreg free
  1464  0016DC  501E               	movf	pad@w,w,c
  1465  0016DE  2401               	addwf	?_strlen,w,c
  1466  0016E0  6E15               	movwf	?_pad,c
  1467  0016E2  501F               	movf	pad@w+1,w,c
  1468  0016E4  2002               	addwfc	?_strlen+1,w,c
  1469  0016E6  6E16               	movwf	?_pad+1,c
  1470  0016E8  0012               	return		;funcret
  1471  0016EA                     __end_of_pad:
  1472                           	opt callstack 0
  1473                           
  1474 ;; *************** function _strlen *****************
  1475 ;; Defined at:
  1476 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1479 ;;		 -> dbuf(32), 
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1482 ;;		 -> dbuf(32), 
  1483 ;; Return value:  Size  Location     Type
  1484 ;;                  2    0[COMRAM] unsigned int 
  1485 ;; Registers used:
  1486 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1487 ;; Tracked objects:
  1488 ;;		On entry : 0/0
  1489 ;;		On exit  : 0/0
  1490 ;;		Unchanged: 0/0
  1491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1492 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1493 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1495 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1496 ;;Total ram usage:        4 bytes
  1497 ;; Hardware stack levels used:    1
  1498 ;; This function calls:
  1499 ;;		Nothing
  1500 ;; This function is called by:
  1501 ;;		_pad
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505                           	psect	text6
  1506  0018FA                     __ptext6:
  1507                           	opt callstack 0
  1508  0018FA                     _strlen:
  1509                           	opt callstack 25
  1510                           
  1511                           ;incstack = 0
  1512  0018FA  C001  F003         	movff	strlen@s,strlen@a
  1513  0018FE  C002  F004         	movff	strlen@s+1,strlen@a+1
  1514  001902  D002               	goto	l1353
  1515  001904                     l1351:
  1516  001904  4A01               	infsnz	strlen@s,f,c
  1517  001906  2A02               	incf	strlen@s+1,f,c
  1518  001908                     l1353:
  1519  001908  C001  FFD9         	movff	strlen@s,fsr2l
  1520  00190C  C002  FFDA         	movff	strlen@s+1,fsr2h
  1521  001910  50DF               	movf	indf2,w,c
  1522  001912  A4D8               	btfss	status,2,c
  1523  001914  D7F7               	goto	l1351
  1524  001916  5003               	movf	strlen@a,w,c
  1525  001918  5C01               	subwf	strlen@s,w,c
  1526  00191A  6E01               	movwf	?_strlen,c
  1527  00191C  5004               	movf	strlen@a+1,w,c
  1528  00191E  5802               	subwfb	strlen@s+1,w,c
  1529  001920  6E02               	movwf	?_strlen+1,c
  1530  001922  0012               	return		;funcret
  1531  001924                     __end_of_strlen:
  1532                           	opt callstack 0
  1533                           
  1534 ;; *************** function _fputs *****************
  1535 ;; Defined at:
  1536 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;  s               2   13[COMRAM] PTR const unsigned char 
  1539 ;;		 -> dbuf(32), 
  1540 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  1541 ;;		 -> NULL(0), 
  1542 ;; Auto vars:     Size  Location     Type
  1543 ;;  i               2   18[COMRAM] int 
  1544 ;;  c               1   17[COMRAM] unsigned char 
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  2   13[COMRAM] int 
  1547 ;; Registers used:
  1548 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1554 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1555 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1557 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1558 ;;Total ram usage:        7 bytes
  1559 ;; Hardware stack levels used:    1
  1560 ;; Hardware stack levels required when called:    5
  1561 ;; This function calls:
  1562 ;;		_fputc
  1563 ;; This function is called by:
  1564 ;;		_pad
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           	psect	text7
  1569  001890                     __ptext7:
  1570                           	opt callstack 0
  1571  001890                     _fputs:
  1572                           	opt callstack 20
  1573                           
  1574                           ;incstack = 0
  1575  001890  0E00               	movlw	0
  1576  001892  6E14               	movwf	fputs@i+1,c
  1577  001894  0E00               	movlw	0
  1578  001896  6E13               	movwf	fputs@i,c
  1579  001898  D00B               	goto	l1347
  1580  00189A                     l1343:
  1581  00189A  C012  F005         	movff	fputs@c,fputc@c
  1582  00189E  6A06               	clrf	fputc@c+1,c
  1583  0018A0  C010  F007         	movff	fputs@fp,fputc@fp
  1584  0018A4  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  1585  0018A8  ECB4  F00B         	call	_fputc	;wreg free
  1586  0018AC  4A13               	infsnz	fputs@i,f,c
  1587  0018AE  2A14               	incf	fputs@i+1,f,c
  1588  0018B0                     l1347:
  1589  0018B0  5013               	movf	fputs@i,w,c
  1590  0018B2  240E               	addwf	fputs@s,w,c
  1591  0018B4  6ED9               	movwf	fsr2l,c
  1592  0018B6  5014               	movf	fputs@i+1,w,c
  1593  0018B8  200F               	addwfc	fputs@s+1,w,c
  1594  0018BA  6EDA               	movwf	fsr2h,c
  1595  0018BC  50DF               	movf	indf2,w,c
  1596  0018BE  6E12               	movwf	fputs@c,c
  1597  0018C0  5012               	movf	fputs@c,w,c
  1598  0018C2  B4D8               	btfsc	status,2,c
  1599  0018C4  0012               	return	
  1600  0018C6  D7E9               	goto	l1343
  1601  0018C8                     __end_of_fputs:
  1602                           	opt callstack 0
  1603                           
  1604 ;; *************** function _fputc *****************
  1605 ;; Defined at:
  1606 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;  c               2    4[COMRAM] int 
  1609 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  1610 ;;		 -> NULL(0), 
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;		None
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  2    4[COMRAM] int 
  1615 ;; Registers used:
  1616 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1622 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1624 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1625 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1626 ;;Total ram usage:        9 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; Hardware stack levels required when called:    4
  1629 ;; This function calls:
  1630 ;;		_putch
  1631 ;; This function is called by:
  1632 ;;		_pad
  1633 ;;		_vfpfcnvrt
  1634 ;;		_fputs
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           	psect	text8
  1639  001768                     __ptext8:
  1640                           	opt callstack 0
  1641  001768                     _fputc:
  1642                           	opt callstack 23
  1643                           
  1644                           ;incstack = 0
  1645  001768  5007               	movf	fputc@fp,w,c
  1646  00176A  1008               	iorwf	fputc@fp+1,w,c
  1647  00176C  B4D8               	btfsc	status,2,c
  1648  00176E  D004               	goto	u570
  1649  001770  5007               	movf	fputc@fp,w,c
  1650  001772  1008               	iorwf	fputc@fp+1,w,c
  1651  001774  A4D8               	btfss	status,2,c
  1652  001776  D004               	goto	l1333
  1653  001778                     u570:
  1654  001778  5005               	movf	fputc@c,w,c
  1655  00177A  ECE1  F00C         	call	_putch
  1656  00177E  0012               	return	
  1657  001780                     l1333:
  1658  001780  EE20 F004          	lfsr	2,4
  1659  001784  5007               	movf	fputc@fp,w,c
  1660  001786  26D9               	addwf	fsr2l,f,c
  1661  001788  5008               	movf	fputc@fp+1,w,c
  1662  00178A  22DA               	addwfc	fsr2h,f,c
  1663  00178C  50DE               	movf	postinc2,w,c
  1664  00178E  10DE               	iorwf	postinc2,w,c
  1665  001790  B4D8               	btfsc	status,2,c
  1666  001792  D016               	goto	u590
  1667  001794  EE20 F004          	lfsr	2,4
  1668  001798  5007               	movf	fputc@fp,w,c
  1669  00179A  26D9               	addwf	fsr2l,f,c
  1670  00179C  5008               	movf	fputc@fp+1,w,c
  1671  00179E  22DA               	addwfc	fsr2h,f,c
  1672  0017A0  EE10 F002          	lfsr	1,2
  1673  0017A4  5007               	movf	fputc@fp,w,c
  1674  0017A6  26E1               	addwf	fsr1l,f,c
  1675  0017A8  5008               	movf	fputc@fp+1,w,c
  1676  0017AA  22E2               	addwfc	fsr1h,f,c
  1677  0017AC  50DE               	movf	postinc2,w,c
  1678  0017AE  5CE6               	subwf	postinc1,w,c
  1679  0017B0  50E6               	movf	postinc1,w,c
  1680  0017B2  0A80               	xorlw	128
  1681  0017B4  6E0D               	movwf	(??_fputc+4)& (0+255),c
  1682  0017B6  50DE               	movf	postinc2,w,c
  1683  0017B8  0A80               	xorlw	128
  1684  0017BA  580D               	subwfb	(??_fputc+4)& (0+255),w,c
  1685  0017BC  B0D8               	btfsc	status,0,c
  1686  0017BE  0012               	return	
  1687  0017C0                     u590:
  1688  0017C0  EE20 F002          	lfsr	2,2
  1689  0017C4  5007               	movf	fputc@fp,w,c
  1690  0017C6  26D9               	addwf	fsr2l,f,c
  1691  0017C8  5008               	movf	fputc@fp+1,w,c
  1692  0017CA  22DA               	addwfc	fsr2h,f,c
  1693  0017CC  2ADE               	incf	postinc2,f,c
  1694  0017CE  0E00               	movlw	0
  1695  0017D0  22DD               	addwfc	postdec2,f,c
  1696  0017D2  0012               	return		;funcret
  1697  0017D4                     __end_of_fputc:
  1698                           	opt callstack 0
  1699                           
  1700 ;; *************** function _putch *****************
  1701 ;; Defined at:
  1702 ;;		line 102 in file "lcd.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;  data            1    wreg     unsigned char 
  1705 ;; Auto vars:     Size  Location     Type
  1706 ;;  data            1    3[COMRAM] unsigned char 
  1707 ;; Return value:  Size  Location     Type
  1708 ;;                  1    wreg      void 
  1709 ;; Registers used:
  1710 ;;		wreg, status,2, status,0, cstack
  1711 ;; Tracked objects:
  1712 ;;		On entry : 0/0
  1713 ;;		On exit  : 0/0
  1714 ;;		Unchanged: 0/0
  1715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1717 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1719 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;Total ram usage:        1 bytes
  1721 ;; Hardware stack levels used:    1
  1722 ;; Hardware stack levels required when called:    3
  1723 ;; This function calls:
  1724 ;;		_send_byte
  1725 ;; This function is called by:
  1726 ;;		_fputc
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           	psect	text9
  1731  0019C2                     __ptext9:
  1732                           	opt callstack 0
  1733  0019C2                     _putch:
  1734                           	opt callstack 23
  1735                           
  1736                           ;incstack = 0
  1737                           ;putch@data stored from wreg
  1738  0019C2  6E04               	movwf	putch@data,c
  1739                           
  1740                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
  1741  0019C4  848C               	bsf	3980,2,c	;volatile
  1742                           
  1743                           ;lcd.c: 104:     send_byte((unsigned char)data);
  1744  0019C6  5004               	movf	putch@data,w,c
  1745  0019C8  ECD8  F00C         	call	_send_byte
  1746  0019CC  0012               	return		;funcret
  1747  0019CE                     __end_of_putch:
  1748                           	opt callstack 0
  1749                           
  1750 ;; *************** function _abs *****************
  1751 ;; Defined at:
  1752 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  1753 ;; Parameters:    Size  Location     Type
  1754 ;;  a               2   18[COMRAM] int 
  1755 ;; Auto vars:     Size  Location     Type
  1756 ;;		None
  1757 ;; Return value:  Size  Location     Type
  1758 ;;                  2   18[COMRAM] int 
  1759 ;; Registers used:
  1760 ;;		wreg, status,2, status,0
  1761 ;; Tracked objects:
  1762 ;;		On entry : 0/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1766 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1768 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1769 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1770 ;;Total ram usage:        4 bytes
  1771 ;; Hardware stack levels used:    1
  1772 ;; This function calls:
  1773 ;;		Nothing
  1774 ;; This function is called by:
  1775 ;;		_dtoa
  1776 ;; This function uses a non-reentrant model
  1777 ;;
  1778                           
  1779                           	psect	text10
  1780  0018C8                     __ptext10:
  1781                           	opt callstack 0
  1782  0018C8                     _abs:
  1783                           	opt callstack 26
  1784                           
  1785                           ;incstack = 0
  1786  0018C8  BE14               	btfsc	abs@a+1,7,c
  1787  0018CA  D005               	goto	u660
  1788  0018CC  5014               	movf	abs@a+1,w,c
  1789  0018CE  E110               	bnz	l865
  1790  0018D0  0413               	decf	abs@a,w,c
  1791  0018D2  B0D8               	btfsc	status,0,c
  1792  0018D4  D00D               	goto	l865
  1793  0018D6                     u660:
  1794  0018D6  C013  F015         	movff	abs@a,??_abs
  1795  0018DA  C014  F016         	movff	abs@a+1,??_abs+1
  1796  0018DE  1E15               	comf	??_abs,f,c
  1797  0018E0  1E16               	comf	??_abs+1,f,c
  1798  0018E2  4A15               	infsnz	??_abs,f,c
  1799  0018E4  2A16               	incf	??_abs+1,f,c
  1800  0018E6  C015  F013         	movff	??_abs,?_abs
  1801  0018EA  C016  F014         	movff	??_abs+1,?_abs+1
  1802  0018EE  0012               	return	
  1803  0018F0                     l865:
  1804  0018F0  C013  F013         	movff	abs@a,?_abs
  1805  0018F4  C014  F014         	movff	abs@a+1,?_abs+1
  1806  0018F8  0012               	return		;funcret
  1807  0018FA                     __end_of_abs:
  1808                           	opt callstack 0
  1809                           
  1810 ;; *************** function ___aomod *****************
  1811 ;; Defined at:
  1812 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  dividend        8    0[COMRAM] long long 
  1815 ;;  divisor         8    8[COMRAM] long long 
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;  sign            1   17[COMRAM] unsigned char 
  1818 ;;  counter         1   16[COMRAM] unsigned char 
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  8    0[COMRAM] long long 
  1821 ;; Registers used:
  1822 ;;		wreg, status,2, status,0
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1828 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1829 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;Total ram usage:       18 bytes
  1833 ;; Hardware stack levels used:    1
  1834 ;; This function calls:
  1835 ;;		Nothing
  1836 ;; This function is called by:
  1837 ;;		_dtoa
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text11
  1842  001530                     __ptext11:
  1843                           	opt callstack 0
  1844  001530                     ___aomod:
  1845                           	opt callstack 26
  1846                           
  1847                           ;incstack = 0
  1848  001530  0E00               	movlw	0
  1849  001532  6E12               	movwf	___aomod@sign,c
  1850  001534  AE08               	btfss	___aomod@dividend+7,7,c
  1851  001536  D012               	goto	l1437
  1852  001538  1E08               	comf	___aomod@dividend+7,f,c
  1853  00153A  1E07               	comf	___aomod@dividend+6,f,c
  1854  00153C  1E06               	comf	___aomod@dividend+5,f,c
  1855  00153E  1E05               	comf	___aomod@dividend+4,f,c
  1856  001540  1E04               	comf	___aomod@dividend+3,f,c
  1857  001542  1E03               	comf	___aomod@dividend+2,f,c
  1858  001544  1E02               	comf	___aomod@dividend+1,f,c
  1859  001546  6C01               	negf	___aomod@dividend,c
  1860  001548  0E00               	movlw	0
  1861  00154A  2202               	addwfc	___aomod@dividend+1,f,c
  1862  00154C  2203               	addwfc	___aomod@dividend+2,f,c
  1863  00154E  2204               	addwfc	___aomod@dividend+3,f,c
  1864  001550  2205               	addwfc	___aomod@dividend+4,f,c
  1865  001552  2206               	addwfc	___aomod@dividend+5,f,c
  1866  001554  2207               	addwfc	___aomod@dividend+6,f,c
  1867  001556  2208               	addwfc	___aomod@dividend+7,f,c
  1868  001558  0E01               	movlw	1
  1869  00155A  6E12               	movwf	___aomod@sign,c
  1870  00155C                     l1437:
  1871  00155C  AE10               	btfss	___aomod@divisor+7,7,c
  1872  00155E  D010               	goto	l1441
  1873  001560  1E10               	comf	___aomod@divisor+7,f,c
  1874  001562  1E0F               	comf	___aomod@divisor+6,f,c
  1875  001564  1E0E               	comf	___aomod@divisor+5,f,c
  1876  001566  1E0D               	comf	___aomod@divisor+4,f,c
  1877  001568  1E0C               	comf	___aomod@divisor+3,f,c
  1878  00156A  1E0B               	comf	___aomod@divisor+2,f,c
  1879  00156C  1E0A               	comf	___aomod@divisor+1,f,c
  1880  00156E  6C09               	negf	___aomod@divisor,c
  1881  001570  0E00               	movlw	0
  1882  001572  220A               	addwfc	___aomod@divisor+1,f,c
  1883  001574  220B               	addwfc	___aomod@divisor+2,f,c
  1884  001576  220C               	addwfc	___aomod@divisor+3,f,c
  1885  001578  220D               	addwfc	___aomod@divisor+4,f,c
  1886  00157A  220E               	addwfc	___aomod@divisor+5,f,c
  1887  00157C  220F               	addwfc	___aomod@divisor+6,f,c
  1888  00157E  2210               	addwfc	___aomod@divisor+7,f,c
  1889  001580                     l1441:
  1890  001580  5009               	movf	___aomod@divisor,w,c
  1891  001582  100A               	iorwf	___aomod@divisor+1,w,c
  1892  001584  100B               	iorwf	___aomod@divisor+2,w,c
  1893  001586  100C               	iorwf	___aomod@divisor+3,w,c
  1894  001588  100D               	iorwf	___aomod@divisor+4,w,c
  1895  00158A  100E               	iorwf	___aomod@divisor+5,w,c
  1896  00158C  100F               	iorwf	___aomod@divisor+6,w,c
  1897  00158E  1010               	iorwf	___aomod@divisor+7,w,c
  1898  001590  B4D8               	btfsc	status,2,c
  1899  001592  D03C               	goto	l1457
  1900  001594  0E01               	movlw	1
  1901  001596  6E11               	movwf	___aomod@counter,c
  1902  001598  D00A               	goto	l1447
  1903  00159A                     l1445:
  1904  00159A  90D8               	bcf	status,0,c
  1905  00159C  3609               	rlcf	___aomod@divisor,f,c
  1906  00159E  360A               	rlcf	___aomod@divisor+1,f,c
  1907  0015A0  360B               	rlcf	___aomod@divisor+2,f,c
  1908  0015A2  360C               	rlcf	___aomod@divisor+3,f,c
  1909  0015A4  360D               	rlcf	___aomod@divisor+4,f,c
  1910  0015A6  360E               	rlcf	___aomod@divisor+5,f,c
  1911  0015A8  360F               	rlcf	___aomod@divisor+6,f,c
  1912  0015AA  3610               	rlcf	___aomod@divisor+7,f,c
  1913  0015AC  2A11               	incf	___aomod@counter,f,c
  1914  0015AE                     l1447:
  1915  0015AE  AE10               	btfss	___aomod@divisor+7,7,c
  1916  0015B0  D7F4               	goto	l1445
  1917  0015B2                     u770:
  1918  0015B2  5009               	movf	___aomod@divisor,w,c
  1919  0015B4  5C01               	subwf	___aomod@dividend,w,c
  1920  0015B6  500A               	movf	___aomod@divisor+1,w,c
  1921  0015B8  5802               	subwfb	___aomod@dividend+1,w,c
  1922  0015BA  500B               	movf	___aomod@divisor+2,w,c
  1923  0015BC  5803               	subwfb	___aomod@dividend+2,w,c
  1924  0015BE  500C               	movf	___aomod@divisor+3,w,c
  1925  0015C0  5804               	subwfb	___aomod@dividend+3,w,c
  1926  0015C2  500D               	movf	___aomod@divisor+4,w,c
  1927  0015C4  5805               	subwfb	___aomod@dividend+4,w,c
  1928  0015C6  500E               	movf	___aomod@divisor+5,w,c
  1929  0015C8  5806               	subwfb	___aomod@dividend+5,w,c
  1930  0015CA  500F               	movf	___aomod@divisor+6,w,c
  1931  0015CC  5807               	subwfb	___aomod@dividend+6,w,c
  1932  0015CE  5010               	movf	___aomod@divisor+7,w,c
  1933  0015D0  5808               	subwfb	___aomod@dividend+7,w,c
  1934  0015D2  A0D8               	btfss	status,0,c
  1935  0015D4  D010               	goto	l1453
  1936  0015D6  5009               	movf	___aomod@divisor,w,c
  1937  0015D8  5E01               	subwf	___aomod@dividend,f,c
  1938  0015DA  500A               	movf	___aomod@divisor+1,w,c
  1939  0015DC  5A02               	subwfb	___aomod@dividend+1,f,c
  1940  0015DE  500B               	movf	___aomod@divisor+2,w,c
  1941  0015E0  5A03               	subwfb	___aomod@dividend+2,f,c
  1942  0015E2  500C               	movf	___aomod@divisor+3,w,c
  1943  0015E4  5A04               	subwfb	___aomod@dividend+3,f,c
  1944  0015E6  500D               	movf	___aomod@divisor+4,w,c
  1945  0015E8  5A05               	subwfb	___aomod@dividend+4,f,c
  1946  0015EA  500E               	movf	___aomod@divisor+5,w,c
  1947  0015EC  5A06               	subwfb	___aomod@dividend+5,f,c
  1948  0015EE  500F               	movf	___aomod@divisor+6,w,c
  1949  0015F0  5A07               	subwfb	___aomod@dividend+6,f,c
  1950  0015F2  5010               	movf	___aomod@divisor+7,w,c
  1951  0015F4  5A08               	subwfb	___aomod@dividend+7,f,c
  1952  0015F6                     l1453:
  1953  0015F6  90D8               	bcf	status,0,c
  1954  0015F8  3210               	rrcf	___aomod@divisor+7,f,c
  1955  0015FA  320F               	rrcf	___aomod@divisor+6,f,c
  1956  0015FC  320E               	rrcf	___aomod@divisor+5,f,c
  1957  0015FE  320D               	rrcf	___aomod@divisor+4,f,c
  1958  001600  320C               	rrcf	___aomod@divisor+3,f,c
  1959  001602  320B               	rrcf	___aomod@divisor+2,f,c
  1960  001604  320A               	rrcf	___aomod@divisor+1,f,c
  1961  001606  3209               	rrcf	___aomod@divisor,f,c
  1962  001608  2E11               	decfsz	___aomod@counter,f,c
  1963  00160A  D7D3               	goto	u770
  1964  00160C                     l1457:
  1965  00160C  5012               	movf	___aomod@sign,w,c
  1966  00160E  B4D8               	btfsc	status,2,c
  1967  001610  D010               	goto	l1461
  1968  001612  1E08               	comf	___aomod@dividend+7,f,c
  1969  001614  1E07               	comf	___aomod@dividend+6,f,c
  1970  001616  1E06               	comf	___aomod@dividend+5,f,c
  1971  001618  1E05               	comf	___aomod@dividend+4,f,c
  1972  00161A  1E04               	comf	___aomod@dividend+3,f,c
  1973  00161C  1E03               	comf	___aomod@dividend+2,f,c
  1974  00161E  1E02               	comf	___aomod@dividend+1,f,c
  1975  001620  6C01               	negf	___aomod@dividend,c
  1976  001622  0E00               	movlw	0
  1977  001624  2202               	addwfc	___aomod@dividend+1,f,c
  1978  001626  2203               	addwfc	___aomod@dividend+2,f,c
  1979  001628  2204               	addwfc	___aomod@dividend+3,f,c
  1980  00162A  2205               	addwfc	___aomod@dividend+4,f,c
  1981  00162C  2206               	addwfc	___aomod@dividend+5,f,c
  1982  00162E  2207               	addwfc	___aomod@dividend+6,f,c
  1983  001630  2208               	addwfc	___aomod@dividend+7,f,c
  1984  001632                     l1461:
  1985  001632  C001  F001         	movff	___aomod@dividend,?___aomod
  1986  001636  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  1987  00163A  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  1988  00163E  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  1989  001642  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  1990  001646  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  1991  00164A  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  1992  00164E  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  1993  001652  0012               	return		;funcret
  1994  001654                     __end_of___aomod:
  1995                           	opt callstack 0
  1996                           
  1997 ;; *************** function ___aodiv *****************
  1998 ;; Defined at:
  1999 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;  dividend        8    0[COMRAM] long long 
  2002 ;;  divisor         8    8[COMRAM] long long 
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;  quotient        8   18[COMRAM] long long 
  2005 ;;  sign            1   17[COMRAM] unsigned char 
  2006 ;;  counter         1   16[COMRAM] unsigned char 
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  8    0[COMRAM] long long 
  2009 ;; Registers used:
  2010 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2016 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2017 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2019 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2020 ;;Total ram usage:       26 bytes
  2021 ;; Hardware stack levels used:    1
  2022 ;; This function calls:
  2023 ;;		Nothing
  2024 ;; This function is called by:
  2025 ;;		_dtoa
  2026 ;; This function uses a non-reentrant model
  2027 ;;
  2028                           
  2029                           	psect	text12
  2030  0013E8                     __ptext12:
  2031                           	opt callstack 0
  2032  0013E8                     ___aodiv:
  2033                           	opt callstack 26
  2034                           
  2035                           ;incstack = 0
  2036  0013E8  0E00               	movlw	0
  2037  0013EA  6E12               	movwf	___aodiv@sign,c
  2038  0013EC  AE10               	btfss	___aodiv@divisor+7,7,c
  2039  0013EE  D012               	goto	l1393
  2040  0013F0  1E10               	comf	___aodiv@divisor+7,f,c
  2041  0013F2  1E0F               	comf	___aodiv@divisor+6,f,c
  2042  0013F4  1E0E               	comf	___aodiv@divisor+5,f,c
  2043  0013F6  1E0D               	comf	___aodiv@divisor+4,f,c
  2044  0013F8  1E0C               	comf	___aodiv@divisor+3,f,c
  2045  0013FA  1E0B               	comf	___aodiv@divisor+2,f,c
  2046  0013FC  1E0A               	comf	___aodiv@divisor+1,f,c
  2047  0013FE  6C09               	negf	___aodiv@divisor,c
  2048  001400  0E00               	movlw	0
  2049  001402  220A               	addwfc	___aodiv@divisor+1,f,c
  2050  001404  220B               	addwfc	___aodiv@divisor+2,f,c
  2051  001406  220C               	addwfc	___aodiv@divisor+3,f,c
  2052  001408  220D               	addwfc	___aodiv@divisor+4,f,c
  2053  00140A  220E               	addwfc	___aodiv@divisor+5,f,c
  2054  00140C  220F               	addwfc	___aodiv@divisor+6,f,c
  2055  00140E  2210               	addwfc	___aodiv@divisor+7,f,c
  2056  001410  0E01               	movlw	1
  2057  001412  6E12               	movwf	___aodiv@sign,c
  2058  001414                     l1393:
  2059  001414  AE08               	btfss	___aodiv@dividend+7,7,c
  2060  001416  D012               	goto	l1399
  2061  001418  1E08               	comf	___aodiv@dividend+7,f,c
  2062  00141A  1E07               	comf	___aodiv@dividend+6,f,c
  2063  00141C  1E06               	comf	___aodiv@dividend+5,f,c
  2064  00141E  1E05               	comf	___aodiv@dividend+4,f,c
  2065  001420  1E04               	comf	___aodiv@dividend+3,f,c
  2066  001422  1E03               	comf	___aodiv@dividend+2,f,c
  2067  001424  1E02               	comf	___aodiv@dividend+1,f,c
  2068  001426  6C01               	negf	___aodiv@dividend,c
  2069  001428  0E00               	movlw	0
  2070  00142A  2202               	addwfc	___aodiv@dividend+1,f,c
  2071  00142C  2203               	addwfc	___aodiv@dividend+2,f,c
  2072  00142E  2204               	addwfc	___aodiv@dividend+3,f,c
  2073  001430  2205               	addwfc	___aodiv@dividend+4,f,c
  2074  001432  2206               	addwfc	___aodiv@dividend+5,f,c
  2075  001434  2207               	addwfc	___aodiv@dividend+6,f,c
  2076  001436  2208               	addwfc	___aodiv@dividend+7,f,c
  2077  001438  0E01               	movlw	1
  2078  00143A  1A12               	xorwf	___aodiv@sign,f,c
  2079  00143C                     l1399:
  2080  00143C  EE20  F013         	lfsr	2,___aodiv@quotient
  2081  001440  0E07               	movlw	7
  2082  001442                     u691:
  2083  001442  6ADE               	clrf	postinc2,c
  2084  001444  06E8               	decf	wreg,f,c
  2085  001446  E2FD               	bc	u691
  2086  001448  5009               	movf	___aodiv@divisor,w,c
  2087  00144A  100A               	iorwf	___aodiv@divisor+1,w,c
  2088  00144C  100B               	iorwf	___aodiv@divisor+2,w,c
  2089  00144E  100C               	iorwf	___aodiv@divisor+3,w,c
  2090  001450  100D               	iorwf	___aodiv@divisor+4,w,c
  2091  001452  100E               	iorwf	___aodiv@divisor+5,w,c
  2092  001454  100F               	iorwf	___aodiv@divisor+6,w,c
  2093  001456  1010               	iorwf	___aodiv@divisor+7,w,c
  2094  001458  B4D8               	btfsc	status,2,c
  2095  00145A  D046               	goto	l1421
  2096  00145C  0E01               	movlw	1
  2097  00145E  6E11               	movwf	___aodiv@counter,c
  2098  001460  D00A               	goto	l1407
  2099  001462                     l1405:
  2100  001462  90D8               	bcf	status,0,c
  2101  001464  3609               	rlcf	___aodiv@divisor,f,c
  2102  001466  360A               	rlcf	___aodiv@divisor+1,f,c
  2103  001468  360B               	rlcf	___aodiv@divisor+2,f,c
  2104  00146A  360C               	rlcf	___aodiv@divisor+3,f,c
  2105  00146C  360D               	rlcf	___aodiv@divisor+4,f,c
  2106  00146E  360E               	rlcf	___aodiv@divisor+5,f,c
  2107  001470  360F               	rlcf	___aodiv@divisor+6,f,c
  2108  001472  3610               	rlcf	___aodiv@divisor+7,f,c
  2109  001474  2A11               	incf	___aodiv@counter,f,c
  2110  001476                     l1407:
  2111  001476  AE10               	btfss	___aodiv@divisor+7,7,c
  2112  001478  D7F4               	goto	l1405
  2113  00147A                     u710:
  2114  00147A  90D8               	bcf	status,0,c
  2115  00147C  3613               	rlcf	___aodiv@quotient,f,c
  2116  00147E  3614               	rlcf	___aodiv@quotient+1,f,c
  2117  001480  3615               	rlcf	___aodiv@quotient+2,f,c
  2118  001482  3616               	rlcf	___aodiv@quotient+3,f,c
  2119  001484  3617               	rlcf	___aodiv@quotient+4,f,c
  2120  001486  3618               	rlcf	___aodiv@quotient+5,f,c
  2121  001488  3619               	rlcf	___aodiv@quotient+6,f,c
  2122  00148A  361A               	rlcf	___aodiv@quotient+7,f,c
  2123  00148C  5009               	movf	___aodiv@divisor,w,c
  2124  00148E  5C01               	subwf	___aodiv@dividend,w,c
  2125  001490  500A               	movf	___aodiv@divisor+1,w,c
  2126  001492  5802               	subwfb	___aodiv@dividend+1,w,c
  2127  001494  500B               	movf	___aodiv@divisor+2,w,c
  2128  001496  5803               	subwfb	___aodiv@dividend+2,w,c
  2129  001498  500C               	movf	___aodiv@divisor+3,w,c
  2130  00149A  5804               	subwfb	___aodiv@dividend+3,w,c
  2131  00149C  500D               	movf	___aodiv@divisor+4,w,c
  2132  00149E  5805               	subwfb	___aodiv@dividend+4,w,c
  2133  0014A0  500E               	movf	___aodiv@divisor+5,w,c
  2134  0014A2  5806               	subwfb	___aodiv@dividend+5,w,c
  2135  0014A4  500F               	movf	___aodiv@divisor+6,w,c
  2136  0014A6  5807               	subwfb	___aodiv@dividend+6,w,c
  2137  0014A8  5010               	movf	___aodiv@divisor+7,w,c
  2138  0014AA  5808               	subwfb	___aodiv@dividend+7,w,c
  2139  0014AC  A0D8               	btfss	status,0,c
  2140  0014AE  D011               	goto	l1417
  2141  0014B0  5009               	movf	___aodiv@divisor,w,c
  2142  0014B2  5E01               	subwf	___aodiv@dividend,f,c
  2143  0014B4  500A               	movf	___aodiv@divisor+1,w,c
  2144  0014B6  5A02               	subwfb	___aodiv@dividend+1,f,c
  2145  0014B8  500B               	movf	___aodiv@divisor+2,w,c
  2146  0014BA  5A03               	subwfb	___aodiv@dividend+2,f,c
  2147  0014BC  500C               	movf	___aodiv@divisor+3,w,c
  2148  0014BE  5A04               	subwfb	___aodiv@dividend+3,f,c
  2149  0014C0  500D               	movf	___aodiv@divisor+4,w,c
  2150  0014C2  5A05               	subwfb	___aodiv@dividend+4,f,c
  2151  0014C4  500E               	movf	___aodiv@divisor+5,w,c
  2152  0014C6  5A06               	subwfb	___aodiv@dividend+5,f,c
  2153  0014C8  500F               	movf	___aodiv@divisor+6,w,c
  2154  0014CA  5A07               	subwfb	___aodiv@dividend+6,f,c
  2155  0014CC  5010               	movf	___aodiv@divisor+7,w,c
  2156  0014CE  5A08               	subwfb	___aodiv@dividend+7,f,c
  2157  0014D0  8013               	bsf	___aodiv@quotient,0,c
  2158  0014D2                     l1417:
  2159  0014D2  90D8               	bcf	status,0,c
  2160  0014D4  3210               	rrcf	___aodiv@divisor+7,f,c
  2161  0014D6  320F               	rrcf	___aodiv@divisor+6,f,c
  2162  0014D8  320E               	rrcf	___aodiv@divisor+5,f,c
  2163  0014DA  320D               	rrcf	___aodiv@divisor+4,f,c
  2164  0014DC  320C               	rrcf	___aodiv@divisor+3,f,c
  2165  0014DE  320B               	rrcf	___aodiv@divisor+2,f,c
  2166  0014E0  320A               	rrcf	___aodiv@divisor+1,f,c
  2167  0014E2  3209               	rrcf	___aodiv@divisor,f,c
  2168  0014E4  2E11               	decfsz	___aodiv@counter,f,c
  2169  0014E6  D7C9               	goto	u710
  2170  0014E8                     l1421:
  2171  0014E8  5012               	movf	___aodiv@sign,w,c
  2172  0014EA  B4D8               	btfsc	status,2,c
  2173  0014EC  D010               	goto	l1425
  2174  0014EE  1E1A               	comf	___aodiv@quotient+7,f,c
  2175  0014F0  1E19               	comf	___aodiv@quotient+6,f,c
  2176  0014F2  1E18               	comf	___aodiv@quotient+5,f,c
  2177  0014F4  1E17               	comf	___aodiv@quotient+4,f,c
  2178  0014F6  1E16               	comf	___aodiv@quotient+3,f,c
  2179  0014F8  1E15               	comf	___aodiv@quotient+2,f,c
  2180  0014FA  1E14               	comf	___aodiv@quotient+1,f,c
  2181  0014FC  6C13               	negf	___aodiv@quotient,c
  2182  0014FE  0E00               	movlw	0
  2183  001500  2214               	addwfc	___aodiv@quotient+1,f,c
  2184  001502  2215               	addwfc	___aodiv@quotient+2,f,c
  2185  001504  2216               	addwfc	___aodiv@quotient+3,f,c
  2186  001506  2217               	addwfc	___aodiv@quotient+4,f,c
  2187  001508  2218               	addwfc	___aodiv@quotient+5,f,c
  2188  00150A  2219               	addwfc	___aodiv@quotient+6,f,c
  2189  00150C  221A               	addwfc	___aodiv@quotient+7,f,c
  2190  00150E                     l1425:
  2191  00150E  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2192  001512  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2193  001516  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2194  00151A  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2195  00151E  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2196  001522  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2197  001526  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2198  00152A  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2199  00152E  0012               	return		;funcret
  2200  001530                     __end_of___aodiv:
  2201                           	opt callstack 0
  2202                           
  2203 ;; *************** function _initLCD *****************
  2204 ;; Defined at:
  2205 ;;		line 69 in file "lcd.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;		None
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;		None
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  1    wreg      void 
  2212 ;; Registers used:
  2213 ;;		wreg, status,2, status,0, cstack
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;Total ram usage:        1 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    4
  2226 ;; This function calls:
  2227 ;;		_lcdInst
  2228 ;;		_send_byte
  2229 ;;		_send_nibble
  2230 ;; This function is called by:
  2231 ;;		_main
  2232 ;; This function uses a non-reentrant model
  2233 ;;
  2234                           
  2235                           	psect	text13
  2236  0017D4                     __ptext13:
  2237                           	opt callstack 0
  2238  0017D4                     _initLCD:
  2239                           	opt callstack 26
  2240                           
  2241                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
  2242                           
  2243                           ;incstack = 0
  2244  0017D4  0E31               	movlw	49
  2245  0017D6  6E05               	movwf	??_initLCD& (0+255),c
  2246  0017D8  0EB2               	movlw	178
  2247  0017DA                     u1067:
  2248  0017DA  2EE8               	decfsz	wreg,f,c
  2249  0017DC  D7FE               	bra	u1067
  2250  0017DE  2E05               	decfsz	??_initLCD& (0+255),f,c
  2251  0017E0  D7FC               	bra	u1067
  2252  0017E2  D000               	nop2	
  2253                           
  2254                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
  2255  0017E4  948C               	bcf	3980,2,c	;volatile
  2256                           
  2257                           ;lcd.c: 74:     send_nibble(0b0011);
  2258  0017E6  0E03               	movlw	3
  2259  0017E8  ECCD  F00C         	call	_send_nibble
  2260                           
  2261                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
  2262  0017EC  0E11               	movlw	17
  2263  0017EE  6E05               	movwf	??_initLCD& (0+255),c
  2264  0017F0  0E3A               	movlw	58
  2265  0017F2                     u1077:
  2266  0017F2  2EE8               	decfsz	wreg,f,c
  2267  0017F4  D7FE               	bra	u1077
  2268  0017F6  2E05               	decfsz	??_initLCD& (0+255),f,c
  2269  0017F8  D7FC               	bra	u1077
  2270  0017FA  D000               	nop2	
  2271                           
  2272                           ;lcd.c: 76:     send_nibble(0b0011);
  2273  0017FC  0E03               	movlw	3
  2274  0017FE  ECCD  F00C         	call	_send_nibble
  2275                           
  2276                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  2277  001802  0E7D               	movlw	125
  2278  001804                     u1087:
  2279  001804  2EE8               	decfsz	wreg,f,c
  2280  001806  D7FE               	bra	u1087
  2281                           
  2282                           ;lcd.c: 78:     send_byte(0b00110010);
  2283  001808  0E32               	movlw	50
  2284  00180A  ECD8  F00C         	call	_send_byte
  2285                           
  2286                           ;lcd.c: 80:     send_byte(0b00101000);
  2287  00180E  0E28               	movlw	40
  2288  001810  ECD8  F00C         	call	_send_byte
  2289                           
  2290                           ;lcd.c: 81:     send_byte(0b00001000);
  2291  001814  0E08               	movlw	8
  2292  001816  ECD8  F00C         	call	_send_byte
  2293                           
  2294                           ;lcd.c: 82:     send_byte(0b00000001);
  2295  00181A  0E01               	movlw	1
  2296  00181C  ECD8  F00C         	call	_send_byte
  2297                           
  2298                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
  2299  001820  0E11               	movlw	17
  2300  001822  6E05               	movwf	??_initLCD& (0+255),c
  2301  001824  0E3A               	movlw	58
  2302  001826                     u1097:
  2303  001826  2EE8               	decfsz	wreg,f,c
  2304  001828  D7FE               	bra	u1097
  2305  00182A  2E05               	decfsz	??_initLCD& (0+255),f,c
  2306  00182C  D7FC               	bra	u1097
  2307  00182E  D000               	nop2	
  2308                           
  2309                           ;lcd.c: 84:     send_byte(0b00000110);
  2310  001830  0E06               	movlw	6
  2311  001832  ECD8  F00C         	call	_send_byte
  2312                           
  2313                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  2314  001836  0E0F               	movlw	15
  2315  001838  ECE7  F00C         	call	_lcdInst
  2316  00183C  0012               	return		;funcret
  2317  00183E                     __end_of_initLCD:
  2318                           	opt callstack 0
  2319                           
  2320 ;; *************** function _lcdInst *****************
  2321 ;; Defined at:
  2322 ;;		line 64 in file "lcd.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  data            1    wreg     unsigned char 
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;  data            1    3[COMRAM] unsigned char 
  2327 ;; Return value:  Size  Location     Type
  2328 ;;                  1    wreg      void 
  2329 ;; Registers used:
  2330 ;;		wreg, status,2, status,0, cstack
  2331 ;; Tracked objects:
  2332 ;;		On entry : 0/0
  2333 ;;		On exit  : 0/0
  2334 ;;		Unchanged: 0/0
  2335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2339 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2340 ;;Total ram usage:        1 bytes
  2341 ;; Hardware stack levels used:    1
  2342 ;; Hardware stack levels required when called:    3
  2343 ;; This function calls:
  2344 ;;		_send_byte
  2345 ;; This function is called by:
  2346 ;;		_main
  2347 ;;		_initLCD
  2348 ;;		_lcd_shift_cursor
  2349 ;;		_lcd_shift_display
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           	psect	text14
  2354  0019CE                     __ptext14:
  2355                           	opt callstack 0
  2356  0019CE                     _lcdInst:
  2357                           	opt callstack 27
  2358                           
  2359                           ;incstack = 0
  2360                           ;lcdInst@data stored from wreg
  2361  0019CE  6E04               	movwf	lcdInst@data,c
  2362                           
  2363                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
  2364  0019D0  948C               	bcf	3980,2,c	;volatile
  2365                           
  2366                           ;lcd.c: 66:     send_byte(data);
  2367  0019D2  5004               	movf	lcdInst@data,w,c
  2368  0019D4  ECD8  F00C         	call	_send_byte
  2369  0019D8  0012               	return		;funcret
  2370  0019DA                     __end_of_lcdInst:
  2371                           	opt callstack 0
  2372                           
  2373 ;; *************** function _send_byte *****************
  2374 ;; Defined at:
  2375 ;;		line 55 in file "lcd.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;  data            1    wreg     unsigned char 
  2378 ;; Auto vars:     Size  Location     Type
  2379 ;;  data            1    2[COMRAM] unsigned char 
  2380 ;; Return value:  Size  Location     Type
  2381 ;;                  1    wreg      void 
  2382 ;; Registers used:
  2383 ;;		wreg, status,2, status,0, cstack
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2390 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2392 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2393 ;;Total ram usage:        1 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; Hardware stack levels required when called:    2
  2396 ;; This function calls:
  2397 ;;		_send_nibble
  2398 ;; This function is called by:
  2399 ;;		_lcdInst
  2400 ;;		_initLCD
  2401 ;;		_putch
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405                           	psect	text15
  2406  0019B0                     __ptext15:
  2407                           	opt callstack 0
  2408  0019B0                     _send_byte:
  2409                           	opt callstack 23
  2410                           
  2411                           ;incstack = 0
  2412                           ;send_byte@data stored from wreg
  2413  0019B0  6E03               	movwf	send_byte@data,c
  2414                           
  2415                           ;lcd.c: 57:     send_nibble(data >> 4);
  2416  0019B2  3803               	swapf	send_byte@data,w,c
  2417  0019B4  0B0F               	andlw	15
  2418  0019B6  ECCD  F00C         	call	_send_nibble
  2419                           
  2420                           ;lcd.c: 60:     send_nibble(data);
  2421  0019BA  5003               	movf	send_byte@data,w,c
  2422  0019BC  ECCD  F00C         	call	_send_nibble
  2423  0019C0  0012               	return		;funcret
  2424  0019C2                     __end_of_send_byte:
  2425                           	opt callstack 0
  2426                           
  2427 ;; *************** function _send_nibble *****************
  2428 ;; Defined at:
  2429 ;;		line 44 in file "lcd.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;  data            1    wreg     unsigned char 
  2432 ;; Auto vars:     Size  Location     Type
  2433 ;;  data            1    1[COMRAM] unsigned char 
  2434 ;; Return value:  Size  Location     Type
  2435 ;;                  1    wreg      void 
  2436 ;; Registers used:
  2437 ;;		wreg, status,2, status,0, cstack
  2438 ;; Tracked objects:
  2439 ;;		On entry : 0/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2444 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2446 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2447 ;;Total ram usage:        1 bytes
  2448 ;; Hardware stack levels used:    1
  2449 ;; Hardware stack levels required when called:    1
  2450 ;; This function calls:
  2451 ;;		_pulse_e
  2452 ;; This function is called by:
  2453 ;;		_send_byte
  2454 ;;		_initLCD
  2455 ;; This function uses a non-reentrant model
  2456 ;;
  2457                           
  2458                           	psect	text16
  2459  00199A                     __ptext16:
  2460                           	opt callstack 0
  2461  00199A                     _send_nibble:
  2462                           	opt callstack 23
  2463                           
  2464                           ;incstack = 0
  2465                           ;send_nibble@data stored from wreg
  2466  00199A  6E02               	movwf	send_nibble@data,c
  2467                           
  2468                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
  2469  00199C  508C               	movf	3980,w,c	;volatile
  2470  00199E  0B0F               	andlw	15
  2471  0019A0  6E8C               	movwf	3980,c	;volatile
  2472                           
  2473                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
  2474  0019A2  3802               	swapf	send_nibble@data,w,c
  2475  0019A4  0BF0               	andlw	240
  2476  0019A6  108C               	iorwf	3980,w,c	;volatile
  2477  0019A8  6E8C               	movwf	3980,c	;volatile
  2478                           
  2479                           ;lcd.c: 48:     pulse_e();
  2480  0019AA  EC92  F00C         	call	_pulse_e	;wreg free
  2481  0019AE  0012               	return		;funcret
  2482  0019B0                     __end_of_send_nibble:
  2483                           	opt callstack 0
  2484                           
  2485 ;; *************** function _pulse_e *****************
  2486 ;; Defined at:
  2487 ;;		line 28 in file "lcd.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;		None
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;  interruptSta    1    0[COMRAM] unsigned char 
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  1    wreg      void 
  2494 ;; Registers used:
  2495 ;;		wreg
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2502 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;Total ram usage:        1 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; This function calls:
  2508 ;;		Nothing
  2509 ;; This function is called by:
  2510 ;;		_send_nibble
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	text17
  2515  001924                     __ptext17:
  2516                           	opt callstack 0
  2517  001924                     _pulse_e:
  2518                           	opt callstack 23
  2519                           
  2520                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
  2521                           
  2522                           ;incstack = 0
  2523  001924  0E00               	movlw	0
  2524  001926  BEF2               	btfsc	4082,7,c	;volatile
  2525  001928  0E01               	movlw	1
  2526  00192A  6E01               	movwf	pulse_e@interruptState,c
  2527                           
  2528                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
  2529  00192C  9EF2               	bcf	4082,7,c	;volatile
  2530                           
  2531                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
  2532  00192E  868C               	bsf	3980,3,c	;volatile
  2533                           
  2534                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  2535  001930  0E14               	movlw	20
  2536  001932                     u1107:
  2537  001932  2EE8               	decfsz	wreg,f,c
  2538  001934  D7FE               	bra	u1107
  2539  001936  D000               	nop2	
  2540                           
  2541                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
  2542  001938  968C               	bcf	3980,3,c	;volatile
  2543                           
  2544                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  2545  00193A  0E53               	movlw	83
  2546  00193C                     u1117:
  2547  00193C  2EE8               	decfsz	wreg,f,c
  2548  00193E  D7FE               	bra	u1117
  2549  001940  F000               	nop	
  2550                           
  2551                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
  2552  001942  B001               	btfsc	pulse_e@interruptState,0,c
  2553  001944  D002               	bra	u555
  2554  001946  9EF2               	bcf	4082,7,c	;volatile
  2555  001948  D001               	bra	u556
  2556  00194A                     u555:
  2557  00194A  8EF2               	bsf	4082,7,c	;volatile
  2558  00194C                     u556:
  2559  00194C  0012               	return		;funcret
  2560  00194E                     __end_of_pulse_e:
  2561                           	opt callstack 0
  2562                           
  2563                           	psect	rparam
  2564  0000                     tosu	equ	0xFFF
  2565                           tosh	equ	0xFFE
  2566                           tosl	equ	0xFFD
  2567                           stkptr	equ	0xFFC
  2568                           pclatu	equ	0xFFB
  2569                           pclath	equ	0xFFA
  2570                           pcl	equ	0xFF9
  2571                           tblptru	equ	0xFF8
  2572                           tblptrh	equ	0xFF7
  2573                           tblptrl	equ	0xFF6
  2574                           tablat	equ	0xFF5
  2575                           prodh	equ	0xFF4
  2576                           prodl	equ	0xFF3
  2577                           indf0	equ	0xFEF
  2578                           postinc0	equ	0xFEE
  2579                           postdec0	equ	0xFED
  2580                           preinc0	equ	0xFEC
  2581                           plusw0	equ	0xFEB
  2582                           fsr0h	equ	0xFEA
  2583                           fsr0l	equ	0xFE9
  2584                           wreg	equ	0xFE8
  2585                           indf1	equ	0xFE7
  2586                           postinc1	equ	0xFE6
  2587                           postdec1	equ	0xFE5
  2588                           preinc1	equ	0xFE4
  2589                           plusw1	equ	0xFE3
  2590                           fsr1h	equ	0xFE2
  2591                           fsr1l	equ	0xFE1
  2592                           bsr	equ	0xFE0
  2593                           indf2	equ	0xFDF
  2594                           postinc2	equ	0xFDE
  2595                           postdec2	equ	0xFDD
  2596                           preinc2	equ	0xFDC
  2597                           plusw2	equ	0xFDB
  2598                           fsr2h	equ	0xFDA
  2599                           fsr2l	equ	0xFD9
  2600                           status	equ	0xFD8


Data Sizes:
    Strings     30
    Constant    6
    Data        0
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    106     121
    BANK0           128      0      32
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[14]), STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S899_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[14]), STR_1(CODE[16]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[14]), STR_1(CODE[16]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_send_byte
    _abs->___aomod
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    6988
                                             99 COMRAM     7     7      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4    6446
                                             91 COMRAM     8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6240
                                             83 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    5886
                                             67 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4448
                                             31 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2799
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1280
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     879
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     245
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (6) _send_byte                                            1     1      0      89
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (7) _send_nibble                                          1     1      0      45
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (8) _pulse_e                                              1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _fputc
           _putch
             _send_byte
               _send_nibble
                 _pulse_e

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      20       5       25.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6A      79       1       95.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      99      34        0.0%
DATA                 0      0      99       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Apr 06 23:14:43 2019

            __CFG_CPD$ON 000000              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000                      l142 1682                      l153 1098  
                    l155 10A0                      l865 18F0             __CFG_CPB$OFF 000000  
                    u710 147A                      u800 104E                      u570 1778  
                    u810 1050                      u555 194A                      u556 194C  
                    u660 18D6                      u900 1200                      u590 17C0  
                    u910 1204                      u840 108E                      u770 15B2  
                    u930 1210                      u691 1442                      u860 10B4  
                    u870 11D0                      u890 11F2                      u970 12D8  
                    u891 11F0                      _abs 18C8                      _pad 1654  
                    wreg 000FE8             __CFG_IESO$ON 000000             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     ?_abs 0013                     l1405 1462  
                   l1421 14E8                     l1333 1780                     l1407 1476  
                   l1343 189A                     l1351 1904                     l1425 150E  
                   l1417 14D2                     l1441 1580                     l1353 1908  
                   l1347 18B0                     l1363 166C                     l1523 123E  
                   l1461 1632                     l1453 15F6                     l1445 159A  
                   l1437 155C                     l1373 16A4                     l1447 15AE  
                   l1367 167A                     l1519 1226                     l1471 107C  
                   l1551 1392                     l1393 1414                     l1457 160C  
                   l1377 16D0                     l1369 168C                     l1545 1356  
                   l1561 13B4                     l1555 139C                     l1485 10BA  
                   l1399 143C                     l1489 10CA                     l1577 1850  
                   l1499 11C2                     l1579 1874                     ?_pad 0015  
                   STR_1 1007                     STR_2 1017                     u1000 1710  
                   u1008 1712                     u1107 1932                     u1117 193C  
                   u1057 172C                     u1067 17DA                     u1077 17F2  
                   u1087 1804                     _LATD 000F8C                     u1097 1826  
                   abs@a 0013                     _dbuf 0080                     _main 16EA  
                   _dtoa 1026                     _prec 0076                     _time 006B  
                   _nout 0072                     pad@i 001C                     pad@p 0019  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001E                     fsr2l 000FD9  
                   start 0000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_abs 0015                    ??_pad 001B          __end_of___aodiv 1530  
                  ?_main 0001                    ?_dtoa 0020          __end_of___aomod 1654  
           main@ir_break 0065             vfpfcnvrt@fmt 0046                    _TRISD 000F95  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_lcdInst 19DA  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000          __end_of_initLCD 183E  
         __CFG_EBTRB$OFF 000000                    _flags 0078                    _fputc 1768  
                  _fputs 1890                    pad@fp 0015                    _width 0074  
                  _putch 19C2                    dtoa@d 0022                    dtoa@i 0042  
                  dtoa@n 003A                    dtoa@p 0034                    dtoa@s 0038  
                  dtoa@w 0036                    tablat 000FF5          send_nibble@data 0002  
        __end_of_pulse_e 194E                    status 000FD8           __CFG_PBADEN$ON 000000  
        __initialization 194E             __end_of_main 1768             __end_of_dtoa 1268  
                 ??_main 0064                   ??_dtoa 002A            __activetblptr 000001  
           ?_send_nibble 0001                   ?_fputc 0005                   ?_fputs 000E  
                 ?_putch 0001            main@lastState 0067                   _SSPADD 000FC8  
                 _SSPBUF 000FC9           __CFG_XINST$OFF 000000             vfprintf@cfmt 005A  
              ??___aodiv 0011                ??___aomod 0011           __CFG_STVREN$ON 000000  
                 clear_0 1954                   clear_1 1960                ??_lcdInst 0004  
                 _printf 1974                   pad@buf 0017                   main@ir 0066  
                 dtoa@fp 0020                   _strlen 18FA                ??_initLCD 0005  
                 fputc@c 0005                   fputs@c 0012                   fputs@i 0013  
                 fputs@s 000E             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8         __end_of_vfprintf 1890  
              ??_pulse_e 0001    pulse_e@interruptState 0001               __accesstop 0080  
__end_of__initialization 1966            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 17D4            __end_of_fputs 18C8            __end_of_putch 19CE  
                ??_fputc 0009                  ??_fputs 0012                  ??_putch 0004  
             __pbssBANK0 0080       __size_of_send_byte 0012                  ?_printf 005C  
                ?_strlen 0001       __size_of_vfpfcnvrt 0180                  _SSPCON1 000FC6  
                _SSPCON2 000FC5                  _SSPSTAT 000FC7     __size_of_send_nibble 0016  
                __Hparam 0000                  __Lparam 0000                  ___aodiv 13E8  
                ___aomod 1530                ?_vfprintf 0054             __psmallconst 1000  
                __pcinit 194E                  __ramtop 1000                  _lcdInst 19CE  
                __ptext0 16EA                  __ptext1 1974                  __ptext2 183E  
                __ptext3 1268                  __ptext4 1026                  __ptext5 1654  
                __ptext6 18FA                  __ptext7 1890                  __ptext8 1768  
                __ptext9 19C2          __size_of_printf 0026          __size_of_strlen 002A  
                _initLCD 17D4             __size_of_abs 0032             __size_of_pad 0096  
                _pulse_e 1924     end_of_initialization 1966    __end_of_LCD_SIZE_HORZ 1006  
      __end_of_send_byte 19C2    __end_of_LCD_SIZE_VERT 1005                  fputc@fp 0007  
                fputs@fp 0010        __end_of_vfpfcnvrt 13E8                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_vfprintf 005A                  strlen@a 0003                  strlen@s 0001  
              _PORTDbits 000F83                _TRISCbits 000F94            send_byte@data 0003  
            vfpfcnvrt@ap 0048              vfpfcnvrt@fp 0044              vfpfcnvrt@ll 004C  
         __end_of_printf 199A           __end_of_strlen 1924      start_initialization 194E  
            __end_of_abs 18FA              __end_of_pad 16EA              vfprintf@fmt 0056  
       __CFG_LPT1OSC$OFF 000000                 ??_printf 0060                 ??_strlen 0003  
            __pbssCOMRAM 006B         ___aodiv@dividend 0001        __CFG_CCP2MX$PORTC 000000  
               ?___aodiv 0001                 ?___aomod 0001         ___aodiv@quotient 0013  
               ?_lcdInst 0001        __size_of_vfprintf 0052                 ?_initLCD 0001  
            __smallconst 1000            ??_send_nibble 0002                 ?_pulse_e 0001  
         __size_of_fputc 006C           __size_of_fputs 0038           __size_of_putch 000C  
               _LATDbits 000F8C                _send_byte 19B0           _LCD_LINE1_ADDR 1003  
         _LCD_LINE2_ADDR 1006           _LCD_LINE3_ADDR 1002           _LCD_LINE4_ADDR 1001  
       __CFG_WDTPS$32768 000000                _vfpfcnvrt 1268   __end_of_LCD_LINE1_ADDR 1004  
 __end_of_LCD_LINE2_ADDR 1007   __end_of_LCD_LINE3_ADDR 1003   __end_of_LCD_LINE4_ADDR 1002  
    __end_of_send_nibble 19B0               ?_send_byte 0001                 __Hrparam 0000  
             vfprintf@ap 0058                 __Lrparam 0000               vfprintf@fp 0054  
           __Lsmallconst 1000       __CFG_BOREN$SBORDIS 000000         __size_of___aodiv 0148  
       __size_of___aomod 0124               ?_vfpfcnvrt 0044          ___aodiv@divisor 0009  
        ___aodiv@counter 0011         __size_of_lcdInst 000C         __size_of_initLCD 006A  
               _dtoa$438 0032                 __ptext10 18C8                 __ptext11 1530  
               __ptext12 13E8                 __ptext13 17D4                 __ptext14 19CE  
               __ptext15 19B0                 __ptext16 199A                 __ptext17 1924  
       __size_of_pulse_e 002A            __size_of_main 007E            __size_of_dtoa 0242  
               _vfprintf 183E                printf@fmt 005C         ___aomod@dividend 0001  
        main@sensorState 0069                putch@data 0004               _INTCONbits 000FF2  
            _send_nibble 199A            _LCD_SIZE_HORZ 1005            _LCD_SIZE_VERT 1004  
            ??_send_byte 0003                 printf@ap 0062          ___aomod@divisor 0009  
            ??_vfpfcnvrt 004A              lcdInst@data 0004          ___aomod@counter 0011  
            _SSPCON1bits 000FC6              _SSPCON2bits 000FC5             ___aodiv@sign 0012  
           ___aomod@sign 0012  
