

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Apr 07 18:37:16 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,inline
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22  0000                     
    23                           ; Version 2.05
    24                           ; Generated 20/12/2018 GMT
    25                           ; 
    26                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4620 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	smallconst
    59  001000                     __psmallconst:
    60                           	opt callstack 0
    61  001000  00                 	db	0
    62  001001                     _LCD_LINE4_ADDR:
    63                           	opt callstack 0
    64  001001  50                 	db	80
    65  001002                     __end_of_LCD_LINE4_ADDR:
    66                           	opt callstack 0
    67  001002                     _LCD_LINE3_ADDR:
    68                           	opt callstack 0
    69  001002  10                 	db	16
    70  001003                     __end_of_LCD_LINE3_ADDR:
    71                           	opt callstack 0
    72  001003                     _LCD_LINE2_ADDR:
    73                           	opt callstack 0
    74  001003  40                 	db	64
    75  001004                     __end_of_LCD_LINE2_ADDR:
    76                           	opt callstack 0
    77  001004                     _LCD_LINE1_ADDR:
    78                           	opt callstack 0
    79  001004  00                 	db	0
    80  001005                     __end_of_LCD_LINE1_ADDR:
    81                           	opt callstack 0
    82  001005                     _LCD_SIZE_VERT:
    83                           	opt callstack 0
    84  001005  04                 	db	4
    85  001006                     __end_of_LCD_SIZE_VERT:
    86                           	opt callstack 0
    87  001006                     _LCD_SIZE_HORZ:
    88                           	opt callstack 0
    89  001006  10                 	db	16
    90  001007                     __end_of_LCD_SIZE_HORZ:
    91                           	opt callstack 0
    92  0000                     _LATD	set	3980
    93  0000                     _LATDbits	set	3980
    94  0000                     _INTCONbits	set	4082
    95  0000                     _SSPBUF	set	4041
    96  0000                     _SSPCON2bits	set	4037
    97  0000                     _SSPCON1	set	4038
    98  0000                     _SSPADD	set	4040
    99  0000                     _TRISCbits	set	3988
   100  0000                     _SSPCON1bits	set	4038
   101  0000                     _SSPCON2	set	4037
   102  0000                     _SSPSTAT	set	4039
   103  0000                     _PORTAbits	set	3968
   104  0000                     _TRISA	set	3986
   105  001007                     STR_3:
   106  001007  75                 	db	117	;'u'
   107  001008  6E                 	db	110	;'n'
   108  001009  62                 	db	98	;'b'
   109  00100A  72                 	db	114	;'r'
   110  00100B  6F                 	db	111	;'o'
   111  00100C  6B                 	db	107	;'k'
   112  00100D  65                 	db	101	;'e'
   113  00100E  6E                 	db	110	;'n'
   114  00100F  00                 	db	0
   115  001010                     STR_2:
   116  001010  6C                 	db	108	;'l'
   117  001011  6F                 	db	111	;'o'
   118  001012  6C                 	db	108	;'l'
   119  001013  00                 	db	0
   120  001014                     STR_1:
   121  001014  66                 	db	102	;'f'
   122  001015  6B                 	db	107	;'k'
   123  001016  00                 	db	0
   124  0000                     
   125                           ; #config settings
   126  001017  00                 	db	0	; dummy byte at the end
   127  0000                     
   128                           	psect	cinit
   129  0013AA                     __pcinit:
   130                           	opt callstack 0
   131  0013AA                     start_initialization:
   132                           	opt callstack 0
   133  0013AA                     __initialization:
   134                           	opt callstack 0
   135                           
   136                           ; Clear objects allocated to COMRAM (47 bytes)
   137  0013AA  EE00  F001         	lfsr	0,__pbssCOMRAM
   138  0013AE  0E2F               	movlw	47
   139  0013B0                     clear_0:
   140  0013B0  6AEE               	clrf	postinc0,c
   141  0013B2  06E8               	decf	wreg,f,c
   142  0013B4  E1FD               	bnz	clear_0
   143  0013B6                     end_of_initialization:
   144                           	opt callstack 0
   145  0013B6                     __end_of__initialization:
   146                           	opt callstack 0
   147  0013B6  0E00               	movlw	low (__Lsmallconst shr (0+16))
   148  0013B8  6EF8               	movwf	tblptru,c
   149  0013BA  0E10               	movlw	high __Lsmallconst
   150  0013BC  6EF7               	movwf	tblptrh,c
   151  0013BE  0100               	movlb	0
   152  0013C0  EF0C  F008         	goto	_main	;jump to C main() function
   153                           
   154                           	psect	bssCOMRAM
   155  000001                     __pbssCOMRAM:
   156                           	opt callstack 0
   157  000001                     	ds	32
   158  000021                     _time:
   159                           	opt callstack 0
   160  000021                     	ds	7
   161  000028                     _nout:
   162                           	opt callstack 0
   163  000028                     	ds	2
   164  00002A                     _width:
   165                           	opt callstack 0
   166  00002A                     	ds	2
   167  00002C                     _prec:
   168                           	opt callstack 0
   169  00002C                     	ds	2
   170  00002E                     _flags:
   171                           	opt callstack 0
   172  00002E                     	ds	2
   173                           
   174                           	psect	cstackCOMRAM
   175  000030                     __pcstackCOMRAM:
   176                           	opt callstack 0
   177  000030                     pulse_e@interruptState:
   178                           	opt callstack 0
   179                           
   180                           ; 1 bytes @ 0x0
   181  000030                     	ds	1
   182  000031                     send_nibble@data:
   183                           	opt callstack 0
   184                           
   185                           ; 1 bytes @ 0x1
   186  000031                     	ds	1
   187  000032                     send_byte@data:
   188                           	opt callstack 0
   189                           
   190                           ; 1 bytes @ 0x2
   191  000032                     	ds	1
   192  000033                     lcdInst@data:
   193                           	opt callstack 0
   194  000033                     putch@data:
   195                           	opt callstack 0
   196                           
   197                           ; 1 bytes @ 0x3
   198  000033                     	ds	1
   199  000034                     ??_initLCD:
   200  000034                     fputc@c:
   201                           	opt callstack 0
   202                           
   203                           ; 2 bytes @ 0x4
   204  000034                     	ds	2
   205  000036                     fputc@fp:
   206                           	opt callstack 0
   207                           
   208                           ; 2 bytes @ 0x6
   209  000036                     	ds	2
   210  000038                     ??_fputc:
   211                           
   212                           ; 1 bytes @ 0x8
   213  000038                     	ds	5
   214  00003D                     ?_vfpfcnvrt:
   215                           	opt callstack 0
   216  00003D                     vfpfcnvrt@fp:
   217                           	opt callstack 0
   218                           
   219                           ; 2 bytes @ 0xD
   220  00003D                     	ds	2
   221  00003F                     vfpfcnvrt@fmt:
   222                           	opt callstack 0
   223                           
   224                           ; 2 bytes @ 0xF
   225  00003F                     	ds	2
   226  000041                     vfpfcnvrt@ap:
   227                           	opt callstack 0
   228                           
   229                           ; 2 bytes @ 0x11
   230  000041                     	ds	2
   231  000043                     ?_vfprintf:
   232                           	opt callstack 0
   233  000043                     vfprintf@fp:
   234                           	opt callstack 0
   235                           
   236                           ; 2 bytes @ 0x13
   237  000043                     	ds	2
   238  000045                     vfprintf@fmt:
   239                           	opt callstack 0
   240                           
   241                           ; 2 bytes @ 0x15
   242  000045                     	ds	2
   243  000047                     vfprintf@ap:
   244                           	opt callstack 0
   245                           
   246                           ; 2 bytes @ 0x17
   247  000047                     	ds	2
   248  000049                     vfprintf@cfmt:
   249                           	opt callstack 0
   250                           
   251                           ; 2 bytes @ 0x19
   252  000049                     	ds	2
   253  00004B                     ?_printf:
   254                           	opt callstack 0
   255  00004B                     printf@fmt:
   256                           	opt callstack 0
   257                           
   258                           ; 2 bytes @ 0x1B
   259  00004B                     	ds	2
   260  00004D                     
   261                           ; 1 bytes @ 0x1D
   262  00004D                     	ds	2
   263  00004F                     printf@ap:
   264                           	opt callstack 0
   265                           
   266                           ; 2 bytes @ 0x1F
   267  00004F                     	ds	2
   268  000051                     ??_main:
   269                           
   270                           ; 1 bytes @ 0x21
   271  000051                     	ds	2
   272  000053                     main@ir_break:
   273                           	opt callstack 0
   274                           
   275                           ; 1 bytes @ 0x23
   276  000053                     	ds	1
   277  000054                     main@ir:
   278                           	opt callstack 0
   279                           
   280                           ; 1 bytes @ 0x24
   281  000054                     	ds	1
   282  000055                     main@lastState:
   283                           	opt callstack 0
   284                           
   285                           ; 2 bytes @ 0x25
   286  000055                     	ds	2
   287  000057                     main@sensorState:
   288                           	opt callstack 0
   289                           
   290                           ; 2 bytes @ 0x27
   291  000057                     	ds	2
   292                           
   293 ;;
   294 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   295 ;;
   296 ;; *************** function _main *****************
   297 ;; Defined at:
   298 ;;		line 18 in file "main.c"
   299 ;; Parameters:    Size  Location     Type
   300 ;;		None
   301 ;; Auto vars:     Size  Location     Type
   302 ;;  sensorState     2   39[COMRAM] int 
   303 ;;  lastState       2   37[COMRAM] int 
   304 ;;  ir              1   36[COMRAM] _Bool 
   305 ;;  ir_break        1   35[COMRAM] _Bool 
   306 ;; Return value:  Size  Location     Type
   307 ;;                  1    wreg      void 
   308 ;; Registers used:
   309 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   310 ;; Tracked objects:
   311 ;;		On entry : 0/0
   312 ;;		On exit  : 0/0
   313 ;;		Unchanged: 0/0
   314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   316 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   317 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   318 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   319 ;;Total ram usage:        8 bytes
   320 ;; Hardware stack levels required when called:    8
   321 ;; This function calls:
   322 ;;		_initLCD
   323 ;;		_lcdInst
   324 ;;		_printf
   325 ;; This function is called by:
   326 ;;		Startup code after reset
   327 ;; This function uses a non-reentrant model
   328 ;;
   329                           
   330                           	psect	text0
   331  001018                     __ptext0:
   332                           	opt callstack 0
   333  001018                     _main:
   334                           	opt callstack 23
   335                           
   336                           ;main.c: 19:     TRISA = 0b00000001;
   337                           
   338                           ;incstack = 0
   339  001018  0E01               	movlw	1
   340  00101A  6E92               	movwf	3986,c	;volatile
   341                           
   342                           ;main.c: 22:     int lastState=0;
   343  00101C  0E00               	movlw	0
   344  00101E  6E56               	movwf	main@lastState+1,c
   345  001020  0E00               	movlw	0
   346  001022  6E55               	movwf	main@lastState,c
   347                           
   348                           ;main.c: 23:     _Bool ir_break = 0;
   349  001024  0E00               	movlw	0
   350  001026  6E53               	movwf	main@ir_break,c
   351                           
   352                           ;main.c: 24:     _Bool ir = 0;
   353  001028  0E00               	movlw	0
   354  00102A  6E54               	movwf	main@ir,c
   355                           
   356                           ;main.c: 25:     initLCD();
   357  00102C  EC4F  F009         	call	_initLCD	;wreg free
   358  001030                     l1156:
   359                           
   360                           ;main.c: 27:         sensorState = PORTAbits.RA0;
   361  001030  A080               	btfss	3968,0,c	;volatile
   362  001032  D003               	goto	u290
   363  001034  6A51               	clrf	??_main& (0+255),c
   364  001036  2A51               	incf	??_main& (0+255),f,c
   365  001038  D001               	goto	u298
   366  00103A                     u290:
   367  00103A  6A51               	clrf	??_main& (0+255),c
   368  00103C                     u298:
   369  00103C  5051               	movf	??_main,w,c
   370  00103E  6E57               	movwf	main@sensorState,c
   371  001040  6A58               	clrf	main@sensorState+1,c
   372                           
   373                           ;main.c: 28:         if (!sensorState){
   374  001042  5057               	movf	main@sensorState,w,c
   375  001044  1058               	iorwf	main@sensorState+1,w,c
   376  001046  A4D8               	btfss	status,2,c
   377  001048  D01D               	goto	l1170
   378                           
   379                           ;main.c: 30:                         { lcdInst(0x01); _delay((unsigned long)((5)*(100000
      +                          00/4000.0)));};
   380  00104A  0E01               	movlw	1
   381  00104C  ECFC  F009         	call	_lcdInst
   382  001050  0E11               	movlw	17
   383  001052  6E51               	movwf	??_main& (0+255),c
   384  001054  0E3A               	movlw	58
   385  001056                     u367:
   386  001056  2EE8               	decfsz	wreg,f,c
   387  001058  D7FE               	bra	u367
   388  00105A  2E51               	decfsz	??_main& (0+255),f,c
   389  00105C  D7FC               	bra	u367
   390  00105E  D000               	nop2	
   391                           
   392                           ;main.c: 32:                         printf("fk");
   393  001060  0E14               	movlw	low STR_1
   394  001062  6E4B               	movwf	printf@fmt,c
   395  001064  0E10               	movlw	high STR_1
   396  001066  6E4C               	movwf	printf@fmt+1,c
   397  001068  ECC2  F009         	call	_printf	;wreg free
   398                           
   399                           ;main.c: 33:             _delay((unsigned long)((1000)*(10000000/4000.0)));
   400  00106C  0E0D               	movlw	13
   401  00106E  6E52               	movwf	(??_main+1)& (0+255),c
   402  001070  0EAF               	movlw	175
   403  001072  6E51               	movwf	??_main& (0+255),c
   404  001074  0EB6               	movlw	182
   405  001076                     u377:
   406  001076  2EE8               	decfsz	wreg,f,c
   407  001078  D7FE               	bra	u377
   408  00107A  2E51               	decfsz	??_main& (0+255),f,c
   409  00107C  D7FC               	bra	u377
   410  00107E  2E52               	decfsz	(??_main+1)& (0+255),f,c
   411  001080  D7FA               	bra	u377
   412  001082  D000               	nop2	
   413  001084                     l1170:
   414                           
   415                           ;main.c: 35:         if (sensorState){
   416  001084  5057               	movf	main@sensorState,w,c
   417  001086  1058               	iorwf	main@sensorState+1,w,c
   418  001088  B4D8               	btfsc	status,2,c
   419  00108A  D01D               	goto	l1182
   420                           
   421                           ;main.c: 37:                         { lcdInst(0x01); _delay((unsigned long)((5)*(100000
      +                          00/4000.0)));};
   422  00108C  0E01               	movlw	1
   423  00108E  ECFC  F009         	call	_lcdInst
   424  001092  0E11               	movlw	17
   425  001094  6E51               	movwf	??_main& (0+255),c
   426  001096  0E3A               	movlw	58
   427  001098                     u387:
   428  001098  2EE8               	decfsz	wreg,f,c
   429  00109A  D7FE               	bra	u387
   430  00109C  2E51               	decfsz	??_main& (0+255),f,c
   431  00109E  D7FC               	bra	u387
   432  0010A0  D000               	nop2	
   433                           
   434                           ;main.c: 39:                         printf("lol");
   435  0010A2  0E10               	movlw	low STR_2
   436  0010A4  6E4B               	movwf	printf@fmt,c
   437  0010A6  0E10               	movlw	high STR_2
   438  0010A8  6E4C               	movwf	printf@fmt+1,c
   439  0010AA  ECC2  F009         	call	_printf	;wreg free
   440                           
   441                           ;main.c: 40:             _delay((unsigned long)((1000)*(10000000/4000.0)));
   442  0010AE  0E0D               	movlw	13
   443  0010B0  6E52               	movwf	(??_main+1)& (0+255),c
   444  0010B2  0EAF               	movlw	175
   445  0010B4  6E51               	movwf	??_main& (0+255),c
   446  0010B6  0EB6               	movlw	182
   447  0010B8                     u397:
   448  0010B8  2EE8               	decfsz	wreg,f,c
   449  0010BA  D7FE               	bra	u397
   450  0010BC  2E51               	decfsz	??_main& (0+255),f,c
   451  0010BE  D7FC               	bra	u397
   452  0010C0  2E52               	decfsz	(??_main+1)& (0+255),f,c
   453  0010C2  D7FA               	bra	u397
   454  0010C4  D000               	nop2	
   455  0010C6                     l1182:
   456                           
   457                           ;main.c: 42:         if (sensorState && !lastState){
   458  0010C6  5057               	movf	main@sensorState,w,c
   459  0010C8  1058               	iorwf	main@sensorState+1,w,c
   460  0010CA  B4D8               	btfsc	status,2,c
   461  0010CC  D7B1               	goto	l1156
   462  0010CE  5055               	movf	main@lastState,w,c
   463  0010D0  1056               	iorwf	main@lastState+1,w,c
   464  0010D2  A4D8               	btfss	status,2,c
   465  0010D4  D7AD               	goto	l1156
   466                           
   467                           ;main.c: 44:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)))
      +                          ;};
   468  0010D6  0E01               	movlw	1
   469  0010D8  ECFC  F009         	call	_lcdInst
   470  0010DC  0E11               	movlw	17
   471  0010DE  6E51               	movwf	??_main& (0+255),c
   472  0010E0  0E3A               	movlw	58
   473  0010E2                     u407:
   474  0010E2  2EE8               	decfsz	wreg,f,c
   475  0010E4  D7FE               	bra	u407
   476  0010E6  2E51               	decfsz	??_main& (0+255),f,c
   477  0010E8  D7FC               	bra	u407
   478  0010EA  D000               	nop2	
   479                           
   480                           ;main.c: 45:             printf("unbroken");
   481  0010EC  0E07               	movlw	low STR_3
   482  0010EE  6E4B               	movwf	printf@fmt,c
   483  0010F0  0E10               	movlw	high STR_3
   484  0010F2  6E4C               	movwf	printf@fmt+1,c
   485  0010F4  ECC2  F009         	call	_printf	;wreg free
   486                           
   487                           ;main.c: 46:             _delay((unsigned long)((1000)*(10000000/4000.0)));
   488  0010F8  0E0D               	movlw	13
   489  0010FA  6E52               	movwf	(??_main+1)& (0+255),c
   490  0010FC  0EAF               	movlw	175
   491  0010FE  6E51               	movwf	??_main& (0+255),c
   492  001100  0EB6               	movlw	182
   493  001102                     u417:
   494  001102  2EE8               	decfsz	wreg,f,c
   495  001104  D7FE               	bra	u417
   496  001106  2E51               	decfsz	??_main& (0+255),f,c
   497  001108  D7FC               	bra	u417
   498  00110A  2E52               	decfsz	(??_main+1)& (0+255),f,c
   499  00110C  D7FA               	bra	u417
   500  00110E  D000               	nop2	
   501                           
   502                           ;main.c: 51:         if (!sensorState && lastState){
   503  001110  5057               	movf	main@sensorState,w,c
   504  001112  1058               	iorwf	main@sensorState+1,w,c
   505  001114  A4D8               	btfss	status,2,c
   506  001116  D021               	goto	l1210
   507  001118  5055               	movf	main@lastState,w,c
   508  00111A  1056               	iorwf	main@lastState+1,w,c
   509  00111C  B4D8               	btfsc	status,2,c
   510  00111E  D01D               	goto	l1210
   511                           
   512                           ;main.c: 53:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)))
      +                          ;};
   513  001120  0E01               	movlw	1
   514  001122  ECFC  F009         	call	_lcdInst
   515  001126  0E11               	movlw	17
   516  001128  6E51               	movwf	??_main& (0+255),c
   517  00112A  0E3A               	movlw	58
   518  00112C                     u427:
   519  00112C  2EE8               	decfsz	wreg,f,c
   520  00112E  D7FE               	bra	u427
   521  001130  2E51               	decfsz	??_main& (0+255),f,c
   522  001132  D7FC               	bra	u427
   523  001134  D000               	nop2	
   524                           
   525                           ;main.c: 54:             printf("broken");
   526  001136  0E09               	movlw	low (STR_3+2)
   527  001138  6E4B               	movwf	printf@fmt,c
   528  00113A  0E10               	movlw	high (STR_3+2)
   529  00113C  6E4C               	movwf	printf@fmt+1,c
   530  00113E  ECC2  F009         	call	_printf	;wreg free
   531                           
   532                           ;main.c: 55:             _delay((unsigned long)((1000)*(10000000/4000.0)));
   533  001142  0E0D               	movlw	13
   534  001144  6E52               	movwf	(??_main+1)& (0+255),c
   535  001146  0EAF               	movlw	175
   536  001148  6E51               	movwf	??_main& (0+255),c
   537  00114A  0EB6               	movlw	182
   538  00114C                     u437:
   539  00114C  2EE8               	decfsz	wreg,f,c
   540  00114E  D7FE               	bra	u437
   541  001150  2E51               	decfsz	??_main& (0+255),f,c
   542  001152  D7FC               	bra	u437
   543  001154  2E52               	decfsz	(??_main+1)& (0+255),f,c
   544  001156  D7FA               	bra	u437
   545  001158  D000               	nop2	
   546  00115A                     l1210:
   547                           
   548                           ;main.c: 66:         lastState = sensorState;
   549  00115A  C057  F055         	movff	main@sensorState,main@lastState
   550  00115E  C058  F056         	movff	main@sensorState+1,main@lastState+1
   551  001162  D766               	goto	l1156
   552  001164                     __end_of_main:
   553                           	opt callstack 0
   554                           
   555 ;; *************** function _printf *****************
   556 ;; Defined at:
   557 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
   558 ;; Parameters:    Size  Location     Type
   559 ;;  fmt             2   27[COMRAM] PTR const unsigned char 
   560 ;;		 -> STR_4(7), STR_3(9), STR_2(4), STR_1(3), 
   561 ;; Auto vars:     Size  Location     Type
   562 ;;  ap              2   31[COMRAM] PTR void [1]
   563 ;;		 -> ?_printf(2), 
   564 ;;  ret             2    0        int 
   565 ;; Return value:  Size  Location     Type
   566 ;;                  2   27[COMRAM] int 
   567 ;; Registers used:
   568 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   569 ;; Tracked objects:
   570 ;;		On entry : 0/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   574 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   575 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   577 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   578 ;;Total ram usage:        6 bytes
   579 ;; Hardware stack levels used:    1
   580 ;; Hardware stack levels required when called:    7
   581 ;; This function calls:
   582 ;;		_vfprintf
   583 ;; This function is called by:
   584 ;;		_main
   585 ;; This function uses a non-reentrant model
   586 ;;
   587                           
   588                           	psect	text1
   589  001384                     __ptext1:
   590                           	opt callstack 0
   591  001384                     _printf:
   592                           	opt callstack 23
   593                           
   594                           ;incstack = 0
   595  001384  0E4D               	movlw	low (?_printf+2)
   596  001386  6E4F               	movwf	printf@ap,c
   597  001388  0E00               	movlw	high (?_printf+2)
   598  00138A  6E50               	movwf	printf@ap+1,c
   599  00138C  0E00               	movlw	0
   600  00138E  6E43               	movwf	vfprintf@fp,c
   601  001390  0E00               	movlw	0
   602  001392  6E44               	movwf	vfprintf@fp+1,c
   603  001394  C04B  F045         	movff	printf@fmt,vfprintf@fmt
   604  001398  C04C  F046         	movff	printf@fmt+1,vfprintf@fmt+1
   605  00139C  0E4F               	movlw	low printf@ap
   606  00139E  6E47               	movwf	vfprintf@ap,c
   607  0013A0  0E00               	movlw	high printf@ap
   608  0013A2  6E48               	movwf	vfprintf@ap+1,c
   609  0013A4  EC84  F009         	call	_vfprintf	;wreg free
   610  0013A8  0012               	return		;funcret
   611  0013AA                     __end_of_printf:
   612                           	opt callstack 0
   613                           
   614 ;; *************** function _vfprintf *****************
   615 ;; Defined at:
   616 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
   619 ;;		 -> NULL(0), 
   620 ;;  fmt             2   21[COMRAM] PTR const unsigned char 
   621 ;;		 -> STR_4(7), STR_3(9), STR_2(4), STR_1(3), 
   622 ;;  ap              2   23[COMRAM] PTR PTR void 
   623 ;;		 -> printf@ap(2), 
   624 ;; Auto vars:     Size  Location     Type
   625 ;;  cfmt            2   25[COMRAM] PTR unsigned char 
   626 ;;		 -> STR_4(7), STR_3(9), STR_2(4), STR_1(3), 
   627 ;; Return value:  Size  Location     Type
   628 ;;                  2   19[COMRAM] int 
   629 ;; Registers used:
   630 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   631 ;; Tracked objects:
   632 ;;		On entry : 0/0
   633 ;;		On exit  : 0/0
   634 ;;		Unchanged: 0/0
   635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   636 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   637 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   639 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   640 ;;Total ram usage:        8 bytes
   641 ;; Hardware stack levels used:    1
   642 ;; Hardware stack levels required when called:    6
   643 ;; This function calls:
   644 ;;		_vfpfcnvrt
   645 ;; This function is called by:
   646 ;;		_printf
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           	psect	text2
   651  001308                     __ptext2:
   652                           	opt callstack 0
   653  001308                     _vfprintf:
   654                           	opt callstack 23
   655                           
   656                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   657                           
   658                           ;incstack = 0
   659  001308  C045  F049         	movff	vfprintf@fmt,vfprintf@cfmt
   660  00130C  C046  F04A         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   661                           
   662                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   663  001310  0E00               	movlw	0
   664  001312  6E29               	movwf	_nout+1,c
   665  001314  0E00               	movlw	0
   666  001316  6E28               	movwf	_nout,c
   667                           
   668                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   669  001318  D012               	goto	l1144
   670  00131A                     l1142:
   671                           
   672                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   673  00131A  C043  F03D         	movff	vfprintf@fp,vfpfcnvrt@fp
   674  00131E  C044  F03E         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   675  001322  0E49               	movlw	low vfprintf@cfmt
   676  001324  6E3F               	movwf	vfpfcnvrt@fmt,c
   677  001326  0E00               	movlw	high vfprintf@cfmt
   678  001328  6E40               	movwf	vfpfcnvrt@fmt+1,c
   679  00132A  C047  F041         	movff	vfprintf@ap,vfpfcnvrt@ap
   680  00132E  C048  F042         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   681  001332  ECB2  F008         	call	_vfpfcnvrt	;wreg free
   682  001336  503D               	movf	?_vfpfcnvrt,w,c
   683  001338  2628               	addwf	_nout,f,c
   684  00133A  503E               	movf	?_vfpfcnvrt+1,w,c
   685  00133C  2229               	addwfc	_nout+1,f,c
   686  00133E                     l1144:
   687                           
   688                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   689  00133E  C049  FFF6         	movff	vfprintf@cfmt,tblptrl
   690  001342  C04A  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   691  001346                     	if	0	;tblptru may be non-zero
   692  001346                     	endif
   693  001346                     	if	0	;tblptru may be non-zero
   694  001346                     	endif
   695  001346  0008               	tblrd		*
   696  001348  50F5               	movf	tablat,w,c
   697  00134A  0900               	iorlw	0
   698  00134C  A4D8               	btfss	status,2,c
   699  00134E  D7E5               	goto	l1142
   700                           
   701                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   702  001350  C028  F043         	movff	_nout,?_vfprintf
   703  001354  C029  F044         	movff	_nout+1,?_vfprintf+1
   704  001358  0012               	return		;funcret
   705  00135A                     __end_of_vfprintf:
   706                           	opt callstack 0
   707                           
   708 ;; *************** function _vfpfcnvrt *****************
   709 ;; Defined at:
   710 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   711 ;; Parameters:    Size  Location     Type
   712 ;;  fp              2   13[COMRAM] PTR struct _IO_FILE
   713 ;;		 -> NULL(0), 
   714 ;;  fmt             2   15[COMRAM] PTR PTR unsigned char 
   715 ;;		 -> vfprintf@cfmt(2), 
   716 ;;  ap              2   17[COMRAM] PTR PTR void 
   717 ;;		 -> printf@ap(2), 
   718 ;; Auto vars:     Size  Location     Type
   719 ;;  llu             8    0        unsigned long long 
   720 ;;  ll              8    0        long long 
   721 ;;  f               4    0        long long 
   722 ;;  vp              3    0        PTR void 
   723 ;;  ct              3    0        unsigned char [3]
   724 ;;  cp              3    0        PTR unsigned char 
   725 ;;  i               2    0        int 
   726 ;;  done            2    0        int 
   727 ;;  c               1    0        unsigned char 
   728 ;; Return value:  Size  Location     Type
   729 ;;                  2   13[COMRAM] int 
   730 ;; Registers used:
   731 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   732 ;; Tracked objects:
   733 ;;		On entry : 0/0
   734 ;;		On exit  : 0/0
   735 ;;		Unchanged: 0/0
   736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   737 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   740 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   741 ;;Total ram usage:        6 bytes
   742 ;; Hardware stack levels used:    1
   743 ;; Hardware stack levels required when called:    5
   744 ;; This function calls:
   745 ;;		_fputc
   746 ;; This function is called by:
   747 ;;		_vfprintf
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751                           	psect	text3
   752  001164                     __ptext3:
   753                           	opt callstack 0
   754  001164                     _vfpfcnvrt:
   755                           	opt callstack 23
   756                           
   757                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   758                           
   759                           ;incstack = 0
   760  001164  C03F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   761  001168  C040  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   762  00116C  CFDE FFF6          	movff	postinc2,tblptrl
   763  001170  CFDD FFF7          	movff	postdec2,tblptrh
   764  001174                     	if	0	;tblptru may be non-zero
   765  001174                     	endif
   766  001174                     	if	0	;tblptru may be non-zero
   767  001174                     	endif
   768  001174  0008               	tblrd		*
   769  001176  50F5               	movf	tablat,w,c
   770  001178  0A25               	xorlw	37
   771  00117A  A4D8               	btfss	status,2,c
   772  00117C  D040               	goto	l1130
   773                           
   774                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   775  00117E  C03F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   776  001182  C040  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   777  001186  2ADE               	incf	postinc2,f,c
   778  001188  0E00               	movlw	0
   779  00118A  22DD               	addwfc	postdec2,f,c
   780                           
   781                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   782  00118C  0E00               	movlw	0
   783  00118E  6E2B               	movwf	_width+1,c
   784  001190  0E00               	movlw	0
   785  001192  6E2A               	movwf	_width,c
   786  001194  C02A  F02E         	movff	_width,_flags
   787  001198  C02B  F02F         	movff	_width+1,_flags+1
   788                           
   789                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   790  00119C  682C               	setf	_prec,c
   791  00119E  682D               	setf	_prec+1,c
   792                           
   793                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
   794  0011A0  C03F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   795  0011A4  C040  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   796  0011A8  CFDE FFF6          	movff	postinc2,tblptrl
   797  0011AC  CFDD FFF7          	movff	postdec2,tblptrh
   798  0011B0                     	if	0	;tblptru may be non-zero
   799  0011B0                     	endif
   800  0011B0                     	if	0	;tblptru may be non-zero
   801  0011B0                     	endif
   802  0011B0  0008               	tblrd		*
   803  0011B2  50F5               	movf	tablat,w,c
   804  0011B4  0A25               	xorlw	37
   805  0011B6  A4D8               	btfss	status,2,c
   806  0011B8  D016               	goto	l1124
   807                           
   808                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
   809  0011BA  C03F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   810  0011BE  C040  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   811  0011C2  2ADE               	incf	postinc2,f,c
   812  0011C4  0E00               	movlw	0
   813  0011C6  22DD               	addwfc	postdec2,f,c
   814                           
   815                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
   816  0011C8  0E00               	movlw	0
   817  0011CA  6E35               	movwf	fputc@c+1,c
   818  0011CC  0E25               	movlw	37
   819  0011CE  6E34               	movwf	fputc@c,c
   820  0011D0  C03D  F036         	movff	vfpfcnvrt@fp,fputc@fp
   821  0011D4  C03E  F037         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   822  0011D8  EC19  F009         	call	_fputc	;wreg free
   823  0011DC                     l1120:
   824                           
   825                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
   826  0011DC  0E00               	movlw	0
   827  0011DE  6E3E               	movwf	?_vfpfcnvrt+1,c
   828  0011E0  0E01               	movlw	1
   829  0011E2  6E3D               	movwf	?_vfpfcnvrt,c
   830  0011E4  0012               	return	
   831  0011E6                     l1124:
   832                           
   833                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
   834  0011E6  C03F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   835  0011EA  C040  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   836  0011EE  2ADE               	incf	postinc2,f,c
   837  0011F0  0E00               	movlw	0
   838  0011F2  22DD               	addwfc	postdec2,f,c
   839                           
   840                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
   841  0011F4  0E00               	movlw	0
   842  0011F6  6E3E               	movwf	?_vfpfcnvrt+1,c
   843  0011F8  0E00               	movlw	0
   844  0011FA  6E3D               	movwf	?_vfpfcnvrt,c
   845  0011FC  0012               	return	
   846  0011FE                     l1130:
   847                           
   848                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
   849  0011FE  C03F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   850  001202  C040  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   851  001206  CFDE FFF6          	movff	postinc2,tblptrl
   852  00120A  CFDD FFF7          	movff	postdec2,tblptrh
   853  00120E                     	if	0	;tblptru may be non-zero
   854  00120E                     	endif
   855  00120E                     	if	0	;tblptru may be non-zero
   856  00120E                     	endif
   857  00120E  0008               	tblrd		*
   858  001210  50F5               	movf	tablat,w,c
   859  001212  6E34               	movwf	fputc@c,c
   860  001214  6A35               	clrf	fputc@c+1,c
   861  001216  C03D  F036         	movff	vfpfcnvrt@fp,fputc@fp
   862  00121A  C03E  F037         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   863  00121E  EC19  F009         	call	_fputc	;wreg free
   864                           
   865                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
   866  001222  C03F  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   867  001226  C040  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   868  00122A  2ADE               	incf	postinc2,f,c
   869  00122C  0E00               	movlw	0
   870  00122E  22DD               	addwfc	postdec2,f,c
   871  001230  D7D5               	goto	l1120
   872  001232                     __end_of_vfpfcnvrt:
   873                           	opt callstack 0
   874                           
   875 ;; *************** function _fputc *****************
   876 ;; Defined at:
   877 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;  c               2    4[COMRAM] int 
   880 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
   881 ;;		 -> NULL(0), 
   882 ;; Auto vars:     Size  Location     Type
   883 ;;		None
   884 ;; Return value:  Size  Location     Type
   885 ;;                  2    4[COMRAM] int 
   886 ;; Registers used:
   887 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   893 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   895 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   896 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   897 ;;Total ram usage:        9 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; Hardware stack levels required when called:    4
   900 ;; This function calls:
   901 ;;		_putch
   902 ;; This function is called by:
   903 ;;		_vfpfcnvrt
   904 ;; This function uses a non-reentrant model
   905 ;;
   906                           
   907                           	psect	text4
   908  001232                     __ptext4:
   909                           	opt callstack 0
   910  001232                     _fputc:
   911                           	opt callstack 23
   912                           
   913                           ;incstack = 0
   914  001232  5036               	movf	fputc@fp,w,c
   915  001234  1037               	iorwf	fputc@fp+1,w,c
   916  001236  B4D8               	btfsc	status,2,c
   917  001238  D004               	goto	u230
   918  00123A  5036               	movf	fputc@fp,w,c
   919  00123C  1037               	iorwf	fputc@fp+1,w,c
   920  00123E  A4D8               	btfss	status,2,c
   921  001240  D004               	goto	l1098
   922  001242                     u230:
   923  001242  5034               	movf	fputc@c,w,c
   924  001244  ECF6  F009         	call	_putch
   925  001248  0012               	return	
   926  00124A                     l1098:
   927  00124A  EE20 F004          	lfsr	2,4
   928  00124E  5036               	movf	fputc@fp,w,c
   929  001250  26D9               	addwf	fsr2l,f,c
   930  001252  5037               	movf	fputc@fp+1,w,c
   931  001254  22DA               	addwfc	fsr2h,f,c
   932  001256  50DE               	movf	postinc2,w,c
   933  001258  10DE               	iorwf	postinc2,w,c
   934  00125A  B4D8               	btfsc	status,2,c
   935  00125C  D016               	goto	u250
   936  00125E  EE20 F004          	lfsr	2,4
   937  001262  5036               	movf	fputc@fp,w,c
   938  001264  26D9               	addwf	fsr2l,f,c
   939  001266  5037               	movf	fputc@fp+1,w,c
   940  001268  22DA               	addwfc	fsr2h,f,c
   941  00126A  EE10 F002          	lfsr	1,2
   942  00126E  5036               	movf	fputc@fp,w,c
   943  001270  26E1               	addwf	fsr1l,f,c
   944  001272  5037               	movf	fputc@fp+1,w,c
   945  001274  22E2               	addwfc	fsr1h,f,c
   946  001276  50DE               	movf	postinc2,w,c
   947  001278  5CE6               	subwf	postinc1,w,c
   948  00127A  50E6               	movf	postinc1,w,c
   949  00127C  0A80               	xorlw	128
   950  00127E  6E3C               	movwf	(??_fputc+4)& (0+255),c
   951  001280  50DE               	movf	postinc2,w,c
   952  001282  0A80               	xorlw	128
   953  001284  583C               	subwfb	(??_fputc+4)& (0+255),w,c
   954  001286  B0D8               	btfsc	status,0,c
   955  001288  0012               	return	
   956  00128A                     u250:
   957  00128A  EE20 F002          	lfsr	2,2
   958  00128E  5036               	movf	fputc@fp,w,c
   959  001290  26D9               	addwf	fsr2l,f,c
   960  001292  5037               	movf	fputc@fp+1,w,c
   961  001294  22DA               	addwfc	fsr2h,f,c
   962  001296  2ADE               	incf	postinc2,f,c
   963  001298  0E00               	movlw	0
   964  00129A  22DD               	addwfc	postdec2,f,c
   965  00129C  0012               	return		;funcret
   966  00129E                     __end_of_fputc:
   967                           	opt callstack 0
   968                           
   969 ;; *************** function _putch *****************
   970 ;; Defined at:
   971 ;;		line 102 in file "lcd.c"
   972 ;; Parameters:    Size  Location     Type
   973 ;;  data            1    wreg     unsigned char 
   974 ;; Auto vars:     Size  Location     Type
   975 ;;  data            1    3[COMRAM] unsigned char 
   976 ;; Return value:  Size  Location     Type
   977 ;;                  1    wreg      void 
   978 ;; Registers used:
   979 ;;		wreg, status,2, status,0, cstack
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;Total ram usage:        1 bytes
   990 ;; Hardware stack levels used:    1
   991 ;; Hardware stack levels required when called:    3
   992 ;; This function calls:
   993 ;;		_send_byte
   994 ;; This function is called by:
   995 ;;		_fputc
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999                           	psect	text5
  1000  0013EC                     __ptext5:
  1001                           	opt callstack 0
  1002  0013EC                     _putch:
  1003                           	opt callstack 23
  1004                           
  1005                           ;incstack = 0
  1006                           ;putch@data stored from wreg
  1007  0013EC  6E33               	movwf	putch@data,c
  1008                           
  1009                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
  1010  0013EE  848C               	bsf	3980,2,c	;volatile
  1011                           
  1012                           ;lcd.c: 104:     send_byte((unsigned char)data);
  1013  0013F0  5033               	movf	putch@data,w,c
  1014  0013F2  ECED  F009         	call	_send_byte
  1015  0013F6  0012               	return		;funcret
  1016  0013F8                     __end_of_putch:
  1017                           	opt callstack 0
  1018                           
  1019 ;; *************** function _initLCD *****************
  1020 ;; Defined at:
  1021 ;;		line 69 in file "lcd.c"
  1022 ;; Parameters:    Size  Location     Type
  1023 ;;		None
  1024 ;; Auto vars:     Size  Location     Type
  1025 ;;		None
  1026 ;; Return value:  Size  Location     Type
  1027 ;;                  1    wreg      void 
  1028 ;; Registers used:
  1029 ;;		wreg, status,2, status,0, cstack
  1030 ;; Tracked objects:
  1031 ;;		On entry : 0/0
  1032 ;;		On exit  : 0/0
  1033 ;;		Unchanged: 0/0
  1034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1037 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1038 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1039 ;;Total ram usage:        1 bytes
  1040 ;; Hardware stack levels used:    1
  1041 ;; Hardware stack levels required when called:    4
  1042 ;; This function calls:
  1043 ;;		_lcdInst
  1044 ;;		_send_byte
  1045 ;;		_send_nibble
  1046 ;; This function is called by:
  1047 ;;		_main
  1048 ;; This function uses a non-reentrant model
  1049 ;;
  1050                           
  1051                           	psect	text6
  1052  00129E                     __ptext6:
  1053                           	opt callstack 0
  1054  00129E                     _initLCD:
  1055                           	opt callstack 26
  1056                           
  1057                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
  1058                           
  1059                           ;incstack = 0
  1060  00129E  0E31               	movlw	49
  1061  0012A0  6E34               	movwf	??_initLCD& (0+255),c
  1062  0012A2  0EB2               	movlw	178
  1063  0012A4                     u447:
  1064  0012A4  2EE8               	decfsz	wreg,f,c
  1065  0012A6  D7FE               	bra	u447
  1066  0012A8  2E34               	decfsz	??_initLCD& (0+255),f,c
  1067  0012AA  D7FC               	bra	u447
  1068  0012AC  D000               	nop2	
  1069                           
  1070                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
  1071  0012AE  948C               	bcf	3980,2,c	;volatile
  1072                           
  1073                           ;lcd.c: 74:     send_nibble(0b0011);
  1074  0012B0  0E03               	movlw	3
  1075  0012B2  ECE2  F009         	call	_send_nibble
  1076                           
  1077                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
  1078  0012B6  0E11               	movlw	17
  1079  0012B8  6E34               	movwf	??_initLCD& (0+255),c
  1080  0012BA  0E3A               	movlw	58
  1081  0012BC                     u457:
  1082  0012BC  2EE8               	decfsz	wreg,f,c
  1083  0012BE  D7FE               	bra	u457
  1084  0012C0  2E34               	decfsz	??_initLCD& (0+255),f,c
  1085  0012C2  D7FC               	bra	u457
  1086  0012C4  D000               	nop2	
  1087                           
  1088                           ;lcd.c: 76:     send_nibble(0b0011);
  1089  0012C6  0E03               	movlw	3
  1090  0012C8  ECE2  F009         	call	_send_nibble
  1091                           
  1092                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  1093  0012CC  0E7D               	movlw	125
  1094  0012CE                     u467:
  1095  0012CE  2EE8               	decfsz	wreg,f,c
  1096  0012D0  D7FE               	bra	u467
  1097                           
  1098                           ;lcd.c: 78:     send_byte(0b00110010);
  1099  0012D2  0E32               	movlw	50
  1100  0012D4  ECED  F009         	call	_send_byte
  1101                           
  1102                           ;lcd.c: 80:     send_byte(0b00101000);
  1103  0012D8  0E28               	movlw	40
  1104  0012DA  ECED  F009         	call	_send_byte
  1105                           
  1106                           ;lcd.c: 81:     send_byte(0b00001000);
  1107  0012DE  0E08               	movlw	8
  1108  0012E0  ECED  F009         	call	_send_byte
  1109                           
  1110                           ;lcd.c: 82:     send_byte(0b00000001);
  1111  0012E4  0E01               	movlw	1
  1112  0012E6  ECED  F009         	call	_send_byte
  1113                           
  1114                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
  1115  0012EA  0E11               	movlw	17
  1116  0012EC  6E34               	movwf	??_initLCD& (0+255),c
  1117  0012EE  0E3A               	movlw	58
  1118  0012F0                     u477:
  1119  0012F0  2EE8               	decfsz	wreg,f,c
  1120  0012F2  D7FE               	bra	u477
  1121  0012F4  2E34               	decfsz	??_initLCD& (0+255),f,c
  1122  0012F6  D7FC               	bra	u477
  1123  0012F8  D000               	nop2	
  1124                           
  1125                           ;lcd.c: 84:     send_byte(0b00000110);
  1126  0012FA  0E06               	movlw	6
  1127  0012FC  ECED  F009         	call	_send_byte
  1128                           
  1129                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  1130  001300  0E0F               	movlw	15
  1131  001302  ECFC  F009         	call	_lcdInst
  1132  001306  0012               	return		;funcret
  1133  001308                     __end_of_initLCD:
  1134                           	opt callstack 0
  1135                           
  1136 ;; *************** function _lcdInst *****************
  1137 ;; Defined at:
  1138 ;;		line 64 in file "lcd.c"
  1139 ;; Parameters:    Size  Location     Type
  1140 ;;  data            1    wreg     unsigned char 
  1141 ;; Auto vars:     Size  Location     Type
  1142 ;;  data            1    3[COMRAM] unsigned char 
  1143 ;; Return value:  Size  Location     Type
  1144 ;;                  1    wreg      void 
  1145 ;; Registers used:
  1146 ;;		wreg, status,2, status,0, cstack
  1147 ;; Tracked objects:
  1148 ;;		On entry : 0/0
  1149 ;;		On exit  : 0/0
  1150 ;;		Unchanged: 0/0
  1151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1153 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1155 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1156 ;;Total ram usage:        1 bytes
  1157 ;; Hardware stack levels used:    1
  1158 ;; Hardware stack levels required when called:    3
  1159 ;; This function calls:
  1160 ;;		_send_byte
  1161 ;; This function is called by:
  1162 ;;		_main
  1163 ;;		_initLCD
  1164 ;;		_lcd_shift_cursor
  1165 ;;		_lcd_shift_display
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169                           	psect	text7
  1170  0013F8                     __ptext7:
  1171                           	opt callstack 0
  1172  0013F8                     _lcdInst:
  1173                           	opt callstack 27
  1174                           
  1175                           ;incstack = 0
  1176                           ;lcdInst@data stored from wreg
  1177  0013F8  6E33               	movwf	lcdInst@data,c
  1178                           
  1179                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
  1180  0013FA  948C               	bcf	3980,2,c	;volatile
  1181                           
  1182                           ;lcd.c: 66:     send_byte(data);
  1183  0013FC  5033               	movf	lcdInst@data,w,c
  1184  0013FE  ECED  F009         	call	_send_byte
  1185  001402  0012               	return		;funcret
  1186  001404                     __end_of_lcdInst:
  1187                           	opt callstack 0
  1188                           
  1189 ;; *************** function _send_byte *****************
  1190 ;; Defined at:
  1191 ;;		line 55 in file "lcd.c"
  1192 ;; Parameters:    Size  Location     Type
  1193 ;;  data            1    wreg     unsigned char 
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;  data            1    2[COMRAM] unsigned char 
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  1    wreg      void 
  1198 ;; Registers used:
  1199 ;;		wreg, status,2, status,0, cstack
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1206 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1208 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1209 ;;Total ram usage:        1 bytes
  1210 ;; Hardware stack levels used:    1
  1211 ;; Hardware stack levels required when called:    2
  1212 ;; This function calls:
  1213 ;;		_send_nibble
  1214 ;; This function is called by:
  1215 ;;		_lcdInst
  1216 ;;		_initLCD
  1217 ;;		_putch
  1218 ;; This function uses a non-reentrant model
  1219 ;;
  1220                           
  1221                           	psect	text8
  1222  0013DA                     __ptext8:
  1223                           	opt callstack 0
  1224  0013DA                     _send_byte:
  1225                           	opt callstack 23
  1226                           
  1227                           ;incstack = 0
  1228                           ;send_byte@data stored from wreg
  1229  0013DA  6E32               	movwf	send_byte@data,c
  1230                           
  1231                           ;lcd.c: 57:     send_nibble(data >> 4);
  1232  0013DC  3832               	swapf	send_byte@data,w,c
  1233  0013DE  0B0F               	andlw	15
  1234  0013E0  ECE2  F009         	call	_send_nibble
  1235                           
  1236                           ;lcd.c: 60:     send_nibble(data);
  1237  0013E4  5032               	movf	send_byte@data,w,c
  1238  0013E6  ECE2  F009         	call	_send_nibble
  1239  0013EA  0012               	return		;funcret
  1240  0013EC                     __end_of_send_byte:
  1241                           	opt callstack 0
  1242                           
  1243 ;; *************** function _send_nibble *****************
  1244 ;; Defined at:
  1245 ;;		line 44 in file "lcd.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;  data            1    wreg     unsigned char 
  1248 ;; Auto vars:     Size  Location     Type
  1249 ;;  data            1    1[COMRAM] unsigned char 
  1250 ;; Return value:  Size  Location     Type
  1251 ;;                  1    wreg      void 
  1252 ;; Registers used:
  1253 ;;		wreg, status,2, status,0, cstack
  1254 ;; Tracked objects:
  1255 ;;		On entry : 0/0
  1256 ;;		On exit  : 0/0
  1257 ;;		Unchanged: 0/0
  1258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1260 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1262 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1263 ;;Total ram usage:        1 bytes
  1264 ;; Hardware stack levels used:    1
  1265 ;; Hardware stack levels required when called:    1
  1266 ;; This function calls:
  1267 ;;		_pulse_e
  1268 ;; This function is called by:
  1269 ;;		_send_byte
  1270 ;;		_initLCD
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           	psect	text9
  1275  0013C4                     __ptext9:
  1276                           	opt callstack 0
  1277  0013C4                     _send_nibble:
  1278                           	opt callstack 23
  1279                           
  1280                           ;incstack = 0
  1281                           ;send_nibble@data stored from wreg
  1282  0013C4  6E31               	movwf	send_nibble@data,c
  1283                           
  1284                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
  1285  0013C6  508C               	movf	3980,w,c	;volatile
  1286  0013C8  0B0F               	andlw	15
  1287  0013CA  6E8C               	movwf	3980,c	;volatile
  1288                           
  1289                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
  1290  0013CC  3831               	swapf	send_nibble@data,w,c
  1291  0013CE  0BF0               	andlw	240
  1292  0013D0  108C               	iorwf	3980,w,c	;volatile
  1293  0013D2  6E8C               	movwf	3980,c	;volatile
  1294                           
  1295                           ;lcd.c: 48:     pulse_e();
  1296  0013D4  ECAD  F009         	call	_pulse_e	;wreg free
  1297  0013D8  0012               	return		;funcret
  1298  0013DA                     __end_of_send_nibble:
  1299                           	opt callstack 0
  1300                           
  1301 ;; *************** function _pulse_e *****************
  1302 ;; Defined at:
  1303 ;;		line 28 in file "lcd.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;		None
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  interruptSta    1    0[COMRAM] unsigned char 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  1    wreg      void 
  1310 ;; Registers used:
  1311 ;;		wreg
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1320 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;Total ram usage:        1 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; This function calls:
  1324 ;;		Nothing
  1325 ;; This function is called by:
  1326 ;;		_send_nibble
  1327 ;; This function uses a non-reentrant model
  1328 ;;
  1329                           
  1330                           	psect	text10
  1331  00135A                     __ptext10:
  1332                           	opt callstack 0
  1333  00135A                     _pulse_e:
  1334                           	opt callstack 23
  1335                           
  1336                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
  1337                           
  1338                           ;incstack = 0
  1339  00135A  0E00               	movlw	0
  1340  00135C  BEF2               	btfsc	4082,7,c	;volatile
  1341  00135E  0E01               	movlw	1
  1342  001360  6E30               	movwf	pulse_e@interruptState,c
  1343                           
  1344                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
  1345  001362  9EF2               	bcf	4082,7,c	;volatile
  1346                           
  1347                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
  1348  001364  868C               	bsf	3980,3,c	;volatile
  1349                           
  1350                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  1351  001366  0E14               	movlw	20
  1352  001368                     u487:
  1353  001368  2EE8               	decfsz	wreg,f,c
  1354  00136A  D7FE               	bra	u487
  1355  00136C  D000               	nop2	
  1356                           
  1357                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
  1358  00136E  968C               	bcf	3980,3,c	;volatile
  1359                           
  1360                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  1361  001370  0E53               	movlw	83
  1362  001372                     u497:
  1363  001372  2EE8               	decfsz	wreg,f,c
  1364  001374  D7FE               	bra	u497
  1365  001376  F000               	nop	
  1366                           
  1367                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
  1368  001378  B030               	btfsc	pulse_e@interruptState,0,c
  1369  00137A  D002               	bra	u15
  1370  00137C  9EF2               	bcf	4082,7,c	;volatile
  1371  00137E  D001               	bra	u16
  1372  001380                     u15:
  1373  001380  8EF2               	bsf	4082,7,c	;volatile
  1374  001382                     u16:
  1375  001382  0012               	return		;funcret
  1376  001384                     __end_of_pulse_e:
  1377                           	opt callstack 0
  1378                           
  1379                           	psect	rparam
  1380  0000                     tosu	equ	0xFFF
  1381                           tosh	equ	0xFFE
  1382                           tosl	equ	0xFFD
  1383                           stkptr	equ	0xFFC
  1384                           pclatu	equ	0xFFB
  1385                           pclath	equ	0xFFA
  1386                           pcl	equ	0xFF9
  1387                           tblptru	equ	0xFF8
  1388                           tblptrh	equ	0xFF7
  1389                           tblptrl	equ	0xFF6
  1390                           tablat	equ	0xFF5
  1391                           prodh	equ	0xFF4
  1392                           prodl	equ	0xFF3
  1393                           indf0	equ	0xFEF
  1394                           postinc0	equ	0xFEE
  1395                           postdec0	equ	0xFED
  1396                           preinc0	equ	0xFEC
  1397                           plusw0	equ	0xFEB
  1398                           fsr0h	equ	0xFEA
  1399                           fsr0l	equ	0xFE9
  1400                           wreg	equ	0xFE8
  1401                           indf1	equ	0xFE7
  1402                           postinc1	equ	0xFE6
  1403                           postdec1	equ	0xFE5
  1404                           preinc1	equ	0xFE4
  1405                           plusw1	equ	0xFE3
  1406                           fsr1h	equ	0xFE2
  1407                           fsr1l	equ	0xFE1
  1408                           bsr	equ	0xFE0
  1409                           indf2	equ	0xFDF
  1410                           postinc2	equ	0xFDE
  1411                           postdec2	equ	0xFDD
  1412                           preinc2	equ	0xFDC
  1413                           plusw2	equ	0xFDB
  1414                           fsr2h	equ	0xFDA
  1415                           fsr2l	equ	0xFD9
  1416                           status	equ	0xFD8


Data Sizes:
    Strings     16
    Constant    6
    Data        0
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     41      88
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_4(CODE[7]), STR_3(CODE[9]), STR_2(CODE[4]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    S892_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_4(CODE[7]), STR_3(CODE[9]), STR_2(CODE[4]), STR_1(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_4(CODE[7]), STR_3(CODE[9]), STR_2(CODE[4]), STR_1(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _fputc->_putch
    _putch->_send_byte
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    2327
                                             33 COMRAM     8     8      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               6     4      2    1923
                                             27 COMRAM     6     4      2
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    1567
                                             19 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           40    34      6    1217
                                             13 COMRAM     6     0      6
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     791
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      75
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     165
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      75
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (6) _send_byte                                            1     1      0      60
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (7) _send_nibble                                          1     1      0      30
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (8) _pulse_e                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
             _send_byte
               _send_nibble
                 _pulse_e

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     29      58       1       69.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      58      34        0.0%
DATA                 0      0      58       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Apr 07 18:37:16 2019

                     u15 1380                       u16 1382              __CFG_CPD$ON 000000  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000  
           __CFG_CPB$OFF 000000                      u230 1242                      u250 128A  
                    u407 10E2                      u417 1102                      u290 103A  
                    u427 112C                      u437 114C                      u447 12A4  
                    u367 1056                      u457 12BC                      u377 1076  
                    u298 103C                      u467 12CE                      u387 1098  
                    u477 12F0                      u397 10B8                      u487 1368  
                    u497 1372                      wreg 000FE8             __CFG_IESO$ON 000000  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l1120 11DC  
                   l1130 11FE                     l1210 115A                     l1124 11E6  
                   l1142 131A                     l1144 133E                     l1170 1084  
                   l1156 1030                     l1182 10C6                     l1098 124A  
                   STR_1 1014                     STR_2 1010                     STR_3 1007  
                   STR_4 1009                     _LATD 000F8C                     _dbuf 0001  
                   _main 1018                     _prec 002C                     _time 0021  
                   _nout 0028                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr1l 000FE1                     fsr2l 000FD9                     start 0000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ?_main 0030  
           main@ir_break 0053             vfpfcnvrt@fmt 003F                    _TRISA 000F92  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_lcdInst 1404  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000          __end_of_initLCD 1308  
         __CFG_EBTRB$OFF 000000                    _flags 002E                    _fputc 1232  
                  _width 002A                    _putch 13EC                    tablat 000FF5  
        send_nibble@data 0031          __end_of_pulse_e 1384                    status 000FD8  
         __CFG_PBADEN$ON 000000          __initialization 13AA             __end_of_main 1164  
                 ??_main 0051            __activetblptr 000001             ?_send_nibble 0030  
                 ?_fputc 0034                   ?_putch 0030            main@lastState 0055  
                 _SSPADD 000FC8                   _SSPBUF 000FC9           __CFG_XINST$OFF 000000  
           vfprintf@cfmt 0049           __CFG_STVREN$ON 000000                   clear_0 13B0  
              ??_lcdInst 0033                   _printf 1384                   main@ir 0054  
              ??_initLCD 0034                   fputc@c 0034             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
       __end_of_vfprintf 135A                ??_pulse_e 0030    pulse_e@interruptState 0030  
             __accesstop 0080  __end_of__initialization 13B6            ___rparam_used 000001  
         __pcstackCOMRAM 0030            __end_of_fputc 129E            __end_of_putch 13F8  
                ??_fputc 0038                  ??_putch 0033       __size_of_send_byte 0012  
                ?_printf 004B       __size_of_vfpfcnvrt 00CE                  _SSPCON1 000FC6  
                _SSPCON2 000FC5                  _SSPSTAT 000FC7     __size_of_send_nibble 0016  
                __Hparam 0000                  __Lparam 0000                ?_vfprintf 0043  
           __psmallconst 1000                  __pcinit 13AA                  __ramtop 1000  
                _lcdInst 13F8                  __ptext0 1018                  __ptext1 1384  
                __ptext2 1308                  __ptext3 1164                  __ptext4 1232  
                __ptext5 13EC                  __ptext6 129E                  __ptext7 13F8  
                __ptext8 13DA                  __ptext9 13C4          __size_of_printf 0026  
                _initLCD 129E                  _pulse_e 135A     end_of_initialization 13B6  
  __end_of_LCD_SIZE_HORZ 1007        __end_of_send_byte 13EC    __end_of_LCD_SIZE_VERT 1006  
                fputc@fp 0036        __end_of_vfpfcnvrt 1232                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_vfprintf 0049                _PORTAbits 000F80                _TRISCbits 000F94  
          send_byte@data 0032              vfpfcnvrt@ap 0041              vfpfcnvrt@fp 003D  
         __end_of_printf 13AA      start_initialization 13AA              vfprintf@fmt 0045  
       __CFG_LPT1OSC$OFF 000000                 ??_printf 004D              __pbssCOMRAM 0001  
      __CFG_CCP2MX$PORTC 000000                 ?_lcdInst 0030        __size_of_vfprintf 0052  
               ?_initLCD 0030              __smallconst 1000            ??_send_nibble 0031  
               ?_pulse_e 0030           __size_of_fputc 006C           __size_of_putch 000C  
               _LATDbits 000F8C                _send_byte 13DA           _LCD_LINE1_ADDR 1004  
         _LCD_LINE2_ADDR 1003           _LCD_LINE3_ADDR 1002           _LCD_LINE4_ADDR 1001  
       __CFG_WDTPS$32768 000000                _vfpfcnvrt 1164   __end_of_LCD_LINE1_ADDR 1005  
 __end_of_LCD_LINE2_ADDR 1004   __end_of_LCD_LINE3_ADDR 1003   __end_of_LCD_LINE4_ADDR 1002  
    __end_of_send_nibble 13DA               ?_send_byte 0030                 __Hrparam 0000  
             vfprintf@ap 0047                 __Lrparam 0000               vfprintf@fp 0043  
           __Lsmallconst 1000       __CFG_BOREN$SBORDIS 000000               ?_vfpfcnvrt 003D  
       __size_of_lcdInst 000C         __size_of_initLCD 006A                 __ptext10 135A  
       __size_of_pulse_e 002A            __size_of_main 014C                 _vfprintf 1308  
              printf@fmt 004B          main@sensorState 0057                putch@data 0033  
             _INTCONbits 000FF2              _send_nibble 13C4            _LCD_SIZE_HORZ 1006  
          _LCD_SIZE_VERT 1005              ??_send_byte 0032                 printf@ap 004F  
            ??_vfpfcnvrt 0043              lcdInst@data 0033              _SSPCON1bits 000FC6  
            _SSPCON2bits 000FC5  
