

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Dec 11 00:43:08 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16  0000                     
    17                           ; Version 1.42
    18                           ; Generated 13/04/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F4620 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     _TRISD	set	3989
    52  0000                     _OSCCON	set	4051
    53  0000                     _LATDbits	set	3980
    54  0000                     _LATD	set	3980
    55                           
    56                           	psect	smallconst
    57  001000                     __psmallconst:
    58                           	opt stack 0
    59  001000  00                 	db	0
    60  001001                     STR_1:
    61  001001  48                 	db	72	;'H'
    62  001002  65                 	db	101	;'e'
    63  001003  6C                 	db	108	;'l'
    64  001004  6C                 	db	108	;'l'
    65  001005  6F                 	db	111	;'o'
    66  001006  20                 	db	32
    67  001007  57                 	db	87	;'W'
    68  001008  6F                 	db	111	;'o'
    69  001009  72                 	db	114	;'r'
    70  00100A  6C                 	db	108	;'l'
    71  00100B  64                 	db	100	;'d'
    72  00100C  21                 	db	33
    73  00100D  20                 	db	32
    74  00100E  3A                 	db	58	;':'
    75  00100F  29                 	db	41
    76  001010  00                 	db	0
    77                           
    78                           ; #config settings
    79  001011  00                 	db	0	; dummy byte at the end
    80  0000                     
    81                           	psect	cinit
    82  001106                     __pcinit:
    83                           	opt stack 0
    84  001106                     start_initialization:
    85                           	opt stack 0
    86  001106                     __initialization:
    87                           	opt stack 0
    88  001106                     end_of_initialization:
    89                           	opt stack 0
    90  001106                     __end_of__initialization:
    91                           	opt stack 0
    92  001106  0E00               	movlw	low (__Lsmallconst shr (0+16))
    93  001108  6EF8               	movwf	tblptru,c
    94  00110A  0E10               	movlw	high __Lsmallconst
    95  00110C  6EF7               	movwf	tblptrh,c
    96  00110E  0100               	movlb	0
    97  001110  EF6C  F008         	goto	_main	;jump to C main() function
    98                           tblptru	equ	0xFF8
    99                           tblptrh	equ	0xFF7
   100                           
   101                           	psect	cstackCOMRAM
   102  000001                     __pcstackCOMRAM:
   103                           	opt stack 0
   104  000001                     lcdNibble@temp:
   105                           	opt stack 0
   106                           
   107                           ; 1 bytes @ 0x0
   108  000001                     	ds	1
   109  000002                     lcdNibble@data:
   110                           	opt stack 0
   111                           
   112                           ; 1 bytes @ 0x1
   113  000002                     	ds	1
   114  000003                     lcdInst@data:
   115                           	opt stack 0
   116  000003                     putch@data:
   117                           	opt stack 0
   118                           
   119                           ; 1 bytes @ 0x2
   120  000003                     	ds	1
   121  000004                     ??_initLCD:
   122  000004                     ?_printf:
   123                           	opt stack 0
   124  000004                     printf@f:
   125                           	opt stack 0
   126                           
   127                           ; 2 bytes @ 0x3
   128  000004                     	ds	2
   129  000006                     printf@ap:
   130                           	opt stack 0
   131                           
   132                           ; 2 bytes @ 0x5
   133  000006                     	ds	2
   134  000008                     printf@c:
   135                           	opt stack 0
   136                           
   137                           ; 1 bytes @ 0x7
   138  000008                     	ds	1
   139  000009                     tblptru	equ	0xFF8
   140                           tblptrh	equ	0xFF7
   141                           
   142                           ; 1 bytes @ 0x8
   143 ;;
   144 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   145 ;;
   146 ;; *************** function _main *****************
   147 ;; Defined at:
   148 ;;		line 92 in file "main.c"
   149 ;; Parameters:    Size  Location     Type
   150 ;;		None
   151 ;; Auto vars:     Size  Location     Type
   152 ;;		None
   153 ;; Return value:  Size  Location     Type
   154 ;;                  1    wreg      void 
   155 ;; Registers used:
   156 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   157 ;; Tracked objects:
   158 ;;		On entry : 0/0
   159 ;;		On exit  : 0/0
   160 ;;		Unchanged: 0/0
   161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   166 ;;Total ram usage:        0 bytes
   167 ;; Hardware stack levels required when called:    3
   168 ;; This function calls:
   169 ;;		_initLCD
   170 ;;		_printf
   171 ;; This function is called by:
   172 ;;		Startup code after reset
   173 ;; This function uses a non-reentrant model
   174 ;;
   175                           
   176                           	psect	text0
   177  0010D8                     __ptext0:
   178                           	opt stack 0
   179  0010D8                     _main:
   180                           	opt stack 28
   181                           
   182                           ;main.c: 94: OSCCON = 0xF2;
   183                           
   184                           ;incstack = 0
   185  0010D8  0EF2               	movlw	242
   186  0010DA  6ED3               	movwf	4051,c	;volatile
   187                           
   188                           ;main.c: 97: TRISD = 0x00;
   189  0010DC  0E00               	movlw	0
   190  0010DE  6E95               	movwf	3989,c	;volatile
   191                           
   192                           ;main.c: 99: initLCD();
   193  0010E0  EC34  F008         	call	_initLCD	;wreg free
   194                           
   195                           ;main.c: 100: printf("Hello World! :)");
   196  0010E4  0E01               	movlw	low STR_1
   197  0010E6  6E04               	movwf	printf@f,c
   198  0010E8  0E10               	movlw	high STR_1
   199  0010EA  6E05               	movwf	printf@f+1,c
   200  0010EC  EC57  F008         	call	_printf	;wreg free
   201  0010F0                     l29:
   202  0010F0  D7FF               	goto	l29
   203  0010F2                     __end_of_main:
   204                           	opt stack 0
   205                           tblptru	equ	0xFF8
   206                           tblptrh	equ	0xFF7
   207                           
   208 ;; *************** function _printf *****************
   209 ;; Defined at:
   210 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
   211 ;; Parameters:    Size  Location     Type
   212 ;;  f               2    3[COMRAM] PTR const unsigned char 
   213 ;;		 -> STR_1(16), 
   214 ;; Auto vars:     Size  Location     Type
   215 ;;  tmpval          4    0        struct .
   216 ;;  cp              3    0        PTR const unsigned char 
   217 ;;  ap              2    5[COMRAM] PTR void [1]
   218 ;;		 -> ?_printf(2), 
   219 ;;  len             2    0        unsigned int 
   220 ;;  val             2    0        unsigned int 
   221 ;;  c               1    7[COMRAM] char 
   222 ;;  flag            1    0        unsigned char 
   223 ;;  prec            1    0        char 
   224 ;; Return value:  Size  Location     Type
   225 ;;                  2    3[COMRAM] int 
   226 ;; Registers used:
   227 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   228 ;; Tracked objects:
   229 ;;		On entry : 0/0
   230 ;;		On exit  : 0/0
   231 ;;		Unchanged: 0/0
   232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   233 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   234 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   236 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   237 ;;Total ram usage:        5 bytes
   238 ;; Hardware stack levels used:    1
   239 ;; Hardware stack levels required when called:    2
   240 ;; This function calls:
   241 ;;		_putch
   242 ;; This function is called by:
   243 ;;		_main
   244 ;; This function uses a non-reentrant model
   245 ;;
   246                           
   247                           	psect	text1
   248  0010AE                     __ptext1:
   249                           	opt stack 0
   250  0010AE                     _printf:
   251                           	opt stack 28
   252                           
   253                           ;doprnt.c: 466: va_list ap;
   254                           ;doprnt.c: 499: signed char c;
   255                           ;doprnt.c: 506: signed char prec;
   256                           ;doprnt.c: 508: unsigned char flag;
   257                           ;doprnt.c: 523: union {
   258                           ;doprnt.c: 524: unsigned long vd;
   259                           ;doprnt.c: 525: double integ;
   260                           ;doprnt.c: 526: } tmpval;
   261                           ;doprnt.c: 528: unsigned int val;
   262                           ;doprnt.c: 529: unsigned len;
   263                           ;doprnt.c: 530: const char * cp;
   264                           ;doprnt.c: 533: *ap = __va_start();
   265                           
   266                           ;incstack = 0
   267  0010AE  0E06               	movlw	low (?_printf+2)
   268  0010B0  6E06               	movwf	printf@ap,c
   269  0010B2  0E00               	movlw	high (?_printf+2)
   270  0010B4  6E07               	movwf	printf@ap+1,c
   271                           
   272                           ;doprnt.c: 536: while(c = *f++) {
   273  0010B6  D003               	goto	l722
   274  0010B8                     l720:
   275                           
   276                           ;doprnt.c: 540: {
   277                           ;doprnt.c: 541: (putch(c) );
   278  0010B8  5008               	movf	printf@c,w,c
   279  0010BA  EC79  F008         	call	_putch
   280  0010BE                     l722:
   281  0010BE  C004  FFF6         	movff	printf@f,tblptrl
   282  0010C2  C005  FFF7         	movff	printf@f+1,tblptrh
   283  0010C6  4A04               	infsnz	printf@f,f,c
   284  0010C8  2A05               	incf	printf@f+1,f,c
   285  0010CA                     	if	0	;tblptru may be non-zero
   286  0010CA                     	endif
   287  0010CA                     	if	0	;tblptru may be non-zero
   288  0010CA                     	endif
   289  0010CA  0008               	tblrd		*
   290  0010CC  CFF5 F008          	movff	tablat,printf@c
   291  0010D0  5008               	movf	printf@c,w,c
   292  0010D2  B4D8               	btfsc	status,2,c
   293  0010D4  0012               	return	
   294  0010D6  D7F0               	goto	l720
   295  0010D8                     __end_of_printf:
   296                           	opt stack 0
   297                           tblptru	equ	0xFF8
   298                           tblptrh	equ	0xFF7
   299                           tblptrl	equ	0xFF6
   300                           tablat	equ	0xFF5
   301                           status	equ	0xFD8
   302                           
   303 ;; *************** function _putch *****************
   304 ;; Defined at:
   305 ;;		line 86 in file "main.c"
   306 ;; Parameters:    Size  Location     Type
   307 ;;  data            1    wreg     unsigned char 
   308 ;; Auto vars:     Size  Location     Type
   309 ;;  data            1    2[COMRAM] unsigned char 
   310 ;; Return value:  Size  Location     Type
   311 ;;                  1    wreg      void 
   312 ;; Registers used:
   313 ;;		wreg, status,2, status,0, cstack
   314 ;; Tracked objects:
   315 ;;		On entry : 0/0
   316 ;;		On exit  : 0/0
   317 ;;		Unchanged: 0/0
   318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   322 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   323 ;;Total ram usage:        1 bytes
   324 ;; Hardware stack levels used:    1
   325 ;; Hardware stack levels required when called:    1
   326 ;; This function calls:
   327 ;;		_lcdNibble
   328 ;; This function is called by:
   329 ;;		_printf
   330 ;; This function uses a non-reentrant model
   331 ;;
   332                           
   333                           	psect	text2
   334  0010F2                     __ptext2:
   335                           	opt stack 0
   336  0010F2                     _putch:
   337                           	opt stack 28
   338                           
   339                           ;incstack = 0
   340                           ;putch@data stored from wreg
   341  0010F2  6E03               	movwf	putch@data,c
   342                           
   343                           ;main.c: 87: LATDbits.LATD2 = 1;
   344  0010F4  848C               	bsf	3980,2,c	;volatile
   345                           
   346                           ;main.c: 88: lcdNibble(data);
   347  0010F6  5003               	movf	putch@data,w,c
   348  0010F8  EC09  F008         	call	_lcdNibble
   349                           
   350                           ;main.c: 89: _delay((unsigned long)((100)*(8000000/4000000.0)));
   351  0010FC  0E42               	movlw	66
   352  0010FE                     u37:
   353  0010FE  2EE8               	decfsz	wreg,f,c
   354  001100  D7FE               	bra	u37
   355  001102  D000               	nop2	
   356  001104  0012               	return		;funcret
   357  001106                     __end_of_putch:
   358                           	opt stack 0
   359                           tblptru	equ	0xFF8
   360                           tblptrh	equ	0xFF7
   361                           tblptrl	equ	0xFF6
   362                           tablat	equ	0xFF5
   363                           wreg	equ	0xFE8
   364                           status	equ	0xFD8
   365                           
   366 ;; *************** function _initLCD *****************
   367 ;; Defined at:
   368 ;;		line 63 in file "main.c"
   369 ;; Parameters:    Size  Location     Type
   370 ;;		None
   371 ;; Auto vars:     Size  Location     Type
   372 ;;		None
   373 ;; Return value:  Size  Location     Type
   374 ;;                  1    wreg      void 
   375 ;; Registers used:
   376 ;;		wreg, status,2, status,0, cstack
   377 ;; Tracked objects:
   378 ;;		On entry : 0/0
   379 ;;		On exit  : 0/0
   380 ;;		Unchanged: 0/0
   381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   384 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   385 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   386 ;;Total ram usage:        1 bytes
   387 ;; Hardware stack levels used:    1
   388 ;; Hardware stack levels required when called:    2
   389 ;; This function calls:
   390 ;;		_lcdInst
   391 ;; This function is called by:
   392 ;;		_main
   393 ;; This function uses a non-reentrant model
   394 ;;
   395                           
   396                           	psect	text3
   397  001068                     __ptext3:
   398                           	opt stack 0
   399  001068                     _initLCD:
   400                           	opt stack 28
   401                           
   402                           ;main.c: 64: _delay((unsigned long)((15)*(8000000/4000.0)));
   403                           
   404                           ;incstack = 0
   405  001068  0E27               	movlw	39
   406  00106A  6E04               	movwf	??_initLCD& (0+255),c
   407  00106C  0EF5               	movlw	245
   408  00106E                     u47:
   409  00106E  2EE8               	decfsz	wreg,f,c
   410  001070  D7FE               	bra	u47
   411  001072  2E04               	decfsz	??_initLCD& (0+255),f,c
   412  001074  D7FC               	bra	u47
   413  001076  F000               	nop	
   414                           
   415                           ;main.c: 68: lcdInst(0b00110011);
   416  001078  0E33               	movlw	51
   417  00107A  EC8A  F008         	call	_lcdInst
   418                           
   419                           ;main.c: 69: lcdInst(0b00110010);
   420  00107E  0E32               	movlw	50
   421  001080  EC8A  F008         	call	_lcdInst
   422                           
   423                           ;main.c: 70: lcdInst(0b00101000);
   424  001084  0E28               	movlw	40
   425  001086  EC8A  F008         	call	_lcdInst
   426                           
   427                           ;main.c: 71: lcdInst(0b00001111);
   428  00108A  0E0F               	movlw	15
   429  00108C  EC8A  F008         	call	_lcdInst
   430                           
   431                           ;main.c: 72: lcdInst(0b00000110);
   432  001090  0E06               	movlw	6
   433  001092  EC8A  F008         	call	_lcdInst
   434                           
   435                           ;main.c: 73: lcdInst(0b00000001);
   436  001096  0E01               	movlw	1
   437  001098  EC8A  F008         	call	_lcdInst
   438                           
   439                           ;main.c: 74: _delay((unsigned long)((15)*(8000000/4000.0)));
   440  00109C  0E27               	movlw	39
   441  00109E  6E04               	movwf	??_initLCD& (0+255),c
   442  0010A0  0EF5               	movlw	245
   443  0010A2                     u57:
   444  0010A2  2EE8               	decfsz	wreg,f,c
   445  0010A4  D7FE               	bra	u57
   446  0010A6  2E04               	decfsz	??_initLCD& (0+255),f,c
   447  0010A8  D7FC               	bra	u57
   448  0010AA  F000               	nop	
   449  0010AC  0012               	return		;funcret
   450  0010AE                     __end_of_initLCD:
   451                           	opt stack 0
   452                           tblptru	equ	0xFF8
   453                           tblptrh	equ	0xFF7
   454                           tblptrl	equ	0xFF6
   455                           tablat	equ	0xFF5
   456                           wreg	equ	0xFE8
   457                           status	equ	0xFD8
   458                           
   459 ;; *************** function _lcdInst *****************
   460 ;; Defined at:
   461 ;;		line 57 in file "main.c"
   462 ;; Parameters:    Size  Location     Type
   463 ;;  data            1    wreg     unsigned char 
   464 ;; Auto vars:     Size  Location     Type
   465 ;;  data            1    2[COMRAM] unsigned char 
   466 ;; Return value:  Size  Location     Type
   467 ;;                  1    wreg      void 
   468 ;; Registers used:
   469 ;;		wreg, status,2, status,0, cstack
   470 ;; Tracked objects:
   471 ;;		On entry : 0/0
   472 ;;		On exit  : 0/0
   473 ;;		Unchanged: 0/0
   474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   476 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   478 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   479 ;;Total ram usage:        1 bytes
   480 ;; Hardware stack levels used:    1
   481 ;; Hardware stack levels required when called:    1
   482 ;; This function calls:
   483 ;;		_lcdNibble
   484 ;; This function is called by:
   485 ;;		_initLCD
   486 ;; This function uses a non-reentrant model
   487 ;;
   488                           
   489                           	psect	text4
   490  001114                     __ptext4:
   491                           	opt stack 0
   492  001114                     _lcdInst:
   493                           	opt stack 28
   494                           
   495                           ;incstack = 0
   496                           ;lcdInst@data stored from wreg
   497  001114  6E03               	movwf	lcdInst@data,c
   498                           
   499                           ;main.c: 58: LATDbits.LATD2 = 0;
   500  001116  948C               	bcf	3980,2,c	;volatile
   501                           
   502                           ;main.c: 59: lcdNibble(data);
   503  001118  5003               	movf	lcdInst@data,w,c
   504  00111A  EC09  F008         	call	_lcdNibble
   505  00111E  0012               	return		;funcret
   506  001120                     __end_of_lcdInst:
   507                           	opt stack 0
   508                           tblptru	equ	0xFF8
   509                           tblptrh	equ	0xFF7
   510                           tblptrl	equ	0xFF6
   511                           tablat	equ	0xFF5
   512                           wreg	equ	0xFE8
   513                           status	equ	0xFD8
   514                           
   515 ;; *************** function _lcdNibble *****************
   516 ;; Defined at:
   517 ;;		line 28 in file "main.c"
   518 ;; Parameters:    Size  Location     Type
   519 ;;  data            1    wreg     unsigned char 
   520 ;; Auto vars:     Size  Location     Type
   521 ;;  data            1    1[COMRAM] unsigned char 
   522 ;;  temp            1    0[COMRAM] unsigned char 
   523 ;; Return value:  Size  Location     Type
   524 ;;                  1    wreg      void 
   525 ;; Registers used:
   526 ;;		wreg, status,2, status,0
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   533 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   535 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   536 ;;Total ram usage:        2 bytes
   537 ;; Hardware stack levels used:    1
   538 ;; This function calls:
   539 ;;		Nothing
   540 ;; This function is called by:
   541 ;;		_lcdInst
   542 ;;		_putch
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546                           	psect	text5
   547  001012                     __ptext5:
   548                           	opt stack 0
   549  001012                     _lcdNibble:
   550                           	opt stack 28
   551                           
   552                           ;incstack = 0
   553                           ;lcdNibble@data stored from wreg
   554  001012  6E02               	movwf	lcdNibble@data,c
   555                           
   556                           ;main.c: 30: char temp = data & 0xF0;
   557  001014  5002               	movf	lcdNibble@data,w,c
   558  001016  0BF0               	andlw	240
   559  001018  6E01               	movwf	lcdNibble@temp,c
   560                           
   561                           ;main.c: 31: LATD = LATD & 0x0F;
   562  00101A  508C               	movf	3980,w,c	;volatile
   563  00101C  0B0F               	andlw	15
   564  00101E  6E8C               	movwf	3980,c	;volatile
   565                           
   566                           ;main.c: 32: LATD = temp | LATD;
   567  001020  5001               	movf	lcdNibble@temp,w,c
   568  001022  108C               	iorwf	3980,w,c	;volatile
   569  001024  6E8C               	movwf	3980,c	;volatile
   570                           
   571                           ;main.c: 37: LATDbits.LATD3 = 0;
   572  001026  968C               	bcf	3980,3,c	;volatile
   573                           
   574                           ;main.c: 38: _delay((unsigned long)((25)*(8000000/4000000.0)));
   575  001028  0E10               	movlw	16
   576  00102A                     u67:
   577  00102A  2EE8               	decfsz	wreg,f,c
   578  00102C  D7FE               	bra	u67
   579  00102E  D000               	nop2	
   580                           
   581                           ;main.c: 39: LATDbits.LATD3 = 1;
   582  001030  868C               	bsf	3980,3,c	;volatile
   583                           
   584                           ;main.c: 40: _delay((unsigned long)((100)*(8000000/4000000.0)));
   585  001032  0E42               	movlw	66
   586  001034                     u77:
   587  001034  2EE8               	decfsz	wreg,f,c
   588  001036  D7FE               	bra	u77
   589  001038  D000               	nop2	
   590                           
   591                           ;main.c: 43: data = data << 4;
   592  00103A  3802               	swapf	lcdNibble@data,w,c
   593  00103C  0BF0               	andlw	240
   594  00103E  6E02               	movwf	lcdNibble@data,c
   595                           
   596                           ;main.c: 44: temp = data & 0xF0;
   597  001040  5002               	movf	lcdNibble@data,w,c
   598  001042  0BF0               	andlw	240
   599  001044  6E01               	movwf	lcdNibble@temp,c
   600                           
   601                           ;main.c: 45: LATD = LATD & 0x0F;
   602  001046  508C               	movf	3980,w,c	;volatile
   603  001048  0B0F               	andlw	15
   604  00104A  6E8C               	movwf	3980,c	;volatile
   605                           
   606                           ;main.c: 46: LATD = temp | LATD;
   607  00104C  5001               	movf	lcdNibble@temp,w,c
   608  00104E  108C               	iorwf	3980,w,c	;volatile
   609  001050  6E8C               	movwf	3980,c	;volatile
   610                           
   611                           ;main.c: 47: LATDbits.LATD3 = 0;
   612  001052  968C               	bcf	3980,3,c	;volatile
   613                           
   614                           ;main.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
   615  001054  0E10               	movlw	16
   616  001056                     u87:
   617  001056  2EE8               	decfsz	wreg,f,c
   618  001058  D7FE               	bra	u87
   619  00105A  D000               	nop2	
   620                           
   621                           ;main.c: 49: LATDbits.LATD3 = 1;
   622  00105C  868C               	bsf	3980,3,c	;volatile
   623                           
   624                           ;main.c: 50: _delay((unsigned long)((100)*(8000000/4000000.0)));
   625  00105E  0E42               	movlw	66
   626  001060                     u97:
   627  001060  2EE8               	decfsz	wreg,f,c
   628  001062  D7FE               	bra	u97
   629  001064  D000               	nop2	
   630  001066  0012               	return		;funcret
   631  001068                     __end_of_lcdNibble:
   632                           	opt stack 0
   633                           tblptru	equ	0xFF8
   634                           tblptrh	equ	0xFF7
   635                           tblptrl	equ	0xFF6
   636                           tablat	equ	0xFF5
   637                           wreg	equ	0xFE8
   638                           status	equ	0xFD8
   639                           tblptru	equ	0xFF8
   640                           tblptrh	equ	0xFF7
   641                           tblptrl	equ	0xFF6
   642                           tablat	equ	0xFF5
   643                           wreg	equ	0xFE8
   644                           status	equ	0xFD8
   645                           
   646                           	psect	rparam
   647  0000                     tblptru	equ	0xFF8
   648                           tblptrh	equ	0xFF7
   649                           tblptrl	equ	0xFF6
   650                           tablat	equ	0xFF5
   651                           wreg	equ	0xFE8
   652                           status	equ	0xFD8


Data Sizes:
    Strings     16
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127      8       8
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[16]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_putch
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     302
                            _initLCD
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     212
                                              3 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _printf
     _putch
       _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      8       8       1        6.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Dec 11 00:43:08 2018

                     l29 10F0                       u37 10FE                       u47 106E  
                     u57 10A2                       u67 102A                       u77 1034  
                     u87 1056                       u97 1060              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l720 10B8                      l722 10BE  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     STR_1 1001  
                   _LATD 000F8C            __CFG_FCMEN$ON 000000                     _main 10D8  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ?_main 0001                    _TRISD 000F95  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_lcdInst 1120  
         __CFG_EBTR0$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000          __end_of_initLCD 10AE           __CFG_EBTRB$OFF 000000  
                  _putch 10F2                    tablat 000FF5                    status 000FD8  
         __CFG_PBADEN$ON 000000          __initialization 1106             __end_of_main 10F2  
                 ??_main 0009            __activetblptr 000001                   ?_putch 0001  
                 _OSCCON 000FD3           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
              ??_lcdInst 0003                   _printf 10AE                ??_initLCD 0004  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0080  __end_of__initialization 1106  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_putch 1106  
     __size_of_lcdNibble 0056                  ??_putch 0003                  ?_printf 0004  
      __end_of_lcdNibble 1068                  __Hparam 0000                  __Lparam 0000  
           __psmallconst 1000                  __pcinit 1106                  __ramtop 1000  
                _lcdInst 1114                  __ptext0 10D8                  __ptext1 10AE  
                __ptext2 10F2                  __ptext3 1068                  __ptext4 1114  
                __ptext5 1012          __size_of_printf 002A                  _initLCD 1068  
   end_of_initialization 1106                  printf@c 0008                  printf@f 0004  
         __end_of_printf 10D8      start_initialization 1106         __CFG_OSC$INTIO67 000000  
       __CFG_LPT1OSC$OFF 000000                 ??_printf 0006        __CFG_CCP2MX$PORTC 000000  
              _lcdNibble 1012                 ?_lcdInst 0001                 ?_initLCD 0001  
            __smallconst 1000           __size_of_putch 0014                 _LATDbits 000F8C  
       __CFG_WDTPS$32768 000000               ?_lcdNibble 0001            lcdNibble@data 0002  
          lcdNibble@temp 0001                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 1000       __CFG_BOREN$SBORDIS 000000         __size_of_lcdInst 000C  
       __size_of_initLCD 0046            __size_of_main 001A              ??_lcdNibble 0001  
              putch@data 0003                 printf@ap 0006              lcdInst@data 0003  
