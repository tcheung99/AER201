

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Dec 11 01:13:29 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1,inline
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.42
    23                           ; Generated 13/04/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4620 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	smallconst
    58  001000                     __psmallconst:
    59                           	opt stack 0
    60  001000  00                 	db	0
    61  001001                     _hexpowers:
    62                           	opt stack 0
    63  001001  0001               	dw	1
    64  001003  0010               	dw	16
    65  001005  0100               	dw	256
    66  001007  1000               	dw	4096
    67  001009                     __end_of_hexpowers:
    68                           	opt stack 0
    69  001009                     _LCD_LINE4_ADDR:
    70                           	opt stack 0
    71  001009  50                 	db	80
    72  00100A                     __end_of_LCD_LINE4_ADDR:
    73                           	opt stack 0
    74  00100A                     _LCD_LINE3_ADDR:
    75                           	opt stack 0
    76  00100A  10                 	db	16
    77  00100B                     __end_of_LCD_LINE3_ADDR:
    78                           	opt stack 0
    79  00100B                     _LCD_LINE1_ADDR:
    80                           	opt stack 0
    81  00100B  00                 	db	0
    82  00100C                     __end_of_LCD_LINE1_ADDR:
    83                           	opt stack 0
    84  00100C                     _LCD_SIZE_VERT:
    85                           	opt stack 0
    86  00100C  04                 	db	4
    87  00100D                     __end_of_LCD_SIZE_VERT:
    88                           	opt stack 0
    89  00100D                     _LCD_SIZE_HORZ:
    90                           	opt stack 0
    91  00100D  10                 	db	16
    92  00100E                     __end_of_LCD_SIZE_HORZ:
    93                           	opt stack 0
    94  00100E                     _LCD_LINE2_ADDR:
    95                           	opt stack 0
    96  00100E  40                 	db	64
    97  00100F                     __end_of_LCD_LINE2_ADDR:
    98                           	opt stack 0
    99  0000                     _LATDbits	set	3980
   100  0000                     _INTCONbits	set	4082
   101  0000                     _ADCON2bits	set	4032
   102  0000                     _ADCON1	set	4033
   103  0000                     _TRISAbits	set	3986
   104  0000                     _TRISD	set	3989
   105  0000                     _LATD	set	3980
   106  0000                     _OSCCON	set	4051
   107  0000                     _ADRESL	set	4035
   108  0000                     _ADRESH	set	4036
   109  0000                     _ADCON0bits	set	4034
   110  0000                     _ADCON0	set	4034
   111  0000                     _ADON	set	32272
   112  00100F                     STR_3:
   113  00100F  30                 	db	48	;'0'
   114  001010  31                 	db	49	;'1'
   115  001011  32                 	db	50	;'2'
   116  001012  33                 	db	51	;'3'
   117  001013  34                 	db	52	;'4'
   118  001014  35                 	db	53	;'5'
   119  001015  36                 	db	54	;'6'
   120  001016  37                 	db	55	;'7'
   121  001017  38                 	db	56	;'8'
   122  001018  39                 	db	57	;'9'
   123  001019  61                 	db	97	;'a'
   124  00101A  62                 	db	98	;'b'
   125  00101B  63                 	db	99	;'c'
   126  00101C  64                 	db	100	;'d'
   127  00101D  65                 	db	101	;'e'
   128  00101E  66                 	db	102	;'f'
   129  00101F  00                 	db	0
   130  001020                     STR_1:
   131  001020  52                 	db	82	;'R'
   132  001021  41                 	db	65	;'A'
   133  001022  32                 	db	50	;'2'
   134  001023  3A                 	db	58	;':'
   135  001024  20                 	db	32
   136  001025  25                 	db	37
   137  001026  2E                 	db	46
   138  001027  33                 	db	51	;'3'
   139  001028  78                 	db	120	;'x'
   140  001029  00                 	db	0
   141  00102A                     STR_2:
   142  00102A  52                 	db	82	;'R'
   143  00102B  41                 	db	65	;'A'
   144  00102C  33                 	db	51	;'3'
   145  00102D  3A                 	db	58	;':'
   146  00102E  20                 	db	32
   147  00102F  25                 	db	37
   148  001030  2E                 	db	46
   149  001031  33                 	db	51	;'3'
   150  001032  78                 	db	120	;'x'
   151  001033  00                 	db	0
   152                           
   153                           ; #config settings
   154  001034  00                 	db	0	; dummy byte at the end
   155  0000                     
   156                           	psect	cinit
   157  0013B8                     __pcinit:
   158                           	opt stack 0
   159  0013B8                     start_initialization:
   160                           	opt stack 0
   161  0013B8                     __initialization:
   162                           	opt stack 0
   163  0013B8                     end_of_initialization:
   164                           	opt stack 0
   165  0013B8                     __end_of__initialization:
   166                           	opt stack 0
   167  0013B8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   168  0013BA  6EF8               	movwf	tblptru,c
   169  0013BC  0100               	movlb	0
   170  0013BE  EFDB  F008         	goto	_main	;jump to C main() function
   171                           tblptru	equ	0xFF8
   172                           
   173                           	psect	cstackCOMRAM
   174  000001                     __pcstackCOMRAM:
   175                           	opt stack 0
   176  000001                     ??_isdigit:
   177  000001                     ?_readADC:
   178                           	opt stack 0
   179  000001                     ?___lwdiv:
   180                           	opt stack 0
   181  000001                     pulse_e@interruptState:
   182                           	opt stack 0
   183  000001                     ___lwdiv@dividend:
   184                           	opt stack 0
   185                           
   186                           ; 2 bytes @ 0x0
   187  000001                     	ds	1
   188  000002                     send_nibble@data:
   189                           	opt stack 0
   190  000002                     _isdigit$603:
   191                           	opt stack 0
   192                           
   193                           ; 1 bytes @ 0x1
   194  000002                     	ds	1
   195  000003                     ??_readADC:
   196  000003                     send_byte@data:
   197                           	opt stack 0
   198  000003                     isdigit@c:
   199                           	opt stack 0
   200  000003                     ___lwdiv@divisor:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x2
   204  000003                     	ds	1
   205  000004                     lcdInst@data:
   206                           	opt stack 0
   207  000004                     putch@data:
   208                           	opt stack 0
   209                           
   210                           ; 1 bytes @ 0x3
   211  000004                     	ds	1
   212  000005                     ??_initLCD:
   213  000005                     readADC@channel:
   214                           	opt stack 0
   215  000005                     ___lwdiv@quotient:
   216                           	opt stack 0
   217                           
   218                           ; 2 bytes @ 0x4
   219  000005                     	ds	2
   220  000007                     ___lwdiv@counter:
   221                           	opt stack 0
   222                           
   223                           ; 1 bytes @ 0x6
   224  000007                     	ds	1
   225  000008                     ?_printf:
   226                           	opt stack 0
   227  000008                     printf@f:
   228                           	opt stack 0
   229                           
   230                           ; 2 bytes @ 0x7
   231  000008                     	ds	4
   232  00000C                     ??_printf:
   233                           
   234                           ; 1 bytes @ 0xB
   235  00000C                     	ds	1
   236  00000D                     printf@flag:
   237                           	opt stack 0
   238                           
   239                           ; 1 bytes @ 0xC
   240  00000D                     	ds	1
   241  00000E                     printf@ap:
   242                           	opt stack 0
   243                           
   244                           ; 2 bytes @ 0xD
   245  00000E                     	ds	2
   246  000010                     printf@idx:
   247                           	opt stack 0
   248                           
   249                           ; 1 bytes @ 0xF
   250  000010                     	ds	1
   251  000011                     printf@val:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0x10
   255  000011                     	ds	2
   256  000013                     printf@prec:
   257                           	opt stack 0
   258                           
   259                           ; 1 bytes @ 0x12
   260  000013                     	ds	1
   261  000014                     printf@c:
   262                           	opt stack 0
   263                           
   264                           ; 1 bytes @ 0x13
   265  000014                     	ds	1
   266  000015                     ??_main:
   267                           
   268                           ; 1 bytes @ 0x14
   269  000015                     	ds	2
   270                           tblptru	equ	0xFF8
   271                           
   272 ;;
   273 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   274 ;;
   275 ;; *************** function _main *****************
   276 ;; Defined at:
   277 ;;		line 38 in file "main.c"
   278 ;; Parameters:    Size  Location     Type
   279 ;;		None
   280 ;; Auto vars:     Size  Location     Type
   281 ;;		None
   282 ;; Return value:  Size  Location     Type
   283 ;;                  1    wreg      void 
   284 ;; Registers used:
   285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   286 ;; Tracked objects:
   287 ;;		On entry : 0/0
   288 ;;		On exit  : 0/0
   289 ;;		Unchanged: 0/0
   290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   293 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   294 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   295 ;;Total ram usage:        2 bytes
   296 ;; Hardware stack levels required when called:    5
   297 ;; This function calls:
   298 ;;		_initLCD
   299 ;;		_lcdInst
   300 ;;		_printf
   301 ;;		_readADC
   302 ;; This function is called by:
   303 ;;		Startup code after reset
   304 ;; This function uses a non-reentrant model
   305 ;;
   306                           
   307                           	psect	text0
   308  0011B6                     __ptext0:
   309                           	opt stack 0
   310  0011B6                     _main:
   311                           	opt stack 26
   312                           
   313                           ;main.c: 40: OSCCON = 0xF2;
   314                           
   315                           ;incstack = 0
   316  0011B6  0EF2               	movlw	242
   317  0011B8  6ED3               	movwf	4051,c	;volatile
   318                           
   319                           ;main.c: 45: LATD = 0x00;
   320  0011BA  0E00               	movlw	0
   321  0011BC  6E8C               	movwf	3980,c	;volatile
   322                           
   323                           ;main.c: 46: TRISD = 0x00;
   324  0011BE  0E00               	movlw	0
   325  0011C0  6E95               	movwf	3989,c	;volatile
   326                           
   327                           ;main.c: 51: TRISAbits.RA2 = 1;
   328  0011C2  8492               	bsf	3986,2,c	;volatile
   329                           
   330                           ;main.c: 52: TRISAbits.RA3 = 1;
   331  0011C4  8692               	bsf	3986,3,c	;volatile
   332                           
   333                           ;main.c: 55: ADCON1 = 0x0B;
   334  0011C6  0E0B               	movlw	11
   335  0011C8  6EC1               	movwf	4033,c	;volatile
   336                           
   337                           ;main.c: 58: ADCON2bits.ADFM = 1;
   338  0011CA  8EC0               	bsf	4032,7,c	;volatile
   339                           
   340                           ;main.c: 60: initLCD();
   341  0011CC  EC22  F009         	call	_initLCD	;wreg free
   342  0011D0                     l1079:
   343                           
   344                           ;main.c: 69: { lcdInst(0x01); _delay((unsigned long)((5)*(8000000/4000.0)));};
   345  0011D0  0E01               	movlw	1
   346  0011D2  ECD6  F009         	call	_lcdInst
   347  0011D6  0E0D               	movlw	13
   348  0011D8  6E15               	movwf	??_main& (0+255),c
   349  0011DA  0EFC               	movlw	252
   350  0011DC                     u427:
   351  0011DC  2EE8               	decfsz	wreg,f,c
   352  0011DE  D7FE               	bra	u427
   353  0011E0  2E15               	decfsz	??_main& (0+255),f,c
   354  0011E2  D7FC               	bra	u427
   355                           
   356                           ;main.c: 70: printf("RA2: %.3x", readADC(2));
   357  0011E4  0E20               	movlw	low STR_1
   358  0011E6  6E08               	movwf	printf@f,c
   359  0011E8  0E10               	movlw	high STR_1
   360  0011EA  6E09               	movwf	printf@f+1,c
   361  0011EC  0E02               	movlw	2
   362  0011EE  EC7E  F009         	call	_readADC
   363  0011F2  C001  F00A         	movff	?_readADC,?_printf+2
   364  0011F6  C002  F00B         	movff	?_readADC+1,?_printf+3
   365  0011FA  EC1B  F008         	call	_printf	;wreg free
   366                           
   367                           ;main.c: 71: { lcdInst(0x80 | LCD_LINE2_ADDR);};
   368  0011FE  0E0E               	movlw	low _LCD_LINE2_ADDR
   369  001200  6EF6               	movwf	tblptrl,c
   370  001202                     	if	1	;There is more than 1 active tblptr byte
   371  001202  0E10               	movlw	high _LCD_LINE2_ADDR
   372  001204  6EF7               	movwf	tblptrh,c
   373  001206                     	endif
   374  001206                     	if	0	;There are less than 3 active tblptr bytes
   375  001206                     	endif
   376  001206  0008               	tblrd		*
   377  001208  50F5               	movf	tablat,w,c
   378  00120A  0980               	iorlw	128
   379  00120C  ECD6  F009         	call	_lcdInst
   380                           
   381                           ;main.c: 72: printf("RA3: %.3x", readADC(3));
   382  001210  0E2A               	movlw	low STR_2
   383  001212  6E08               	movwf	printf@f,c
   384  001214  0E10               	movlw	high STR_2
   385  001216  6E09               	movwf	printf@f+1,c
   386  001218  0E03               	movlw	3
   387  00121A  EC7E  F009         	call	_readADC
   388  00121E  C001  F00A         	movff	?_readADC,?_printf+2
   389  001222  C002  F00B         	movff	?_readADC+1,?_printf+3
   390  001226  EC1B  F008         	call	_printf	;wreg free
   391                           
   392                           ;main.c: 74: _delay((unsigned long)((100)*(8000000/4000.0)));
   393  00122A  0E02               	movlw	2
   394  00122C  6E16               	movwf	(??_main+1)& (0+255),c
   395  00122E  0E04               	movlw	4
   396  001230  6E15               	movwf	??_main& (0+255),c
   397  001232  0EBA               	movlw	186
   398  001234                     u437:
   399  001234  2EE8               	decfsz	wreg,f,c
   400  001236  D7FE               	bra	u437
   401  001238  2E15               	decfsz	??_main& (0+255),f,c
   402  00123A  D7FC               	bra	u437
   403  00123C  2E16               	decfsz	(??_main+1)& (0+255),f,c
   404  00123E  D7FA               	bra	u437
   405  001240  D000               	nop2	
   406  001242  D7C6               	goto	l1079
   407  001244                     __end_of_main:
   408                           	opt stack 0
   409                           tblptru	equ	0xFF8
   410                           tblptrh	equ	0xFF7
   411                           tblptrl	equ	0xFF6
   412                           tablat	equ	0xFF5
   413                           wreg	equ	0xFE8
   414                           
   415 ;; *************** function _readADC *****************
   416 ;; Defined at:
   417 ;;		line 28 in file "main.c"
   418 ;; Parameters:    Size  Location     Type
   419 ;;  channel         1    wreg     unsigned char 
   420 ;; Auto vars:     Size  Location     Type
   421 ;;  channel         1    4[COMRAM] unsigned char 
   422 ;; Return value:  Size  Location     Type
   423 ;;                  2    0[COMRAM] unsigned short 
   424 ;; Registers used:
   425 ;;		wreg, status,2, status,0
   426 ;; Tracked objects:
   427 ;;		On entry : 0/0
   428 ;;		On exit  : 0/0
   429 ;;		Unchanged: 0/0
   430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   431 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   432 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   433 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   434 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   435 ;;Total ram usage:        5 bytes
   436 ;; Hardware stack levels used:    1
   437 ;; This function calls:
   438 ;;		Nothing
   439 ;; This function is called by:
   440 ;;		_main
   441 ;; This function uses a non-reentrant model
   442 ;;
   443                           
   444                           	psect	text1
   445  0012FC                     __ptext1:
   446                           	opt stack 0
   447  0012FC                     _readADC:
   448                           	opt stack 30
   449                           
   450                           ;incstack = 0
   451                           ;readADC@channel stored from wreg
   452  0012FC  6E05               	movwf	readADC@channel,c
   453                           
   454                           ;main.c: 29: ADCON0 = (channel & 0x0F) << 2;
   455  0012FE  C005  F003         	movff	readADC@channel,??_readADC
   456  001302  0E0F               	movlw	15
   457  001304  1603               	andwf	??_readADC,f,c
   458  001306  90D8               	bcf	status,0,c
   459  001308  3603               	rlcf	??_readADC,f,c
   460  00130A  90D8               	bcf	status,0,c
   461  00130C  3403               	rlcf	??_readADC,w,c
   462  00130E  6EC2               	movwf	4034,c	;volatile
   463                           
   464                           ;main.c: 30: ADON = 1;
   465  001310  80C2               	bsf	4034,0,c	;volatile
   466                           
   467                           ;main.c: 31: ADCON0bits.GO = 1;
   468  001312  82C2               	bsf	4034,1,c	;volatile
   469  001314                     l35:
   470  001314  B2C2               	btfsc	4034,1,c	;volatile
   471  001316  D7FE               	goto	l35
   472                           
   473                           ;main.c: 34: }
   474                           ;main.c: 35: return (ADRESH << 8) | ADRESL;
   475  001318  50C3               	movf	4035,w,c	;volatile
   476  00131A  CFC4 F003          	movff	4036,??_readADC	;volatile
   477  00131E  6A04               	clrf	(??_readADC+1)& (0+255),c
   478  001320  C003  F004         	movff	??_readADC,??_readADC+1
   479  001324  6A03               	clrf	??_readADC,c
   480  001326  1003               	iorwf	??_readADC,w,c
   481  001328  6E01               	movwf	?_readADC,c
   482  00132A  5004               	movf	??_readADC+1,w,c
   483  00132C  6E02               	movwf	?_readADC+1,c
   484  00132E  0012               	return	
   485  001330                     __end_of_readADC:
   486                           	opt stack 0
   487                           tblptru	equ	0xFF8
   488                           tblptrh	equ	0xFF7
   489                           tblptrl	equ	0xFF6
   490                           tablat	equ	0xFF5
   491                           wreg	equ	0xFE8
   492                           status	equ	0xFD8
   493                           
   494 ;; *************** function _printf *****************
   495 ;; Defined at:
   496 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
   497 ;; Parameters:    Size  Location     Type
   498 ;;  f               2    7[COMRAM] PTR const unsigned char 
   499 ;;		 -> STR_2(10), STR_1(10), 
   500 ;; Auto vars:     Size  Location     Type
   501 ;;  idx             1   15[COMRAM] unsigned char 
   502 ;;  tmpval          4    0        struct .
   503 ;;  cp              3    0        PTR const unsigned char 
   504 ;;  val             2   16[COMRAM] unsigned int 
   505 ;;  ap              2   13[COMRAM] PTR void [1]
   506 ;;		 -> ?_printf(2), 
   507 ;;  len             2    0        unsigned int 
   508 ;;  c               1   19[COMRAM] char 
   509 ;;  prec            1   18[COMRAM] char 
   510 ;;  flag            1   12[COMRAM] unsigned char 
   511 ;; Return value:  Size  Location     Type
   512 ;;                  2    7[COMRAM] int 
   513 ;; Registers used:
   514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   515 ;; Tracked objects:
   516 ;;		On entry : 0/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   520 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   521 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   522 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   523 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   524 ;;Total ram usage:       13 bytes
   525 ;; Hardware stack levels used:    1
   526 ;; Hardware stack levels required when called:    4
   527 ;; This function calls:
   528 ;;		___lwdiv
   529 ;;		_isdigit
   530 ;;		_putch
   531 ;; This function is called by:
   532 ;;		_main
   533 ;; This function uses a non-reentrant model
   534 ;;
   535                           
   536                           	psect	text2
   537  001036                     __ptext2:
   538                           	opt stack 0
   539  001036                     _printf:
   540                           	opt stack 26
   541                           
   542                           ;doprnt.c: 466: va_list ap;
   543                           ;doprnt.c: 499: signed char c;
   544                           ;doprnt.c: 506: signed char prec;
   545                           ;doprnt.c: 508: unsigned char flag;
   546                           ;doprnt.c: 523: union {
   547                           ;doprnt.c: 524: unsigned long vd;
   548                           ;doprnt.c: 525: double integ;
   549                           ;doprnt.c: 526: } tmpval;
   550                           ;doprnt.c: 528: unsigned int val;
   551                           ;doprnt.c: 529: unsigned len;
   552                           ;doprnt.c: 530: const char * cp;
   553                           ;doprnt.c: 533: *ap = __va_start();
   554                           
   555                           ;incstack = 0
   556  001036  0E0A               	movlw	low (?_printf+2)
   557  001038  6E0E               	movwf	printf@ap,c
   558  00103A  0E00               	movlw	high (?_printf+2)
   559  00103C  6E0F               	movwf	printf@ap+1,c
   560                           
   561                           ;doprnt.c: 536: while(c = *f++) {
   562  00103E  D0AE               	goto	l1067
   563  001040                     l1005:
   564                           
   565                           ;doprnt.c: 538: if(c != '%')
   566  001040  0E25               	movlw	37
   567  001042  1814               	xorwf	printf@c,w,c
   568  001044  B4D8               	btfsc	status,2,c
   569  001046  D004               	goto	l1009
   570                           
   571                           ;doprnt.c: 540: {
   572                           ;doprnt.c: 541: (putch(c) );
   573  001048  5014               	movf	printf@c,w,c
   574  00104A  ECD0  F009         	call	_putch
   575                           
   576                           ;doprnt.c: 542: continue;
   577  00104E  D0A6               	goto	l1067
   578  001050                     l1009:
   579                           
   580                           ;doprnt.c: 543: }
   581                           ;doprnt.c: 548: flag = 0;
   582  001050  0E00               	movlw	0
   583  001052  6E0D               	movwf	printf@flag,c
   584                           
   585                           ;doprnt.c: 611: if(*f == '.') {
   586  001054  C008  FFF6         	movff	printf@f,tblptrl
   587  001058  C009  FFF7         	movff	printf@f+1,tblptrh
   588  00105C                     	if	0	;tblptru may be non-zero
   589  00105C                     	endif
   590  00105C                     	if	0	;tblptru may be non-zero
   591  00105C                     	endif
   592  00105C  0008               	tblrd		*
   593  00105E  50F5               	movf	tablat,w,c
   594  001060  0A2E               	xorlw	46
   595  001062  A4D8               	btfss	status,2,c
   596  001064  D01F               	goto	l1023
   597                           
   598                           ;doprnt.c: 613: f++;
   599  001066  4A08               	infsnz	printf@f,f,c
   600  001068  2A09               	incf	printf@f+1,f,c
   601                           
   602                           ;doprnt.c: 620: {
   603                           ;doprnt.c: 621: prec = 0;
   604  00106A  0E00               	movlw	0
   605  00106C  6E13               	movwf	printf@prec,c
   606                           
   607                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
   608  00106E  D00F               	goto	l1021
   609  001070                     l1017:
   610                           
   611                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
   612  001070  C008  FFF6         	movff	printf@f,tblptrl
   613  001074  C009  FFF7         	movff	printf@f+1,tblptrh
   614  001078                     	if	0	;tblptru may be non-zero
   615  001078                     	endif
   616  001078                     	if	0	;tblptru may be non-zero
   617  001078                     	endif
   618  001078  0008               	tblrd		*
   619  00107A  CFF5 F00C          	movff	tablat,??_printf
   620  00107E  5013               	movf	printf@prec,w,c
   621  001080  0D0A               	mullw	10
   622  001082  50F3               	movf	prodl,w,c
   623  001084  240C               	addwf	??_printf,w,c
   624  001086  0FD0               	addlw	208
   625  001088  6E13               	movwf	printf@prec,c
   626  00108A  4A08               	infsnz	printf@f,f,c
   627  00108C  2A09               	incf	printf@f+1,f,c
   628  00108E                     l1021:
   629  00108E  C008  FFF6         	movff	printf@f,tblptrl
   630  001092  C009  FFF7         	movff	printf@f+1,tblptrh
   631  001096                     	if	0	;tblptru may be non-zero
   632  001096                     	endif
   633  001096                     	if	0	;tblptru may be non-zero
   634  001096                     	endif
   635  001096  0008               	tblrd		*
   636  001098  50F5               	movf	tablat,w,c
   637  00109A  ECAD  F009         	call	_isdigit
   638  00109E  A0D8               	btfss	status,0,c
   639  0010A0  D003               	goto	l1027
   640  0010A2  D7E6               	goto	l1017
   641  0010A4                     l1023:
   642                           
   643                           ;doprnt.c: 626: prec = 0;
   644  0010A4  0E00               	movlw	0
   645  0010A6  6E13               	movwf	printf@prec,c
   646  0010A8                     l1027:
   647  0010A8  C008  FFF6         	movff	printf@f,tblptrl
   648  0010AC  C009  FFF7         	movff	printf@f+1,tblptrh
   649  0010B0  4A08               	infsnz	printf@f,f,c
   650  0010B2  2A09               	incf	printf@f+1,f,c
   651  0010B4                     	if	0	;tblptru may be non-zero
   652  0010B4                     	endif
   653  0010B4                     	if	0	;tblptru may be non-zero
   654  0010B4                     	endif
   655  0010B4  0008               	tblrd		*
   656  0010B6  CFF5 F014          	movff	tablat,printf@c
   657  0010BA  5014               	movf	printf@c,w,c
   658                           
   659                           ; Switch size 1, requested type "space"
   660                           ; Number of cases is 2, Range of values is 0 to 120
   661                           ; switch strategies available:
   662                           ; Name         Instructions Cycles
   663                           ; simple_byte            7     4 (average)
   664                           ;	Chosen strategy is simple_byte
   665  0010BC  0A00               	xorlw	0	; case 0
   666  0010BE  B4D8               	btfsc	status,2,c
   667  0010C0  0012               	return	
   668  0010C2  0A78               	xorlw	120	; case 120
   669  0010C4  A4D8               	btfss	status,2,c
   670  0010C6  D06A               	goto	l1067
   671                           
   672                           ;doprnt.c: 1273: {
   673                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
   674  0010C8  C00E  FFD9         	movff	printf@ap,fsr2l
   675  0010CC  C00F  FFDA         	movff	printf@ap+1,fsr2h
   676  0010D0  CFDE F011          	movff	postinc2,printf@val
   677  0010D4  CFDD F012          	movff	postdec2,printf@val+1
   678  0010D8  0E02               	movlw	2
   679  0010DA  260E               	addwf	printf@ap,f,c
   680  0010DC  0E00               	movlw	0
   681  0010DE  220F               	addwfc	printf@ap+1,f,c
   682                           
   683                           ;doprnt.c: 1287: }
   684                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
   685  0010E0  5013               	movf	printf@prec,w,c
   686  0010E2  A4D8               	btfss	status,2,c
   687  0010E4  D004               	goto	l1039
   688  0010E6  5011               	movf	printf@val,w,c
   689  0010E8  1012               	iorwf	printf@val+1,w,c
   690  0010EA  B4D8               	btfsc	status,2,c
   691                           
   692                           ;doprnt.c: 1291: prec++;
   693  0010EC  2A13               	incf	printf@prec,f,c
   694  0010EE                     l1039:
   695                           
   696                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
   697  0010EE  0E01               	movlw	1
   698  0010F0  6E14               	movwf	printf@c,c
   699  0010F2                     l1041:
   700  0010F2  0E04               	movlw	4
   701  0010F4  1814               	xorwf	printf@c,w,c
   702  0010F6  B4D8               	btfsc	status,2,c
   703  0010F8  D012               	goto	l1053
   704                           
   705                           ;doprnt.c: 1317: if(val < hexpowers[c])
   706  0010FA  5014               	movf	printf@c,w,c
   707  0010FC  0D02               	mullw	2
   708  0010FE  0E01               	movlw	low _hexpowers
   709  001100  24F3               	addwf	prodl,w,c
   710  001102  6EF6               	movwf	tblptrl,c
   711  001104  0E10               	movlw	high _hexpowers
   712  001106  20F4               	addwfc	prodh,w,c
   713  001108  6EF7               	movwf	tblptrh,c
   714  00110A                     	if	0	;There are less than 3 active tblptr bytes
   715  00110A                     	endif
   716  00110A  0009               	tblrd		*+
   717  00110C  50F5               	movf	tablat,w,c
   718  00110E  5C11               	subwf	printf@val,w,c
   719  001110  0009               	tblrd		*+
   720  001112  50F5               	movf	tablat,w,c
   721  001114  5812               	subwfb	printf@val+1,w,c
   722  001116  A0D8               	btfss	status,0,c
   723  001118  D002               	goto	l1053
   724                           
   725                           ;doprnt.c: 1318: break;
   726  00111A  2A14               	incf	printf@c,f,c
   727  00111C  D7EA               	goto	l1041
   728  00111E                     l1053:
   729                           
   730                           ;doprnt.c: 1339: if(c < prec)
   731  00111E  5014               	movf	printf@c,w,c
   732  001120  0A80               	xorlw	128
   733  001122  6E0C               	movwf	??_printf& (0+255),c
   734  001124  5013               	movf	printf@prec,w,c
   735  001126  0A80               	xorlw	128
   736  001128  5C0C               	subwf	??_printf& (0+255),w,c
   737  00112A  B0D8               	btfsc	status,0,c
   738  00112C  D003               	goto	l1057
   739                           
   740                           ;doprnt.c: 1340: c = prec;
   741  00112E  C013  F014         	movff	printf@prec,printf@c
   742  001132  D030               	goto	l128
   743  001134                     l1057:
   744                           
   745                           ;doprnt.c: 1341: else if(prec < c)
   746  001134  5013               	movf	printf@prec,w,c
   747  001136  0A80               	xorlw	128
   748  001138  6E0C               	movwf	??_printf& (0+255),c
   749  00113A  5014               	movf	printf@c,w,c
   750  00113C  0A80               	xorlw	128
   751  00113E  5C0C               	subwf	??_printf& (0+255),w,c
   752  001140  B0D8               	btfsc	status,0,c
   753  001142  D028               	goto	l128
   754                           
   755                           ;doprnt.c: 1342: prec = c;
   756  001144  C014  F013         	movff	printf@c,printf@prec
   757                           
   758                           ;doprnt.c: 1422: {
   759                           ;doprnt.c: 1469: }
   760                           ;doprnt.c: 1474: while(prec--) {
   761  001148  D025               	goto	l128
   762  00114A                     l1061:
   763                           
   764                           ;doprnt.c: 1478: {
   765                           ;doprnt.c: 1499: {
   766                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
   767  00114A  C011  F001         	movff	printf@val,___lwdiv@dividend
   768  00114E  C012  F002         	movff	printf@val+1,___lwdiv@dividend+1
   769  001152  5013               	movf	printf@prec,w,c
   770  001154  0D02               	mullw	2
   771  001156  0E01               	movlw	low _hexpowers
   772  001158  24F3               	addwf	prodl,w,c
   773  00115A  6EF6               	movwf	tblptrl,c
   774  00115C  0E10               	movlw	high _hexpowers
   775  00115E  20F4               	addwfc	prodh,w,c
   776  001160  6EF7               	movwf	tblptrh,c
   777  001162                     	if	0	;There are less than 3 active tblptr bytes
   778  001162                     	endif
   779  001162  0009               	tblrd		*+
   780  001164  CFF5 F003          	movff	tablat,___lwdiv@divisor
   781  001168  000A               	tblrd		*-
   782  00116A  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
   783  00116E  EC55  F009         	call	___lwdiv	;wreg free
   784  001172  5001               	movf	?___lwdiv,w,c
   785  001174  0B0F               	andlw	15
   786  001176  6E10               	movwf	printf@idx,c
   787                           
   788                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
   789  001178  5010               	movf	printf@idx,w,c
   790  00117A  0D01               	mullw	1
   791  00117C  0E0F               	movlw	low STR_3
   792  00117E  24F3               	addwf	prodl,w,c
   793  001180  6EF6               	movwf	tblptrl,c
   794  001182  0E10               	movlw	high STR_3
   795  001184  20F4               	addwfc	prodh,w,c
   796  001186  6EF7               	movwf	tblptrh,c
   797  001188                     	if	0	;There are less than 3 active tblptr bytes
   798  001188                     	endif
   799  001188  0008               	tblrd		*
   800  00118A  CFF5 F014          	movff	tablat,printf@c
   801                           
   802                           ;doprnt.c: 1508: }
   803                           ;doprnt.c: 1523: }
   804                           ;doprnt.c: 1524: (putch(c) );
   805  00118E  5014               	movf	printf@c,w,c
   806  001190  ECD0  F009         	call	_putch
   807  001194                     l128:
   808  001194  0613               	decf	printf@prec,f,c
   809  001196  2813               	incf	printf@prec,w,c
   810  001198  A4D8               	btfss	status,2,c
   811  00119A  D7D7               	goto	l1061
   812  00119C                     l1067:
   813  00119C  C008  FFF6         	movff	printf@f,tblptrl
   814  0011A0  C009  FFF7         	movff	printf@f+1,tblptrh
   815  0011A4  4A08               	infsnz	printf@f,f,c
   816  0011A6  2A09               	incf	printf@f+1,f,c
   817  0011A8                     	if	0	;tblptru may be non-zero
   818  0011A8                     	endif
   819  0011A8                     	if	0	;tblptru may be non-zero
   820  0011A8                     	endif
   821  0011A8  0008               	tblrd		*
   822  0011AA  CFF5 F014          	movff	tablat,printf@c
   823  0011AE  5014               	movf	printf@c,w,c
   824  0011B0  B4D8               	btfsc	status,2,c
   825  0011B2  0012               	return	
   826  0011B4  D745               	goto	l1005
   827  0011B6                     __end_of_printf:
   828                           	opt stack 0
   829                           tblptru	equ	0xFF8
   830                           tblptrh	equ	0xFF7
   831                           tblptrl	equ	0xFF6
   832                           tablat	equ	0xFF5
   833                           prodh	equ	0xFF4
   834                           prodl	equ	0xFF3
   835                           wreg	equ	0xFE8
   836                           postinc2	equ	0xFDE
   837                           postdec2	equ	0xFDD
   838                           fsr2h	equ	0xFDA
   839                           fsr2l	equ	0xFD9
   840                           status	equ	0xFD8
   841                           
   842 ;; *************** function _putch *****************
   843 ;; Defined at:
   844 ;;		line 102 in file "lcd.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;  data            1    wreg     unsigned char 
   847 ;; Auto vars:     Size  Location     Type
   848 ;;  data            1    3[COMRAM] unsigned char 
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, status,2, status,0, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   859 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   861 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   862 ;;Total ram usage:        1 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; Hardware stack levels required when called:    3
   865 ;; This function calls:
   866 ;;		_send_byte
   867 ;; This function is called by:
   868 ;;		_printf
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872                           	psect	text3
   873  0013A0                     __ptext3:
   874                           	opt stack 0
   875  0013A0                     _putch:
   876                           	opt stack 26
   877                           
   878                           ;incstack = 0
   879                           ;putch@data stored from wreg
   880  0013A0  6E04               	movwf	putch@data,c
   881                           
   882                           ;lcd.c: 103: LATDbits.LATD2 = 1;
   883  0013A2  848C               	bsf	3980,2,c	;volatile
   884                           
   885                           ;lcd.c: 104: send_byte((unsigned char)data);
   886  0013A4  5004               	movf	putch@data,w,c
   887  0013A6  ECC7  F009         	call	_send_byte
   888  0013AA  0012               	return		;funcret
   889  0013AC                     __end_of_putch:
   890                           	opt stack 0
   891                           tblptru	equ	0xFF8
   892                           tblptrh	equ	0xFF7
   893                           tblptrl	equ	0xFF6
   894                           tablat	equ	0xFF5
   895                           prodh	equ	0xFF4
   896                           prodl	equ	0xFF3
   897                           wreg	equ	0xFE8
   898                           postinc2	equ	0xFDE
   899                           postdec2	equ	0xFDD
   900                           fsr2h	equ	0xFDA
   901                           fsr2l	equ	0xFD9
   902                           status	equ	0xFD8
   903                           
   904 ;; *************** function _isdigit *****************
   905 ;; Defined at:
   906 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
   907 ;; Parameters:    Size  Location     Type
   908 ;;  c               1    wreg     unsigned char 
   909 ;; Auto vars:     Size  Location     Type
   910 ;;  c               1    2[COMRAM] unsigned char 
   911 ;; Return value:  Size  Location     Type
   912 ;;		None               void
   913 ;; Registers used:
   914 ;;		wreg, status,2, status,0
   915 ;; Tracked objects:
   916 ;;		On entry : 0/0
   917 ;;		On exit  : 0/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   921 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   922 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   923 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   924 ;;Total ram usage:        3 bytes
   925 ;; Hardware stack levels used:    1
   926 ;; This function calls:
   927 ;;		Nothing
   928 ;; This function is called by:
   929 ;;		_printf
   930 ;; This function uses a non-reentrant model
   931 ;;
   932                           
   933                           	psect	text4
   934  00135A                     __ptext4:
   935                           	opt stack 0
   936  00135A                     _isdigit:
   937                           	opt stack 29
   938                           
   939                           ;incstack = 0
   940                           ;isdigit@c stored from wreg
   941  00135A  6E03               	movwf	isdigit@c,c
   942  00135C  0E00               	movlw	0
   943  00135E  6E02               	movwf	_isdigit$603,c
   944  001360  0E3A               	movlw	58
   945  001362  6003               	cpfslt	isdigit@c,c
   946  001364  D005               	goto	l967
   947  001366  0E2F               	movlw	47
   948  001368  6403               	cpfsgt	isdigit@c,c
   949  00136A  D002               	goto	l967
   950  00136C  0E01               	movlw	1
   951  00136E  6E02               	movwf	_isdigit$603,c
   952  001370                     l967:
   953  001370  C002  F001         	movff	_isdigit$603,??_isdigit
   954  001374  3001               	rrcf	??_isdigit,w,c
   955  001376  0012               	return	
   956  001378                     __end_of_isdigit:
   957                           	opt stack 0
   958                           tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           prodh	equ	0xFF4
   963                           prodl	equ	0xFF3
   964                           wreg	equ	0xFE8
   965                           postinc2	equ	0xFDE
   966                           postdec2	equ	0xFDD
   967                           fsr2h	equ	0xFDA
   968                           fsr2l	equ	0xFD9
   969                           status	equ	0xFD8
   970                           
   971 ;; *************** function ___lwdiv *****************
   972 ;; Defined at:
   973 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;  dividend        2    0[COMRAM] unsigned int 
   976 ;;  divisor         2    2[COMRAM] unsigned int 
   977 ;; Auto vars:     Size  Location     Type
   978 ;;  quotient        2    4[COMRAM] unsigned int 
   979 ;;  counter         1    6[COMRAM] unsigned char 
   980 ;; Return value:  Size  Location     Type
   981 ;;                  2    0[COMRAM] unsigned int 
   982 ;; Registers used:
   983 ;;		wreg, status,2, status,0
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   989 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   990 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   992 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   993 ;;Total ram usage:        7 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; This function calls:
   996 ;;		Nothing
   997 ;; This function is called by:
   998 ;;		_printf
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text5
  1003  0012AA                     __ptext5:
  1004                           	opt stack 0
  1005  0012AA                     ___lwdiv:
  1006                           	opt stack 29
  1007                           
  1008                           ;incstack = 0
  1009  0012AA  0E00               	movlw	0
  1010  0012AC  6E06               	movwf	___lwdiv@quotient+1,c
  1011  0012AE  0E00               	movlw	0
  1012  0012B0  6E05               	movwf	___lwdiv@quotient,c
  1013  0012B2  5003               	movf	___lwdiv@divisor,w,c
  1014  0012B4  1004               	iorwf	___lwdiv@divisor+1,w,c
  1015  0012B6  B4D8               	btfsc	status,2,c
  1016  0012B8  D01C               	goto	l540
  1017  0012BA  0E01               	movlw	1
  1018  0012BC  6E07               	movwf	___lwdiv@counter,c
  1019  0012BE  D004               	goto	l979
  1020  0012C0                     l977:
  1021  0012C0  90D8               	bcf	status,0,c
  1022  0012C2  3603               	rlcf	___lwdiv@divisor,f,c
  1023  0012C4  3604               	rlcf	___lwdiv@divisor+1,f,c
  1024  0012C6  2A07               	incf	___lwdiv@counter,f,c
  1025  0012C8                     l979:
  1026  0012C8  AE04               	btfss	___lwdiv@divisor+1,7,c
  1027  0012CA  D7FA               	goto	l977
  1028  0012CC                     l981:
  1029  0012CC  90D8               	bcf	status,0,c
  1030  0012CE  3605               	rlcf	___lwdiv@quotient,f,c
  1031  0012D0  3606               	rlcf	___lwdiv@quotient+1,f,c
  1032  0012D2  5003               	movf	___lwdiv@divisor,w,c
  1033  0012D4  5C01               	subwf	___lwdiv@dividend,w,c
  1034  0012D6  5004               	movf	___lwdiv@divisor+1,w,c
  1035  0012D8  5802               	subwfb	___lwdiv@dividend+1,w,c
  1036  0012DA  A0D8               	btfss	status,0,c
  1037  0012DC  D005               	goto	l989
  1038  0012DE  5003               	movf	___lwdiv@divisor,w,c
  1039  0012E0  5E01               	subwf	___lwdiv@dividend,f,c
  1040  0012E2  5004               	movf	___lwdiv@divisor+1,w,c
  1041  0012E4  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1042  0012E6  8005               	bsf	___lwdiv@quotient,0,c
  1043  0012E8                     l989:
  1044  0012E8  90D8               	bcf	status,0,c
  1045  0012EA  3204               	rrcf	___lwdiv@divisor+1,f,c
  1046  0012EC  3203               	rrcf	___lwdiv@divisor,f,c
  1047  0012EE  2E07               	decfsz	___lwdiv@counter,f,c
  1048  0012F0  D7ED               	goto	l981
  1049  0012F2                     l540:
  1050  0012F2  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1051  0012F6  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1052  0012FA  0012               	return		;funcret
  1053  0012FC                     __end_of___lwdiv:
  1054                           	opt stack 0
  1055                           tblptru	equ	0xFF8
  1056                           tblptrh	equ	0xFF7
  1057                           tblptrl	equ	0xFF6
  1058                           tablat	equ	0xFF5
  1059                           prodh	equ	0xFF4
  1060                           prodl	equ	0xFF3
  1061                           wreg	equ	0xFE8
  1062                           postinc2	equ	0xFDE
  1063                           postdec2	equ	0xFDD
  1064                           fsr2h	equ	0xFDA
  1065                           fsr2l	equ	0xFD9
  1066                           status	equ	0xFD8
  1067                           
  1068 ;; *************** function _initLCD *****************
  1069 ;; Defined at:
  1070 ;;		line 69 in file "lcd.c"
  1071 ;; Parameters:    Size  Location     Type
  1072 ;;		None
  1073 ;; Auto vars:     Size  Location     Type
  1074 ;;		None
  1075 ;; Return value:  Size  Location     Type
  1076 ;;                  1    wreg      void 
  1077 ;; Registers used:
  1078 ;;		wreg, status,2, status,0, cstack
  1079 ;; Tracked objects:
  1080 ;;		On entry : 0/0
  1081 ;;		On exit  : 0/0
  1082 ;;		Unchanged: 0/0
  1083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1086 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1087 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1088 ;;Total ram usage:        1 bytes
  1089 ;; Hardware stack levels used:    1
  1090 ;; Hardware stack levels required when called:    4
  1091 ;; This function calls:
  1092 ;;		_lcdInst
  1093 ;;		_send_byte
  1094 ;;		_send_nibble
  1095 ;; This function is called by:
  1096 ;;		_main
  1097 ;; This function uses a non-reentrant model
  1098 ;;
  1099                           
  1100                           	psect	text6
  1101  001244                     __ptext6:
  1102                           	opt stack 0
  1103  001244                     _initLCD:
  1104                           	opt stack 26
  1105                           
  1106                           ;lcd.c: 70: _delay((unsigned long)((15)*(8000000/4000.0)));
  1107                           
  1108                           ;incstack = 0
  1109  001244  0E27               	movlw	39
  1110  001246  6E05               	movwf	??_initLCD& (0+255),c
  1111  001248  0EF5               	movlw	245
  1112  00124A                     u447:
  1113  00124A  2EE8               	decfsz	wreg,f,c
  1114  00124C  D7FE               	bra	u447
  1115  00124E  2E05               	decfsz	??_initLCD& (0+255),f,c
  1116  001250  D7FC               	bra	u447
  1117  001252  F000               	nop	
  1118                           
  1119                           ;lcd.c: 72: LATDbits.LATD2 = 0;
  1120  001254  948C               	bcf	3980,2,c	;volatile
  1121                           
  1122                           ;lcd.c: 74: send_nibble(0b0011);
  1123  001256  0E03               	movlw	3
  1124  001258  ECBC  F009         	call	_send_nibble
  1125                           
  1126                           ;lcd.c: 75: _delay((unsigned long)((5)*(8000000/4000.0)));
  1127  00125C  0E0D               	movlw	13
  1128  00125E  6E05               	movwf	??_initLCD& (0+255),c
  1129  001260  0EFC               	movlw	252
  1130  001262                     u457:
  1131  001262  2EE8               	decfsz	wreg,f,c
  1132  001264  D7FE               	bra	u457
  1133  001266  2E05               	decfsz	??_initLCD& (0+255),f,c
  1134  001268  D7FC               	bra	u457
  1135                           
  1136                           ;lcd.c: 76: send_nibble(0b0011);
  1137  00126A  0E03               	movlw	3
  1138  00126C  ECBC  F009         	call	_send_nibble
  1139                           
  1140                           ;lcd.c: 77: _delay((unsigned long)((150)*(8000000/4000000.0)));
  1141  001270  0E64               	movlw	100
  1142  001272                     u467:
  1143  001272  2EE8               	decfsz	wreg,f,c
  1144  001274  D7FE               	bra	u467
  1145                           
  1146                           ;lcd.c: 78: send_byte(0b00110010);
  1147  001276  0E32               	movlw	50
  1148  001278  ECC7  F009         	call	_send_byte
  1149                           
  1150                           ;lcd.c: 80: send_byte(0b00101000);
  1151  00127C  0E28               	movlw	40
  1152  00127E  ECC7  F009         	call	_send_byte
  1153                           
  1154                           ;lcd.c: 81: send_byte(0b00001000);
  1155  001282  0E08               	movlw	8
  1156  001284  ECC7  F009         	call	_send_byte
  1157                           
  1158                           ;lcd.c: 82: send_byte(0b00000001);
  1159  001288  0E01               	movlw	1
  1160  00128A  ECC7  F009         	call	_send_byte
  1161                           
  1162                           ;lcd.c: 83: _delay((unsigned long)((5)*(8000000/4000.0)));
  1163  00128E  0E0D               	movlw	13
  1164  001290  6E05               	movwf	??_initLCD& (0+255),c
  1165  001292  0EFC               	movlw	252
  1166  001294                     u477:
  1167  001294  2EE8               	decfsz	wreg,f,c
  1168  001296  D7FE               	bra	u477
  1169  001298  2E05               	decfsz	??_initLCD& (0+255),f,c
  1170  00129A  D7FC               	bra	u477
  1171                           
  1172                           ;lcd.c: 84: send_byte(0b00000110);
  1173  00129C  0E06               	movlw	6
  1174  00129E  ECC7  F009         	call	_send_byte
  1175                           
  1176                           ;lcd.c: 87: { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  1177  0012A2  0E0F               	movlw	15
  1178  0012A4  ECD6  F009         	call	_lcdInst
  1179  0012A8  0012               	return		;funcret
  1180  0012AA                     __end_of_initLCD:
  1181                           	opt stack 0
  1182                           tblptru	equ	0xFF8
  1183                           tblptrh	equ	0xFF7
  1184                           tblptrl	equ	0xFF6
  1185                           tablat	equ	0xFF5
  1186                           prodh	equ	0xFF4
  1187                           prodl	equ	0xFF3
  1188                           wreg	equ	0xFE8
  1189                           postinc2	equ	0xFDE
  1190                           postdec2	equ	0xFDD
  1191                           fsr2h	equ	0xFDA
  1192                           fsr2l	equ	0xFD9
  1193                           status	equ	0xFD8
  1194                           
  1195 ;; *************** function _lcdInst *****************
  1196 ;; Defined at:
  1197 ;;		line 64 in file "lcd.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;  data            1    wreg     unsigned char 
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;  data            1    3[COMRAM] unsigned char 
  1202 ;; Return value:  Size  Location     Type
  1203 ;;                  1    wreg      void 
  1204 ;; Registers used:
  1205 ;;		wreg, status,2, status,0, cstack
  1206 ;; Tracked objects:
  1207 ;;		On entry : 0/0
  1208 ;;		On exit  : 0/0
  1209 ;;		Unchanged: 0/0
  1210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1212 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1214 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1215 ;;Total ram usage:        1 bytes
  1216 ;; Hardware stack levels used:    1
  1217 ;; Hardware stack levels required when called:    3
  1218 ;; This function calls:
  1219 ;;		_send_byte
  1220 ;; This function is called by:
  1221 ;;		_main
  1222 ;;		_initLCD
  1223 ;;		_lcd_shift_cursor
  1224 ;;		_lcd_shift_display
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           	psect	text7
  1229  0013AC                     __ptext7:
  1230                           	opt stack 0
  1231  0013AC                     _lcdInst:
  1232                           	opt stack 27
  1233                           
  1234                           ;incstack = 0
  1235                           ;lcdInst@data stored from wreg
  1236  0013AC  6E04               	movwf	lcdInst@data,c
  1237                           
  1238                           ;lcd.c: 65: LATDbits.LATD2 = 0;
  1239  0013AE  948C               	bcf	3980,2,c	;volatile
  1240                           
  1241                           ;lcd.c: 66: send_byte(data);
  1242  0013B0  5004               	movf	lcdInst@data,w,c
  1243  0013B2  ECC7  F009         	call	_send_byte
  1244  0013B6  0012               	return		;funcret
  1245  0013B8                     __end_of_lcdInst:
  1246                           	opt stack 0
  1247                           tblptru	equ	0xFF8
  1248                           tblptrh	equ	0xFF7
  1249                           tblptrl	equ	0xFF6
  1250                           tablat	equ	0xFF5
  1251                           prodh	equ	0xFF4
  1252                           prodl	equ	0xFF3
  1253                           wreg	equ	0xFE8
  1254                           postinc2	equ	0xFDE
  1255                           postdec2	equ	0xFDD
  1256                           fsr2h	equ	0xFDA
  1257                           fsr2l	equ	0xFD9
  1258                           status	equ	0xFD8
  1259                           
  1260 ;; *************** function _send_byte *****************
  1261 ;; Defined at:
  1262 ;;		line 55 in file "lcd.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;  data            1    wreg     unsigned char 
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;  data            1    2[COMRAM] unsigned char 
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  1    wreg      void 
  1269 ;; Registers used:
  1270 ;;		wreg, status,2, status,0, cstack
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1277 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1279 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1280 ;;Total ram usage:        1 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    2
  1283 ;; This function calls:
  1284 ;;		_send_nibble
  1285 ;; This function is called by:
  1286 ;;		_lcdInst
  1287 ;;		_initLCD
  1288 ;;		_putch
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292                           	psect	text8
  1293  00138E                     __ptext8:
  1294                           	opt stack 0
  1295  00138E                     _send_byte:
  1296                           	opt stack 26
  1297                           
  1298                           ;incstack = 0
  1299                           ;send_byte@data stored from wreg
  1300  00138E  6E03               	movwf	send_byte@data,c
  1301                           
  1302                           ;lcd.c: 57: send_nibble(data >> 4);
  1303  001390  3803               	swapf	send_byte@data,w,c
  1304  001392  0B0F               	andlw	15
  1305  001394  ECBC  F009         	call	_send_nibble
  1306                           
  1307                           ;lcd.c: 60: send_nibble(data);
  1308  001398  5003               	movf	send_byte@data,w,c
  1309  00139A  ECBC  F009         	call	_send_nibble
  1310  00139E  0012               	return		;funcret
  1311  0013A0                     __end_of_send_byte:
  1312                           	opt stack 0
  1313                           tblptru	equ	0xFF8
  1314                           tblptrh	equ	0xFF7
  1315                           tblptrl	equ	0xFF6
  1316                           tablat	equ	0xFF5
  1317                           prodh	equ	0xFF4
  1318                           prodl	equ	0xFF3
  1319                           wreg	equ	0xFE8
  1320                           postinc2	equ	0xFDE
  1321                           postdec2	equ	0xFDD
  1322                           fsr2h	equ	0xFDA
  1323                           fsr2l	equ	0xFD9
  1324                           status	equ	0xFD8
  1325                           
  1326 ;; *************** function _send_nibble *****************
  1327 ;; Defined at:
  1328 ;;		line 44 in file "lcd.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;  data            1    wreg     unsigned char 
  1331 ;; Auto vars:     Size  Location     Type
  1332 ;;  data            1    1[COMRAM] unsigned char 
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  1    wreg      void 
  1335 ;; Registers used:
  1336 ;;		wreg, status,2, status,0, cstack
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1343 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1345 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1346 ;;Total ram usage:        1 bytes
  1347 ;; Hardware stack levels used:    1
  1348 ;; Hardware stack levels required when called:    1
  1349 ;; This function calls:
  1350 ;;		_pulse_e
  1351 ;; This function is called by:
  1352 ;;		_send_byte
  1353 ;;		_initLCD
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           	psect	text9
  1358  001378                     __ptext9:
  1359                           	opt stack 0
  1360  001378                     _send_nibble:
  1361                           	opt stack 26
  1362                           
  1363                           ;incstack = 0
  1364                           ;send_nibble@data stored from wreg
  1365  001378  6E02               	movwf	send_nibble@data,c
  1366                           
  1367                           ;lcd.c: 46: LATD = (unsigned char)(LATD & 0x0F);
  1368  00137A  508C               	movf	3980,w,c	;volatile
  1369  00137C  0B0F               	andlw	15
  1370  00137E  6E8C               	movwf	3980,c	;volatile
  1371                           
  1372                           ;lcd.c: 47: LATD = (unsigned char)((data << 4) | LATD);
  1373  001380  3802               	swapf	send_nibble@data,w,c
  1374  001382  0BF0               	andlw	240
  1375  001384  108C               	iorwf	3980,w,c	;volatile
  1376  001386  6E8C               	movwf	3980,c	;volatile
  1377                           
  1378                           ;lcd.c: 48: pulse_e();
  1379  001388  EC98  F009         	call	_pulse_e	;wreg free
  1380  00138C  0012               	return		;funcret
  1381  00138E                     __end_of_send_nibble:
  1382                           	opt stack 0
  1383                           tblptru	equ	0xFF8
  1384                           tblptrh	equ	0xFF7
  1385                           tblptrl	equ	0xFF6
  1386                           tablat	equ	0xFF5
  1387                           prodh	equ	0xFF4
  1388                           prodl	equ	0xFF3
  1389                           wreg	equ	0xFE8
  1390                           postinc2	equ	0xFDE
  1391                           postdec2	equ	0xFDD
  1392                           fsr2h	equ	0xFDA
  1393                           fsr2l	equ	0xFD9
  1394                           status	equ	0xFD8
  1395                           
  1396 ;; *************** function _pulse_e *****************
  1397 ;; Defined at:
  1398 ;;		line 28 in file "lcd.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;		None
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;  interruptSta    1    0[COMRAM] unsigned char 
  1403 ;; Return value:  Size  Location     Type
  1404 ;;                  1    wreg      void 
  1405 ;; Registers used:
  1406 ;;		wreg
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1413 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1415 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1416 ;;Total ram usage:        1 bytes
  1417 ;; Hardware stack levels used:    1
  1418 ;; This function calls:
  1419 ;;		Nothing
  1420 ;; This function is called by:
  1421 ;;		_send_nibble
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text10
  1426  001330                     __ptext10:
  1427                           	opt stack 0
  1428  001330                     _pulse_e:
  1429                           	opt stack 26
  1430                           
  1431                           ;lcd.c: 29: unsigned char interruptState = INTCONbits.GIE;
  1432                           
  1433                           ;incstack = 0
  1434  001330  0E00               	movlw	0
  1435  001332  BEF2               	btfsc	intcon,7,c	;volatile
  1436  001334  0E01               	movlw	1
  1437  001336  6E01               	movwf	pulse_e@interruptState,c
  1438                           
  1439                           ;lcd.c: 30: (INTCONbits.GIE = 0);
  1440  001338  9EF2               	bcf	intcon,7,c	;volatile
  1441                           
  1442                           ;lcd.c: 31: LATDbits.LATD3 = 1;
  1443  00133A  868C               	bsf	3980,3,c	;volatile
  1444                           
  1445                           ;lcd.c: 34: _delay((unsigned long)((25)*(8000000/4000000.0)));
  1446  00133C  0E10               	movlw	16
  1447  00133E                     u487:
  1448  00133E  2EE8               	decfsz	wreg,f,c
  1449  001340  D7FE               	bra	u487
  1450  001342  D000               	nop2	
  1451                           
  1452                           ;lcd.c: 35: LATDbits.LATD3 = 0;
  1453  001344  968C               	bcf	3980,3,c	;volatile
  1454                           
  1455                           ;lcd.c: 36: _delay((unsigned long)((100)*(8000000/4000000.0)));
  1456  001346  0E42               	movlw	66
  1457  001348                     u497:
  1458  001348  2EE8               	decfsz	wreg,f,c
  1459  00134A  D7FE               	bra	u497
  1460  00134C  D000               	nop2	
  1461                           
  1462                           ;lcd.c: 37: INTCONbits.GIE = interruptState;
  1463  00134E  B001               	btfsc	pulse_e@interruptState,0,c
  1464  001350  D002               	bra	u15
  1465  001352  9EF2               	bcf	intcon,7,c	;volatile
  1466  001354  D001               	bra	u16
  1467  001356                     u15:
  1468  001356  8EF2               	bsf	intcon,7,c	;volatile
  1469  001358                     u16:
  1470  001358  0012               	return		;funcret
  1471  00135A                     __end_of_pulse_e:
  1472                           	opt stack 0
  1473                           tblptru	equ	0xFF8
  1474                           tblptrh	equ	0xFF7
  1475                           tblptrl	equ	0xFF6
  1476                           tablat	equ	0xFF5
  1477                           prodh	equ	0xFF4
  1478                           prodl	equ	0xFF3
  1479                           intcon	equ	0xFF2
  1480                           wreg	equ	0xFE8
  1481                           postinc2	equ	0xFDE
  1482                           postdec2	equ	0xFDD
  1483                           fsr2h	equ	0xFDA
  1484                           fsr2l	equ	0xFD9
  1485                           status	equ	0xFD8
  1486                           tblptru	equ	0xFF8
  1487                           tblptrh	equ	0xFF7
  1488                           tblptrl	equ	0xFF6
  1489                           tablat	equ	0xFF5
  1490                           prodh	equ	0xFF4
  1491                           prodl	equ	0xFF3
  1492                           intcon	equ	0xFF2
  1493                           wreg	equ	0xFE8
  1494                           postinc2	equ	0xFDE
  1495                           postdec2	equ	0xFDD
  1496                           fsr2h	equ	0xFDA
  1497                           fsr2l	equ	0xFD9
  1498                           status	equ	0xFD8
  1499                           
  1500                           	psect	rparam
  1501  0000                     tblptru	equ	0xFF8
  1502                           tblptrh	equ	0xFF7
  1503                           tblptrl	equ	0xFF6
  1504                           tablat	equ	0xFF5
  1505                           prodh	equ	0xFF4
  1506                           prodl	equ	0xFF3
  1507                           intcon	equ	0xFF2
  1508                           wreg	equ	0xFE8
  1509                           postinc2	equ	0xFDE
  1510                           postdec2	equ	0xFDD
  1511                           fsr2h	equ	0xFDA
  1512                           fsr2l	equ	0xFD9
  1513                           status	equ	0xFD8


Data Sizes:
    Strings     37
    Constant    14
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     22      22
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[10]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___lwdiv
    _putch->_send_byte
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1461
                                             20 COMRAM     2     2      0
                            _initLCD
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (1) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              22    18      4    1199
                                              7 COMRAM    13     9      4
                            ___lwdiv
                            _isdigit
                              _putch
                            _readADC (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      75
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     165
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      75
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (3) _send_byte                                            1     1      0      60
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (4) _send_nibble                                          1     1      0      30
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (5) _pulse_e                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     ___lwdiv
     _isdigit
     _putch
       _send_byte
         _send_nibble
           _pulse_e
     _readADC (ARG)
   _readADC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     16      16       1       17.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Dec 11 01:13:29 2018

                     l35 1314                       u15 1356                       u16 1358  
            __CFG_CPD$ON 000000              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l128 1194                      l540 12F2                      l981 12CC  
                    l967 1370                      l977 12C0                      l979 12C8  
                    l989 12E8             __CFG_CPB$OFF 000000                      u427 11DC  
                    u437 1234                      u447 124A                      u457 1262  
                    u467 1272                      u477 1294                      u487 133E  
                    u497 1348                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l1021 108E                     l1005 1040  
                   l1023 10A4                     l1041 10F2                     l1017 1070  
                   l1009 1050                     l1027 10A8                     l1061 114A  
                   l1053 111E                     l1039 10EE                     l1057 1134  
                   l1067 119C                     l1079 11D0                     _ADON 007E10  
                   STR_1 1020                     STR_2 102A                     STR_3 100F  
                   _LATD 000F8C                     _main 11B6                     fsr2h 000FDA  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ?_main 0001          __end_of___lwdiv 12FC  
                  _TRISD 000F95            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
        __end_of_lcdInst 13B8           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
        __end_of_readADC 1330          __end_of_initLCD 12AA           __CFG_EBTRB$OFF 000000  
        __end_of_isdigit 1378                    _putch 13A0                    tablat 000FF5  
        send_nibble@data 0002          __end_of_pulse_e 135A                    status 000FD8  
         __CFG_PBADEN$ON 000000          __initialization 13B8             __end_of_main 1244  
                 ??_main 0015            __activetblptr 000002                   _ADCON0 000FC2  
                 _ADCON1 000FC1             ?_send_nibble 0001                   _ADRESH 000FC4  
                 _ADRESL 000FC3                   ?_putch 0001                   _OSCCON 000FD3  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000                ??___lwdiv 0005  
              ??_lcdInst 0004                   _printf 1036                ??_readADC 0003  
              ??_initLCD 0005                ??_isdigit 0001             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_pulse_e 0001    pulse_e@interruptState 0001               __accesstop 0080  
__end_of__initialization 13B8            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_putch 13AC                  ??_putch 0004       __size_of_send_byte 0012  
                ?_printf 0008     __size_of_send_nibble 0016                  __Hparam 0000  
                __Lparam 0000                  ___lwdiv 12AA             __psmallconst 1000  
                __pcinit 13B8                  __ramtop 1000                  _lcdInst 13AC  
                __ptext0 11B6                  __ptext1 12FC                  __ptext2 1036  
                __ptext3 13A0                  __ptext4 135A                  __ptext5 12AA  
                __ptext6 1244                  __ptext7 13AC                  __ptext8 138E  
                __ptext9 1378          __size_of_printf 0180                  _readADC 12FC  
                _initLCD 1244        __end_of_hexpowers 1009                  _isdigit 135A  
                _pulse_e 1330     end_of_initialization 13B8    __end_of_LCD_SIZE_HORZ 100E  
      __end_of_send_byte 13A0    __end_of_LCD_SIZE_VERT 100D            __Lmediumconst 0000  
                printf@c 0014                  printf@f 0008                  postdec2 000FDD  
                postinc2 000FDE                _TRISAbits 000F92            send_byte@data 0003  
         __end_of_printf 11B6      start_initialization 13B8         __CFG_OSC$INTIO67 000000  
       __CFG_LPT1OSC$OFF 000000                 ??_printf 000C         ___lwdiv@dividend 0001  
      __CFG_CCP2MX$PORTC 000000                 ?___lwdiv 0001                 ?_lcdInst 0001  
               ?_readADC 0001                 ?_initLCD 0001              __smallconst 1000  
               ?_isdigit 0001                _hexpowers 1001            ??_send_nibble 0002  
       ___lwdiv@quotient 0005                 ?_pulse_e 0001           __size_of_putch 000C  
               _LATDbits 000F8C                _send_byte 138E           _LCD_LINE1_ADDR 100B  
         _LCD_LINE2_ADDR 100E           _LCD_LINE3_ADDR 100A           _LCD_LINE4_ADDR 1009  
       __CFG_WDTPS$32768 000000               _ADCON0bits 000FC2               _ADCON2bits 000FC0  
             printf@flag 000D               printf@prec 0013   __end_of_LCD_LINE1_ADDR 100C  
 __end_of_LCD_LINE2_ADDR 100F   __end_of_LCD_LINE3_ADDR 100B   __end_of_LCD_LINE4_ADDR 100A  
    __end_of_send_nibble 138E               ?_send_byte 0001                 __Hrparam 0000  
               __Lrparam 0000       __CFG_BOREN$SBORDIS 000000         __size_of___lwdiv 0052  
         readADC@channel 0005              _isdigit$603 0002         __size_of_lcdInst 000C  
       __size_of_readADC 0034         __size_of_initLCD 0066         __size_of_isdigit 001E  
        ___lwdiv@divisor 0003          ___lwdiv@counter 0007                 __ptext10 1330  
       __size_of_pulse_e 002A            __size_of_main 008E                printf@idx 0010  
              printf@val 0011                putch@data 0004               _INTCONbits 000FF2  
               isdigit@c 0003              _send_nibble 1378            _LCD_SIZE_HORZ 100D  
          _LCD_SIZE_VERT 100C              ??_send_byte 0003                 printf@ap 000E  
            lcdInst@data 0004  
