

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Sep 20 11:57:10 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,inline
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    19  0000                     
    20                           ; Version 1.42
    21                           ; Generated 13/04/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F2550 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	idataCOMRAM
    56  000338                     __pidataCOMRAM:
    57                           	opt stack 0
    58                           
    59                           ;initializer for _UART
    60  000338  16                 	db	low _uart
    61  000339  00                 	db	high _uart
    62                           
    63                           ;initializer for _dataEnd
    64  00033A  F0                 	db	240
    65                           
    66                           ;initializer for _KPDState
    67  00033B  01                 	db	1
    68                           
    69                           ;initializer for Keypad@dataEnd
    70  00033C  F0                 	db	240
    71  0000                     _SPBRG	set	4015
    72  0000                     _TXSTAbits	set	4012
    73  0000                     _LATAbits	set	3977
    74  0000                     _PORTAbits	set	3968
    75  0000                     _PORTBbits	set	3969
    76  0000                     _RCREG	set	4014
    77  0000                     _RCSTAbits	set	4011
    78  0000                     _TXREG	set	4013
    79  0000                     _INTCONbits	set	4082
    80  0000                     _RCONbits	set	4048
    81  0000                     _ADCON0bits	set	4034
    82  0000                     _ADCON1	set	4033
    83  0000                     _LATC	set	3979
    84  0000                     _LATB	set	3978
    85  0000                     _LATA	set	3977
    86  0000                     _TRISC	set	3988
    87  0000                     _TRISB	set	3987
    88  0000                     _TRISA	set	3986
    89  0000                     _OSCCONbits	set	4051
    90  0000                     _TRISC7	set	31911
    91  0000                     _TRISC6	set	31910
    92  0000                     _TRMT	set	32097
    93  0000                     _RCIE	set	31981
    94  0000                     _RCIF	set	31989
    95  0000                     _TXIE	set	31980
    96  0000                     _TXIF	set	31988
    97  0000                     _ADIE	set	31982
    98  0000                     _PEIE	set	32662
    99                           
   100                           ; #config settings
   101  0000                     
   102                           	psect	cinit
   103  0002C2                     __pcinit:
   104                           	opt stack 0
   105  0002C2                     start_initialization:
   106                           	opt stack 0
   107  0002C2                     __initialization:
   108                           	opt stack 0
   109                           
   110                           ; Initialize objects allocated to COMRAM (5 bytes)
   111                           ; load TBLPTR registers with __pidataCOMRAM
   112  0002C2  0E38               	movlw	low __pidataCOMRAM
   113  0002C4  6EF6               	movwf	tblptrl,c
   114  0002C6  0E03               	movlw	high __pidataCOMRAM
   115  0002C8  6EF7               	movwf	tblptrh,c
   116  0002CA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   117  0002CC  6EF8               	movwf	tblptru,c
   118  0002CE  EE00  F036         	lfsr	0,__pdataCOMRAM
   119  0002D2  EE10 F005          	lfsr	1,5
   120  0002D6                     copy_data0:
   121  0002D6  0009               	tblrd		*+
   122  0002D8  CFF5 FFEE          	movff	tablat,postinc0
   123  0002DC  50E5               	movf	postdec1,w,c
   124  0002DE  50E1               	movf	fsr1l,w,c
   125  0002E0  E1FA               	bnz	copy_data0
   126                           
   127                           ; Clear objects allocated to COMRAM (34 bytes)
   128  0002E2  EE00  F001         	lfsr	0,__pbssCOMRAM
   129  0002E6  0E22               	movlw	34
   130  0002E8                     clear_0:
   131  0002E8  6AEE               	clrf	postinc0,c
   132  0002EA  06E8               	decf	wreg,f,c
   133  0002EC  E1FD               	bnz	clear_0
   134  0002EE                     end_of_initialization:
   135                           	opt stack 0
   136  0002EE                     __end_of__initialization:
   137                           	opt stack 0
   138  0002EE  903B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   139  0002F0  923B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   140  0002F2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   141  0002F4  6EF8               	movwf	tblptru,c
   142  0002F6  0100               	movlb	0
   143  0002F8  EF97  F001         	goto	_main	;jump to C main() function
   144                           tblptru	equ	0xFF8
   145                           tblptrh	equ	0xFF7
   146                           tblptrl	equ	0xFF6
   147                           tablat	equ	0xFF5
   148                           postinc0	equ	0xFEE
   149                           wreg	equ	0xFE8
   150                           postdec1	equ	0xFE5
   151                           fsr1l	equ	0xFE1
   152                           
   153                           	psect	bssCOMRAM
   154  000001                     __pbssCOMRAM:
   155                           	opt stack 0
   156  000001                     _keypadFlags:
   157                           	opt stack 0
   158  000001                     	ds	3
   159  000004                     	ds	1
   160  000005                     _UARTinterruptState:
   161                           	opt stack 0
   162  000005                     	ds	1
   163  000006                     _arr_dataRX:
   164                           	opt stack 0
   165  000006                     	ds	16
   166  000016                     _uart:
   167                           	opt stack 0
   168  000016                     	ds	12
   169  000022                     Keypad@dataOut:
   170                           	opt stack 0
   171  000022                     	ds	1
   172                           tblptru	equ	0xFF8
   173                           tblptrh	equ	0xFF7
   174                           tblptrl	equ	0xFF6
   175                           tablat	equ	0xFF5
   176                           postinc0	equ	0xFEE
   177                           wreg	equ	0xFE8
   178                           postdec1	equ	0xFE5
   179                           fsr1l	equ	0xFE1
   180                           
   181                           	psect	dataCOMRAM
   182  000036                     __pdataCOMRAM:
   183                           	opt stack 0
   184  000036                     _UART:
   185                           	opt stack 0
   186  000036                     	ds	2
   187  000038                     	ds	1
   188  000039                     _KPDState:
   189                           	opt stack 0
   190  000039                     	ds	1
   191  00003A                     Keypad@dataEnd:
   192                           	opt stack 0
   193  00003A                     	ds	1
   194                           tblptru	equ	0xFF8
   195                           tblptrh	equ	0xFF7
   196                           tblptrl	equ	0xFF6
   197                           tablat	equ	0xFF5
   198                           postinc0	equ	0xFEE
   199                           wreg	equ	0xFE8
   200                           postdec1	equ	0xFE5
   201                           fsr1l	equ	0xFE1
   202                           
   203                           	psect	cstackCOMRAM
   204  000023                     __pcstackCOMRAM:
   205                           	opt stack 0
   206  000023                     ??_interruptHandlerUART:
   207  000023                     
   208                           ; 1 bytes @ 0x0
   209  000023                     	ds	17
   210  000034                     readKeyboard@i:
   211                           	opt stack 0
   212                           
   213                           ; 1 bytes @ 0x11
   214  000034                     	ds	1
   215  000035                     ??_keypadRoutine:
   216                           
   217                           ; 1 bytes @ 0x12
   218  000035                     	ds	1
   219  000036                     tblptru	equ	0xFF8
   220                           tblptrh	equ	0xFF7
   221                           tblptrl	equ	0xFF6
   222                           tablat	equ	0xFF5
   223                           postinc0	equ	0xFEE
   224                           wreg	equ	0xFE8
   225                           postdec1	equ	0xFE5
   226                           fsr1l	equ	0xFE1
   227                           
   228                           ; 1 bytes @ 0x13
   229 ;;
   230 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   231 ;;
   232 ;; *************** function _main *****************
   233 ;; Defined at:
   234 ;;		line 13 in file "main.c"
   235 ;; Parameters:    Size  Location     Type
   236 ;;		None
   237 ;; Auto vars:     Size  Location     Type
   238 ;;		None
   239 ;; Return value:  Size  Location     Type
   240 ;;                  1    wreg      void 
   241 ;; Registers used:
   242 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   243 ;; Tracked objects:
   244 ;;		On entry : 0/0
   245 ;;		On exit  : 0/0
   246 ;;		Unchanged: 0/0
   247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   248 ;;      Params:         0       0       0       0       0       0       0       0       0
   249 ;;      Locals:         0       0       0       0       0       0       0       0       0
   250 ;;      Temps:          0       0       0       0       0       0       0       0       0
   251 ;;      Totals:         0       0       0       0       0       0       0       0       0
   252 ;;Total ram usage:        0 bytes
   253 ;; Hardware stack levels required when called:    3
   254 ;; This function calls:
   255 ;;		_keypadRoutine
   256 ;;		_machineConfig
   257 ;; This function is called by:
   258 ;;		Startup code after reset
   259 ;; This function uses a non-reentrant model
   260 ;;
   261                           
   262                           	psect	text0
   263  00032E                     __ptext0:
   264                           	opt stack 0
   265  00032E                     _main:
   266                           	opt stack 28
   267                           
   268                           ;main.c: 14: machineConfig();
   269                           
   270                           ;incstack = 0
   271  00032E  EC7E  F001         	call	_machineConfig	;wreg free
   272  000332                     l988:
   273                           
   274                           ;main.c: 17: keypadRoutine();
   275  000332  EC2B  F001         	call	_keypadRoutine	;wreg free
   276  000336  D7FD               	goto	l988
   277  000338                     __end_of_main:
   278                           	opt stack 0
   279                           tblptru	equ	0xFF8
   280                           tblptrh	equ	0xFF7
   281                           tblptrl	equ	0xFF6
   282                           tablat	equ	0xFF5
   283                           postinc0	equ	0xFEE
   284                           wreg	equ	0xFE8
   285                           postdec1	equ	0xFE5
   286                           fsr1l	equ	0xFE1
   287                           
   288 ;; *************** function _machineConfig *****************
   289 ;; Defined at:
   290 ;;		line 3 in file "machineConfig.c"
   291 ;; Parameters:    Size  Location     Type
   292 ;;		None
   293 ;; Auto vars:     Size  Location     Type
   294 ;;		None
   295 ;; Return value:  Size  Location     Type
   296 ;;                  1    wreg      void 
   297 ;; Registers used:
   298 ;;		wreg, status,2
   299 ;; Tracked objects:
   300 ;;		On entry : 0/0
   301 ;;		On exit  : 0/0
   302 ;;		Unchanged: 0/0
   303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   304 ;;      Params:         0       0       0       0       0       0       0       0       0
   305 ;;      Locals:         0       0       0       0       0       0       0       0       0
   306 ;;      Temps:          0       0       0       0       0       0       0       0       0
   307 ;;      Totals:         0       0       0       0       0       0       0       0       0
   308 ;;Total ram usage:        0 bytes
   309 ;; Hardware stack levels used:    1
   310 ;; Hardware stack levels required when called:    1
   311 ;; This function calls:
   312 ;;		Nothing
   313 ;; This function is called by:
   314 ;;		_main
   315 ;; This function uses a non-reentrant model
   316 ;;
   317                           
   318                           	psect	text1
   319  0002FC                     __ptext1:
   320                           	opt stack 0
   321  0002FC                     _machineConfig:
   322                           	opt stack 29
   323                           
   324                           ;machineConfig.c: 6: OSCCONbits.IRCF = 0b111;
   325                           
   326                           ;incstack = 0
   327  0002FC  88D3               	bsf	4051,4,c	;volatile
   328  0002FE  8AD3               	bsf	4051,5,c	;volatile
   329  000300  8CD3               	bsf	4051,6,c	;volatile
   330                           
   331                           ;machineConfig.c: 7: OSCCONbits.SCS1 = 1;
   332  000302  82D3               	bsf	4051,1,c	;volatile
   333                           
   334                           ;machineConfig.c: 8: OSCCONbits.SCS0 = 0;
   335  000304  90D3               	bcf	4051,0,c	;volatile
   336                           
   337                           ;machineConfig.c: 11: TRISA = 0b11011111;
   338  000306  0EDF               	movlw	223
   339  000308  6E92               	movwf	3986,c	;volatile
   340                           
   341                           ;machineConfig.c: 13: TRISB = 0b00001111;
   342  00030A  0E0F               	movlw	15
   343  00030C  6E93               	movwf	3987,c	;volatile
   344                           
   345                           ;machineConfig.c: 14: TRISC = 0b10000000;
   346  00030E  0E80               	movlw	128
   347  000310  6E94               	movwf	3988,c	;volatile
   348                           
   349                           ;machineConfig.c: 17: LATA = 0x00;
   350  000312  0E00               	movlw	0
   351  000314  6E89               	movwf	3977,c	;volatile
   352                           
   353                           ;machineConfig.c: 18: LATB = 0xF0;
   354  000316  0EF0               	movlw	240
   355  000318  6E8A               	movwf	3978,c	;volatile
   356                           
   357                           ;machineConfig.c: 19: LATC = 0b10000000;
   358  00031A  0E80               	movlw	128
   359  00031C  6E8B               	movwf	3979,c	;volatile
   360                           
   361                           ;machineConfig.c: 22: ADCON1 = 0x0F;
   362  00031E  0E0F               	movlw	15
   363  000320  6EC1               	movwf	4033,c	;volatile
   364                           
   365                           ;machineConfig.c: 23: ADCON0bits.ADON = 0;
   366  000322  90C2               	bcf	4034,0,c	;volatile
   367                           
   368                           ;machineConfig.c: 26: PEIE = 1;
   369  000324  8CF2               	bsf	intcon,6,c	;volatile
   370                           
   371                           ;machineConfig.c: 27: ADIE = 0;
   372  000326  9C9D               	bcf	3997,6,c	;volatile
   373                           
   374                           ;machineConfig.c: 28: RCONbits.IPEN = 0;
   375  000328  9ED0               	bcf	4048,7,c	;volatile
   376                           
   377                           ;machineConfig.c: 29: (INTCONbits.GIE = 0);
   378  00032A  9EF2               	bcf	intcon,7,c	;volatile
   379  00032C  0012               	return		;funcret
   380  00032E                     __end_of_machineConfig:
   381                           	opt stack 0
   382                           tblptru	equ	0xFF8
   383                           tblptrh	equ	0xFF7
   384                           tblptrl	equ	0xFF6
   385                           tablat	equ	0xFF5
   386                           intcon	equ	0xFF2
   387                           postinc0	equ	0xFEE
   388                           wreg	equ	0xFE8
   389                           postdec1	equ	0xFE5
   390                           fsr1l	equ	0xFE1
   391                           
   392 ;; *************** function _keypadRoutine *****************
   393 ;; Defined at:
   394 ;;		line 47 in file "Keypad.c"
   395 ;; Parameters:    Size  Location     Type
   396 ;;		None
   397 ;; Auto vars:     Size  Location     Type
   398 ;;		None
   399 ;; Return value:  Size  Location     Type
   400 ;;                  1    wreg      void 
   401 ;; Registers used:
   402 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   403 ;; Tracked objects:
   404 ;;		On entry : 0/0
   405 ;;		On exit  : 0/0
   406 ;;		Unchanged: 0/0
   407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   408 ;;      Params:         0       0       0       0       0       0       0       0       0
   409 ;;      Locals:         0       0       0       0       0       0       0       0       0
   410 ;;      Temps:          1       0       0       0       0       0       0       0       0
   411 ;;      Totals:         1       0       0       0       0       0       0       0       0
   412 ;;Total ram usage:        1 bytes
   413 ;; Hardware stack levels used:    1
   414 ;; Hardware stack levels required when called:    2
   415 ;; This function calls:
   416 ;;		_readKeyboard
   417 ;; This function is called by:
   418 ;;		_main
   419 ;; This function uses a non-reentrant model
   420 ;;
   421                           
   422                           	psect	text2
   423  000256                     __ptext2:
   424                           	opt stack 0
   425  000256                     _keypadRoutine:
   426                           	opt stack 28
   427                           
   428                           ;Keypad.c: 56: if(PORTAbits.RA4){
   429                           
   430                           ;incstack = 0
   431  000256  A880               	btfss	3968,4,c	;volatile
   432  000258  D009               	goto	l964
   433                           
   434                           ;Keypad.c: 57: LATAbits.LATA5 = 0;
   435  00025A  9A89               	bcf	3977,5,c	;volatile
   436                           
   437                           ;Keypad.c: 58: TRISA = 0xFF;
   438  00025C  6892               	setf	3986,c	;volatile
   439  00025E                     l140:
   440  00025E  B880               	btfsc	3968,4,c	;volatile
   441  000260  D7FE               	goto	l140
   442                           
   443                           ;Keypad.c: 60: LATA = 0x00;
   444  000262  0E00               	movlw	0
   445  000264  6E89               	movwf	3977,c	;volatile
   446                           
   447                           ;Keypad.c: 61: TRISA = 0b11011111;
   448  000266  0EDF               	movlw	223
   449  000268  6E92               	movwf	3986,c	;volatile
   450                           
   451                           ;Keypad.c: 62: }
   452  00026A  0012               	return	
   453  00026C                     l964:
   454                           
   455                           ;Keypad.c: 65: else{
   456                           ;Keypad.c: 66: TRISA = 0b11011111;
   457  00026C  0EDF               	movlw	223
   458  00026E  6E92               	movwf	3986,c	;volatile
   459                           
   460                           ;Keypad.c: 69: dataOut = readKeyboard();
   461  000270  ECF1  F000         	call	_readKeyboard	;wreg free
   462  000274  6E22               	movwf	Keypad@dataOut,c
   463                           
   464                           ;Keypad.c: 72: if (dataOut != 0xF0){
   465  000276  0EF0               	movlw	240
   466  000278  1822               	xorwf	Keypad@dataOut,w,c
   467  00027A  B4D8               	btfsc	status,2,c
   468  00027C  0012               	return	
   469                           
   470                           ;Keypad.c: 77: _delay((unsigned long)((20)*(8000000/4000.0)));
   471  00027E  0E34               	movlw	52
   472  000280  6E35               	movwf	??_keypadRoutine& (0+255),c
   473  000282  0EF2               	movlw	242
   474  000284                     u537:
   475  000284  2EE8               	decfsz	wreg,f,c
   476  000286  D7FE               	bra	u537
   477  000288  2E35               	decfsz	??_keypadRoutine& (0+255),f,c
   478  00028A  D7FC               	bra	u537
   479                           
   480                           ;Keypad.c: 78: if (dataOut == readKeyboard()){
   481  00028C  ECF1  F000         	call	_readKeyboard	;wreg free
   482  000290  1822               	xorwf	Keypad@dataOut,w,c
   483  000292  A4D8               	btfss	status,2,c
   484  000294  D011               	goto	l984
   485                           
   486                           ;Keypad.c: 83: LATA = dataOut & 0b00001111U;
   487  000296  5022               	movf	Keypad@dataOut,w,c
   488  000298  0B0F               	andlw	15
   489  00029A  6E89               	movwf	3977,c	;volatile
   490                           
   491                           ;Keypad.c: 84: TRISA = 0b11010000;
   492  00029C  0ED0               	movlw	208
   493  00029E  6E92               	movwf	3986,c	;volatile
   494                           
   495                           ;Keypad.c: 85: LATAbits.LATA5 = 1;
   496  0002A0  8A89               	bsf	3977,5,c	;volatile
   497                           
   498                           ;Keypad.c: 88: while (dataOut == readKeyboard()){
   499  0002A2  D005               	goto	l982
   500  0002A4                     l147:
   501                           
   502                           ;Keypad.c: 92: if(PORTAbits.RA4){
   503  0002A4  A880               	btfss	3968,4,c	;volatile
   504  0002A6  D003               	goto	l982
   505                           
   506                           ;Keypad.c: 93: TRISA = 0xFF;
   507  0002A8  6892               	setf	3986,c	;volatile
   508  0002AA                     l149:
   509  0002AA  B880               	btfsc	3968,4,c	;volatile
   510  0002AC  D7FE               	goto	l149
   511  0002AE                     l982:
   512  0002AE  ECF1  F000         	call	_readKeyboard	;wreg free
   513  0002B2  1822               	xorwf	Keypad@dataOut,w,c
   514  0002B4  B4D8               	btfsc	status,2,c
   515  0002B6  D7F6               	goto	l147
   516  0002B8                     l984:
   517                           
   518                           ;Keypad.c: 96: }
   519                           ;Keypad.c: 97: }
   520                           ;Keypad.c: 98: }
   521                           ;Keypad.c: 99: }
   522                           ;Keypad.c: 103: LATA = 0x00;
   523  0002B8  0E00               	movlw	0
   524  0002BA  6E89               	movwf	3977,c	;volatile
   525                           
   526                           ;Keypad.c: 104: TRISA = 0b11011111;
   527  0002BC  0EDF               	movlw	223
   528  0002BE  6E92               	movwf	3986,c	;volatile
   529  0002C0  0012               	return	
   530  0002C2                     __end_of_keypadRoutine:
   531                           	opt stack 0
   532                           tblptru	equ	0xFF8
   533                           tblptrh	equ	0xFF7
   534                           tblptrl	equ	0xFF6
   535                           tablat	equ	0xFF5
   536                           intcon	equ	0xFF2
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           postdec1	equ	0xFE5
   540                           fsr1l	equ	0xFE1
   541                           status	equ	0xFD8
   542                           
   543 ;; *************** function _readKeyboard *****************
   544 ;; Defined at:
   545 ;;		line 14 in file "Keypad.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;		None
   548 ;; Auto vars:     Size  Location     Type
   549 ;;  i               1   17[COMRAM] unsigned char 
   550 ;; Return value:  Size  Location     Type
   551 ;;                  1    wreg      unsigned char 
   552 ;; Registers used:
   553 ;;		wreg, status,2, status,0, prodl, prodh
   554 ;; Tracked objects:
   555 ;;		On entry : 0/0
   556 ;;		On exit  : 0/0
   557 ;;		Unchanged: 0/0
   558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   559 ;;      Params:         0       0       0       0       0       0       0       0       0
   560 ;;      Locals:         1       0       0       0       0       0       0       0       0
   561 ;;      Temps:          0       0       0       0       0       0       0       0       0
   562 ;;      Totals:         1       0       0       0       0       0       0       0       0
   563 ;;Total ram usage:        1 bytes
   564 ;; Hardware stack levels used:    1
   565 ;; Hardware stack levels required when called:    1
   566 ;; This function calls:
   567 ;;		Nothing
   568 ;; This function is called by:
   569 ;;		_keypadRoutine
   570 ;;		_keypadRoutine_StateBased
   571 ;;		_keypadRoutineUART
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575                           	psect	text3
   576  0001E2                     __ptext3:
   577                           	opt stack 0
   578  0001E2                     _readKeyboard:
   579                           	opt stack 28
   580                           
   581                           ;Keypad.c: 25: for(unsigned char i = 0; i < 4; i++){
   582                           
   583                           ;incstack = 0
   584  0001E2  0E00               	movlw	0
   585  0001E4  6E34               	movwf	readKeyboard@i,c
   586  0001E6                     l898:
   587  0001E6  0E03               	movlw	3
   588  0001E8  6434               	cpfsgt	readKeyboard@i,c
   589  0001EA  D001               	goto	l902
   590  0001EC  D032               	goto	l940
   591  0001EE                     l902:
   592                           
   593                           ;Keypad.c: 26: if(i == 0)
   594  0001EE  5034               	movf	readKeyboard@i,w,c
   595  0001F0  A4D8               	btfss	status,2,c
   596  0001F2  D002               	goto	l906
   597                           
   598                           ;Keypad.c: 27: LATB = 0x10;
   599  0001F4  0E10               	movlw	16
   600  0001F6  D010               	goto	L3
   601  0001F8                     l906:
   602                           
   603                           ;Keypad.c: 28: else if(i == 1)
   604  0001F8  0434               	decf	readKeyboard@i,w,c
   605  0001FA  A4D8               	btfss	status,2,c
   606  0001FC  D002               	goto	l910
   607                           
   608                           ;Keypad.c: 29: LATB = 0x20;
   609  0001FE  0E20               	movlw	32
   610  000200  D00B               	goto	L3
   611  000202                     l910:
   612                           
   613                           ;Keypad.c: 30: else if(i == 2)
   614  000202  0E02               	movlw	2
   615  000204  1834               	xorwf	readKeyboard@i,w,c
   616  000206  A4D8               	btfss	status,2,c
   617  000208  D002               	goto	l914
   618                           
   619                           ;Keypad.c: 31: LATB = 0x40;
   620  00020A  0E40               	movlw	64
   621  00020C  D005               	goto	L3
   622  00020E                     l914:
   623                           
   624                           ;Keypad.c: 32: else if(i == 3)
   625  00020E  0E03               	movlw	3
   626  000210  1834               	xorwf	readKeyboard@i,w,c
   627  000212  A4D8               	btfss	status,2,c
   628  000214  D002               	goto	l918
   629                           
   630                           ;Keypad.c: 33: LATB = 0x80;
   631  000216  0E80               	movlw	128
   632  000218                     L3:
   633  000218  6E8A               	movwf	3978,c	;volatile
   634  00021A                     l918:
   635                           
   636                           ;Keypad.c: 35: if(PORTBbits.RB0)
   637  00021A  A081               	btfss	3969,0,c	;volatile
   638  00021C  D004               	goto	l132
   639                           
   640                           ;Keypad.c: 36: return (i * 4U);
   641  00021E  5034               	movf	readKeyboard@i,w,c
   642  000220  0D04               	mullw	4
   643  000222  50F3               	movf	prodl,w,c
   644  000224  0012               	return	
   645  000226                     l132:
   646                           
   647                           ;Keypad.c: 37: if(PORTBbits.RB1)
   648  000226  A281               	btfss	3969,1,c	;volatile
   649  000228  D004               	goto	l134
   650                           
   651                           ;Keypad.c: 38: return (i * 4U) + 1U;
   652  00022A  5034               	movf	readKeyboard@i,w,c
   653  00022C  0D04               	mullw	4
   654  00022E  28F3               	incf	prodl,w,c
   655  000230  0012               	return	
   656  000232                     l134:
   657                           
   658                           ;Keypad.c: 39: if(PORTBbits.RB2)
   659  000232  A481               	btfss	3969,2,c	;volatile
   660  000234  D005               	goto	l135
   661                           
   662                           ;Keypad.c: 40: return (i * 4U) + 2U;
   663  000236  5034               	movf	readKeyboard@i,w,c
   664  000238  0D04               	mullw	4
   665  00023A  50F3               	movf	prodl,w,c
   666  00023C  0F02               	addlw	2
   667  00023E  0012               	return	
   668  000240                     l135:
   669                           
   670                           ;Keypad.c: 41: if(PORTBbits.RB3)
   671  000240  A681               	btfss	3969,3,c	;volatile
   672  000242  D005               	goto	l936
   673                           
   674                           ;Keypad.c: 42: return (i * 4U) + 3U;
   675  000244  5034               	movf	readKeyboard@i,w,c
   676  000246  0D04               	mullw	4
   677  000248  50F3               	movf	prodl,w,c
   678  00024A  0F03               	addlw	3
   679  00024C  0012               	return	
   680  00024E                     l936:
   681  00024E  2A34               	incf	readKeyboard@i,f,c
   682  000250  D7CA               	goto	l898
   683  000252                     l940:
   684                           
   685                           ;Keypad.c: 43: }
   686                           ;Keypad.c: 44: return 0xF0;
   687  000252  0EF0               	movlw	240
   688  000254  0012               	return	
   689  000256                     __end_of_readKeyboard:
   690                           	opt stack 0
   691                           tblptru	equ	0xFF8
   692                           tblptrh	equ	0xFF7
   693                           tblptrl	equ	0xFF6
   694                           tablat	equ	0xFF5
   695                           prodl	equ	0xFF3
   696                           intcon	equ	0xFF2
   697                           postinc0	equ	0xFEE
   698                           wreg	equ	0xFE8
   699                           postdec1	equ	0xFE5
   700                           fsr1l	equ	0xFE1
   701                           status	equ	0xFD8
   702                           
   703 ;; *************** function _interruptHandlerUART *****************
   704 ;; Defined at:
   705 ;;		line 10 in file "interruptUART.c"
   706 ;; Parameters:    Size  Location     Type
   707 ;;		None
   708 ;; Auto vars:     Size  Location     Type
   709 ;;		None
   710 ;; Return value:  Size  Location     Type
   711 ;;                  1    wreg      void 
   712 ;; Registers used:
   713 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   714 ;; Tracked objects:
   715 ;;		On entry : 0/0
   716 ;;		On exit  : 0/0
   717 ;;		Unchanged: 0/0
   718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   719 ;;      Params:         0       0       0       0       0       0       0       0       0
   720 ;;      Locals:         0       0       0       0       0       0       0       0       0
   721 ;;      Temps:         17       0       0       0       0       0       0       0       0
   722 ;;      Totals:        17       0       0       0       0       0       0       0       0
   723 ;;Total ram usage:       17 bytes
   724 ;; Hardware stack levels used:    1
   725 ;; This function calls:
   726 ;;		Nothing
   727 ;; This function is called by:
   728 ;;		Interrupt level 2
   729 ;; This function uses a non-reentrant model
   730 ;;
   731                           
   732                           	psect	intcode
   733  000008                     __pintcode:
   734                           	opt stack 0
   735  000008                     _interruptHandlerUART:
   736                           	opt stack 28
   737                           
   738                           ;incstack = 0
   739  000008  823B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   740  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
   741                           tblptru	equ	0xFF8
   742                           tblptrh	equ	0xFF7
   743                           tblptrl	equ	0xFF6
   744                           tablat	equ	0xFF5
   745                           prodl	equ	0xFF3
   746                           intcon	equ	0xFF2
   747                           postinc0	equ	0xFEE
   748                           wreg	equ	0xFE8
   749                           postdec1	equ	0xFE5
   750                           fsr1l	equ	0xFE1
   751                           status	equ	0xFD8
   752                           
   753                           	psect	intcode_body
   754  000012                     __pintcode_body:
   755                           	opt stack 28
   756  000012                     int_func:
   757                           	opt stack 28
   758  000012  0006               	pop		; remove dummy address from shadow register refresh
   759  000014  CFFA F026          	movff	pclath,??_interruptHandlerUART+3
   760  000018  CFFB F027          	movff	pclatu,??_interruptHandlerUART+4
   761  00001C  CFE9 F028          	movff	fsr0l,??_interruptHandlerUART+5
   762  000020  CFEA F029          	movff	fsr0h,??_interruptHandlerUART+6
   763  000024  CFE1 F02A          	movff	fsr1l,??_interruptHandlerUART+7
   764  000028  CFE2 F02B          	movff	fsr1h,??_interruptHandlerUART+8
   765  00002C  CFD9 F02C          	movff	fsr2l,??_interruptHandlerUART+9
   766  000030  CFDA F02D          	movff	fsr2h,??_interruptHandlerUART+10
   767  000034  CFF3 F02E          	movff	prodl,??_interruptHandlerUART+11
   768  000038  CFF4 F02F          	movff	prodh,??_interruptHandlerUART+12
   769  00003C  CFF6 F030          	movff	tblptrl,??_interruptHandlerUART+13
   770  000040  CFF7 F031          	movff	tblptrh,??_interruptHandlerUART+14
   771  000044  CFF8 F032          	movff	tblptru,??_interruptHandlerUART+15
   772  000048  CFF5 F033          	movff	tablat,??_interruptHandlerUART+16
   773                           
   774                           ;interruptUART.c: 17: if(TXIF){
   775  00004C  A89E               	btfss	3998,4,c	;volatile
   776  00004E  D044               	goto	i2l1008
   777                           
   778                           ;interruptUART.c: 19: UARTinterruptState = INTCONbits.GIE;
   779  000050  0E00               	movlw	0
   780  000052  BEF2               	btfsc	intcon,7,c	;volatile
   781  000054  0E01               	movlw	1
   782  000056  6E05               	movwf	_UARTinterruptState,c	;volatile
   783                           
   784                           ;interruptUART.c: 20: (INTCONbits.GIE = 0);
   785  000058  9EF2               	bcf	intcon,7,c	;volatile
   786                           
   787                           ;interruptUART.c: 21: TXREG = UART -> _dataTX[UART -> _numTransmits];
   788  00005A  EE20 F003          	lfsr	2,3
   789  00005E  5036               	movf	_UART,w,c
   790  000060  26D9               	addwf	fsr2l,f,c
   791  000062  5037               	movf	_UART+1,w,c
   792  000064  22DA               	addwfc	fsr2h,f,c
   793  000066  50DF               	movf	indf2,w,c
   794  000068  6E23               	movwf	??_interruptHandlerUART& (0+255),c
   795  00006A  5023               	movf	??_interruptHandlerUART,w,c
   796  00006C  0D01               	mullw	1
   797  00006E  C036  FFD9         	movff	_UART,fsr2l
   798  000072  C037  FFDA         	movff	_UART+1,fsr2h
   799  000076  CFDE F024          	movff	postinc2,??_interruptHandlerUART+1
   800  00007A  CFDD F025          	movff	postdec2,??_interruptHandlerUART+2
   801  00007E  50F3               	movf	prodl,w,c
   802  000080  2424               	addwf	??_interruptHandlerUART+1,w,c
   803  000082  6ED9               	movwf	fsr2l,c
   804  000084  50F4               	movf	prodh,w,c
   805  000086  2025               	addwfc	??_interruptHandlerUART+2,w,c
   806  000088  6EDA               	movwf	fsr2h,c
   807  00008A  50DF               	movf	indf2,w,c
   808  00008C  6EAD               	movwf	4013,c	;volatile
   809                           
   810                           ;interruptUART.c: 22: INTCONbits.GIE = UARTinterruptState;
   811  00008E  B005               	btfsc	_UARTinterruptState,0,c	;volatile
   812  000090  D002               	bra	i2u19_45
   813  000092  9EF2               	bcf	intcon,7,c	;volatile
   814  000094  D001               	bra	i2u19_46
   815  000096                     i2u19_45:
   816  000096  8EF2               	bsf	intcon,7,c	;volatile
   817  000098                     i2u19_46:
   818                           
   819                           ;interruptUART.c: 24: UART -> _numTransmits++;
   820  000098  EE20 F003          	lfsr	2,3
   821  00009C  5036               	movf	_UART,w,c
   822  00009E  26D9               	addwf	fsr2l,f,c
   823  0000A0  5037               	movf	_UART+1,w,c
   824  0000A2  22DA               	addwfc	fsr2h,f,c
   825  0000A4  2ADF               	incf	indf2,f,c
   826                           
   827                           ;interruptUART.c: 27: if((UART -> _numTransmits) == (UART -> _numBytesTX)){
   828  0000A6  EE20 F002          	lfsr	2,2
   829  0000AA  5036               	movf	_UART,w,c
   830  0000AC  26D9               	addwf	fsr2l,f,c
   831  0000AE  5037               	movf	_UART+1,w,c
   832  0000B0  22DA               	addwfc	fsr2h,f,c
   833  0000B2  EE10 F003          	lfsr	1,3
   834  0000B6  5036               	movf	_UART,w,c
   835  0000B8  26E1               	addwf	fsr1l,f,c
   836  0000BA  5037               	movf	_UART+1,w,c
   837  0000BC  22E2               	addwfc	fsr1h,f,c
   838  0000BE  50DE               	movf	postinc2,w,c
   839  0000C0  18E6               	xorwf	postinc1,w,c
   840  0000C2  A4D8               	btfss	status,2,c
   841  0000C4  D009               	goto	i2l1008
   842                           
   843                           ;interruptUART.c: 28: TXIE = 0;
   844  0000C6  989D               	bcf	3997,4,c	;volatile
   845                           
   846                           ;interruptUART.c: 31: UART -> _stateTX = UART_STATE_READY;
   847  0000C8  EE20 F008          	lfsr	2,8
   848  0000CC  5036               	movf	_UART,w,c
   849  0000CE  26D9               	addwf	fsr2l,f,c
   850  0000D0  5037               	movf	_UART+1,w,c
   851  0000D2  22DA               	addwfc	fsr2h,f,c
   852  0000D4  0E01               	movlw	1
   853  0000D6  6EDF               	movwf	indf2,c
   854  0000D8                     i2l1008:
   855                           
   856                           ;interruptUART.c: 32: }
   857                           ;interruptUART.c: 33: }
   858                           ;interruptUART.c: 36: if(RCIF){
   859  0000D8  AA9E               	btfss	3998,5,c	;volatile
   860  0000DA  D065               	goto	i2l90
   861                           
   862                           ;interruptUART.c: 39: if(RCSTAbits.FERR){
   863  0000DC  A4AB               	btfss	4011,2,c	;volatile
   864  0000DE  D008               	goto	i2l1014
   865                           
   866                           ;interruptUART.c: 43: UART -> _lastReceiveFERR = 1;
   867  0000E0  EE20 F00A          	lfsr	2,10
   868  0000E4  5036               	movf	_UART,w,c
   869  0000E6  26D9               	addwf	fsr2l,f,c
   870  0000E8  5037               	movf	_UART+1,w,c
   871  0000EA  22DA               	addwfc	fsr2h,f,c
   872  0000EC  0E01               	movlw	1
   873  0000EE  D007               	goto	L4
   874  0000F0                     i2l1014:
   875                           
   876                           ;interruptUART.c: 45: else{
   877                           ;interruptUART.c: 46: UART -> _lastReceiveFERR = 0;
   878  0000F0  EE20 F00A          	lfsr	2,10
   879  0000F4  5036               	movf	_UART,w,c
   880  0000F6  26D9               	addwf	fsr2l,f,c
   881  0000F8  5037               	movf	_UART+1,w,c
   882  0000FA  22DA               	addwfc	fsr2h,f,c
   883  0000FC  0E00               	movlw	0
   884  0000FE                     L4:
   885  0000FE  6EDF               	movwf	indf2,c
   886                           
   887                           ;interruptUART.c: 47: }
   888                           ;interruptUART.c: 50: UARTinterruptState = INTCONbits.GIE;
   889  000100  0E00               	movlw	0
   890  000102  BEF2               	btfsc	intcon,7,c	;volatile
   891  000104  0E01               	movlw	1
   892  000106  6E05               	movwf	_UARTinterruptState,c	;volatile
   893                           
   894                           ;interruptUART.c: 51: (INTCONbits.GIE = 0);
   895  000108  9EF2               	bcf	intcon,7,c	;volatile
   896                           
   897                           ;interruptUART.c: 52: UART -> _dataRX[UART -> _numReceives] = RCREG;
   898  00010A  EE20 F007          	lfsr	2,7
   899  00010E  5036               	movf	_UART,w,c
   900  000110  26D9               	addwf	fsr2l,f,c
   901  000112  5037               	movf	_UART+1,w,c
   902  000114  22DA               	addwfc	fsr2h,f,c
   903  000116  50DF               	movf	indf2,w,c
   904  000118  6E23               	movwf	??_interruptHandlerUART& (0+255),c
   905  00011A  5023               	movf	??_interruptHandlerUART,w,c
   906  00011C  0D01               	mullw	1
   907  00011E  EE20 F004          	lfsr	2,4
   908  000122  5036               	movf	_UART,w,c
   909  000124  26D9               	addwf	fsr2l,f,c
   910  000126  5037               	movf	_UART+1,w,c
   911  000128  22DA               	addwfc	fsr2h,f,c
   912  00012A  CFDE F024          	movff	postinc2,??_interruptHandlerUART+1
   913  00012E  CFDD F025          	movff	postdec2,??_interruptHandlerUART+2
   914  000132  50F3               	movf	prodl,w,c
   915  000134  2424               	addwf	??_interruptHandlerUART+1,w,c
   916  000136  6ED9               	movwf	fsr2l,c
   917  000138  50F4               	movf	prodh,w,c
   918  00013A  2025               	addwfc	??_interruptHandlerUART+2,w,c
   919  00013C  6EDA               	movwf	fsr2h,c
   920  00013E  CFAE FFDF          	movff	4014,indf2	;volatile
   921                           
   922                           ;interruptUART.c: 53: INTCONbits.GIE = UARTinterruptState;
   923  000142  B005               	btfsc	_UARTinterruptState,0,c	;volatile
   924  000144  D002               	bra	i2u23_45
   925  000146  9EF2               	bcf	intcon,7,c	;volatile
   926  000148  D001               	bra	i2u23_46
   927  00014A                     i2u23_45:
   928  00014A  8EF2               	bsf	intcon,7,c	;volatile
   929  00014C                     i2u23_46:
   930                           
   931                           ;interruptUART.c: 57: if(RCSTAbits.OERR){
   932  00014C  A2AB               	btfss	4011,1,c	;volatile
   933  00014E  D003               	goto	i2l1028
   934                           
   935                           ;interruptUART.c: 59: RCSTAbits.CREN = 0;
   936  000150  98AB               	bcf	4011,4,c	;volatile
   937                           
   938                           ;interruptUART.c: 60: RCSTAbits.CREN = 1;
   939  000152  88AB               	bsf	4011,4,c	;volatile
   940                           
   941                           ;interruptUART.c: 61: }
   942  000154  D008               	goto	i2l88
   943  000156                     i2l1028:
   944                           
   945                           ;interruptUART.c: 62: else{
   946                           ;interruptUART.c: 63: UART -> _lastReceiveOERR = 0;
   947  000156  EE20 F00B          	lfsr	2,11
   948  00015A  5036               	movf	_UART,w,c
   949  00015C  26D9               	addwf	fsr2l,f,c
   950  00015E  5037               	movf	_UART+1,w,c
   951  000160  22DA               	addwfc	fsr2h,f,c
   952  000162  0E00               	movlw	0
   953  000164  6EDF               	movwf	indf2,c
   954  000166                     i2l88:
   955                           
   956                           ;interruptUART.c: 64: }
   957                           ;interruptUART.c: 66: UART -> _numReceives++;
   958  000166  EE20 F007          	lfsr	2,7
   959  00016A  5036               	movf	_UART,w,c
   960  00016C  26D9               	addwf	fsr2l,f,c
   961  00016E  5037               	movf	_UART+1,w,c
   962  000170  22DA               	addwfc	fsr2h,f,c
   963  000172  2ADF               	incf	indf2,f,c
   964                           
   965                           ;interruptUART.c: 69: if(UART -> _numReceives >= UART -> _numBytesRX){
   966  000174  EE20 F006          	lfsr	2,6
   967  000178  5036               	movf	_UART,w,c
   968  00017A  26D9               	addwf	fsr2l,f,c
   969  00017C  5037               	movf	_UART+1,w,c
   970  00017E  22DA               	addwfc	fsr2h,f,c
   971  000180  EE10 F007          	lfsr	1,7
   972  000184  5036               	movf	_UART,w,c
   973  000186  26E1               	addwf	fsr1l,f,c
   974  000188  5037               	movf	_UART+1,w,c
   975  00018A  22E2               	addwfc	fsr1h,f,c
   976  00018C  50DE               	movf	postinc2,w,c
   977  00018E  5CE6               	subwf	postinc1,w,c
   978  000190  A0D8               	btfss	status,0,c
   979  000192  D009               	goto	i2l90
   980                           
   981                           ;interruptUART.c: 70: RCIE = 0;
   982  000194  9A9D               	bcf	3997,5,c	;volatile
   983                           
   984                           ;interruptUART.c: 73: UART -> _stateRX = UART_STATE_READY;
   985  000196  EE20 F009          	lfsr	2,9
   986  00019A  5036               	movf	_UART,w,c
   987  00019C  26D9               	addwf	fsr2l,f,c
   988  00019E  5037               	movf	_UART+1,w,c
   989  0001A0  22DA               	addwfc	fsr2h,f,c
   990  0001A2  0E01               	movlw	1
   991  0001A4  6EDF               	movwf	indf2,c
   992  0001A6                     i2l90:
   993  0001A6  C033  FFF5         	movff	??_interruptHandlerUART+16,tablat
   994  0001AA  C032  FFF8         	movff	??_interruptHandlerUART+15,tblptru
   995  0001AE  C031  FFF7         	movff	??_interruptHandlerUART+14,tblptrh
   996  0001B2  C030  FFF6         	movff	??_interruptHandlerUART+13,tblptrl
   997  0001B6  C02F  FFF4         	movff	??_interruptHandlerUART+12,prodh
   998  0001BA  C02E  FFF3         	movff	??_interruptHandlerUART+11,prodl
   999  0001BE  C02D  FFDA         	movff	??_interruptHandlerUART+10,fsr2h
  1000  0001C2  C02C  FFD9         	movff	??_interruptHandlerUART+9,fsr2l
  1001  0001C6  C02B  FFE2         	movff	??_interruptHandlerUART+8,fsr1h
  1002  0001CA  C02A  FFE1         	movff	??_interruptHandlerUART+7,fsr1l
  1003  0001CE  C029  FFEA         	movff	??_interruptHandlerUART+6,fsr0h
  1004  0001D2  C028  FFE9         	movff	??_interruptHandlerUART+5,fsr0l
  1005  0001D6  C027  FFFB         	movff	??_interruptHandlerUART+4,pclatu
  1006  0001DA  C026  FFFA         	movff	??_interruptHandlerUART+3,pclath
  1007  0001DE  923B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1008  0001E0  0011               	retfie		f
  1009  0001E2                     __end_of_interruptHandlerUART:
  1010                           	opt stack 0
  1011  0000                     pclatu	equ	0xFFB
  1012                           pclath	equ	0xFFA
  1013                           tblptru	equ	0xFF8
  1014                           tblptrh	equ	0xFF7
  1015                           tblptrl	equ	0xFF6
  1016                           tablat	equ	0xFF5
  1017                           prodh	equ	0xFF4
  1018                           prodl	equ	0xFF3
  1019                           intcon	equ	0xFF2
  1020                           postinc0	equ	0xFEE
  1021                           fsr0h	equ	0xFEA
  1022                           fsr0l	equ	0xFE9
  1023                           wreg	equ	0xFE8
  1024                           postinc1	equ	0xFE6
  1025                           postdec1	equ	0xFE5
  1026                           fsr1h	equ	0xFE2
  1027                           fsr1l	equ	0xFE1
  1028                           indf2	equ	0xFDF
  1029                           postinc2	equ	0xFDE
  1030                           postdec2	equ	0xFDD
  1031                           fsr2h	equ	0xFDA
  1032                           fsr2l	equ	0xFD9
  1033                           status	equ	0xFD8
  1034                           pclatu	equ	0xFFB
  1035                           pclath	equ	0xFFA
  1036                           tblptru	equ	0xFF8
  1037                           tblptrh	equ	0xFF7
  1038                           tblptrl	equ	0xFF6
  1039                           tablat	equ	0xFF5
  1040                           prodh	equ	0xFF4
  1041                           prodl	equ	0xFF3
  1042                           intcon	equ	0xFF2
  1043                           postinc0	equ	0xFEE
  1044                           fsr0h	equ	0xFEA
  1045                           fsr0l	equ	0xFE9
  1046                           wreg	equ	0xFE8
  1047                           postinc1	equ	0xFE6
  1048                           postdec1	equ	0xFE5
  1049                           fsr1h	equ	0xFE2
  1050                           fsr1l	equ	0xFE1
  1051                           indf2	equ	0xFDF
  1052                           postinc2	equ	0xFDE
  1053                           postdec2	equ	0xFDD
  1054                           fsr2h	equ	0xFDA
  1055                           fsr2l	equ	0xFD9
  1056                           status	equ	0xFD8
  1057                           
  1058                           	psect	rparam
  1059  0000                     pclatu	equ	0xFFB
  1060                           pclath	equ	0xFFA
  1061                           tblptru	equ	0xFF8
  1062                           tblptrh	equ	0xFF7
  1063                           tblptrl	equ	0xFF6
  1064                           tablat	equ	0xFF5
  1065                           prodh	equ	0xFF4
  1066                           prodl	equ	0xFF3
  1067                           intcon	equ	0xFF2
  1068                           postinc0	equ	0xFEE
  1069                           fsr0h	equ	0xFEA
  1070                           fsr0l	equ	0xFE9
  1071                           wreg	equ	0xFE8
  1072                           postinc1	equ	0xFE6
  1073                           postdec1	equ	0xFE5
  1074                           fsr1h	equ	0xFE2
  1075                           fsr1l	equ	0xFE1
  1076                           indf2	equ	0xFDF
  1077                           postinc2	equ	0xFDE
  1078                           postdec2	equ	0xFDD
  1079                           fsr2h	equ	0xFDA
  1080                           fsr2l	equ	0xFD9
  1081                           status	equ	0xFD8
  1082                           
  1083                           	psect	temp
  1084  00003B                     btemp:
  1085                           	opt stack 0
  1086  00003B                     	ds	1
  1087  0000                     int$flags	set	btemp
  1088                           pclatu	equ	0xFFB
  1089                           pclath	equ	0xFFA
  1090                           tblptru	equ	0xFF8
  1091                           tblptrh	equ	0xFF7
  1092                           tblptrl	equ	0xFF6
  1093                           tablat	equ	0xFF5
  1094                           prodh	equ	0xFF4
  1095                           prodl	equ	0xFF3
  1096                           intcon	equ	0xFF2
  1097                           postinc0	equ	0xFEE
  1098                           fsr0h	equ	0xFEA
  1099                           fsr0l	equ	0xFE9
  1100                           wreg	equ	0xFE8
  1101                           postinc1	equ	0xFE6
  1102                           postdec1	equ	0xFE5
  1103                           fsr1h	equ	0xFE2
  1104                           fsr1l	equ	0xFE1
  1105                           indf2	equ	0xFDF
  1106                           postinc2	equ	0xFDE
  1107                           postdec2	equ	0xFDD
  1108                           fsr2h	equ	0xFDA
  1109                           fsr2l	equ	0xFD9
  1110                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     19      58
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S21$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    S21$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_keypadRoutine
    _keypadRoutine->_readKeyboard

Critical Paths under _interruptHandlerUART in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _interruptHandlerUART in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandlerUART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandlerUART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandlerUART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandlerUART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandlerUART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandlerUART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandlerUART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     150
                      _keypadRoutine
                      _machineConfig
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _keypadRoutine                                        1     1      0     150
                                             18 COMRAM     1     1      0
                       _readKeyboard
 ---------------------------------------------------------------------------------
 (2) _readKeyboard                                         1     1      0     150
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _interruptHandlerUART                                17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _keypadRoutine
     _readKeyboard
   _machineConfig

 _interruptHandlerUART (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     13      3A       1       61.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3A      20        0.0%
DATA                 0      0      3A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Sep 20 11:57:10 2017

                  __CFG_BOR$ON 000000                    __CFG_BORV$3 000000                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                          l132 0226                            l140 025E                            l134 0232  
                          l135 0240                            l147 02A4                            l149 02AA  
                          l910 0202                            l902 01EE                            l914 020E  
                          l906 01F8                            l940 0252                            l918 021A  
                          l936 024E                            l964 026C                            l982 02AE  
                          l984 02B8                            l898 01E6                            l988 0332  
                 __CFG_CPB$OFF 000000                   __CFG_CPD$OFF 000000                            u537 0284  
               ?_machineConfig 0023                            wreg 000FE8                   __CFG_LVP$OFF 000000  
                 __CFG_WDT$OFF 000000                           _ADIE 007CEE                           _LATA 000F89  
                         _LATB 000F8A                           _LATC 000F8B                           _PEIE 007F96  
                         _RCIE 007CED                           _RCIF 007CF5                           i2l90 01A6  
                         i2l88 0166                           _UART 0036                           _TRMT 007D61  
                         _TXIE 007CEC                           _TXIF 007CF4                           _main 032E  
                         _uart 0016                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr2h 000FDA                           fsr0l 000FE9                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           btemp 003B  
                         prodh 000FF4                           prodl 000FF3                           start 000E  
                __CFG_IESO$OFF 000000                  __CFG_MCLRE$ON 000000                   ___param_bank 000000  
                __CFG_PLLDIV$5 000000                 __CFG_CCP2MX$ON 000000                          ?_main 0023  
                        _RCREG 000FAE                          _SPBRG 000FAF                  __CFG_USBDIV$2 000000  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TXREG 000FAD                  __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000           _interruptHandlerUART 0008  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
               __CFG_EBTRB$OFF 000000                          pclath 000FFA                          tablat 000FF5  
                        status 000FD8                __initialization 02C2                   __end_of_main 0338  
              ??_machineConfig 0034                         ??_main 0036                  __activetblptr 000002  
                ?_readKeyboard 0023          ?_interruptHandlerUART 0023                         _ADCON1 000FC1  
                       i2l1014 00F0                         i2l1008 00D8                         i2l1028 0156  
                       _TRISC6 007CA6                         _TRISC7 007CA7                 __CFG_VREGEN$ON 000000  
               __CFG_XINST$OFF 000000                 __CFG_STVREN$ON 000000                         clear_0 02E8  
               ??_readKeyboard 0034                   __pdataCOMRAM 0036                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                     __accesstop 0060  
      __end_of__initialization 02EE                __CFG_PBADEN$OFF 000000         __size_of_keypadRoutine 006C  
                ___rparam_used 000001                 __pcstackCOMRAM 0023         ??_interruptHandlerUART 0023  
                _keypadRoutine 0256                     _arr_dataRX 0006                        i2u23_45 014A  
                      i2u23_46 014C                        i2u19_45 0096                        i2u19_46 0098  
         __end_of_readKeyboard 0256                        __Hparam 0000                        __Lparam 0000  
                      _dataEnd 0038                        _dataOut 0004                        __pcinit 02C2  
               ?_keypadRoutine 0023                        __ramtop 0800                        __ptext0 032E  
                      __ptext1 02FC                        __ptext2 0256                        __ptext3 01E2  
               __pintcode_body 0012           end_of_initialization 02EE                  __Lmediumconst 0000  
                      int_func 0012                      _RCSTAbits 000FAB                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                      _PORTAbits 000F80                      _PORTBbits 000F81  
        __end_of_machineConfig 032E                      _TXSTAbits 000FAC                ??_keypadRoutine 0035  
                __pidataCOMRAM 0338            start_initialization 02C2                  Keypad@dataEnd 003A  
        __size_of_readKeyboard 0074                  Keypad@dataOut 0022               __CFG_LPT1OSC$OFF 000000  
                  __pbssCOMRAM 0001                   _readKeyboard 01E2  __size_of_interruptHandlerUART 01DA  
           _UARTinterruptState 0005                      __pintcode 0008                       _LATAbits 000F89  
                     _KPDState 0039                       _RCONbits 000FD0               __CFG_WDTPS$32768 000000  
                   _ADCON0bits 000FC2                      copy_data0 02D6                  readKeyboard@i 0034  
                     __Hrparam 0000                       __Lrparam 0000                    _keypadFlags 0001  
                __size_of_main 000A         __size_of_machineConfig 0032                       int$flags 003B  
        __end_of_keypadRoutine 02C2          __CFG_CPUDIV$OSC3_PLL4 000000                     _INTCONbits 000FF2  
                     intlevel2 0000   __end_of_interruptHandlerUART 01E2                     _OSCCONbits 000FD3  
          __CFG_FOSC$INTOSC_HS 000000                  _machineConfig 02FC  
