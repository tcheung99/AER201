

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Sep 20 11:57:15 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,inline
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    23  0000                     
    24                           ; Version 1.42
    25                           ; Generated 13/04/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F2550 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     
    59                           	psect	idataCOMRAM
    60  000542                     __pidataCOMRAM:
    61                           	opt stack 0
    62                           
    63                           ;initializer for _UART
    64  000542  3A                 	db	low _uart
    65  000543  00                 	db	high _uart
    66                           
    67                           ;initializer for _dataEnd
    68  000544  F0                 	db	240
    69                           
    70                           ;initializer for _KPDState
    71  000545  01                 	db	1
    72                           
    73                           ;initializer for Keypad@dataEnd
    74  000546  F0                 	db	240
    75  0000                     _SPBRG	set	4015
    76  0000                     _RCREG	set	4014
    77  0000                     _RCSTAbits	set	4011
    78  0000                     _TXREG	set	4013
    79  0000                     _INTCONbits	set	4082
    80  0000                     _RCONbits	set	4048
    81  0000                     _ADCON0bits	set	4034
    82  0000                     _ADCON1	set	4033
    83  0000                     _LATC	set	3979
    84  0000                     _TRISC	set	3988
    85  0000                     _TRISB	set	3987
    86  0000                     _OSCCONbits	set	4051
    87  0000                     _LATA	set	3977
    88  0000                     _PORTAbits	set	3968
    89  0000                     _PORTBbits	set	3969
    90  0000                     _LATB	set	3978
    91  0000                     _LATAbits	set	3977
    92  0000                     _TRISA	set	3986
    93  0000                     _TXSTAbits	set	4012
    94  0000                     _TRISC7	set	31911
    95  0000                     _TRISC6	set	31910
    96  0000                     _RCIE	set	31981
    97  0000                     _RCIF	set	31989
    98  0000                     _TXIE	set	31980
    99  0000                     _TRMT	set	32097
   100  0000                     _TXIF	set	31988
   101  0000                     _ADIE	set	31982
   102  0000                     _PEIE	set	32662
   103                           
   104                           ; #config settings
   105  0000                     
   106                           	psect	cinit
   107  0004A2                     __pcinit:
   108                           	opt stack 0
   109  0004A2                     start_initialization:
   110                           	opt stack 0
   111  0004A2                     __initialization:
   112                           	opt stack 0
   113                           
   114                           ; Initialize objects allocated to COMRAM (5 bytes)
   115                           ; load TBLPTR registers with __pidataCOMRAM
   116  0004A2  0E42               	movlw	low __pidataCOMRAM
   117  0004A4  6EF6               	movwf	tblptrl,c
   118  0004A6  0E05               	movlw	high __pidataCOMRAM
   119  0004A8  6EF7               	movwf	tblptrh,c
   120  0004AA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   121  0004AC  6EF8               	movwf	tblptru,c
   122  0004AE  EE00  F047         	lfsr	0,__pdataCOMRAM
   123  0004B2  EE10 F005          	lfsr	1,5
   124  0004B6                     copy_data0:
   125  0004B6  0009               	tblrd		*+
   126  0004B8  CFF5 FFEE          	movff	tablat,postinc0
   127  0004BC  50E5               	movf	postdec1,w,c
   128  0004BE  50E1               	movf	fsr1l,w,c
   129  0004C0  E1FA               	bnz	copy_data0
   130                           
   131                           ; Clear objects allocated to COMRAM (34 bytes)
   132  0004C2  EE00  F025         	lfsr	0,__pbssCOMRAM
   133  0004C6  0E22               	movlw	34
   134  0004C8                     clear_0:
   135  0004C8  6AEE               	clrf	postinc0,c
   136  0004CA  06E8               	decf	wreg,f,c
   137  0004CC  E1FD               	bnz	clear_0
   138  0004CE                     end_of_initialization:
   139                           	opt stack 0
   140  0004CE                     __end_of__initialization:
   141                           	opt stack 0
   142  0004CE  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   143  0004D0  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   144  0004D2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   145  0004D4  6EF8               	movwf	tblptru,c
   146  0004D6  0100               	movlb	0
   147  0004D8  EF6E  F002         	goto	_main	;jump to C main() function
   148                           tblptru	equ	0xFF8
   149                           tblptrh	equ	0xFF7
   150                           tblptrl	equ	0xFF6
   151                           tablat	equ	0xFF5
   152                           postinc0	equ	0xFEE
   153                           wreg	equ	0xFE8
   154                           postdec1	equ	0xFE5
   155                           fsr1l	equ	0xFE1
   156                           
   157                           	psect	bssCOMRAM
   158  000025                     __pbssCOMRAM:
   159                           	opt stack 0
   160  000025                     _keypadFlags:
   161                           	opt stack 0
   162  000025                     	ds	3
   163  000028                     	ds	1
   164  000029                     _UARTinterruptState:
   165                           	opt stack 0
   166  000029                     	ds	1
   167  00002A                     _arr_dataRX:
   168                           	opt stack 0
   169  00002A                     	ds	16
   170  00003A                     _uart:
   171                           	opt stack 0
   172  00003A                     	ds	12
   173  000046                     Keypad@dataOut:
   174                           	opt stack 0
   175  000046                     	ds	1
   176                           tblptru	equ	0xFF8
   177                           tblptrh	equ	0xFF7
   178                           tblptrl	equ	0xFF6
   179                           tablat	equ	0xFF5
   180                           postinc0	equ	0xFEE
   181                           wreg	equ	0xFE8
   182                           postdec1	equ	0xFE5
   183                           fsr1l	equ	0xFE1
   184                           
   185                           	psect	dataCOMRAM
   186  000047                     __pdataCOMRAM:
   187                           	opt stack 0
   188  000047                     _UART:
   189                           	opt stack 0
   190  000047                     	ds	2
   191  000049                     	ds	1
   192  00004A                     _KPDState:
   193                           	opt stack 0
   194  00004A                     	ds	1
   195  00004B                     Keypad@dataEnd:
   196                           	opt stack 0
   197  00004B                     	ds	1
   198                           tblptru	equ	0xFF8
   199                           tblptrh	equ	0xFF7
   200                           tblptrl	equ	0xFF6
   201                           tablat	equ	0xFF5
   202                           postinc0	equ	0xFEE
   203                           wreg	equ	0xFE8
   204                           postdec1	equ	0xFE5
   205                           fsr1l	equ	0xFE1
   206                           
   207                           	psect	cstackBANK0
   208  000060                     __pcstackBANK0:
   209                           	opt stack 0
   210  000060                     ??_UART_Init:
   211                           
   212                           ; 1 bytes @ 0x0
   213  000060                     	ds	4
   214                           tblptru	equ	0xFF8
   215                           tblptrh	equ	0xFF7
   216                           tblptrl	equ	0xFF6
   217                           tablat	equ	0xFF5
   218                           postinc0	equ	0xFEE
   219                           wreg	equ	0xFE8
   220                           postdec1	equ	0xFE5
   221                           fsr1l	equ	0xFE1
   222                           
   223                           	psect	cstackCOMRAM
   224  000001                     __pcstackCOMRAM:
   225                           	opt stack 0
   226  000001                     ??_interruptHandlerUART:
   227                           
   228                           ; 1 bytes @ 0x0
   229  000001                     	ds	17
   230  000012                     ?___aldiv:
   231                           	opt stack 0
   232  000012                     readKeyboard@i:
   233                           	opt stack 0
   234  000012                     uartTransmitBlocking@data:
   235                           	opt stack 0
   236  000012                     ___aldiv@dividend:
   237                           	opt stack 0
   238                           
   239                           ; 4 bytes @ 0x11
   240  000012                     	ds	2
   241  000014                     uartTransmitBlocking@numBytes:
   242                           	opt stack 0
   243                           
   244                           ; 1 bytes @ 0x13
   245  000014                     	ds	1
   246  000015                     ??_uartTransmitBlocking:
   247                           
   248                           ; 1 bytes @ 0x14
   249  000015                     	ds	1
   250  000016                     uartTransmitBlocking@numTransmits:
   251                           	opt stack 0
   252  000016                     ___aldiv@divisor:
   253                           	opt stack 0
   254                           
   255                           ; 4 bytes @ 0x15
   256  000016                     	ds	1
   257  000017                     ??_keypadRoutineUART:
   258                           
   259                           ; 1 bytes @ 0x16
   260  000017                     	ds	3
   261  00001A                     ___aldiv@counter:
   262                           	opt stack 0
   263                           
   264                           ; 1 bytes @ 0x19
   265  00001A                     	ds	1
   266  00001B                     ___aldiv@sign:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x1A
   270  00001B                     	ds	1
   271  00001C                     ___aldiv@quotient:
   272                           	opt stack 0
   273                           
   274                           ; 4 bytes @ 0x1B
   275  00001C                     	ds	4
   276  000020                     UART_Init@baud:
   277                           	opt stack 0
   278                           
   279                           ; 4 bytes @ 0x1F
   280  000020                     	ds	4
   281  000024                     ??_main:
   282                           
   283                           ; 1 bytes @ 0x23
   284  000024                     	ds	1
   285                           tblptru	equ	0xFF8
   286                           tblptrh	equ	0xFF7
   287                           tblptrl	equ	0xFF6
   288                           tablat	equ	0xFF5
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           postdec1	equ	0xFE5
   292                           fsr1l	equ	0xFE1
   293                           
   294 ;;
   295 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   296 ;;
   297 ;; *************** function _main *****************
   298 ;; Defined at:
   299 ;;		line 14 in file "main.c"
   300 ;; Parameters:    Size  Location     Type
   301 ;;		None
   302 ;; Auto vars:     Size  Location     Type
   303 ;;		None
   304 ;; Return value:  Size  Location     Type
   305 ;;                  1    wreg      void 
   306 ;; Registers used:
   307 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   308 ;; Tracked objects:
   309 ;;		On entry : 0/0
   310 ;;		On exit  : 0/0
   311 ;;		Unchanged: 0/0
   312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   313 ;;      Params:         0       0       0       0       0       0       0       0       0
   314 ;;      Locals:         0       0       0       0       0       0       0       0       0
   315 ;;      Temps:          1       0       0       0       0       0       0       0       0
   316 ;;      Totals:         1       0       0       0       0       0       0       0       0
   317 ;;Total ram usage:        1 bytes
   318 ;; Hardware stack levels required when called:    3
   319 ;; This function calls:
   320 ;;		_UART_Init
   321 ;;		_keypadRoutineUART
   322 ;;		_machineConfig
   323 ;; This function is called by:
   324 ;;		Startup code after reset
   325 ;; This function uses a non-reentrant model
   326 ;;
   327                           
   328                           	psect	text0
   329  0004DC                     __ptext0:
   330                           	opt stack 0
   331  0004DC                     _main:
   332                           	opt stack 28
   333                           
   334                           ;main.c: 16: machineConfig();
   335                           
   336                           ;incstack = 0
   337  0004DC  EC88  F002         	call	_machineConfig	;wreg free
   338                           
   339                           ;main.c: 19: UART_Init(9600);
   340  0004E0  0E80               	movlw	128
   341  0004E2  6E20               	movwf	UART_Init@baud,c
   342  0004E4  0E25               	movlw	37
   343  0004E6  6E21               	movwf	UART_Init@baud+1,c
   344  0004E8  0E00               	movlw	0
   345  0004EA  6E22               	movwf	UART_Init@baud+2,c
   346  0004EC  0E00               	movlw	0
   347  0004EE  6E23               	movwf	UART_Init@baud+3,c
   348  0004F0  ECA3  F001         	call	_UART_Init	;wreg free
   349                           
   350                           ;main.c: 20: TXSTAbits.TXEN = 1; _delay((unsigned long)((5)*(8000000/4000.0)));;
   351  0004F4  8AAC               	bsf	4012,5,c	;volatile
   352  0004F6  0E0D               	movlw	13
   353  0004F8  6E24               	movwf	??_main& (0+255),c
   354  0004FA  0EFC               	movlw	252
   355  0004FC                     u757:
   356  0004FC  2EE8               	decfsz	wreg,f,c
   357  0004FE  D7FE               	bra	u757
   358  000500  2E24               	decfsz	??_main& (0+255),f,c
   359  000502  D7FC               	bra	u757
   360                           
   361                           ;main.c: 25: TRISA = 0b11101111;
   362  000504  0EEF               	movlw	239
   363  000506  6E92               	movwf	3986,c	;volatile
   364                           
   365                           ;main.c: 27: LATAbits.LATA4 = 1;
   366  000508  8889               	bsf	3977,4,c	;volatile
   367  00050A                     l1484:
   368                           
   369                           ;main.c: 30: keypadRoutineUART();
   370  00050A  EC1F  F002         	call	_keypadRoutineUART	;wreg free
   371  00050E  D7FD               	goto	l1484
   372  000510                     __end_of_main:
   373                           	opt stack 0
   374                           tblptru	equ	0xFF8
   375                           tblptrh	equ	0xFF7
   376                           tblptrl	equ	0xFF6
   377                           tablat	equ	0xFF5
   378                           postinc0	equ	0xFEE
   379                           wreg	equ	0xFE8
   380                           postdec1	equ	0xFE5
   381                           fsr1l	equ	0xFE1
   382                           
   383 ;; *************** function _machineConfig *****************
   384 ;; Defined at:
   385 ;;		line 3 in file "machineConfig.c"
   386 ;; Parameters:    Size  Location     Type
   387 ;;		None
   388 ;; Auto vars:     Size  Location     Type
   389 ;;		None
   390 ;; Return value:  Size  Location     Type
   391 ;;                  1    wreg      void 
   392 ;; Registers used:
   393 ;;		wreg, status,2
   394 ;; Tracked objects:
   395 ;;		On entry : 0/0
   396 ;;		On exit  : 0/0
   397 ;;		Unchanged: 0/0
   398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   399 ;;      Params:         0       0       0       0       0       0       0       0       0
   400 ;;      Locals:         0       0       0       0       0       0       0       0       0
   401 ;;      Temps:          0       0       0       0       0       0       0       0       0
   402 ;;      Totals:         0       0       0       0       0       0       0       0       0
   403 ;;Total ram usage:        0 bytes
   404 ;; Hardware stack levels used:    1
   405 ;; Hardware stack levels required when called:    1
   406 ;; This function calls:
   407 ;;		Nothing
   408 ;; This function is called by:
   409 ;;		_main
   410 ;; This function uses a non-reentrant model
   411 ;;
   412                           
   413                           	psect	text1
   414  000510                     __ptext1:
   415                           	opt stack 0
   416  000510                     _machineConfig:
   417                           	opt stack 29
   418                           
   419                           ;machineConfig.c: 6: OSCCONbits.IRCF = 0b111;
   420                           
   421                           ;incstack = 0
   422  000510  88D3               	bsf	4051,4,c	;volatile
   423  000512  8AD3               	bsf	4051,5,c	;volatile
   424  000514  8CD3               	bsf	4051,6,c	;volatile
   425                           
   426                           ;machineConfig.c: 7: OSCCONbits.SCS1 = 1;
   427  000516  82D3               	bsf	4051,1,c	;volatile
   428                           
   429                           ;machineConfig.c: 8: OSCCONbits.SCS0 = 0;
   430  000518  90D3               	bcf	4051,0,c	;volatile
   431                           
   432                           ;machineConfig.c: 11: TRISA = 0b11011111;
   433  00051A  0EDF               	movlw	223
   434  00051C  6E92               	movwf	3986,c	;volatile
   435                           
   436                           ;machineConfig.c: 13: TRISB = 0b00001111;
   437  00051E  0E0F               	movlw	15
   438  000520  6E93               	movwf	3987,c	;volatile
   439                           
   440                           ;machineConfig.c: 14: TRISC = 0b10000000;
   441  000522  0E80               	movlw	128
   442  000524  6E94               	movwf	3988,c	;volatile
   443                           
   444                           ;machineConfig.c: 17: LATA = 0x00;
   445  000526  0E00               	movlw	0
   446  000528  6E89               	movwf	3977,c	;volatile
   447                           
   448                           ;machineConfig.c: 18: LATB = 0xF0;
   449  00052A  0EF0               	movlw	240
   450  00052C  6E8A               	movwf	3978,c	;volatile
   451                           
   452                           ;machineConfig.c: 19: LATC = 0b10000000;
   453  00052E  0E80               	movlw	128
   454  000530  6E8B               	movwf	3979,c	;volatile
   455                           
   456                           ;machineConfig.c: 22: ADCON1 = 0x0F;
   457  000532  0E0F               	movlw	15
   458  000534  6EC1               	movwf	4033,c	;volatile
   459                           
   460                           ;machineConfig.c: 23: ADCON0bits.ADON = 0;
   461  000536  90C2               	bcf	4034,0,c	;volatile
   462                           
   463                           ;machineConfig.c: 26: PEIE = 1;
   464  000538  8CF2               	bsf	intcon,6,c	;volatile
   465                           
   466                           ;machineConfig.c: 27: ADIE = 0;
   467  00053A  9C9D               	bcf	3997,6,c	;volatile
   468                           
   469                           ;machineConfig.c: 28: RCONbits.IPEN = 0;
   470  00053C  9ED0               	bcf	4048,7,c	;volatile
   471                           
   472                           ;machineConfig.c: 29: (INTCONbits.GIE = 0);
   473  00053E  9EF2               	bcf	intcon,7,c	;volatile
   474  000540  0012               	return		;funcret
   475  000542                     __end_of_machineConfig:
   476                           	opt stack 0
   477                           tblptru	equ	0xFF8
   478                           tblptrh	equ	0xFF7
   479                           tblptrl	equ	0xFF6
   480                           tablat	equ	0xFF5
   481                           intcon	equ	0xFF2
   482                           postinc0	equ	0xFEE
   483                           wreg	equ	0xFE8
   484                           postdec1	equ	0xFE5
   485                           fsr1l	equ	0xFE1
   486                           
   487 ;; *************** function _keypadRoutineUART *****************
   488 ;; Defined at:
   489 ;;		line 231 in file "Keypad.c"
   490 ;; Parameters:    Size  Location     Type
   491 ;;		None
   492 ;; Auto vars:     Size  Location     Type
   493 ;;		None
   494 ;; Return value:  Size  Location     Type
   495 ;;                  1    wreg      void 
   496 ;; Registers used:
   497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   498 ;; Tracked objects:
   499 ;;		On entry : 0/0
   500 ;;		On exit  : 0/0
   501 ;;		Unchanged: 0/0
   502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   503 ;;      Params:         0       0       0       0       0       0       0       0       0
   504 ;;      Locals:         0       0       0       0       0       0       0       0       0
   505 ;;      Temps:          1       0       0       0       0       0       0       0       0
   506 ;;      Totals:         1       0       0       0       0       0       0       0       0
   507 ;;Total ram usage:        1 bytes
   508 ;; Hardware stack levels used:    1
   509 ;; Hardware stack levels required when called:    2
   510 ;; This function calls:
   511 ;;		_readKeyboard
   512 ;;		_uartTransmitBlocking
   513 ;; This function is called by:
   514 ;;		_main
   515 ;; This function uses a non-reentrant model
   516 ;;
   517                           
   518                           	psect	text2
   519  00043E                     __ptext2:
   520                           	opt stack 0
   521  00043E                     _keypadRoutineUART:
   522                           	opt stack 28
   523                           
   524                           ;Keypad.c: 246: else{
   525                           ;Keypad.c: 248: dataOut = readKeyboard();
   526                           
   527                           ;Keypad.c: 243: }
   528                           
   529                           ;Keypad.c: 242: while(0){ continue; }
   530                           
   531                           ;Keypad.c: 240: if(0){
   532                           
   533                           ;incstack = 0
   534  00043E  ECE5  F001         	call	_readKeyboard	;wreg free
   535  000442  6E46               	movwf	Keypad@dataOut,c
   536                           
   537                           ;Keypad.c: 251: if (dataOut != 0xF0){
   538  000444  0EF0               	movlw	240
   539  000446  1846               	xorwf	Keypad@dataOut,w,c
   540  000448  B4D8               	btfsc	status,2,c
   541  00044A  0012               	return	
   542                           
   543                           ;Keypad.c: 255: _delay((unsigned long)((20)*(8000000/4000.0)));
   544  00044C  0E34               	movlw	52
   545  00044E  6E17               	movwf	??_keypadRoutineUART& (0+255),c
   546  000450  0EF2               	movlw	242
   547  000452                     u767:
   548  000452  2EE8               	decfsz	wreg,f,c
   549  000454  D7FE               	bra	u767
   550  000456  2E17               	decfsz	??_keypadRoutineUART& (0+255),f,c
   551  000458  D7FC               	bra	u767
   552                           
   553                           ;Keypad.c: 257: if (dataOut == readKeyboard()){
   554  00045A  ECE5  F001         	call	_readKeyboard	;wreg free
   555  00045E  1846               	xorwf	Keypad@dataOut,w,c
   556  000460  A4D8               	btfss	status,2,c
   557  000462  0012               	return	
   558                           
   559                           ;Keypad.c: 259: uartTransmitBlocking(&dataOut, 1);
   560  000464  0E46               	movlw	low Keypad@dataOut
   561  000466  6E12               	movwf	uartTransmitBlocking@data,c
   562  000468  0E00               	movlw	high Keypad@dataOut
   563  00046A  6E13               	movwf	uartTransmitBlocking@data+1,c
   564  00046C  0E01               	movlw	1
   565  00046E  6E14               	movwf	uartTransmitBlocking@numBytes,c
   566  000470  EC57  F001         	call	_uartTransmitBlocking	;wreg free
   567                           
   568                           ;Keypad.c: 262: while (dataOut == readKeyboard()){
   569  000474  D008               	goto	l1430
   570  000476                     l1426:
   571                           
   572                           ;Keypad.c: 263: uartTransmitBlocking(&dataOut, 1);
   573  000476  0E46               	movlw	low Keypad@dataOut
   574  000478  6E12               	movwf	uartTransmitBlocking@data,c
   575  00047A  0E00               	movlw	high Keypad@dataOut
   576  00047C  6E13               	movwf	uartTransmitBlocking@data+1,c
   577  00047E  0E01               	movlw	1
   578  000480  6E14               	movwf	uartTransmitBlocking@numBytes,c
   579  000482  EC57  F001         	call	_uartTransmitBlocking	;wreg free
   580  000486                     l1430:
   581  000486  ECE5  F001         	call	_readKeyboard	;wreg free
   582  00048A  1846               	xorwf	Keypad@dataOut,w,c
   583  00048C  B4D8               	btfsc	status,2,c
   584  00048E  D7F3               	goto	l1426
   585                           
   586                           ;Keypad.c: 275: }
   587                           ;Keypad.c: 276: }
   588                           ;Keypad.c: 279: uartTransmitBlocking(&dataEnd, 1);
   589  000490  0E4B               	movlw	low Keypad@dataEnd
   590  000492  6E12               	movwf	uartTransmitBlocking@data,c
   591  000494  0E00               	movlw	high Keypad@dataEnd
   592  000496  6E13               	movwf	uartTransmitBlocking@data+1,c
   593  000498  0E01               	movlw	1
   594  00049A  6E14               	movwf	uartTransmitBlocking@numBytes,c
   595  00049C  EC57  F001         	call	_uartTransmitBlocking	;wreg free
   596  0004A0  0012               	return	
   597  0004A2                     __end_of_keypadRoutineUART:
   598                           	opt stack 0
   599                           tblptru	equ	0xFF8
   600                           tblptrh	equ	0xFF7
   601                           tblptrl	equ	0xFF6
   602                           tablat	equ	0xFF5
   603                           intcon	equ	0xFF2
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           postdec1	equ	0xFE5
   607                           fsr1l	equ	0xFE1
   608                           status	equ	0xFD8
   609                           
   610 ;; *************** function _uartTransmitBlocking *****************
   611 ;; Defined at:
   612 ;;		line 22 in file "UART_PIC.c"
   613 ;; Parameters:    Size  Location     Type
   614 ;;  data            2   17[COMRAM] PTR unsigned char 
   615 ;;		 -> Keypad@dataEnd(1), Keypad@dataOut(1), 
   616 ;;  numBytes        1   19[COMRAM] unsigned char 
   617 ;; Auto vars:     Size  Location     Type
   618 ;;  numTransmits    1   21[COMRAM] unsigned char 
   619 ;; Return value:  Size  Location     Type
   620 ;;                  1    wreg      void 
   621 ;; Registers used:
   622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   623 ;; Tracked objects:
   624 ;;		On entry : 0/0
   625 ;;		On exit  : 0/0
   626 ;;		Unchanged: 0/0
   627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   628 ;;      Params:         3       0       0       0       0       0       0       0       0
   629 ;;      Locals:         1       0       0       0       0       0       0       0       0
   630 ;;      Temps:          1       0       0       0       0       0       0       0       0
   631 ;;      Totals:         5       0       0       0       0       0       0       0       0
   632 ;;Total ram usage:        5 bytes
   633 ;; Hardware stack levels used:    1
   634 ;; Hardware stack levels required when called:    1
   635 ;; This function calls:
   636 ;;		Nothing
   637 ;; This function is called by:
   638 ;;		_keypadRoutineUART
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           	psect	text3
   643  0002AE                     __ptext3:
   644                           	opt stack 0
   645  0002AE                     _uartTransmitBlocking:
   646                           	opt stack 28
   647  0002AE                     l1318:
   648  0002AE  EE20 F008          	lfsr	2,8
   649  0002B2  5047               	movf	_UART,w,c
   650  0002B4  26D9               	addwf	fsr2l,f,c
   651  0002B6  5048               	movf	_UART+1,w,c
   652  0002B8  22DA               	addwfc	fsr2h,f,c
   653  0002BA  50DF               	movf	indf2,w,c
   654  0002BC  B4D8               	btfsc	status,2,c
   655  0002BE  D7F7               	goto	l1318
   656                           
   657                           ;UART_PIC.c: 39: UART -> _stateTX = UART_STATE_BUSY;
   658  0002C0  EE20 F008          	lfsr	2,8
   659  0002C4  5047               	movf	_UART,w,c
   660  0002C6  26D9               	addwf	fsr2l,f,c
   661  0002C8  5048               	movf	_UART+1,w,c
   662  0002CA  22DA               	addwfc	fsr2h,f,c
   663  0002CC  0E00               	movlw	0
   664  0002CE  6EDF               	movwf	indf2,c
   665                           
   666                           ;UART_PIC.c: 42: unsigned char numTransmits = 0;
   667  0002D0  0E00               	movlw	0
   668  0002D2  6E16               	movwf	uartTransmitBlocking@numTransmits,c
   669                           
   670                           ;UART_PIC.c: 45: TXSTAbits.TXEN = 1; _delay((unsigned long)((5)*(8000000/4000.0)));;
   671  0002D4  8AAC               	bsf	4012,5,c	;volatile
   672  0002D6  0E0D               	movlw	13
   673  0002D8  6E15               	movwf	??_uartTransmitBlocking& (0+255),c
   674  0002DA  0EFC               	movlw	252
   675  0002DC                     u777:
   676  0002DC  2EE8               	decfsz	wreg,f,c
   677  0002DE  D7FE               	bra	u777
   678  0002E0  2E15               	decfsz	??_uartTransmitBlocking& (0+255),f,c
   679  0002E2  D7FC               	bra	u777
   680                           
   681                           ;UART_PIC.c: 48: while(numTransmits < numBytes){
   682  0002E4  D023               	goto	l1340
   683  0002E6                     l1328:
   684  0002E6  B2AC               	btfsc	4012,1,c	;volatile
   685  0002E8  D002               	goto	u600
   686  0002EA  0E01               	movlw	1
   687  0002EC  D001               	goto	u602
   688  0002EE                     u600:
   689  0002EE  0E00               	movlw	0
   690  0002F0                     u602:
   691  0002F0  6E15               	movwf	??_uartTransmitBlocking& (0+255),c
   692  0002F2  B89E               	btfsc	3998,4,c	;volatile
   693  0002F4  D002               	goto	u610
   694  0002F6  0E01               	movlw	1
   695  0002F8  D001               	goto	u612
   696  0002FA                     u610:
   697  0002FA  0E00               	movlw	0
   698  0002FC                     u612:
   699  0002FC  1015               	iorwf	??_uartTransmitBlocking,w,c
   700  0002FE  E1F3               	bnz	l1328
   701                           
   702                           ;UART_PIC.c: 53: __nop();
   703  000300  F000               	nop	
   704                           
   705                           ;UART_PIC.c: 56: UARTinterruptState = INTCONbits.GIE;
   706  000302  0E00               	movlw	0
   707  000304  BEF2               	btfsc	intcon,7,c	;volatile
   708  000306  0E01               	movlw	1
   709  000308  6E29               	movwf	_UARTinterruptState,c	;volatile
   710                           
   711                           ;UART_PIC.c: 57: (INTCONbits.GIE = 0);
   712  00030A  9EF2               	bcf	intcon,7,c	;volatile
   713                           
   714                           ;UART_PIC.c: 58: TXREG = data[numTransmits];
   715  00030C  5016               	movf	uartTransmitBlocking@numTransmits,w,c
   716  00030E  0D01               	mullw	1
   717  000310  50F3               	movf	prodl,w,c
   718  000312  2412               	addwf	uartTransmitBlocking@data,w,c
   719  000314  6ED9               	movwf	fsr2l,c
   720  000316  50F4               	movf	prodh,w,c
   721  000318  2013               	addwfc	uartTransmitBlocking@data+1,w,c
   722  00031A  6EDA               	movwf	fsr2h,c
   723  00031C  50DF               	movf	indf2,w,c
   724  00031E  6EAD               	movwf	4013,c	;volatile
   725                           
   726                           ;UART_PIC.c: 59: INTCONbits.GIE = UARTinterruptState;
   727  000320  B029               	btfsc	_UARTinterruptState,0,c	;volatile
   728  000322  D002               	bra	u625
   729  000324  9EF2               	bcf	intcon,7,c	;volatile
   730  000326  D001               	bra	u626
   731  000328                     u625:
   732  000328  8EF2               	bsf	intcon,7,c	;volatile
   733  00032A                     u626:
   734                           
   735                           ;UART_PIC.c: 61: numTransmits++;
   736  00032A  2A16               	incf	uartTransmitBlocking@numTransmits,f,c
   737  00032C                     l1340:
   738  00032C  5014               	movf	uartTransmitBlocking@numBytes,w,c
   739  00032E  5C16               	subwf	uartTransmitBlocking@numTransmits,w,c
   740  000330  A0D8               	btfss	status,0,c
   741  000332  D7D9               	goto	l1328
   742                           
   743                           ;UART_PIC.c: 65: }
   744                           ;UART_PIC.c: 68: UART -> _stateTX = UART_STATE_READY;
   745  000334  EE20 F008          	lfsr	2,8
   746  000338  5047               	movf	_UART,w,c
   747  00033A  26D9               	addwf	fsr2l,f,c
   748  00033C  5048               	movf	_UART+1,w,c
   749  00033E  22DA               	addwfc	fsr2h,f,c
   750  000340  0E01               	movlw	1
   751  000342  6EDF               	movwf	indf2,c
   752  000344  0012               	return		;funcret
   753  000346                     __end_of_uartTransmitBlocking:
   754                           	opt stack 0
   755                           tblptru	equ	0xFF8
   756                           tblptrh	equ	0xFF7
   757                           tblptrl	equ	0xFF6
   758                           tablat	equ	0xFF5
   759                           prodh	equ	0xFF4
   760                           prodl	equ	0xFF3
   761                           intcon	equ	0xFF2
   762                           postinc0	equ	0xFEE
   763                           wreg	equ	0xFE8
   764                           postdec1	equ	0xFE5
   765                           fsr1l	equ	0xFE1
   766                           indf2	equ	0xFDF
   767                           fsr2h	equ	0xFDA
   768                           fsr2l	equ	0xFD9
   769                           status	equ	0xFD8
   770                           
   771 ;; *************** function _readKeyboard *****************
   772 ;; Defined at:
   773 ;;		line 14 in file "Keypad.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;		None
   776 ;; Auto vars:     Size  Location     Type
   777 ;;  i               1   17[COMRAM] unsigned char 
   778 ;; Return value:  Size  Location     Type
   779 ;;                  1    wreg      unsigned char 
   780 ;; Registers used:
   781 ;;		wreg, status,2, status,0, prodl, prodh
   782 ;; Tracked objects:
   783 ;;		On entry : 0/0
   784 ;;		On exit  : 0/0
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   787 ;;      Params:         0       0       0       0       0       0       0       0       0
   788 ;;      Locals:         1       0       0       0       0       0       0       0       0
   789 ;;      Temps:          0       0       0       0       0       0       0       0       0
   790 ;;      Totals:         1       0       0       0       0       0       0       0       0
   791 ;;Total ram usage:        1 bytes
   792 ;; Hardware stack levels used:    1
   793 ;; Hardware stack levels required when called:    1
   794 ;; This function calls:
   795 ;;		Nothing
   796 ;; This function is called by:
   797 ;;		_keypadRoutineUART
   798 ;;		_keypadRoutine
   799 ;;		_keypadRoutine_StateBased
   800 ;; This function uses a non-reentrant model
   801 ;;
   802                           
   803                           	psect	text4
   804  0003CA                     __ptext4:
   805                           	opt stack 0
   806  0003CA                     _readKeyboard:
   807                           	opt stack 28
   808                           
   809                           ;Keypad.c: 25: for(unsigned char i = 0; i < 4; i++){
   810                           
   811                           ;incstack = 0
   812  0003CA  0E00               	movlw	0
   813  0003CC  6E12               	movwf	readKeyboard@i,c
   814  0003CE                     l908:
   815  0003CE  0E03               	movlw	3
   816  0003D0  6412               	cpfsgt	readKeyboard@i,c
   817  0003D2  D001               	goto	l912
   818  0003D4  D032               	goto	l950
   819  0003D6                     l912:
   820                           
   821                           ;Keypad.c: 26: if(i == 0)
   822  0003D6  5012               	movf	readKeyboard@i,w,c
   823  0003D8  A4D8               	btfss	status,2,c
   824  0003DA  D002               	goto	l916
   825                           
   826                           ;Keypad.c: 27: LATB = 0x10;
   827  0003DC  0E10               	movlw	16
   828  0003DE  D010               	goto	L3
   829  0003E0                     l916:
   830                           
   831                           ;Keypad.c: 28: else if(i == 1)
   832  0003E0  0412               	decf	readKeyboard@i,w,c
   833  0003E2  A4D8               	btfss	status,2,c
   834  0003E4  D002               	goto	l920
   835                           
   836                           ;Keypad.c: 29: LATB = 0x20;
   837  0003E6  0E20               	movlw	32
   838  0003E8  D00B               	goto	L3
   839  0003EA                     l920:
   840                           
   841                           ;Keypad.c: 30: else if(i == 2)
   842  0003EA  0E02               	movlw	2
   843  0003EC  1812               	xorwf	readKeyboard@i,w,c
   844  0003EE  A4D8               	btfss	status,2,c
   845  0003F0  D002               	goto	l924
   846                           
   847                           ;Keypad.c: 31: LATB = 0x40;
   848  0003F2  0E40               	movlw	64
   849  0003F4  D005               	goto	L3
   850  0003F6                     l924:
   851                           
   852                           ;Keypad.c: 32: else if(i == 3)
   853  0003F6  0E03               	movlw	3
   854  0003F8  1812               	xorwf	readKeyboard@i,w,c
   855  0003FA  A4D8               	btfss	status,2,c
   856  0003FC  D002               	goto	l928
   857                           
   858                           ;Keypad.c: 33: LATB = 0x80;
   859  0003FE  0E80               	movlw	128
   860  000400                     L3:
   861  000400  6E8A               	movwf	3978,c	;volatile
   862  000402                     l928:
   863                           
   864                           ;Keypad.c: 35: if(PORTBbits.RB0)
   865  000402  A081               	btfss	3969,0,c	;volatile
   866  000404  D004               	goto	l78
   867                           
   868                           ;Keypad.c: 36: return (i * 4U);
   869  000406  5012               	movf	readKeyboard@i,w,c
   870  000408  0D04               	mullw	4
   871  00040A  50F3               	movf	prodl,w,c
   872  00040C  0012               	return	
   873  00040E                     l78:
   874                           
   875                           ;Keypad.c: 37: if(PORTBbits.RB1)
   876  00040E  A281               	btfss	3969,1,c	;volatile
   877  000410  D004               	goto	l80
   878                           
   879                           ;Keypad.c: 38: return (i * 4U) + 1U;
   880  000412  5012               	movf	readKeyboard@i,w,c
   881  000414  0D04               	mullw	4
   882  000416  28F3               	incf	prodl,w,c
   883  000418  0012               	return	
   884  00041A                     l80:
   885                           
   886                           ;Keypad.c: 39: if(PORTBbits.RB2)
   887  00041A  A481               	btfss	3969,2,c	;volatile
   888  00041C  D005               	goto	l81
   889                           
   890                           ;Keypad.c: 40: return (i * 4U) + 2U;
   891  00041E  5012               	movf	readKeyboard@i,w,c
   892  000420  0D04               	mullw	4
   893  000422  50F3               	movf	prodl,w,c
   894  000424  0F02               	addlw	2
   895  000426  0012               	return	
   896  000428                     l81:
   897                           
   898                           ;Keypad.c: 41: if(PORTBbits.RB3)
   899  000428  A681               	btfss	3969,3,c	;volatile
   900  00042A  D005               	goto	l946
   901                           
   902                           ;Keypad.c: 42: return (i * 4U) + 3U;
   903  00042C  5012               	movf	readKeyboard@i,w,c
   904  00042E  0D04               	mullw	4
   905  000430  50F3               	movf	prodl,w,c
   906  000432  0F03               	addlw	3
   907  000434  0012               	return	
   908  000436                     l946:
   909  000436  2A12               	incf	readKeyboard@i,f,c
   910  000438  D7CA               	goto	l908
   911  00043A                     l950:
   912                           
   913                           ;Keypad.c: 43: }
   914                           ;Keypad.c: 44: return 0xF0;
   915  00043A  0EF0               	movlw	240
   916  00043C  0012               	return	
   917  00043E                     __end_of_readKeyboard:
   918                           	opt stack 0
   919                           tblptru	equ	0xFF8
   920                           tblptrh	equ	0xFF7
   921                           tblptrl	equ	0xFF6
   922                           tablat	equ	0xFF5
   923                           prodh	equ	0xFF4
   924                           prodl	equ	0xFF3
   925                           intcon	equ	0xFF2
   926                           postinc0	equ	0xFEE
   927                           wreg	equ	0xFE8
   928                           postdec1	equ	0xFE5
   929                           fsr1l	equ	0xFE1
   930                           indf2	equ	0xFDF
   931                           fsr2h	equ	0xFDA
   932                           fsr2l	equ	0xFD9
   933                           status	equ	0xFD8
   934                           
   935 ;; *************** function _UART_Init *****************
   936 ;; Defined at:
   937 ;;		line 200 in file "UART_PIC.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;  baud            4   31[COMRAM] long 
   940 ;; Auto vars:     Size  Location     Type
   941 ;;		None
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   951 ;;      Params:         4       0       0       0       0       0       0       0       0
   952 ;;      Locals:         0       0       0       0       0       0       0       0       0
   953 ;;      Temps:          0       4       0       0       0       0       0       0       0
   954 ;;      Totals:         4       4       0       0       0       0       0       0       0
   955 ;;Total ram usage:        8 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; Hardware stack levels required when called:    2
   958 ;; This function calls:
   959 ;;		___aldiv
   960 ;; This function is called by:
   961 ;;		_main
   962 ;; This function uses a non-reentrant model
   963 ;;
   964                           
   965                           	psect	text5
   966  000346                     __ptext5:
   967                           	opt stack 0
   968  000346                     _UART_Init:
   969                           	opt stack 28
   970                           
   971                           ;UART_PIC.c: 213: SPBRG = (unsigned char)((8000000 / (64 * baud)) - 1);
   972                           
   973                           ;incstack = 0
   974  000346  0E00               	movlw	0
   975  000348  6E12               	movwf	___aldiv@dividend,c
   976  00034A  0E12               	movlw	18
   977  00034C  6E13               	movwf	___aldiv@dividend+1,c
   978  00034E  0E7A               	movlw	122
   979  000350  6E14               	movwf	___aldiv@dividend+2,c
   980  000352  0E00               	movlw	0
   981  000354  6E15               	movwf	___aldiv@dividend+3,c
   982  000356  C020  F060         	movff	UART_Init@baud,??_UART_Init
   983  00035A  C021  F061         	movff	UART_Init@baud+1,??_UART_Init+1
   984  00035E  C022  F062         	movff	UART_Init@baud+2,??_UART_Init+2
   985  000362  C023  F063         	movff	UART_Init@baud+3,??_UART_Init+3
   986  000366  0E06               	movlw	6
   987  000368                     u745:
   988  000368  90D8               	bcf	status,0,c
   989  00036A  0100               	movlb	0	; () banked
   990  00036C  3760               	rlcf	??_UART_Init& (0+255),f,b
   991  00036E  3761               	rlcf	(??_UART_Init+1)& (0+255),f,b
   992  000370  3762               	rlcf	(??_UART_Init+2)& (0+255),f,b
   993  000372  3763               	rlcf	(??_UART_Init+3)& (0+255),f,b
   994  000374  2EE8               	decfsz	wreg,f,c
   995  000376  D7F8               	goto	u745
   996  000378  C060  F016         	movff	??_UART_Init,___aldiv@divisor
   997  00037C  C061  F017         	movff	??_UART_Init+1,___aldiv@divisor+1
   998  000380  C062  F018         	movff	??_UART_Init+2,___aldiv@divisor+2
   999  000384  C063  F019         	movff	??_UART_Init+3,___aldiv@divisor+3
  1000  000388  ECF1  F000         	call	___aldiv	;wreg free
  1001  00038C  0412               	decf	?___aldiv,w,c
  1002  00038E  6EAF               	movwf	4015,c	;volatile
  1003                           
  1004                           ;UART_PIC.c: 216: TXSTAbits.TX9 = 0;
  1005  000390  9CAC               	bcf	4012,6,c	;volatile
  1006                           
  1007                           ;UART_PIC.c: 217: TXSTAbits.SYNC = 0;
  1008  000392  98AC               	bcf	4012,4,c	;volatile
  1009                           
  1010                           ;UART_PIC.c: 218: TXSTAbits.TXEN = 1;
  1011  000394  8AAC               	bsf	4012,5,c	;volatile
  1012                           
  1013                           ;UART_PIC.c: 221: RCSTAbits.RX9 = 0;
  1014  000396  9CAB               	bcf	4011,6,c	;volatile
  1015                           
  1016                           ;UART_PIC.c: 222: RCSTAbits.CREN = 1;
  1017  000398  88AB               	bsf	4011,4,c	;volatile
  1018                           
  1019                           ;UART_PIC.c: 225: UART -> _stateTX = UART_STATE_READY;
  1020  00039A  EE20 F008          	lfsr	2,8
  1021  00039E  5047               	movf	_UART,w,c
  1022  0003A0  26D9               	addwf	fsr2l,f,c
  1023  0003A2  5048               	movf	_UART+1,w,c
  1024  0003A4  22DA               	addwfc	fsr2h,f,c
  1025  0003A6  0E01               	movlw	1
  1026  0003A8  6EDF               	movwf	indf2,c
  1027                           
  1028                           ;UART_PIC.c: 226: UART -> _stateRX = UART_STATE_READY;
  1029  0003AA  EE20 F009          	lfsr	2,9
  1030  0003AE  5047               	movf	_UART,w,c
  1031  0003B0  26D9               	addwf	fsr2l,f,c
  1032  0003B2  5048               	movf	_UART+1,w,c
  1033  0003B4  22DA               	addwfc	fsr2h,f,c
  1034  0003B6  0E01               	movlw	1
  1035  0003B8  6EDF               	movwf	indf2,c
  1036                           
  1037                           ;UART_PIC.c: 229: uart._dataRX = arr_dataRX;
  1038  0003BA  0E2A               	movlw	low _arr_dataRX
  1039  0003BC  6E3E               	movwf	_uart+4,c	;volatile
  1040  0003BE  0E00               	movlw	high _arr_dataRX
  1041  0003C0  6E3F               	movwf	_uart+5,c	;volatile
  1042                           
  1043                           ;UART_PIC.c: 232: TRISC6 = 0;
  1044  0003C2  9C94               	bcf	3988,6,c	;volatile
  1045                           
  1046                           ;UART_PIC.c: 233: TRISC7 = 1;
  1047  0003C4  8E94               	bsf	3988,7,c	;volatile
  1048                           
  1049                           ;UART_PIC.c: 236: RCSTAbits.SPEN = 1;
  1050  0003C6  8EAB               	bsf	4011,7,c	;volatile
  1051  0003C8  0012               	return		;funcret
  1052  0003CA                     __end_of_UART_Init:
  1053                           	opt stack 0
  1054                           tblptru	equ	0xFF8
  1055                           tblptrh	equ	0xFF7
  1056                           tblptrl	equ	0xFF6
  1057                           tablat	equ	0xFF5
  1058                           prodh	equ	0xFF4
  1059                           prodl	equ	0xFF3
  1060                           intcon	equ	0xFF2
  1061                           postinc0	equ	0xFEE
  1062                           wreg	equ	0xFE8
  1063                           postdec1	equ	0xFE5
  1064                           fsr1l	equ	0xFE1
  1065                           indf2	equ	0xFDF
  1066                           fsr2h	equ	0xFDA
  1067                           fsr2l	equ	0xFD9
  1068                           status	equ	0xFD8
  1069                           
  1070 ;; *************** function ___aldiv *****************
  1071 ;; Defined at:
  1072 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;  dividend        4   17[COMRAM] long 
  1075 ;;  divisor         4   21[COMRAM] long 
  1076 ;; Auto vars:     Size  Location     Type
  1077 ;;  quotient        4   27[COMRAM] long 
  1078 ;;  sign            1   26[COMRAM] unsigned char 
  1079 ;;  counter         1   25[COMRAM] unsigned char 
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  4   17[COMRAM] long 
  1082 ;; Registers used:
  1083 ;;		wreg, status,2, status,0
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1089 ;;      Params:         8       0       0       0       0       0       0       0       0
  1090 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1091 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1092 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1093 ;;Total ram usage:       14 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; Hardware stack levels required when called:    1
  1096 ;; This function calls:
  1097 ;;		Nothing
  1098 ;; This function is called by:
  1099 ;;		_UART_Init
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103                           	psect	text6
  1104  0001E2                     __ptext6:
  1105                           	opt stack 0
  1106  0001E2                     ___aldiv:
  1107                           	opt stack 28
  1108                           
  1109                           ;incstack = 0
  1110  0001E2  0E00               	movlw	0
  1111  0001E4  6E1B               	movwf	___aldiv@sign,c
  1112  0001E6  AE19               	btfss	___aldiv@divisor+3,7,c
  1113  0001E8  D00A               	goto	l1352
  1114  0001EA  1E19               	comf	___aldiv@divisor+3,f,c
  1115  0001EC  1E18               	comf	___aldiv@divisor+2,f,c
  1116  0001EE  1E17               	comf	___aldiv@divisor+1,f,c
  1117  0001F0  6C16               	negf	___aldiv@divisor,c
  1118  0001F2  0E00               	movlw	0
  1119  0001F4  2217               	addwfc	___aldiv@divisor+1,f,c
  1120  0001F6  2218               	addwfc	___aldiv@divisor+2,f,c
  1121  0001F8  2219               	addwfc	___aldiv@divisor+3,f,c
  1122  0001FA  0E01               	movlw	1
  1123  0001FC  6E1B               	movwf	___aldiv@sign,c
  1124  0001FE                     l1352:
  1125  0001FE  AE15               	btfss	___aldiv@dividend+3,7,c
  1126  000200  D00A               	goto	l1358
  1127  000202  1E15               	comf	___aldiv@dividend+3,f,c
  1128  000204  1E14               	comf	___aldiv@dividend+2,f,c
  1129  000206  1E13               	comf	___aldiv@dividend+1,f,c
  1130  000208  6C12               	negf	___aldiv@dividend,c
  1131  00020A  0E00               	movlw	0
  1132  00020C  2213               	addwfc	___aldiv@dividend+1,f,c
  1133  00020E  2214               	addwfc	___aldiv@dividend+2,f,c
  1134  000210  2215               	addwfc	___aldiv@dividend+3,f,c
  1135  000212  0E01               	movlw	1
  1136  000214  1A1B               	xorwf	___aldiv@sign,f,c
  1137  000216                     l1358:
  1138  000216  0E00               	movlw	0
  1139  000218  6E1C               	movwf	___aldiv@quotient,c
  1140  00021A  0E00               	movlw	0
  1141  00021C  6E1D               	movwf	___aldiv@quotient+1,c
  1142  00021E  0E00               	movlw	0
  1143  000220  6E1E               	movwf	___aldiv@quotient+2,c
  1144  000222  0E00               	movlw	0
  1145  000224  6E1F               	movwf	___aldiv@quotient+3,c
  1146  000226  5016               	movf	___aldiv@divisor,w,c
  1147  000228  1017               	iorwf	___aldiv@divisor+1,w,c
  1148  00022A  1018               	iorwf	___aldiv@divisor+2,w,c
  1149  00022C  1019               	iorwf	___aldiv@divisor+3,w,c
  1150  00022E  B4D8               	btfsc	status,2,c
  1151  000230  D02A               	goto	l1380
  1152  000232  0E01               	movlw	1
  1153  000234  6E1A               	movwf	___aldiv@counter,c
  1154  000236  D006               	goto	l1366
  1155  000238                     l1364:
  1156  000238  90D8               	bcf	status,0,c
  1157  00023A  3616               	rlcf	___aldiv@divisor,f,c
  1158  00023C  3617               	rlcf	___aldiv@divisor+1,f,c
  1159  00023E  3618               	rlcf	___aldiv@divisor+2,f,c
  1160  000240  3619               	rlcf	___aldiv@divisor+3,f,c
  1161  000242  2A1A               	incf	___aldiv@counter,f,c
  1162  000244                     l1366:
  1163  000244  AE19               	btfss	___aldiv@divisor+3,7,c
  1164  000246  D7F8               	goto	l1364
  1165  000248                     l1368:
  1166  000248  90D8               	bcf	status,0,c
  1167  00024A  361C               	rlcf	___aldiv@quotient,f,c
  1168  00024C  361D               	rlcf	___aldiv@quotient+1,f,c
  1169  00024E  361E               	rlcf	___aldiv@quotient+2,f,c
  1170  000250  361F               	rlcf	___aldiv@quotient+3,f,c
  1171  000252  5016               	movf	___aldiv@divisor,w,c
  1172  000254  5C12               	subwf	___aldiv@dividend,w,c
  1173  000256  5017               	movf	___aldiv@divisor+1,w,c
  1174  000258  5813               	subwfb	___aldiv@dividend+1,w,c
  1175  00025A  5018               	movf	___aldiv@divisor+2,w,c
  1176  00025C  5814               	subwfb	___aldiv@dividend+2,w,c
  1177  00025E  5019               	movf	___aldiv@divisor+3,w,c
  1178  000260  5815               	subwfb	___aldiv@dividend+3,w,c
  1179  000262  A0D8               	btfss	status,0,c
  1180  000264  D009               	goto	l1376
  1181  000266  5016               	movf	___aldiv@divisor,w,c
  1182  000268  5E12               	subwf	___aldiv@dividend,f,c
  1183  00026A  5017               	movf	___aldiv@divisor+1,w,c
  1184  00026C  5A13               	subwfb	___aldiv@dividend+1,f,c
  1185  00026E  5018               	movf	___aldiv@divisor+2,w,c
  1186  000270  5A14               	subwfb	___aldiv@dividend+2,f,c
  1187  000272  5019               	movf	___aldiv@divisor+3,w,c
  1188  000274  5A15               	subwfb	___aldiv@dividend+3,f,c
  1189  000276  801C               	bsf	___aldiv@quotient,0,c
  1190  000278                     l1376:
  1191  000278  90D8               	bcf	status,0,c
  1192  00027A  3219               	rrcf	___aldiv@divisor+3,f,c
  1193  00027C  3218               	rrcf	___aldiv@divisor+2,f,c
  1194  00027E  3217               	rrcf	___aldiv@divisor+1,f,c
  1195  000280  3216               	rrcf	___aldiv@divisor,f,c
  1196  000282  2E1A               	decfsz	___aldiv@counter,f,c
  1197  000284  D7E1               	goto	l1368
  1198  000286                     l1380:
  1199  000286  501B               	movf	___aldiv@sign,w,c
  1200  000288  B4D8               	btfsc	status,2,c
  1201  00028A  D008               	goto	l1384
  1202  00028C  1E1F               	comf	___aldiv@quotient+3,f,c
  1203  00028E  1E1E               	comf	___aldiv@quotient+2,f,c
  1204  000290  1E1D               	comf	___aldiv@quotient+1,f,c
  1205  000292  6C1C               	negf	___aldiv@quotient,c
  1206  000294  0E00               	movlw	0
  1207  000296  221D               	addwfc	___aldiv@quotient+1,f,c
  1208  000298  221E               	addwfc	___aldiv@quotient+2,f,c
  1209  00029A  221F               	addwfc	___aldiv@quotient+3,f,c
  1210  00029C                     l1384:
  1211  00029C  C01C  F012         	movff	___aldiv@quotient,?___aldiv
  1212  0002A0  C01D  F013         	movff	___aldiv@quotient+1,?___aldiv+1
  1213  0002A4  C01E  F014         	movff	___aldiv@quotient+2,?___aldiv+2
  1214  0002A8  C01F  F015         	movff	___aldiv@quotient+3,?___aldiv+3
  1215  0002AC  0012               	return	
  1216  0002AE                     __end_of___aldiv:
  1217                           	opt stack 0
  1218                           tblptru	equ	0xFF8
  1219                           tblptrh	equ	0xFF7
  1220                           tblptrl	equ	0xFF6
  1221                           tablat	equ	0xFF5
  1222                           prodh	equ	0xFF4
  1223                           prodl	equ	0xFF3
  1224                           intcon	equ	0xFF2
  1225                           postinc0	equ	0xFEE
  1226                           wreg	equ	0xFE8
  1227                           postdec1	equ	0xFE5
  1228                           fsr1l	equ	0xFE1
  1229                           indf2	equ	0xFDF
  1230                           fsr2h	equ	0xFDA
  1231                           fsr2l	equ	0xFD9
  1232                           status	equ	0xFD8
  1233                           
  1234 ;; *************** function _interruptHandlerUART *****************
  1235 ;; Defined at:
  1236 ;;		line 10 in file "interruptUART.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;		None
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;		None
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  1    wreg      void 
  1243 ;; Registers used:
  1244 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1250 ;;      Params:         0       0       0       0       0       0       0       0       0
  1251 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1252 ;;      Temps:         17       0       0       0       0       0       0       0       0
  1253 ;;      Totals:        17       0       0       0       0       0       0       0       0
  1254 ;;Total ram usage:       17 bytes
  1255 ;; Hardware stack levels used:    1
  1256 ;; This function calls:
  1257 ;;		Nothing
  1258 ;; This function is called by:
  1259 ;;		Interrupt level 2
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	intcode
  1264  000008                     __pintcode:
  1265                           	opt stack 0
  1266  000008                     _interruptHandlerUART:
  1267                           	opt stack 28
  1268                           
  1269                           ;incstack = 0
  1270  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1271  00000A  ED09  F000         	call	int_func,f	;refresh shadow registers
  1272                           tblptru	equ	0xFF8
  1273                           tblptrh	equ	0xFF7
  1274                           tblptrl	equ	0xFF6
  1275                           tablat	equ	0xFF5
  1276                           prodh	equ	0xFF4
  1277                           prodl	equ	0xFF3
  1278                           intcon	equ	0xFF2
  1279                           postinc0	equ	0xFEE
  1280                           wreg	equ	0xFE8
  1281                           postdec1	equ	0xFE5
  1282                           fsr1l	equ	0xFE1
  1283                           indf2	equ	0xFDF
  1284                           fsr2h	equ	0xFDA
  1285                           fsr2l	equ	0xFD9
  1286                           status	equ	0xFD8
  1287                           
  1288                           	psect	intcode_body
  1289  000012                     __pintcode_body:
  1290                           	opt stack 28
  1291  000012                     int_func:
  1292                           	opt stack 28
  1293  000012  0006               	pop		; remove dummy address from shadow register refresh
  1294  000014  CFFA F004          	movff	pclath,??_interruptHandlerUART+3
  1295  000018  CFFB F005          	movff	pclatu,??_interruptHandlerUART+4
  1296  00001C  CFE9 F006          	movff	fsr0l,??_interruptHandlerUART+5
  1297  000020  CFEA F007          	movff	fsr0h,??_interruptHandlerUART+6
  1298  000024  CFE1 F008          	movff	fsr1l,??_interruptHandlerUART+7
  1299  000028  CFE2 F009          	movff	fsr1h,??_interruptHandlerUART+8
  1300  00002C  CFD9 F00A          	movff	fsr2l,??_interruptHandlerUART+9
  1301  000030  CFDA F00B          	movff	fsr2h,??_interruptHandlerUART+10
  1302  000034  CFF3 F00C          	movff	prodl,??_interruptHandlerUART+11
  1303  000038  CFF4 F00D          	movff	prodh,??_interruptHandlerUART+12
  1304  00003C  CFF6 F00E          	movff	tblptrl,??_interruptHandlerUART+13
  1305  000040  CFF7 F00F          	movff	tblptrh,??_interruptHandlerUART+14
  1306  000044  CFF8 F010          	movff	tblptru,??_interruptHandlerUART+15
  1307  000048  CFF5 F011          	movff	tablat,??_interruptHandlerUART+16
  1308                           
  1309                           ;interruptUART.c: 17: if(TXIF){
  1310  00004C  A89E               	btfss	3998,4,c	;volatile
  1311  00004E  D044               	goto	i2l1288
  1312                           
  1313                           ;interruptUART.c: 19: UARTinterruptState = INTCONbits.GIE;
  1314  000050  0E00               	movlw	0
  1315  000052  BEF2               	btfsc	intcon,7,c	;volatile
  1316  000054  0E01               	movlw	1
  1317  000056  6E29               	movwf	_UARTinterruptState,c	;volatile
  1318                           
  1319                           ;interruptUART.c: 20: (INTCONbits.GIE = 0);
  1320  000058  9EF2               	bcf	intcon,7,c	;volatile
  1321                           
  1322                           ;interruptUART.c: 21: TXREG = UART -> _dataTX[UART -> _numTransmits];
  1323  00005A  EE20 F003          	lfsr	2,3
  1324  00005E  5047               	movf	_UART,w,c
  1325  000060  26D9               	addwf	fsr2l,f,c
  1326  000062  5048               	movf	_UART+1,w,c
  1327  000064  22DA               	addwfc	fsr2h,f,c
  1328  000066  50DF               	movf	indf2,w,c
  1329  000068  6E01               	movwf	??_interruptHandlerUART& (0+255),c
  1330  00006A  5001               	movf	??_interruptHandlerUART,w,c
  1331  00006C  0D01               	mullw	1
  1332  00006E  C047  FFD9         	movff	_UART,fsr2l
  1333  000072  C048  FFDA         	movff	_UART+1,fsr2h
  1334  000076  CFDE F002          	movff	postinc2,??_interruptHandlerUART+1
  1335  00007A  CFDD F003          	movff	postdec2,??_interruptHandlerUART+2
  1336  00007E  50F3               	movf	prodl,w,c
  1337  000080  2402               	addwf	??_interruptHandlerUART+1,w,c
  1338  000082  6ED9               	movwf	fsr2l,c
  1339  000084  50F4               	movf	prodh,w,c
  1340  000086  2003               	addwfc	??_interruptHandlerUART+2,w,c
  1341  000088  6EDA               	movwf	fsr2h,c
  1342  00008A  50DF               	movf	indf2,w,c
  1343  00008C  6EAD               	movwf	4013,c	;volatile
  1344                           
  1345                           ;interruptUART.c: 22: INTCONbits.GIE = UARTinterruptState;
  1346  00008E  B029               	btfsc	_UARTinterruptState,0,c	;volatile
  1347  000090  D002               	bra	i2u52_45
  1348  000092  9EF2               	bcf	intcon,7,c	;volatile
  1349  000094  D001               	bra	i2u52_46
  1350  000096                     i2u52_45:
  1351  000096  8EF2               	bsf	intcon,7,c	;volatile
  1352  000098                     i2u52_46:
  1353                           
  1354                           ;interruptUART.c: 24: UART -> _numTransmits++;
  1355  000098  EE20 F003          	lfsr	2,3
  1356  00009C  5047               	movf	_UART,w,c
  1357  00009E  26D9               	addwf	fsr2l,f,c
  1358  0000A0  5048               	movf	_UART+1,w,c
  1359  0000A2  22DA               	addwfc	fsr2h,f,c
  1360  0000A4  2ADF               	incf	indf2,f,c
  1361                           
  1362                           ;interruptUART.c: 27: if((UART -> _numTransmits) == (UART -> _numBytesTX)){
  1363  0000A6  EE20 F002          	lfsr	2,2
  1364  0000AA  5047               	movf	_UART,w,c
  1365  0000AC  26D9               	addwf	fsr2l,f,c
  1366  0000AE  5048               	movf	_UART+1,w,c
  1367  0000B0  22DA               	addwfc	fsr2h,f,c
  1368  0000B2  EE10 F003          	lfsr	1,3
  1369  0000B6  5047               	movf	_UART,w,c
  1370  0000B8  26E1               	addwf	fsr1l,f,c
  1371  0000BA  5048               	movf	_UART+1,w,c
  1372  0000BC  22E2               	addwfc	fsr1h,f,c
  1373  0000BE  50DE               	movf	postinc2,w,c
  1374  0000C0  18E6               	xorwf	postinc1,w,c
  1375  0000C2  A4D8               	btfss	status,2,c
  1376  0000C4  D009               	goto	i2l1288
  1377                           
  1378                           ;interruptUART.c: 28: TXIE = 0;
  1379  0000C6  989D               	bcf	3997,4,c	;volatile
  1380                           
  1381                           ;interruptUART.c: 31: UART -> _stateTX = UART_STATE_READY;
  1382  0000C8  EE20 F008          	lfsr	2,8
  1383  0000CC  5047               	movf	_UART,w,c
  1384  0000CE  26D9               	addwf	fsr2l,f,c
  1385  0000D0  5048               	movf	_UART+1,w,c
  1386  0000D2  22DA               	addwfc	fsr2h,f,c
  1387  0000D4  0E01               	movlw	1
  1388  0000D6  6EDF               	movwf	indf2,c
  1389  0000D8                     i2l1288:
  1390                           
  1391                           ;interruptUART.c: 32: }
  1392                           ;interruptUART.c: 33: }
  1393                           ;interruptUART.c: 36: if(RCIF){
  1394  0000D8  AA9E               	btfss	3998,5,c	;volatile
  1395  0000DA  D065               	goto	i2l284
  1396                           
  1397                           ;interruptUART.c: 39: if(RCSTAbits.FERR){
  1398  0000DC  A4AB               	btfss	4011,2,c	;volatile
  1399  0000DE  D008               	goto	i2l1294
  1400                           
  1401                           ;interruptUART.c: 43: UART -> _lastReceiveFERR = 1;
  1402  0000E0  EE20 F00A          	lfsr	2,10
  1403  0000E4  5047               	movf	_UART,w,c
  1404  0000E6  26D9               	addwf	fsr2l,f,c
  1405  0000E8  5048               	movf	_UART+1,w,c
  1406  0000EA  22DA               	addwfc	fsr2h,f,c
  1407  0000EC  0E01               	movlw	1
  1408  0000EE  D007               	goto	L4
  1409  0000F0                     i2l1294:
  1410                           
  1411                           ;interruptUART.c: 45: else{
  1412                           ;interruptUART.c: 46: UART -> _lastReceiveFERR = 0;
  1413  0000F0  EE20 F00A          	lfsr	2,10
  1414  0000F4  5047               	movf	_UART,w,c
  1415  0000F6  26D9               	addwf	fsr2l,f,c
  1416  0000F8  5048               	movf	_UART+1,w,c
  1417  0000FA  22DA               	addwfc	fsr2h,f,c
  1418  0000FC  0E00               	movlw	0
  1419  0000FE                     L4:
  1420  0000FE  6EDF               	movwf	indf2,c
  1421                           
  1422                           ;interruptUART.c: 47: }
  1423                           ;interruptUART.c: 50: UARTinterruptState = INTCONbits.GIE;
  1424  000100  0E00               	movlw	0
  1425  000102  BEF2               	btfsc	intcon,7,c	;volatile
  1426  000104  0E01               	movlw	1
  1427  000106  6E29               	movwf	_UARTinterruptState,c	;volatile
  1428                           
  1429                           ;interruptUART.c: 51: (INTCONbits.GIE = 0);
  1430  000108  9EF2               	bcf	intcon,7,c	;volatile
  1431                           
  1432                           ;interruptUART.c: 52: UART -> _dataRX[UART -> _numReceives] = RCREG;
  1433  00010A  EE20 F007          	lfsr	2,7
  1434  00010E  5047               	movf	_UART,w,c
  1435  000110  26D9               	addwf	fsr2l,f,c
  1436  000112  5048               	movf	_UART+1,w,c
  1437  000114  22DA               	addwfc	fsr2h,f,c
  1438  000116  50DF               	movf	indf2,w,c
  1439  000118  6E01               	movwf	??_interruptHandlerUART& (0+255),c
  1440  00011A  5001               	movf	??_interruptHandlerUART,w,c
  1441  00011C  0D01               	mullw	1
  1442  00011E  EE20 F004          	lfsr	2,4
  1443  000122  5047               	movf	_UART,w,c
  1444  000124  26D9               	addwf	fsr2l,f,c
  1445  000126  5048               	movf	_UART+1,w,c
  1446  000128  22DA               	addwfc	fsr2h,f,c
  1447  00012A  CFDE F002          	movff	postinc2,??_interruptHandlerUART+1
  1448  00012E  CFDD F003          	movff	postdec2,??_interruptHandlerUART+2
  1449  000132  50F3               	movf	prodl,w,c
  1450  000134  2402               	addwf	??_interruptHandlerUART+1,w,c
  1451  000136  6ED9               	movwf	fsr2l,c
  1452  000138  50F4               	movf	prodh,w,c
  1453  00013A  2003               	addwfc	??_interruptHandlerUART+2,w,c
  1454  00013C  6EDA               	movwf	fsr2h,c
  1455  00013E  CFAE FFDF          	movff	4014,indf2	;volatile
  1456                           
  1457                           ;interruptUART.c: 53: INTCONbits.GIE = UARTinterruptState;
  1458  000142  B029               	btfsc	_UARTinterruptState,0,c	;volatile
  1459  000144  D002               	bra	i2u56_45
  1460  000146  9EF2               	bcf	intcon,7,c	;volatile
  1461  000148  D001               	bra	i2u56_46
  1462  00014A                     i2u56_45:
  1463  00014A  8EF2               	bsf	intcon,7,c	;volatile
  1464  00014C                     i2u56_46:
  1465                           
  1466                           ;interruptUART.c: 57: if(RCSTAbits.OERR){
  1467  00014C  A2AB               	btfss	4011,1,c	;volatile
  1468  00014E  D003               	goto	i2l1308
  1469                           
  1470                           ;interruptUART.c: 59: RCSTAbits.CREN = 0;
  1471  000150  98AB               	bcf	4011,4,c	;volatile
  1472                           
  1473                           ;interruptUART.c: 60: RCSTAbits.CREN = 1;
  1474  000152  88AB               	bsf	4011,4,c	;volatile
  1475                           
  1476                           ;interruptUART.c: 61: }
  1477  000154  D008               	goto	i2l282
  1478  000156                     i2l1308:
  1479                           
  1480                           ;interruptUART.c: 62: else{
  1481                           ;interruptUART.c: 63: UART -> _lastReceiveOERR = 0;
  1482  000156  EE20 F00B          	lfsr	2,11
  1483  00015A  5047               	movf	_UART,w,c
  1484  00015C  26D9               	addwf	fsr2l,f,c
  1485  00015E  5048               	movf	_UART+1,w,c
  1486  000160  22DA               	addwfc	fsr2h,f,c
  1487  000162  0E00               	movlw	0
  1488  000164  6EDF               	movwf	indf2,c
  1489  000166                     i2l282:
  1490                           
  1491                           ;interruptUART.c: 64: }
  1492                           ;interruptUART.c: 66: UART -> _numReceives++;
  1493  000166  EE20 F007          	lfsr	2,7
  1494  00016A  5047               	movf	_UART,w,c
  1495  00016C  26D9               	addwf	fsr2l,f,c
  1496  00016E  5048               	movf	_UART+1,w,c
  1497  000170  22DA               	addwfc	fsr2h,f,c
  1498  000172  2ADF               	incf	indf2,f,c
  1499                           
  1500                           ;interruptUART.c: 69: if(UART -> _numReceives >= UART -> _numBytesRX){
  1501  000174  EE20 F006          	lfsr	2,6
  1502  000178  5047               	movf	_UART,w,c
  1503  00017A  26D9               	addwf	fsr2l,f,c
  1504  00017C  5048               	movf	_UART+1,w,c
  1505  00017E  22DA               	addwfc	fsr2h,f,c
  1506  000180  EE10 F007          	lfsr	1,7
  1507  000184  5047               	movf	_UART,w,c
  1508  000186  26E1               	addwf	fsr1l,f,c
  1509  000188  5048               	movf	_UART+1,w,c
  1510  00018A  22E2               	addwfc	fsr1h,f,c
  1511  00018C  50DE               	movf	postinc2,w,c
  1512  00018E  5CE6               	subwf	postinc1,w,c
  1513  000190  A0D8               	btfss	status,0,c
  1514  000192  D009               	goto	i2l284
  1515                           
  1516                           ;interruptUART.c: 70: RCIE = 0;
  1517  000194  9A9D               	bcf	3997,5,c	;volatile
  1518                           
  1519                           ;interruptUART.c: 73: UART -> _stateRX = UART_STATE_READY;
  1520  000196  EE20 F009          	lfsr	2,9
  1521  00019A  5047               	movf	_UART,w,c
  1522  00019C  26D9               	addwf	fsr2l,f,c
  1523  00019E  5048               	movf	_UART+1,w,c
  1524  0001A0  22DA               	addwfc	fsr2h,f,c
  1525  0001A2  0E01               	movlw	1
  1526  0001A4  6EDF               	movwf	indf2,c
  1527  0001A6                     i2l284:
  1528  0001A6  C011  FFF5         	movff	??_interruptHandlerUART+16,tablat
  1529  0001AA  C010  FFF8         	movff	??_interruptHandlerUART+15,tblptru
  1530  0001AE  C00F  FFF7         	movff	??_interruptHandlerUART+14,tblptrh
  1531  0001B2  C00E  FFF6         	movff	??_interruptHandlerUART+13,tblptrl
  1532  0001B6  C00D  FFF4         	movff	??_interruptHandlerUART+12,prodh
  1533  0001BA  C00C  FFF3         	movff	??_interruptHandlerUART+11,prodl
  1534  0001BE  C00B  FFDA         	movff	??_interruptHandlerUART+10,fsr2h
  1535  0001C2  C00A  FFD9         	movff	??_interruptHandlerUART+9,fsr2l
  1536  0001C6  C009  FFE2         	movff	??_interruptHandlerUART+8,fsr1h
  1537  0001CA  C008  FFE1         	movff	??_interruptHandlerUART+7,fsr1l
  1538  0001CE  C007  FFEA         	movff	??_interruptHandlerUART+6,fsr0h
  1539  0001D2  C006  FFE9         	movff	??_interruptHandlerUART+5,fsr0l
  1540  0001D6  C005  FFFB         	movff	??_interruptHandlerUART+4,pclatu
  1541  0001DA  C004  FFFA         	movff	??_interruptHandlerUART+3,pclath
  1542  0001DE  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1543  0001E0  0011               	retfie		f
  1544  0001E2                     __end_of_interruptHandlerUART:
  1545                           	opt stack 0
  1546  0000                     pclatu	equ	0xFFB
  1547                           pclath	equ	0xFFA
  1548                           tblptru	equ	0xFF8
  1549                           tblptrh	equ	0xFF7
  1550                           tblptrl	equ	0xFF6
  1551                           tablat	equ	0xFF5
  1552                           prodh	equ	0xFF4
  1553                           prodl	equ	0xFF3
  1554                           intcon	equ	0xFF2
  1555                           postinc0	equ	0xFEE
  1556                           fsr0h	equ	0xFEA
  1557                           fsr0l	equ	0xFE9
  1558                           wreg	equ	0xFE8
  1559                           postinc1	equ	0xFE6
  1560                           postdec1	equ	0xFE5
  1561                           fsr1h	equ	0xFE2
  1562                           fsr1l	equ	0xFE1
  1563                           indf2	equ	0xFDF
  1564                           postinc2	equ	0xFDE
  1565                           postdec2	equ	0xFDD
  1566                           fsr2h	equ	0xFDA
  1567                           fsr2l	equ	0xFD9
  1568                           status	equ	0xFD8
  1569                           pclatu	equ	0xFFB
  1570                           pclath	equ	0xFFA
  1571                           tblptru	equ	0xFF8
  1572                           tblptrh	equ	0xFF7
  1573                           tblptrl	equ	0xFF6
  1574                           tablat	equ	0xFF5
  1575                           prodh	equ	0xFF4
  1576                           prodl	equ	0xFF3
  1577                           intcon	equ	0xFF2
  1578                           postinc0	equ	0xFEE
  1579                           fsr0h	equ	0xFEA
  1580                           fsr0l	equ	0xFE9
  1581                           wreg	equ	0xFE8
  1582                           postinc1	equ	0xFE6
  1583                           postdec1	equ	0xFE5
  1584                           fsr1h	equ	0xFE2
  1585                           fsr1l	equ	0xFE1
  1586                           indf2	equ	0xFDF
  1587                           postinc2	equ	0xFDE
  1588                           postdec2	equ	0xFDD
  1589                           fsr2h	equ	0xFDA
  1590                           fsr2l	equ	0xFD9
  1591                           status	equ	0xFD8
  1592                           
  1593                           	psect	rparam
  1594  0000                     pclatu	equ	0xFFB
  1595                           pclath	equ	0xFFA
  1596                           tblptru	equ	0xFF8
  1597                           tblptrh	equ	0xFF7
  1598                           tblptrl	equ	0xFF6
  1599                           tablat	equ	0xFF5
  1600                           prodh	equ	0xFF4
  1601                           prodl	equ	0xFF3
  1602                           intcon	equ	0xFF2
  1603                           postinc0	equ	0xFEE
  1604                           fsr0h	equ	0xFEA
  1605                           fsr0l	equ	0xFE9
  1606                           wreg	equ	0xFE8
  1607                           postinc1	equ	0xFE6
  1608                           postdec1	equ	0xFE5
  1609                           fsr1h	equ	0xFE2
  1610                           fsr1l	equ	0xFE1
  1611                           indf2	equ	0xFDF
  1612                           postinc2	equ	0xFDE
  1613                           postdec2	equ	0xFDD
  1614                           fsr2h	equ	0xFDA
  1615                           fsr2l	equ	0xFD9
  1616                           status	equ	0xFD8
  1617                           
  1618                           	psect	temp
  1619  00004C                     btemp:
  1620                           	opt stack 0
  1621  00004C                     	ds	1
  1622  0000                     int$flags	set	btemp
  1623                           pclatu	equ	0xFFB
  1624                           pclath	equ	0xFFA
  1625                           tblptru	equ	0xFF8
  1626                           tblptrh	equ	0xFF7
  1627                           tblptrl	equ	0xFF6
  1628                           tablat	equ	0xFF5
  1629                           prodh	equ	0xFF4
  1630                           prodl	equ	0xFF3
  1631                           intcon	equ	0xFF2
  1632                           postinc0	equ	0xFEE
  1633                           fsr0h	equ	0xFEA
  1634                           fsr0l	equ	0xFE9
  1635                           wreg	equ	0xFE8
  1636                           postinc1	equ	0xFE6
  1637                           postdec1	equ	0xFE5
  1638                           fsr1h	equ	0xFE2
  1639                           fsr1l	equ	0xFE1
  1640                           indf2	equ	0xFDF
  1641                           postinc2	equ	0xFDE
  1642                           postdec2	equ	0xFDD
  1643                           fsr2h	equ	0xFDA
  1644                           fsr2l	equ	0xFD9
  1645                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      75
    BANK0           160      4       4
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    uartTransmitBlocking@data	PTR unsigned char  size(2) Largest target is 1
		 -> Keypad@dataEnd(COMRAM[1]), Keypad@dataOut(COMRAM[1]), 

    UART._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    UART._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    UART	PTR volatile struct . size(2) Largest target is 14
		 -> uart(COMRAM[12]), 

    S21$_dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    uart._dataRX	PTR unsigned char  size(2) Largest target is 16
		 -> arr_dataRX(COMRAM[16]), 

    S21$_dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    uart._dataTX	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_UART_Init
    _keypadRoutineUART->_uartTransmitBlocking
    _UART_Init->___aldiv

Critical Paths under _interruptHandlerUART in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_UART_Init

Critical Paths under _interruptHandlerUART in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandlerUART in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandlerUART in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandlerUART in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandlerUART in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandlerUART in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandlerUART in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandlerUART in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1421
                                             35 COMRAM     1     1      0
                          _UART_Init
                  _keypadRoutineUART
                      _machineConfig
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _keypadRoutineUART                                    1     1      0     848
                                             22 COMRAM     1     1      0
                       _readKeyboard
               _uartTransmitBlocking
 ---------------------------------------------------------------------------------
 (2) _uartTransmitBlocking                                 5     2      3     698
                                             17 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (2) _readKeyboard                                         1     1      0     150
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            8     4      4     573
                                             31 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                             17 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _interruptHandlerUART                                17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
     ___aldiv
   _keypadRoutineUART
     _readKeyboard
     _uartTransmitBlocking
   _machineConfig

 _interruptHandlerUART (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      4       4       5        2.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      4B       1       79.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4F      20        0.0%
DATA                 0      0      4F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Sep 20 11:57:15 2017

                              l80 041A                                l81 0428  
                              l78 040E                       __CFG_BOR$ON 000000  
                     __CFG_BORV$3 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                               l920 03EA  
                             l912 03D6                               l924 03F6  
                             l916 03E0                               l908 03CE  
                             l950 043A                               l928 0402  
                             l946 0436                      __CFG_CPB$OFF 000000  
                             u600 02EE                               u610 02FA  
                             u602 02F0                      __CFG_CPD$OFF 000000  
                             u612 02FC                               u625 0328  
                             u626 032A                               u745 0368  
                             u757 04FC                               u767 0452  
                             u777 02DC                    ?_machineConfig 0001  
                             wreg 000FE8      uartTransmitBlocking@numBytes 0014  
                    __CFG_LVP$OFF 000000                      __CFG_WDT$OFF 000000  
                            l1340 032C                              l1318 02AE  
                            l1430 0486                              l1352 01FE  
                            l1328 02E6      __end_of_uartTransmitBlocking 0346  
                            l1426 0476                              l1364 0238  
                            l1380 0286                              l1366 0244  
                            l1358 0216                              l1384 029C  
                            l1376 0278                              l1368 0248  
                            l1484 050A                              _ADIE 007CEE  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _PEIE 007F96  
                            _RCIE 007CED                              _RCIF 007CF5  
                            _UART 0047                              _TRMT 007D61  
                            _TXIE 007CEC                              _TXIF 007CF4  
                            _main 04DC                              _uart 003A  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                              btemp 004C  
                            prodh 000FF4                              prodl 000FF3  
                            start 000E                     __CFG_IESO$OFF 000000  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000000  
                   __CFG_PLLDIV$5 000000                    __CFG_CCP2MX$ON 000000  
                 __end_of___aldiv 02AE                             ?_main 0001  
                           i2l282 0166                             i2l284 01A6  
                           _RCREG 000FAE                             _SPBRG 000FAF  
                   __CFG_USBDIV$2 000000                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TXREG 000FAD                     __CFG_PWRT$OFF 000000  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                __size_of_UART_Init 0084  
            _interruptHandlerUART 0008                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBTRB$OFF 000000                             pclath 000FFA  
                           tablat 000FF5                             status 000FD8  
                 __initialization 04A2                      __end_of_main 0510  
                 ??_machineConfig 0012                            ??_main 0024  
                   __activetblptr 000002                     ?_readKeyboard 0001  
           ?_interruptHandlerUART 0001                            _ADCON1 000FC1  
                          i2l1308 0156                            i2l1294 00F0  
                          i2l1288 00D8                            _TRISC6 007CA6  
                          _TRISC7 007CA7                    __CFG_VREGEN$ON 000000  
                  __CFG_XINST$OFF 000000                 __end_of_UART_Init 03CA  
                       ??___aldiv 001A                    __CFG_STVREN$ON 000000  
            _uartTransmitBlocking 02AE                            clear_0 04C8  
                  ??_readKeyboard 0012                      __pdataCOMRAM 0047  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                        __accesstop 0060  
         __end_of__initialization 04CE                   __CFG_PBADEN$OFF 000000  
                   ___rparam_used 000001                    __pcstackCOMRAM 0001  
           ?_uartTransmitBlocking 0012            ??_interruptHandlerUART 0001  
                      _arr_dataRX 002A                           i2u52_45 0096  
                         i2u52_46 0098                           i2u56_45 014A  
                         i2u56_46 014C              __end_of_readKeyboard 043E  
                         __Hparam 0000                           __Lparam 0000  
                         ___aldiv 01E2            ??_uartTransmitBlocking 0015  
                         _dataEnd 0049                           _dataOut 0028  
                         __pcinit 04A2                           __ramtop 0800  
                         __ptext0 04DC                           __ptext1 0510  
                         __ptext2 043E                           __ptext3 02AE  
                         __ptext4 03CA                           __ptext5 0346  
                         __ptext6 01E2                  ___aldiv@dividend 0012  
                  __pintcode_body 0012              end_of_initialization 04CE  
                   __Lmediumconst 0000                           int_func 0012  
                       _RCSTAbits 000FAB                  ___aldiv@quotient 001C  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                         _UART_Init 0346  
                       _PORTAbits 000F80                         _PORTBbits 000F81  
           __end_of_machineConfig 0542                         _TXSTAbits 000FAC  
                      ?_UART_Init 0020                     __pidataCOMRAM 0542  
             start_initialization 04A2                     Keypad@dataEnd 004B  
           __size_of_readKeyboard 0074                     Keypad@dataOut 0046  
                __CFG_LPT1OSC$OFF 000000  uartTransmitBlocking@numTransmits 0016  
                     __pbssCOMRAM 0025                      _readKeyboard 03CA  
                   __pcstackBANK0 0060     __size_of_interruptHandlerUART 01DA  
               _keypadRoutineUART 043E                ?_keypadRoutineUART 0001  
              _UARTinterruptState 0029                         __pintcode 0008  
             ??_keypadRoutineUART 0017                     UART_Init@baud 0020  
                        ?___aldiv 0012                       ??_UART_Init 0060  
       __end_of_keypadRoutineUART 04A2                   ___aldiv@divisor 0016  
                 ___aldiv@counter 001A                          _LATAbits 000F89  
                        _KPDState 004A                          _RCONbits 000FD0  
                __CFG_WDTPS$32768 000000     __size_of_uartTransmitBlocking 0098  
                      _ADCON0bits 000FC2                         copy_data0 04B6  
                   readKeyboard@i 0012                          __Hrparam 0000  
                        __Lrparam 0000                  __size_of___aldiv 00CC  
                     _keypadFlags 0025        __size_of_keypadRoutineUART 0064  
                   __size_of_main 0034            __size_of_machineConfig 0032  
                        int$flags 004C             __CFG_CPUDIV$OSC3_PLL4 000000  
                      _INTCONbits 000FF2                          intlevel2 0000  
    __end_of_interruptHandlerUART 01E2                        _OSCCONbits 000FD3  
             __CFG_FOSC$INTOSC_HS 000000          uartTransmitBlocking@data 0012  
                   _machineConfig 0510                      ___aldiv@sign 001B  
