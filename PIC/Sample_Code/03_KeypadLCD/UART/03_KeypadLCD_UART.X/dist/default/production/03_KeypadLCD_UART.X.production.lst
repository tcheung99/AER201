

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Dec 11 01:13:59 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,inline
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1,inline
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19  0000                     
    20                           ; Version 1.42
    21                           ; Generated 13/04/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4620 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	smallconst
    56  001000                     __psmallconst:
    57                           	opt stack 0
    58  001000  00                 	db	0
    59  001001                     _keys:
    60                           	opt stack 0
    61  001001  31                 	db	49
    62  001002  32                 	db	50
    63  001003  33                 	db	51
    64  001004  41                 	db	65
    65  001005  34                 	db	52
    66  001006  35                 	db	53
    67  001007  36                 	db	54
    68  001008  42                 	db	66
    69  001009  37                 	db	55
    70  00100A  38                 	db	56
    71  00100B  39                 	db	57
    72  00100C  43                 	db	67
    73  00100D  2A                 	db	42
    74  00100E  30                 	db	48
    75  00100F  23                 	db	35
    76  001010  44                 	db	68
    77  001011  00                 	db	0
    78  001012                     __end_of_keys:
    79                           	opt stack 0
    80  001012                     _LCD_LINE4_ADDR:
    81                           	opt stack 0
    82  001012  50                 	db	80
    83  001013                     __end_of_LCD_LINE4_ADDR:
    84                           	opt stack 0
    85  001013                     _LCD_LINE3_ADDR:
    86                           	opt stack 0
    87  001013  10                 	db	16
    88  001014                     __end_of_LCD_LINE3_ADDR:
    89                           	opt stack 0
    90  001014                     _LCD_LINE2_ADDR:
    91                           	opt stack 0
    92  001014  40                 	db	64
    93  001015                     __end_of_LCD_LINE2_ADDR:
    94                           	opt stack 0
    95  001015                     _LCD_LINE1_ADDR:
    96                           	opt stack 0
    97  001015  00                 	db	0
    98  001016                     __end_of_LCD_LINE1_ADDR:
    99                           	opt stack 0
   100  001016                     _LCD_SIZE_VERT:
   101                           	opt stack 0
   102  001016  04                 	db	4
   103  001017                     __end_of_LCD_SIZE_VERT:
   104                           	opt stack 0
   105  001017                     _LCD_SIZE_HORZ:
   106                           	opt stack 0
   107  001017  10                 	db	16
   108  001018                     __end_of_LCD_SIZE_HORZ:
   109                           	opt stack 0
   110  0000                     _LATDbits	set	3980
   111  0000                     _INTCONbits	set	4082
   112  0000                     _RCREG	set	4014
   113  0000                     _TRISCbits	set	3988
   114  0000                     _TXSTAbits	set	4012
   115  0000                     _SPBRG	set	4015
   116  0000                     _TRISD	set	3989
   117  0000                     _LATD	set	3980
   118  0000                     _RCSTAbits	set	4011
   119  0000                     _RCIF	set	31989
   120                           
   121                           ; #config settings
   122  001018  00                 	db	0	; dummy byte at the end
   123  0000                     
   124                           	psect	cinit
   125  0012AE                     __pcinit:
   126                           	opt stack 0
   127  0012AE                     start_initialization:
   128                           	opt stack 0
   129  0012AE                     __initialization:
   130                           	opt stack 0
   131  0012AE                     end_of_initialization:
   132                           	opt stack 0
   133  0012AE                     __end_of__initialization:
   134                           	opt stack 0
   135  0012AE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   136  0012B0  6EF8               	movwf	tblptru,c
   137  0012B2  0100               	movlb	0
   138  0012B4  EF0D  F008         	goto	_main	;jump to C main() function
   139                           tblptru	equ	0xFF8
   140                           
   141                           	psect	cstackCOMRAM
   142  000001                     __pcstackCOMRAM:
   143                           	opt stack 0
   144  000001                     ?___aldiv:
   145                           	opt stack 0
   146  000001                     pulse_e@interruptState:
   147                           	opt stack 0
   148  000001                     ___aldiv@dividend:
   149                           	opt stack 0
   150                           
   151                           ; 4 bytes @ 0x0
   152  000001                     	ds	1
   153  000002                     send_nibble@data:
   154                           	opt stack 0
   155                           
   156                           ; 1 bytes @ 0x1
   157  000002                     	ds	1
   158  000003                     send_byte@data:
   159                           	opt stack 0
   160                           
   161                           ; 1 bytes @ 0x2
   162  000003                     	ds	1
   163  000004                     lcdInst@data:
   164                           	opt stack 0
   165  000004                     putch@data:
   166                           	opt stack 0
   167                           
   168                           ; 1 bytes @ 0x3
   169  000004                     	ds	1
   170  000005                     ??_initLCD:
   171  000005                     ___aldiv@divisor:
   172                           	opt stack 0
   173                           
   174                           ; 4 bytes @ 0x4
   175  000005                     	ds	4
   176  000009                     ___aldiv@counter:
   177                           	opt stack 0
   178                           
   179                           ; 1 bytes @ 0x8
   180  000009                     	ds	1
   181  00000A                     ___aldiv@sign:
   182                           	opt stack 0
   183                           
   184                           ; 1 bytes @ 0x9
   185  00000A                     	ds	1
   186  00000B                     ___aldiv@quotient:
   187                           	opt stack 0
   188                           
   189                           ; 4 bytes @ 0xA
   190  00000B                     	ds	4
   191  00000F                     ??_main:
   192                           
   193                           ; 1 bytes @ 0xE
   194  00000F                     	ds	4
   195  000013                     main@baudRate:
   196                           	opt stack 0
   197                           
   198                           ; 4 bytes @ 0x12
   199  000013                     	ds	4
   200  000017                     main@keyData:
   201                           	opt stack 0
   202                           
   203                           ; 1 bytes @ 0x16
   204  000017                     	ds	1
   205  000018                     main@receivedByte:
   206                           	opt stack 0
   207                           
   208                           ; 1 bytes @ 0x17
   209  000018                     	ds	1
   210  000019                     main@current_state:
   211                           	opt stack 0
   212                           
   213                           ; 1 bytes @ 0x18
   214  000019                     	ds	1
   215  00001A                     main@next_state:
   216                           	opt stack 0
   217                           
   218                           ; 1 bytes @ 0x19
   219  00001A                     	ds	1
   220                           tblptru	equ	0xFF8
   221                           
   222 ;;
   223 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   224 ;;
   225 ;; *************** function _main *****************
   226 ;; Defined at:
   227 ;;		line 43 in file "main.c"
   228 ;; Parameters:    Size  Location     Type
   229 ;;		None
   230 ;; Auto vars:     Size  Location     Type
   231 ;;  receivedByte    1   23[COMRAM] unsigned char 
   232 ;;  baudRate        4   18[COMRAM] long 
   233 ;;  next_state      1   25[COMRAM] enum E2973
   234 ;;  current_stat    1   24[COMRAM] enum E2973
   235 ;;  keyData         1   22[COMRAM] unsigned char 
   236 ;; Return value:  Size  Location     Type
   237 ;;                  1    wreg      void 
   238 ;; Registers used:
   239 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   240 ;; Tracked objects:
   241 ;;		On entry : 0/0
   242 ;;		On exit  : 0/0
   243 ;;		Unchanged: 0/0
   244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   246 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   247 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   248 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   249 ;;Total ram usage:       12 bytes
   250 ;; Hardware stack levels required when called:    5
   251 ;; This function calls:
   252 ;;		___aldiv
   253 ;;		_check_overrun
   254 ;;		_initLCD
   255 ;;		_putch
   256 ;; This function is called by:
   257 ;;		Startup code after reset
   258 ;; This function uses a non-reentrant model
   259 ;;
   260                           
   261                           	psect	text0
   262  00101A                     __ptext0:
   263                           	opt stack 0
   264  00101A                     _main:
   265                           	opt stack 26
   266                           
   267                           ;main.c: 47: LATD = 0x00;
   268                           
   269                           ;incstack = 0
   270  00101A  0E00               	movlw	0
   271  00101C  6E8C               	movwf	3980,c	;volatile
   272                           
   273                           ;main.c: 48: TRISD = 0x00;
   274  00101E  0E00               	movlw	0
   275  001020  6E95               	movwf	3989,c	;volatile
   276                           
   277                           ;main.c: 52: long baudRate = 9600;
   278  001022  0E80               	movlw	128
   279  001024  6E13               	movwf	main@baudRate,c
   280  001026  0E25               	movlw	37
   281  001028  6E14               	movwf	main@baudRate+1,c
   282  00102A  0E00               	movlw	0
   283  00102C  6E15               	movwf	main@baudRate+2,c
   284  00102E  0E00               	movlw	0
   285  001030  6E16               	movwf	main@baudRate+3,c
   286                           
   287                           ;main.c: 53: SPBRG = (unsigned char)((10000000 / (64 * baudRate)) - 1);
   288  001032  0E80               	movlw	128
   289  001034  6E01               	movwf	___aldiv@dividend,c
   290  001036  0E96               	movlw	150
   291  001038  6E02               	movwf	___aldiv@dividend+1,c
   292  00103A  0E98               	movlw	152
   293  00103C  6E03               	movwf	___aldiv@dividend+2,c
   294  00103E  0E00               	movlw	0
   295  001040  6E04               	movwf	___aldiv@dividend+3,c
   296  001042  C013  F00F         	movff	main@baudRate,??_main
   297  001046  C014  F010         	movff	main@baudRate+1,??_main+1
   298  00104A  C015  F011         	movff	main@baudRate+2,??_main+2
   299  00104E  C016  F012         	movff	main@baudRate+3,??_main+3
   300  001052  0E06               	movlw	6
   301  001054                     u235:
   302  001054  90D8               	bcf	status,0,c
   303  001056  360F               	rlcf	??_main,f,c
   304  001058  3610               	rlcf	??_main+1,f,c
   305  00105A  3611               	rlcf	??_main+2,f,c
   306  00105C  3612               	rlcf	??_main+3,f,c
   307  00105E  2EE8               	decfsz	wreg,f,c
   308  001060  D7F9               	goto	u235
   309  001062  C00F  F005         	movff	??_main,___aldiv@divisor
   310  001066  C010  F006         	movff	??_main+1,___aldiv@divisor+1
   311  00106A  C011  F007         	movff	??_main+2,___aldiv@divisor+2
   312  00106E  C012  F008         	movff	??_main+3,___aldiv@divisor+3
   313  001072  EC87  F008         	call	___aldiv	;wreg free
   314  001076  0401               	decf	?___aldiv,w,c
   315  001078  6EAF               	movwf	4015,c	;volatile
   316                           
   317                           ;main.c: 56: TXSTAbits.TX9 = 0;
   318  00107A  9CAC               	bcf	4012,6,c	;volatile
   319                           
   320                           ;main.c: 57: TXSTAbits.SYNC = 0;
   321  00107C  98AC               	bcf	4012,4,c	;volatile
   322                           
   323                           ;main.c: 58: TXSTAbits.TXEN = 1;
   324  00107E  8AAC               	bsf	4012,5,c	;volatile
   325                           
   326                           ;main.c: 59: _delay((unsigned long)((5)*(10000000/4000.0)));
   327  001080  0E11               	movlw	17
   328  001082  6E0F               	movwf	??_main& (0+255),c
   329  001084  0E3A               	movlw	58
   330  001086                     u277:
   331  001086  2EE8               	decfsz	wreg,f,c
   332  001088  D7FE               	bra	u277
   333  00108A  2E0F               	decfsz	??_main& (0+255),f,c
   334  00108C  D7FC               	bra	u277
   335  00108E  D000               	nop2	
   336                           
   337                           ;main.c: 62: RCSTAbits.RX9 = 0;
   338  001090  9CAB               	bcf	4011,6,c	;volatile
   339                           
   340                           ;main.c: 63: RCSTAbits.CREN = 1;
   341  001092  88AB               	bsf	4011,4,c	;volatile
   342                           
   343                           ;main.c: 66: TRISCbits.TRISC6 = 0;
   344  001094  9C94               	bcf	3988,6,c	;volatile
   345                           
   346                           ;main.c: 67: TRISCbits.TRISC7 = 1;
   347  001096  8E94               	bsf	3988,7,c	;volatile
   348                           
   349                           ;main.c: 70: RCSTAbits.SPEN = 1;
   350  001098  8EAB               	bsf	4011,7,c	;volatile
   351                           
   352                           ;main.c: 73: initLCD();
   353  00109A  ECED  F008         	call	_initLCD	;wreg free
   354                           
   355                           ;main.c: 76: unsigned char keyData;
   356                           ;main.c: 77: keypad_states_e current_state = KPD_IDLE;
   357  00109E  0E00               	movlw	0
   358  0010A0  6E19               	movwf	main@current_state,c
   359                           
   360                           ;main.c: 78: keypad_states_e next_state = KPD_IDLE;
   361  0010A2  0E00               	movlw	0
   362  0010A4  6E1A               	movwf	main@next_state,c
   363                           
   364                           ;main.c: 81: switch(current_state){
   365                           
   366                           ;main.c: 79: while(1){
   367  0010A6  D025               	goto	l977
   368  0010A8                     l35:
   369                           
   370                           ;main.c: 84: if(RCIF){
   371  0010A8  AA9E               	btfss	3998,5,c	;volatile
   372  0010AA  D02E               	goto	l37
   373                           
   374                           ;main.c: 87: keyData = RCREG;
   375  0010AC  CFAE F017          	movff	4014,main@keyData	;volatile
   376                           
   377                           ;main.c: 88: check_overrun();
   378  0010B0  EC5C  F009         	call	_check_overrun	;wreg free
   379                           
   380                           ;main.c: 89: next_state = KPD_PRESSED;
   381  0010B4  0E01               	movlw	1
   382  0010B6  D019               	goto	L2
   383  0010B8                     l38:
   384                           
   385                           ;main.c: 94: if(RCIF){
   386  0010B8  AA9E               	btfss	3998,5,c	;volatile
   387  0010BA  D026               	goto	l37
   388                           
   389                           ;main.c: 95: unsigned char receivedByte = RCREG;
   390  0010BC  CFAE F018          	movff	4014,main@receivedByte	;volatile
   391                           
   392                           ;main.c: 96: check_overrun();
   393  0010C0  EC5C  F009         	call	_check_overrun	;wreg free
   394                           
   395                           ;main.c: 101: if(receivedByte == 0xF0){
   396  0010C4  0EF0               	movlw	240
   397  0010C6  1818               	xorwf	main@receivedByte,w,c
   398  0010C8  A4D8               	btfss	status,2,c
   399  0010CA  D01E               	goto	l37
   400                           
   401                           ;main.c: 102: next_state = KPD_RELEASED;
   402  0010CC  0E02               	movlw	2
   403  0010CE  D00D               	goto	L2
   404  0010D0                     l969:
   405                           
   406                           ;main.c: 110: putch(keys[keyData]);
   407  0010D0  5017               	movf	main@keyData,w,c
   408  0010D2  0D01               	mullw	1
   409  0010D4  0E01               	movlw	low _keys
   410  0010D6  24F3               	addwf	prodl,w,c
   411  0010D8  6EF6               	movwf	tblptrl,c
   412  0010DA  0E10               	movlw	high _keys
   413  0010DC  20F4               	addwfc	prodh,w,c
   414  0010DE  6EF7               	movwf	tblptrh,c
   415  0010E0                     	if	0	;There are less than 3 active tblptr bytes
   416  0010E0                     	endif
   417  0010E0  0008               	tblrd		*
   418  0010E2  50F5               	movf	tablat,w,c
   419  0010E4  EC4B  F009         	call	_putch
   420  0010E8  D002               	goto	l973
   421  0010EA                     L2:
   422  0010EA  6E1A               	movwf	main@next_state,c
   423                           
   424                           ;main.c: 112: break;
   425  0010EC  D00D               	goto	l37
   426  0010EE                     l973:
   427                           
   428                           ;main.c: 114: next_state = KPD_IDLE;
   429  0010EE  0E00               	movlw	0
   430  0010F0  D7FC               	goto	L2
   431  0010F2                     l977:
   432  0010F2  5019               	movf	main@current_state,w,c
   433                           
   434                           ; Switch size 1, requested type "space"
   435                           ; Number of cases is 3, Range of values is 0 to 2
   436                           ; switch strategies available:
   437                           ; Name         Instructions Cycles
   438                           ; simple_byte           10     6 (average)
   439                           ;	Chosen strategy is simple_byte
   440  0010F4  0A00               	xorlw	0	; case 0
   441  0010F6  B4D8               	btfsc	status,2,c
   442  0010F8  D7D7               	goto	l35
   443  0010FA  0A01               	xorlw	1	; case 1
   444  0010FC  B4D8               	btfsc	status,2,c
   445  0010FE  D7DC               	goto	l38
   446  001100  0A03               	xorlw	3	; case 2
   447  001102  B4D8               	btfsc	status,2,c
   448  001104  D7E5               	goto	l969
   449  001106  D7F3               	goto	l973
   450  001108                     l37:
   451                           
   452                           ;main.c: 119: current_state = next_state;
   453  001108  C01A  F019         	movff	main@next_state,main@current_state
   454  00110C  D7F2               	goto	l977
   455  00110E                     __end_of_main:
   456                           	opt stack 0
   457                           tblptru	equ	0xFF8
   458                           tblptrh	equ	0xFF7
   459                           tblptrl	equ	0xFF6
   460                           tablat	equ	0xFF5
   461                           prodh	equ	0xFF4
   462                           prodl	equ	0xFF3
   463                           wreg	equ	0xFE8
   464                           status	equ	0xFD8
   465                           
   466 ;; *************** function _putch *****************
   467 ;; Defined at:
   468 ;;		line 102 in file "lcd.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;  data            1    wreg     unsigned char 
   471 ;; Auto vars:     Size  Location     Type
   472 ;;  data            1    3[COMRAM] unsigned char 
   473 ;; Return value:  Size  Location     Type
   474 ;;                  1    wreg      void 
   475 ;; Registers used:
   476 ;;		wreg, status,2, status,0, cstack
   477 ;; Tracked objects:
   478 ;;		On entry : 0/0
   479 ;;		On exit  : 0/0
   480 ;;		Unchanged: 0/0
   481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   483 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   485 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   486 ;;Total ram usage:        1 bytes
   487 ;; Hardware stack levels used:    1
   488 ;; Hardware stack levels required when called:    3
   489 ;; This function calls:
   490 ;;		_send_byte
   491 ;; This function is called by:
   492 ;;		_main
   493 ;; This function uses a non-reentrant model
   494 ;;
   495                           
   496                           	psect	text1
   497  001296                     __ptext1:
   498                           	opt stack 0
   499  001296                     _putch:
   500                           	opt stack 27
   501                           
   502                           ;incstack = 0
   503                           ;putch@data stored from wreg
   504  001296  6E04               	movwf	putch@data,c
   505                           
   506                           ;lcd.c: 103: LATDbits.LATD2 = 1;
   507  001298  848C               	bsf	3980,2,c	;volatile
   508                           
   509                           ;lcd.c: 104: send_byte((unsigned char)data);
   510  00129A  5004               	movf	putch@data,w,c
   511  00129C  EC42  F009         	call	_send_byte
   512  0012A0  0012               	return		;funcret
   513  0012A2                     __end_of_putch:
   514                           	opt stack 0
   515                           tblptru	equ	0xFF8
   516                           tblptrh	equ	0xFF7
   517                           tblptrl	equ	0xFF6
   518                           tablat	equ	0xFF5
   519                           prodh	equ	0xFF4
   520                           prodl	equ	0xFF3
   521                           wreg	equ	0xFE8
   522                           status	equ	0xFD8
   523                           
   524 ;; *************** function _initLCD *****************
   525 ;; Defined at:
   526 ;;		line 69 in file "lcd.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;		None
   529 ;; Auto vars:     Size  Location     Type
   530 ;;		None
   531 ;; Return value:  Size  Location     Type
   532 ;;                  1    wreg      void 
   533 ;; Registers used:
   534 ;;		wreg, status,2, status,0, cstack
   535 ;; Tracked objects:
   536 ;;		On entry : 0/0
   537 ;;		On exit  : 0/0
   538 ;;		Unchanged: 0/0
   539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   542 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   543 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   544 ;;Total ram usage:        1 bytes
   545 ;; Hardware stack levels used:    1
   546 ;; Hardware stack levels required when called:    4
   547 ;; This function calls:
   548 ;;		_lcdInst
   549 ;;		_send_byte
   550 ;;		_send_nibble
   551 ;; This function is called by:
   552 ;;		_main
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           	psect	text2
   557  0011DA                     __ptext2:
   558                           	opt stack 0
   559  0011DA                     _initLCD:
   560                           	opt stack 26
   561                           
   562                           ;lcd.c: 70: _delay((unsigned long)((15)*(10000000/4000.0)));
   563                           
   564                           ;incstack = 0
   565  0011DA  0E31               	movlw	49
   566  0011DC  6E05               	movwf	??_initLCD& (0+255),c
   567  0011DE  0EB2               	movlw	178
   568  0011E0                     u287:
   569  0011E0  2EE8               	decfsz	wreg,f,c
   570  0011E2  D7FE               	bra	u287
   571  0011E4  2E05               	decfsz	??_initLCD& (0+255),f,c
   572  0011E6  D7FC               	bra	u287
   573  0011E8  D000               	nop2	
   574                           
   575                           ;lcd.c: 72: LATDbits.LATD2 = 0;
   576  0011EA  948C               	bcf	3980,2,c	;volatile
   577                           
   578                           ;lcd.c: 74: send_nibble(0b0011);
   579  0011EC  0E03               	movlw	3
   580  0011EE  EC37  F009         	call	_send_nibble
   581                           
   582                           ;lcd.c: 75: _delay((unsigned long)((5)*(10000000/4000.0)));
   583  0011F2  0E11               	movlw	17
   584  0011F4  6E05               	movwf	??_initLCD& (0+255),c
   585  0011F6  0E3A               	movlw	58
   586  0011F8                     u297:
   587  0011F8  2EE8               	decfsz	wreg,f,c
   588  0011FA  D7FE               	bra	u297
   589  0011FC  2E05               	decfsz	??_initLCD& (0+255),f,c
   590  0011FE  D7FC               	bra	u297
   591  001200  D000               	nop2	
   592                           
   593                           ;lcd.c: 76: send_nibble(0b0011);
   594  001202  0E03               	movlw	3
   595  001204  EC37  F009         	call	_send_nibble
   596                           
   597                           ;lcd.c: 77: _delay((unsigned long)((150)*(10000000/4000000.0)));
   598  001208  0E7D               	movlw	125
   599  00120A                     u307:
   600  00120A  2EE8               	decfsz	wreg,f,c
   601  00120C  D7FE               	bra	u307
   602                           
   603                           ;lcd.c: 78: send_byte(0b00110010);
   604  00120E  0E32               	movlw	50
   605  001210  EC42  F009         	call	_send_byte
   606                           
   607                           ;lcd.c: 80: send_byte(0b00101000);
   608  001214  0E28               	movlw	40
   609  001216  EC42  F009         	call	_send_byte
   610                           
   611                           ;lcd.c: 81: send_byte(0b00001000);
   612  00121A  0E08               	movlw	8
   613  00121C  EC42  F009         	call	_send_byte
   614                           
   615                           ;lcd.c: 82: send_byte(0b00000001);
   616  001220  0E01               	movlw	1
   617  001222  EC42  F009         	call	_send_byte
   618                           
   619                           ;lcd.c: 83: _delay((unsigned long)((5)*(10000000/4000.0)));
   620  001226  0E11               	movlw	17
   621  001228  6E05               	movwf	??_initLCD& (0+255),c
   622  00122A  0E3A               	movlw	58
   623  00122C                     u317:
   624  00122C  2EE8               	decfsz	wreg,f,c
   625  00122E  D7FE               	bra	u317
   626  001230  2E05               	decfsz	??_initLCD& (0+255),f,c
   627  001232  D7FC               	bra	u317
   628  001234  D000               	nop2	
   629                           
   630                           ;lcd.c: 84: send_byte(0b00000110);
   631  001236  0E06               	movlw	6
   632  001238  EC42  F009         	call	_send_byte
   633                           
   634                           ;lcd.c: 87: { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
   635  00123C  0E0F               	movlw	15
   636  00123E  EC51  F009         	call	_lcdInst
   637  001242  0012               	return		;funcret
   638  001244                     __end_of_initLCD:
   639                           	opt stack 0
   640                           tblptru	equ	0xFF8
   641                           tblptrh	equ	0xFF7
   642                           tblptrl	equ	0xFF6
   643                           tablat	equ	0xFF5
   644                           prodh	equ	0xFF4
   645                           prodl	equ	0xFF3
   646                           wreg	equ	0xFE8
   647                           status	equ	0xFD8
   648                           
   649 ;; *************** function _lcdInst *****************
   650 ;; Defined at:
   651 ;;		line 64 in file "lcd.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;  data            1    wreg     unsigned char 
   654 ;; Auto vars:     Size  Location     Type
   655 ;;  data            1    3[COMRAM] unsigned char 
   656 ;; Return value:  Size  Location     Type
   657 ;;                  1    wreg      void 
   658 ;; Registers used:
   659 ;;		wreg, status,2, status,0, cstack
   660 ;; Tracked objects:
   661 ;;		On entry : 0/0
   662 ;;		On exit  : 0/0
   663 ;;		Unchanged: 0/0
   664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   666 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   668 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   669 ;;Total ram usage:        1 bytes
   670 ;; Hardware stack levels used:    1
   671 ;; Hardware stack levels required when called:    3
   672 ;; This function calls:
   673 ;;		_send_byte
   674 ;; This function is called by:
   675 ;;		_initLCD
   676 ;;		_lcd_shift_cursor
   677 ;;		_lcd_shift_display
   678 ;; This function uses a non-reentrant model
   679 ;;
   680                           
   681                           	psect	text3
   682  0012A2                     __ptext3:
   683                           	opt stack 0
   684  0012A2                     _lcdInst:
   685                           	opt stack 26
   686                           
   687                           ;incstack = 0
   688                           ;lcdInst@data stored from wreg
   689  0012A2  6E04               	movwf	lcdInst@data,c
   690                           
   691                           ;lcd.c: 65: LATDbits.LATD2 = 0;
   692  0012A4  948C               	bcf	3980,2,c	;volatile
   693                           
   694                           ;lcd.c: 66: send_byte(data);
   695  0012A6  5004               	movf	lcdInst@data,w,c
   696  0012A8  EC42  F009         	call	_send_byte
   697  0012AC  0012               	return		;funcret
   698  0012AE                     __end_of_lcdInst:
   699                           	opt stack 0
   700                           tblptru	equ	0xFF8
   701                           tblptrh	equ	0xFF7
   702                           tblptrl	equ	0xFF6
   703                           tablat	equ	0xFF5
   704                           prodh	equ	0xFF4
   705                           prodl	equ	0xFF3
   706                           wreg	equ	0xFE8
   707                           status	equ	0xFD8
   708                           
   709 ;; *************** function _send_byte *****************
   710 ;; Defined at:
   711 ;;		line 55 in file "lcd.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;  data            1    wreg     unsigned char 
   714 ;; Auto vars:     Size  Location     Type
   715 ;;  data            1    2[COMRAM] unsigned char 
   716 ;; Return value:  Size  Location     Type
   717 ;;                  1    wreg      void 
   718 ;; Registers used:
   719 ;;		wreg, status,2, status,0, cstack
   720 ;; Tracked objects:
   721 ;;		On entry : 0/0
   722 ;;		On exit  : 0/0
   723 ;;		Unchanged: 0/0
   724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   726 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   728 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   729 ;;Total ram usage:        1 bytes
   730 ;; Hardware stack levels used:    1
   731 ;; Hardware stack levels required when called:    2
   732 ;; This function calls:
   733 ;;		_send_nibble
   734 ;; This function is called by:
   735 ;;		_lcdInst
   736 ;;		_initLCD
   737 ;;		_putch
   738 ;; This function uses a non-reentrant model
   739 ;;
   740                           
   741                           	psect	text4
   742  001284                     __ptext4:
   743                           	opt stack 0
   744  001284                     _send_byte:
   745                           	opt stack 27
   746                           
   747                           ;incstack = 0
   748                           ;send_byte@data stored from wreg
   749  001284  6E03               	movwf	send_byte@data,c
   750                           
   751                           ;lcd.c: 57: send_nibble(data >> 4);
   752  001286  3803               	swapf	send_byte@data,w,c
   753  001288  0B0F               	andlw	15
   754  00128A  EC37  F009         	call	_send_nibble
   755                           
   756                           ;lcd.c: 60: send_nibble(data);
   757  00128E  5003               	movf	send_byte@data,w,c
   758  001290  EC37  F009         	call	_send_nibble
   759  001294  0012               	return		;funcret
   760  001296                     __end_of_send_byte:
   761                           	opt stack 0
   762                           tblptru	equ	0xFF8
   763                           tblptrh	equ	0xFF7
   764                           tblptrl	equ	0xFF6
   765                           tablat	equ	0xFF5
   766                           prodh	equ	0xFF4
   767                           prodl	equ	0xFF3
   768                           wreg	equ	0xFE8
   769                           status	equ	0xFD8
   770                           
   771 ;; *************** function _send_nibble *****************
   772 ;; Defined at:
   773 ;;		line 44 in file "lcd.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;  data            1    wreg     unsigned char 
   776 ;; Auto vars:     Size  Location     Type
   777 ;;  data            1    1[COMRAM] unsigned char 
   778 ;; Return value:  Size  Location     Type
   779 ;;                  1    wreg      void 
   780 ;; Registers used:
   781 ;;		wreg, status,2, status,0, cstack
   782 ;; Tracked objects:
   783 ;;		On entry : 0/0
   784 ;;		On exit  : 0/0
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   788 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   790 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   791 ;;Total ram usage:        1 bytes
   792 ;; Hardware stack levels used:    1
   793 ;; Hardware stack levels required when called:    1
   794 ;; This function calls:
   795 ;;		_pulse_e
   796 ;; This function is called by:
   797 ;;		_send_byte
   798 ;;		_initLCD
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           	psect	text5
   803  00126E                     __ptext5:
   804                           	opt stack 0
   805  00126E                     _send_nibble:
   806                           	opt stack 27
   807                           
   808                           ;incstack = 0
   809                           ;send_nibble@data stored from wreg
   810  00126E  6E02               	movwf	send_nibble@data,c
   811                           
   812                           ;lcd.c: 46: LATD = (unsigned char)(LATD & 0x0F);
   813  001270  508C               	movf	3980,w,c	;volatile
   814  001272  0B0F               	andlw	15
   815  001274  6E8C               	movwf	3980,c	;volatile
   816                           
   817                           ;lcd.c: 47: LATD = (unsigned char)((data << 4) | LATD);
   818  001276  3802               	swapf	send_nibble@data,w,c
   819  001278  0BF0               	andlw	240
   820  00127A  108C               	iorwf	3980,w,c	;volatile
   821  00127C  6E8C               	movwf	3980,c	;volatile
   822                           
   823                           ;lcd.c: 48: pulse_e();
   824  00127E  EC22  F009         	call	_pulse_e	;wreg free
   825  001282  0012               	return		;funcret
   826  001284                     __end_of_send_nibble:
   827                           	opt stack 0
   828                           tblptru	equ	0xFF8
   829                           tblptrh	equ	0xFF7
   830                           tblptrl	equ	0xFF6
   831                           tablat	equ	0xFF5
   832                           prodh	equ	0xFF4
   833                           prodl	equ	0xFF3
   834                           wreg	equ	0xFE8
   835                           status	equ	0xFD8
   836                           
   837 ;; *************** function _pulse_e *****************
   838 ;; Defined at:
   839 ;;		line 28 in file "lcd.c"
   840 ;; Parameters:    Size  Location     Type
   841 ;;		None
   842 ;; Auto vars:     Size  Location     Type
   843 ;;  interruptSta    1    0[COMRAM] unsigned char 
   844 ;; Return value:  Size  Location     Type
   845 ;;                  1    wreg      void 
   846 ;; Registers used:
   847 ;;		wreg
   848 ;; Tracked objects:
   849 ;;		On entry : 0/0
   850 ;;		On exit  : 0/0
   851 ;;		Unchanged: 0/0
   852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   854 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   856 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   857 ;;Total ram usage:        1 bytes
   858 ;; Hardware stack levels used:    1
   859 ;; This function calls:
   860 ;;		Nothing
   861 ;; This function is called by:
   862 ;;		_send_nibble
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           	psect	text6
   867  001244                     __ptext6:
   868                           	opt stack 0
   869  001244                     _pulse_e:
   870                           	opt stack 27
   871                           
   872                           ;lcd.c: 29: unsigned char interruptState = INTCONbits.GIE;
   873                           
   874                           ;incstack = 0
   875  001244  0E00               	movlw	0
   876  001246  BEF2               	btfsc	intcon,7,c	;volatile
   877  001248  0E01               	movlw	1
   878  00124A  6E01               	movwf	pulse_e@interruptState,c
   879                           
   880                           ;lcd.c: 30: (INTCONbits.GIE = 0);
   881  00124C  9EF2               	bcf	intcon,7,c	;volatile
   882                           
   883                           ;lcd.c: 31: LATDbits.LATD3 = 1;
   884  00124E  868C               	bsf	3980,3,c	;volatile
   885                           
   886                           ;lcd.c: 34: _delay((unsigned long)((25)*(10000000/4000000.0)));
   887  001250  0E14               	movlw	20
   888  001252                     u327:
   889  001252  2EE8               	decfsz	wreg,f,c
   890  001254  D7FE               	bra	u327
   891  001256  D000               	nop2	
   892                           
   893                           ;lcd.c: 35: LATDbits.LATD3 = 0;
   894  001258  968C               	bcf	3980,3,c	;volatile
   895                           
   896                           ;lcd.c: 36: _delay((unsigned long)((100)*(10000000/4000000.0)));
   897  00125A  0E53               	movlw	83
   898  00125C                     u337:
   899  00125C  2EE8               	decfsz	wreg,f,c
   900  00125E  D7FE               	bra	u337
   901  001260  F000               	nop	
   902                           
   903                           ;lcd.c: 37: INTCONbits.GIE = interruptState;
   904  001262  B001               	btfsc	pulse_e@interruptState,0,c
   905  001264  D002               	bra	u15
   906  001266  9EF2               	bcf	intcon,7,c	;volatile
   907  001268  D001               	bra	u16
   908  00126A                     u15:
   909  00126A  8EF2               	bsf	intcon,7,c	;volatile
   910  00126C                     u16:
   911  00126C  0012               	return		;funcret
   912  00126E                     __end_of_pulse_e:
   913                           	opt stack 0
   914                           tblptru	equ	0xFF8
   915                           tblptrh	equ	0xFF7
   916                           tblptrl	equ	0xFF6
   917                           tablat	equ	0xFF5
   918                           prodh	equ	0xFF4
   919                           prodl	equ	0xFF3
   920                           intcon	equ	0xFF2
   921                           wreg	equ	0xFE8
   922                           status	equ	0xFD8
   923                           
   924 ;; *************** function _check_overrun *****************
   925 ;; Defined at:
   926 ;;		line 35 in file "main.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;		None
   929 ;; Auto vars:     Size  Location     Type
   930 ;;		None
   931 ;; Return value:  Size  Location     Type
   932 ;;                  1    wreg      void 
   933 ;; Registers used:
   934 ;;		None
   935 ;; Tracked objects:
   936 ;;		On entry : 0/0
   937 ;;		On exit  : 0/0
   938 ;;		Unchanged: 0/0
   939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   944 ;;Total ram usage:        0 bytes
   945 ;; Hardware stack levels used:    1
   946 ;; This function calls:
   947 ;;		Nothing
   948 ;; This function is called by:
   949 ;;		_main
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           	psect	text7
   954  0012B8                     __ptext7:
   955                           	opt stack 0
   956  0012B8                     _check_overrun:
   957                           	opt stack 30
   958                           
   959                           ;main.c: 36: if(RCSTAbits.OERR){
   960                           
   961                           ;incstack = 0
   962  0012B8  A2AB               	btfss	4011,1,c	;volatile
   963  0012BA  0012               	return	
   964                           
   965                           ;main.c: 38: RCSTAbits.CREN = 0;
   966  0012BC  98AB               	bcf	4011,4,c	;volatile
   967                           
   968                           ;main.c: 39: RCSTAbits.CREN = 1;
   969  0012BE  88AB               	bsf	4011,4,c	;volatile
   970  0012C0  0012               	return	
   971  0012C2                     __end_of_check_overrun:
   972                           	opt stack 0
   973                           tblptru	equ	0xFF8
   974                           tblptrh	equ	0xFF7
   975                           tblptrl	equ	0xFF6
   976                           tablat	equ	0xFF5
   977                           prodh	equ	0xFF4
   978                           prodl	equ	0xFF3
   979                           intcon	equ	0xFF2
   980                           wreg	equ	0xFE8
   981                           status	equ	0xFD8
   982                           
   983 ;; *************** function ___aldiv *****************
   984 ;; Defined at:
   985 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
   986 ;; Parameters:    Size  Location     Type
   987 ;;  dividend        4    0[COMRAM] long 
   988 ;;  divisor         4    4[COMRAM] long 
   989 ;; Auto vars:     Size  Location     Type
   990 ;;  quotient        4   10[COMRAM] long 
   991 ;;  sign            1    9[COMRAM] unsigned char 
   992 ;;  counter         1    8[COMRAM] unsigned char 
   993 ;; Return value:  Size  Location     Type
   994 ;;                  4    0[COMRAM] long 
   995 ;; Registers used:
   996 ;;		wreg, status,2, status,0
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1002 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1003 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1005 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1006 ;;Total ram usage:       14 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; This function calls:
  1009 ;;		Nothing
  1010 ;; This function is called by:
  1011 ;;		_main
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           	psect	text8
  1016  00110E                     __ptext8:
  1017                           	opt stack 0
  1018  00110E                     ___aldiv:
  1019                           	opt stack 30
  1020                           
  1021                           ;incstack = 0
  1022  00110E  0E00               	movlw	0
  1023  001110  6E0A               	movwf	___aldiv@sign,c
  1024  001112  AE08               	btfss	___aldiv@divisor+3,7,c
  1025  001114  D00A               	goto	l891
  1026  001116  1E08               	comf	___aldiv@divisor+3,f,c
  1027  001118  1E07               	comf	___aldiv@divisor+2,f,c
  1028  00111A  1E06               	comf	___aldiv@divisor+1,f,c
  1029  00111C  6C05               	negf	___aldiv@divisor,c
  1030  00111E  0E00               	movlw	0
  1031  001120  2206               	addwfc	___aldiv@divisor+1,f,c
  1032  001122  2207               	addwfc	___aldiv@divisor+2,f,c
  1033  001124  2208               	addwfc	___aldiv@divisor+3,f,c
  1034  001126  0E01               	movlw	1
  1035  001128  6E0A               	movwf	___aldiv@sign,c
  1036  00112A                     l891:
  1037  00112A  AE04               	btfss	___aldiv@dividend+3,7,c
  1038  00112C  D00A               	goto	l897
  1039  00112E  1E04               	comf	___aldiv@dividend+3,f,c
  1040  001130  1E03               	comf	___aldiv@dividend+2,f,c
  1041  001132  1E02               	comf	___aldiv@dividend+1,f,c
  1042  001134  6C01               	negf	___aldiv@dividend,c
  1043  001136  0E00               	movlw	0
  1044  001138  2202               	addwfc	___aldiv@dividend+1,f,c
  1045  00113A  2203               	addwfc	___aldiv@dividend+2,f,c
  1046  00113C  2204               	addwfc	___aldiv@dividend+3,f,c
  1047  00113E  0E01               	movlw	1
  1048  001140  1A0A               	xorwf	___aldiv@sign,f,c
  1049  001142                     l897:
  1050  001142  0E00               	movlw	0
  1051  001144  6E0B               	movwf	___aldiv@quotient,c
  1052  001146  0E00               	movlw	0
  1053  001148  6E0C               	movwf	___aldiv@quotient+1,c
  1054  00114A  0E00               	movlw	0
  1055  00114C  6E0D               	movwf	___aldiv@quotient+2,c
  1056  00114E  0E00               	movlw	0
  1057  001150  6E0E               	movwf	___aldiv@quotient+3,c
  1058  001152  5005               	movf	___aldiv@divisor,w,c
  1059  001154  1006               	iorwf	___aldiv@divisor+1,w,c
  1060  001156  1007               	iorwf	___aldiv@divisor+2,w,c
  1061  001158  1008               	iorwf	___aldiv@divisor+3,w,c
  1062  00115A  B4D8               	btfsc	status,2,c
  1063  00115C  D02A               	goto	l919
  1064  00115E  0E01               	movlw	1
  1065  001160  6E09               	movwf	___aldiv@counter,c
  1066  001162  D006               	goto	l905
  1067  001164                     l903:
  1068  001164  90D8               	bcf	status,0,c
  1069  001166  3605               	rlcf	___aldiv@divisor,f,c
  1070  001168  3606               	rlcf	___aldiv@divisor+1,f,c
  1071  00116A  3607               	rlcf	___aldiv@divisor+2,f,c
  1072  00116C  3608               	rlcf	___aldiv@divisor+3,f,c
  1073  00116E  2A09               	incf	___aldiv@counter,f,c
  1074  001170                     l905:
  1075  001170  AE08               	btfss	___aldiv@divisor+3,7,c
  1076  001172  D7F8               	goto	l903
  1077  001174                     l907:
  1078  001174  90D8               	bcf	status,0,c
  1079  001176  360B               	rlcf	___aldiv@quotient,f,c
  1080  001178  360C               	rlcf	___aldiv@quotient+1,f,c
  1081  00117A  360D               	rlcf	___aldiv@quotient+2,f,c
  1082  00117C  360E               	rlcf	___aldiv@quotient+3,f,c
  1083  00117E  5005               	movf	___aldiv@divisor,w,c
  1084  001180  5C01               	subwf	___aldiv@dividend,w,c
  1085  001182  5006               	movf	___aldiv@divisor+1,w,c
  1086  001184  5802               	subwfb	___aldiv@dividend+1,w,c
  1087  001186  5007               	movf	___aldiv@divisor+2,w,c
  1088  001188  5803               	subwfb	___aldiv@dividend+2,w,c
  1089  00118A  5008               	movf	___aldiv@divisor+3,w,c
  1090  00118C  5804               	subwfb	___aldiv@dividend+3,w,c
  1091  00118E  A0D8               	btfss	status,0,c
  1092  001190  D009               	goto	l915
  1093  001192  5005               	movf	___aldiv@divisor,w,c
  1094  001194  5E01               	subwf	___aldiv@dividend,f,c
  1095  001196  5006               	movf	___aldiv@divisor+1,w,c
  1096  001198  5A02               	subwfb	___aldiv@dividend+1,f,c
  1097  00119A  5007               	movf	___aldiv@divisor+2,w,c
  1098  00119C  5A03               	subwfb	___aldiv@dividend+2,f,c
  1099  00119E  5008               	movf	___aldiv@divisor+3,w,c
  1100  0011A0  5A04               	subwfb	___aldiv@dividend+3,f,c
  1101  0011A2  800B               	bsf	___aldiv@quotient,0,c
  1102  0011A4                     l915:
  1103  0011A4  90D8               	bcf	status,0,c
  1104  0011A6  3208               	rrcf	___aldiv@divisor+3,f,c
  1105  0011A8  3207               	rrcf	___aldiv@divisor+2,f,c
  1106  0011AA  3206               	rrcf	___aldiv@divisor+1,f,c
  1107  0011AC  3205               	rrcf	___aldiv@divisor,f,c
  1108  0011AE  2E09               	decfsz	___aldiv@counter,f,c
  1109  0011B0  D7E1               	goto	l907
  1110  0011B2                     l919:
  1111  0011B2  500A               	movf	___aldiv@sign,w,c
  1112  0011B4  B4D8               	btfsc	status,2,c
  1113  0011B6  D008               	goto	l923
  1114  0011B8  1E0E               	comf	___aldiv@quotient+3,f,c
  1115  0011BA  1E0D               	comf	___aldiv@quotient+2,f,c
  1116  0011BC  1E0C               	comf	___aldiv@quotient+1,f,c
  1117  0011BE  6C0B               	negf	___aldiv@quotient,c
  1118  0011C0  0E00               	movlw	0
  1119  0011C2  220C               	addwfc	___aldiv@quotient+1,f,c
  1120  0011C4  220D               	addwfc	___aldiv@quotient+2,f,c
  1121  0011C6  220E               	addwfc	___aldiv@quotient+3,f,c
  1122  0011C8                     l923:
  1123  0011C8  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  1124  0011CC  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  1125  0011D0  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  1126  0011D4  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  1127  0011D8  0012               	return	
  1128  0011DA                     __end_of___aldiv:
  1129                           	opt stack 0
  1130                           tblptru	equ	0xFF8
  1131                           tblptrh	equ	0xFF7
  1132                           tblptrl	equ	0xFF6
  1133                           tablat	equ	0xFF5
  1134                           prodh	equ	0xFF4
  1135                           prodl	equ	0xFF3
  1136                           intcon	equ	0xFF2
  1137                           wreg	equ	0xFE8
  1138                           status	equ	0xFD8
  1139                           tblptru	equ	0xFF8
  1140                           tblptrh	equ	0xFF7
  1141                           tblptrl	equ	0xFF6
  1142                           tablat	equ	0xFF5
  1143                           prodh	equ	0xFF4
  1144                           prodl	equ	0xFF3
  1145                           intcon	equ	0xFF2
  1146                           wreg	equ	0xFE8
  1147                           status	equ	0xFD8
  1148                           
  1149                           	psect	rparam
  1150  0000                     tblptru	equ	0xFF8
  1151                           tblptrh	equ	0xFF7
  1152                           tblptrl	equ	0xFF6
  1153                           tablat	equ	0xFF5
  1154                           prodh	equ	0xFF4
  1155                           prodl	equ	0xFF3
  1156                           intcon	equ	0xFF2
  1157                           wreg	equ	0xFE8
  1158                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    23
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     26      26
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->___aldiv
    _putch->_send_byte
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0     812
                                             14 COMRAM    12    12      0
                            ___aldiv
                      _check_overrun
                            _initLCD
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      75
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     165
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      75
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (2) _send_byte                                            1     1      0      60
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (3) _send_nibble                                          1     1      0      30
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (4) _pulse_e                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _check_overrun                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   _check_overrun
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _putch
     _send_byte
       _send_nibble
         _pulse_e

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     1A      1A       1       20.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Dec 11 01:13:59 2018

                     l35 10A8                       l37 1108                       l38 10B8  
                     u15 126A                       u16 126C              __CFG_CPD$ON 000000  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000  
                    l903 1164                      l905 1170                      l923 11C8  
                    l915 11A4                      l907 1174                      l919 11B2  
                    l891 112A                      l973 10EE                      l897 1142  
                    l969 10D0                      l977 10F2             __CFG_CPB$OFF 000000  
                    u307 120A                      u235 1054                      u317 122C  
                    u327 1252                      u337 125C                      u277 1086  
                    u287 11E0                      u297 11F8                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000              main@keyData 0017  
                   _LATD 000F8C                     _RCIF 007CF5        main@current_state 0019  
                   _main 101A                     _keys 1001    __end_of_check_overrun 12C2  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000             main@baudRate 0013            __CFG_MCLRE$ON 000000  
           ___param_bank 000000          __end_of___aldiv 11DA                    ?_main 0001  
                  _RCREG 000FAE                    _SPBRG 000FAF                    _TRISD 000F95  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_lcdInst 12AE  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000          __end_of_initLCD 1244  
         __CFG_EBTRB$OFF 000000                    _putch 1296                    tablat 000FF5  
        send_nibble@data 0002          __end_of_pulse_e 126E                    status 000FD8  
         __CFG_PBADEN$ON 000000          __initialization 12AE             __end_of_main 110E  
           __end_of_keys 1012                   ??_main 000F            __activetblptr 000002  
           ?_send_nibble 0001                   ?_putch 0001           __CFG_XINST$OFF 000000  
              ??___aldiv 0009           __CFG_STVREN$ON 000000                ??_lcdInst 0004  
              ??_initLCD 0005             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_pulse_e 0001  
  pulse_e@interruptState 0001               __accesstop 0080  __end_of__initialization 12AE  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_putch 12A2  
                ??_putch 0004       __size_of_send_byte 0012     __size_of_send_nibble 0016  
                __Hparam 0000                  __Lparam 0000                  ___aldiv 110E  
           __psmallconst 1000                  __pcinit 12AE                  __ramtop 1000  
                _lcdInst 12A2                  __ptext0 101A                  __ptext1 1296  
                __ptext2 11DA                  __ptext3 12A2                  __ptext4 1284  
                __ptext5 126E                  __ptext6 1244                  __ptext7 12B8  
                __ptext8 110E           main@next_state 001A                  _initLCD 11DA  
 __size_of_check_overrun 000A         ___aldiv@dividend 0001                  _pulse_e 1244  
   end_of_initialization 12AE    __end_of_LCD_SIZE_HORZ 1018        __end_of_send_byte 1296  
  __end_of_LCD_SIZE_VERT 1017            __Lmediumconst 0000                _RCSTAbits 000FAB  
       ___aldiv@quotient 000B                _TRISCbits 000F94                _TXSTAbits 000FAC  
          send_byte@data 0003            _check_overrun 12B8      start_initialization 12AE  
       main@receivedByte 0018           ?_check_overrun 0001         __CFG_LPT1OSC$OFF 000000  
      __CFG_CCP2MX$PORTC 000000                 ?___aldiv 0001                 ?_lcdInst 0001  
               ?_initLCD 0001              __smallconst 1000            ??_send_nibble 0002  
               ?_pulse_e 0001           __size_of_putch 000C          ??_check_overrun 0001  
        ___aldiv@divisor 0005          ___aldiv@counter 0009                 _LATDbits 000F8C  
              _send_byte 1284           _LCD_LINE1_ADDR 1015           _LCD_LINE2_ADDR 1014  
         _LCD_LINE3_ADDR 1013           _LCD_LINE4_ADDR 1012         __CFG_WDTPS$32768 000000  
 __end_of_LCD_LINE1_ADDR 1016   __end_of_LCD_LINE2_ADDR 1015   __end_of_LCD_LINE3_ADDR 1014  
 __end_of_LCD_LINE4_ADDR 1013      __end_of_send_nibble 1284               ?_send_byte 0001  
               __Hrparam 0000                 __Lrparam 0000       __CFG_BOREN$SBORDIS 000000  
       __size_of___aldiv 00CC         __size_of_lcdInst 000C         __size_of_initLCD 006A  
       __size_of_pulse_e 002A            __size_of_main 00F4                putch@data 0004  
             _INTCONbits 000FF2              _send_nibble 126E            _LCD_SIZE_HORZ 1017  
          _LCD_SIZE_VERT 1016              ??_send_byte 0003              lcdInst@data 0004  
           ___aldiv@sign 000A  
