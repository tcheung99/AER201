

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Dec 11 01:14:23 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,inline
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17  0000                     
    18                           ; Version 1.42
    19                           ; Generated 13/04/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4620 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	smallconst
    54  001000                     __psmallconst:
    55                           	opt stack 0
    56  001000  00                 	db	0
    57  001001                     _keys:
    58                           	opt stack 0
    59  001001  31                 	db	49
    60  001002  32                 	db	50
    61  001003  33                 	db	51
    62  001004  41                 	db	65
    63  001005  34                 	db	52
    64  001006  35                 	db	53
    65  001007  36                 	db	54
    66  001008  42                 	db	66
    67  001009  37                 	db	55
    68  00100A  38                 	db	56
    69  00100B  39                 	db	57
    70  00100C  43                 	db	67
    71  00100D  2A                 	db	42
    72  00100E  30                 	db	48
    73  00100F  23                 	db	35
    74  001010  44                 	db	68
    75  001011  00                 	db	0
    76  001012                     __end_of_keys:
    77                           	opt stack 0
    78  001012                     _LCD_LINE4_ADDR:
    79                           	opt stack 0
    80  001012  50                 	db	80
    81  001013                     __end_of_LCD_LINE4_ADDR:
    82                           	opt stack 0
    83  001013                     _LCD_LINE3_ADDR:
    84                           	opt stack 0
    85  001013  10                 	db	16
    86  001014                     __end_of_LCD_LINE3_ADDR:
    87                           	opt stack 0
    88  001014                     _LCD_LINE2_ADDR:
    89                           	opt stack 0
    90  001014  40                 	db	64
    91  001015                     __end_of_LCD_LINE2_ADDR:
    92                           	opt stack 0
    93  001015                     _LCD_LINE1_ADDR:
    94                           	opt stack 0
    95  001015  00                 	db	0
    96  001016                     __end_of_LCD_LINE1_ADDR:
    97                           	opt stack 0
    98  001016                     _LCD_SIZE_VERT:
    99                           	opt stack 0
   100  001016  04                 	db	4
   101  001017                     __end_of_LCD_SIZE_VERT:
   102                           	opt stack 0
   103  001017                     _LCD_SIZE_HORZ:
   104                           	opt stack 0
   105  001017  10                 	db	16
   106  001018                     __end_of_LCD_SIZE_HORZ:
   107                           	opt stack 0
   108  0000                     _LATDbits	set	3980
   109  0000                     _INTCONbits	set	4082
   110  0000                     _PORTB	set	3969
   111  0000                     _PORTBbits	set	3969
   112  0000                     _ADCON1	set	4033
   113  0000                     _TRISD	set	3989
   114  0000                     _LATD	set	3980
   115                           
   116                           ; #config settings
   117  001018  00                 	db	0	; dummy byte at the end
   118  0000                     
   119                           	psect	cinit
   120  001116                     __pcinit:
   121                           	opt stack 0
   122  001116                     start_initialization:
   123                           	opt stack 0
   124  001116                     __initialization:
   125                           	opt stack 0
   126  001116                     end_of_initialization:
   127                           	opt stack 0
   128  001116                     __end_of__initialization:
   129                           	opt stack 0
   130  001116  0E00               	movlw	low (__Lsmallconst shr (0+16))
   131  001118  6EF8               	movwf	tblptru,c
   132  00111A  0E10               	movlw	high __Lsmallconst
   133  00111C  6EF7               	movwf	tblptrh,c
   134  00111E  0100               	movlb	0
   135  001120  EF42  F008         	goto	_main	;jump to C main() function
   136                           tblptru	equ	0xFF8
   137                           tblptrh	equ	0xFF7
   138                           
   139                           	psect	cstackCOMRAM
   140  000001                     __pcstackCOMRAM:
   141                           	opt stack 0
   142  000001                     pulse_e@interruptState:
   143                           	opt stack 0
   144                           
   145                           ; 1 bytes @ 0x0
   146  000001                     	ds	1
   147  000002                     send_nibble@data:
   148                           	opt stack 0
   149                           
   150                           ; 1 bytes @ 0x1
   151  000002                     	ds	1
   152  000003                     send_byte@data:
   153                           	opt stack 0
   154                           
   155                           ; 1 bytes @ 0x2
   156  000003                     	ds	1
   157  000004                     lcdInst@data:
   158                           	opt stack 0
   159  000004                     putch@data:
   160                           	opt stack 0
   161                           
   162                           ; 1 bytes @ 0x3
   163  000004                     	ds	1
   164  000005                     ??_initLCD:
   165                           
   166                           ; 1 bytes @ 0x4
   167  000005                     	ds	1
   168  000006                     main@keypress:
   169                           	opt stack 0
   170                           
   171                           ; 1 bytes @ 0x5
   172  000006                     	ds	1
   173  000007                     main@temp:
   174                           	opt stack 0
   175                           
   176                           ; 1 bytes @ 0x6
   177  000007                     	ds	1
   178                           tblptru	equ	0xFF8
   179                           tblptrh	equ	0xFF7
   180                           
   181 ;;
   182 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   183 ;;
   184 ;; *************** function _main *****************
   185 ;; Defined at:
   186 ;;		line 24 in file "main.c"
   187 ;; Parameters:    Size  Location     Type
   188 ;;		None
   189 ;; Auto vars:     Size  Location     Type
   190 ;;  temp            1    6[COMRAM] unsigned char 
   191 ;;  keypress        1    5[COMRAM] unsigned char 
   192 ;; Return value:  Size  Location     Type
   193 ;;                  1    wreg      void 
   194 ;; Registers used:
   195 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   196 ;; Tracked objects:
   197 ;;		On entry : 0/0
   198 ;;		On exit  : 0/0
   199 ;;		Unchanged: 0/0
   200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   202 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   204 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   205 ;;Total ram usage:        2 bytes
   206 ;; Hardware stack levels required when called:    5
   207 ;; This function calls:
   208 ;;		_initLCD
   209 ;;		_putch
   210 ;; This function is called by:
   211 ;;		Startup code after reset
   212 ;; This function uses a non-reentrant model
   213 ;;
   214                           
   215                           	psect	text0
   216  001084                     __ptext0:
   217                           	opt stack 0
   218  001084                     _main:
   219                           	opt stack 26
   220                           
   221                           ;main.c: 28: LATD = 0x00;
   222                           
   223                           ;incstack = 0
   224  001084  0E00               	movlw	0
   225  001086  6E8C               	movwf	3980,c	;volatile
   226                           
   227                           ;main.c: 29: TRISD = 0x00;
   228  001088  0E00               	movlw	0
   229  00108A  6E95               	movwf	3989,c	;volatile
   230                           
   231                           ;main.c: 32: ADCON1 = 0b00001111;
   232  00108C  0E0F               	movlw	15
   233  00108E  6EC1               	movwf	4033,c	;volatile
   234                           
   235                           ;main.c: 35: initLCD();
   236  001090  EC0D  F008         	call	_initLCD	;wreg free
   237  001094                     l24:
   238  001094  A281               	btfss	3969,1,c	;volatile
   239  001096  D7FE               	goto	l24
   240                           
   241                           ;main.c: 44: unsigned char keypress = (PORTB & 0xF0) >> 4;
   242  001098  3881               	swapf	3969,w,c	;volatile
   243  00109A  0B0F               	andlw	15
   244  00109C  0B0F               	andlw	15
   245  00109E  6E06               	movwf	main@keypress,c
   246  0010A0                     l27:
   247  0010A0  B281               	btfsc	3969,1,c	;volatile
   248  0010A2  D7FE               	goto	l27
   249                           
   250                           ;main.c: 49: __nop();
   251  0010A4  F000               	nop	
   252                           
   253                           ;main.c: 51: unsigned char temp = keys[keypress];
   254  0010A6  5006               	movf	main@keypress,w,c
   255  0010A8  0D01               	mullw	1
   256  0010AA  0E01               	movlw	low _keys
   257  0010AC  24F3               	addwf	prodl,w,c
   258  0010AE  6EF6               	movwf	tblptrl,c
   259  0010B0  0E10               	movlw	high _keys
   260  0010B2  20F4               	addwfc	prodh,w,c
   261  0010B4  6EF7               	movwf	tblptrh,c
   262  0010B6                     	if	0	;There are less than 3 active tblptr bytes
   263  0010B6                     	endif
   264  0010B6  0008               	tblrd		*
   265  0010B8  CFF5 F007          	movff	tablat,main@temp
   266                           
   267                           ;main.c: 52: putch(temp);
   268  0010BC  5007               	movf	main@temp,w,c
   269  0010BE  EC92  F008         	call	_putch
   270  0010C2  D7E8               	goto	l24
   271  0010C4                     __end_of_main:
   272                           	opt stack 0
   273                           tblptru	equ	0xFF8
   274                           tblptrh	equ	0xFF7
   275                           tblptrl	equ	0xFF6
   276                           tablat	equ	0xFF5
   277                           prodh	equ	0xFF4
   278                           prodl	equ	0xFF3
   279                           
   280 ;; *************** function _putch *****************
   281 ;; Defined at:
   282 ;;		line 102 in file "lcd.c"
   283 ;; Parameters:    Size  Location     Type
   284 ;;  data            1    wreg     unsigned char 
   285 ;; Auto vars:     Size  Location     Type
   286 ;;  data            1    3[COMRAM] unsigned char 
   287 ;; Return value:  Size  Location     Type
   288 ;;                  1    wreg      void 
   289 ;; Registers used:
   290 ;;		wreg, status,2, status,0, cstack
   291 ;; Tracked objects:
   292 ;;		On entry : 0/0
   293 ;;		On exit  : 0/0
   294 ;;		Unchanged: 0/0
   295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   297 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   299 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   300 ;;Total ram usage:        1 bytes
   301 ;; Hardware stack levels used:    1
   302 ;; Hardware stack levels required when called:    3
   303 ;; This function calls:
   304 ;;		_send_byte
   305 ;; This function is called by:
   306 ;;		_main
   307 ;; This function uses a non-reentrant model
   308 ;;
   309                           
   310                           	psect	text1
   311  001124                     __ptext1:
   312                           	opt stack 0
   313  001124                     _putch:
   314                           	opt stack 27
   315                           
   316                           ;incstack = 0
   317                           ;putch@data stored from wreg
   318  001124  6E04               	movwf	putch@data,c
   319                           
   320                           ;lcd.c: 103: LATDbits.LATD2 = 1;
   321  001126  848C               	bsf	3980,2,c	;volatile
   322                           
   323                           ;lcd.c: 104: send_byte((unsigned char)data);
   324  001128  5004               	movf	putch@data,w,c
   325  00112A  EC82  F008         	call	_send_byte
   326  00112E  0012               	return		;funcret
   327  001130                     __end_of_putch:
   328                           	opt stack 0
   329                           tblptru	equ	0xFF8
   330                           tblptrh	equ	0xFF7
   331                           tblptrl	equ	0xFF6
   332                           tablat	equ	0xFF5
   333                           prodh	equ	0xFF4
   334                           prodl	equ	0xFF3
   335                           
   336 ;; *************** function _initLCD *****************
   337 ;; Defined at:
   338 ;;		line 69 in file "lcd.c"
   339 ;; Parameters:    Size  Location     Type
   340 ;;		None
   341 ;; Auto vars:     Size  Location     Type
   342 ;;		None
   343 ;; Return value:  Size  Location     Type
   344 ;;                  1    wreg      void 
   345 ;; Registers used:
   346 ;;		wreg, status,2, status,0, cstack
   347 ;; Tracked objects:
   348 ;;		On entry : 0/0
   349 ;;		On exit  : 0/0
   350 ;;		Unchanged: 0/0
   351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   354 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   355 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   356 ;;Total ram usage:        1 bytes
   357 ;; Hardware stack levels used:    1
   358 ;; Hardware stack levels required when called:    4
   359 ;; This function calls:
   360 ;;		_lcdInst
   361 ;;		_send_byte
   362 ;;		_send_nibble
   363 ;; This function is called by:
   364 ;;		_main
   365 ;; This function uses a non-reentrant model
   366 ;;
   367                           
   368                           	psect	text2
   369  00101A                     __ptext2:
   370                           	opt stack 0
   371  00101A                     _initLCD:
   372                           	opt stack 26
   373                           
   374                           ;lcd.c: 70: _delay((unsigned long)((15)*(10000000/4000.0)));
   375                           
   376                           ;incstack = 0
   377  00101A  0E31               	movlw	49
   378  00101C  6E05               	movwf	??_initLCD& (0+255),c
   379  00101E  0EB2               	movlw	178
   380  001020                     u87:
   381  001020  2EE8               	decfsz	wreg,f,c
   382  001022  D7FE               	bra	u87
   383  001024  2E05               	decfsz	??_initLCD& (0+255),f,c
   384  001026  D7FC               	bra	u87
   385  001028  D000               	nop2	
   386                           
   387                           ;lcd.c: 72: LATDbits.LATD2 = 0;
   388  00102A  948C               	bcf	3980,2,c	;volatile
   389                           
   390                           ;lcd.c: 74: send_nibble(0b0011);
   391  00102C  0E03               	movlw	3
   392  00102E  EC77  F008         	call	_send_nibble
   393                           
   394                           ;lcd.c: 75: _delay((unsigned long)((5)*(10000000/4000.0)));
   395  001032  0E11               	movlw	17
   396  001034  6E05               	movwf	??_initLCD& (0+255),c
   397  001036  0E3A               	movlw	58
   398  001038                     u97:
   399  001038  2EE8               	decfsz	wreg,f,c
   400  00103A  D7FE               	bra	u97
   401  00103C  2E05               	decfsz	??_initLCD& (0+255),f,c
   402  00103E  D7FC               	bra	u97
   403  001040  D000               	nop2	
   404                           
   405                           ;lcd.c: 76: send_nibble(0b0011);
   406  001042  0E03               	movlw	3
   407  001044  EC77  F008         	call	_send_nibble
   408                           
   409                           ;lcd.c: 77: _delay((unsigned long)((150)*(10000000/4000000.0)));
   410  001048  0E7D               	movlw	125
   411  00104A                     u107:
   412  00104A  2EE8               	decfsz	wreg,f,c
   413  00104C  D7FE               	bra	u107
   414                           
   415                           ;lcd.c: 78: send_byte(0b00110010);
   416  00104E  0E32               	movlw	50
   417  001050  EC82  F008         	call	_send_byte
   418                           
   419                           ;lcd.c: 80: send_byte(0b00101000);
   420  001054  0E28               	movlw	40
   421  001056  EC82  F008         	call	_send_byte
   422                           
   423                           ;lcd.c: 81: send_byte(0b00001000);
   424  00105A  0E08               	movlw	8
   425  00105C  EC82  F008         	call	_send_byte
   426                           
   427                           ;lcd.c: 82: send_byte(0b00000001);
   428  001060  0E01               	movlw	1
   429  001062  EC82  F008         	call	_send_byte
   430                           
   431                           ;lcd.c: 83: _delay((unsigned long)((5)*(10000000/4000.0)));
   432  001066  0E11               	movlw	17
   433  001068  6E05               	movwf	??_initLCD& (0+255),c
   434  00106A  0E3A               	movlw	58
   435  00106C                     u117:
   436  00106C  2EE8               	decfsz	wreg,f,c
   437  00106E  D7FE               	bra	u117
   438  001070  2E05               	decfsz	??_initLCD& (0+255),f,c
   439  001072  D7FC               	bra	u117
   440  001074  D000               	nop2	
   441                           
   442                           ;lcd.c: 84: send_byte(0b00000110);
   443  001076  0E06               	movlw	6
   444  001078  EC82  F008         	call	_send_byte
   445                           
   446                           ;lcd.c: 87: { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
   447  00107C  0E0F               	movlw	15
   448  00107E  EC98  F008         	call	_lcdInst
   449  001082  0012               	return		;funcret
   450  001084                     __end_of_initLCD:
   451                           	opt stack 0
   452                           tblptru	equ	0xFF8
   453                           tblptrh	equ	0xFF7
   454                           tblptrl	equ	0xFF6
   455                           tablat	equ	0xFF5
   456                           prodh	equ	0xFF4
   457                           prodl	equ	0xFF3
   458                           wreg	equ	0xFE8
   459                           
   460 ;; *************** function _lcdInst *****************
   461 ;; Defined at:
   462 ;;		line 64 in file "lcd.c"
   463 ;; Parameters:    Size  Location     Type
   464 ;;  data            1    wreg     unsigned char 
   465 ;; Auto vars:     Size  Location     Type
   466 ;;  data            1    3[COMRAM] unsigned char 
   467 ;; Return value:  Size  Location     Type
   468 ;;                  1    wreg      void 
   469 ;; Registers used:
   470 ;;		wreg, status,2, status,0, cstack
   471 ;; Tracked objects:
   472 ;;		On entry : 0/0
   473 ;;		On exit  : 0/0
   474 ;;		Unchanged: 0/0
   475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   477 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   479 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   480 ;;Total ram usage:        1 bytes
   481 ;; Hardware stack levels used:    1
   482 ;; Hardware stack levels required when called:    3
   483 ;; This function calls:
   484 ;;		_send_byte
   485 ;; This function is called by:
   486 ;;		_initLCD
   487 ;;		_lcd_shift_cursor
   488 ;;		_lcd_shift_display
   489 ;; This function uses a non-reentrant model
   490 ;;
   491                           
   492                           	psect	text3
   493  001130                     __ptext3:
   494                           	opt stack 0
   495  001130                     _lcdInst:
   496                           	opt stack 26
   497                           
   498                           ;incstack = 0
   499                           ;lcdInst@data stored from wreg
   500  001130  6E04               	movwf	lcdInst@data,c
   501                           
   502                           ;lcd.c: 65: LATDbits.LATD2 = 0;
   503  001132  948C               	bcf	3980,2,c	;volatile
   504                           
   505                           ;lcd.c: 66: send_byte(data);
   506  001134  5004               	movf	lcdInst@data,w,c
   507  001136  EC82  F008         	call	_send_byte
   508  00113A  0012               	return		;funcret
   509  00113C                     __end_of_lcdInst:
   510                           	opt stack 0
   511                           tblptru	equ	0xFF8
   512                           tblptrh	equ	0xFF7
   513                           tblptrl	equ	0xFF6
   514                           tablat	equ	0xFF5
   515                           prodh	equ	0xFF4
   516                           prodl	equ	0xFF3
   517                           wreg	equ	0xFE8
   518                           
   519 ;; *************** function _send_byte *****************
   520 ;; Defined at:
   521 ;;		line 55 in file "lcd.c"
   522 ;; Parameters:    Size  Location     Type
   523 ;;  data            1    wreg     unsigned char 
   524 ;; Auto vars:     Size  Location     Type
   525 ;;  data            1    2[COMRAM] unsigned char 
   526 ;; Return value:  Size  Location     Type
   527 ;;                  1    wreg      void 
   528 ;; Registers used:
   529 ;;		wreg, status,2, status,0, cstack
   530 ;; Tracked objects:
   531 ;;		On entry : 0/0
   532 ;;		On exit  : 0/0
   533 ;;		Unchanged: 0/0
   534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   536 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   538 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   539 ;;Total ram usage:        1 bytes
   540 ;; Hardware stack levels used:    1
   541 ;; Hardware stack levels required when called:    2
   542 ;; This function calls:
   543 ;;		_send_nibble
   544 ;; This function is called by:
   545 ;;		_lcdInst
   546 ;;		_initLCD
   547 ;;		_putch
   548 ;; This function uses a non-reentrant model
   549 ;;
   550                           
   551                           	psect	text4
   552  001104                     __ptext4:
   553                           	opt stack 0
   554  001104                     _send_byte:
   555                           	opt stack 27
   556                           
   557                           ;incstack = 0
   558                           ;send_byte@data stored from wreg
   559  001104  6E03               	movwf	send_byte@data,c
   560                           
   561                           ;lcd.c: 57: send_nibble(data >> 4);
   562  001106  3803               	swapf	send_byte@data,w,c
   563  001108  0B0F               	andlw	15
   564  00110A  EC77  F008         	call	_send_nibble
   565                           
   566                           ;lcd.c: 60: send_nibble(data);
   567  00110E  5003               	movf	send_byte@data,w,c
   568  001110  EC77  F008         	call	_send_nibble
   569  001114  0012               	return		;funcret
   570  001116                     __end_of_send_byte:
   571                           	opt stack 0
   572                           tblptru	equ	0xFF8
   573                           tblptrh	equ	0xFF7
   574                           tblptrl	equ	0xFF6
   575                           tablat	equ	0xFF5
   576                           prodh	equ	0xFF4
   577                           prodl	equ	0xFF3
   578                           wreg	equ	0xFE8
   579                           
   580 ;; *************** function _send_nibble *****************
   581 ;; Defined at:
   582 ;;		line 44 in file "lcd.c"
   583 ;; Parameters:    Size  Location     Type
   584 ;;  data            1    wreg     unsigned char 
   585 ;; Auto vars:     Size  Location     Type
   586 ;;  data            1    1[COMRAM] unsigned char 
   587 ;; Return value:  Size  Location     Type
   588 ;;                  1    wreg      void 
   589 ;; Registers used:
   590 ;;		wreg, status,2, status,0, cstack
   591 ;; Tracked objects:
   592 ;;		On entry : 0/0
   593 ;;		On exit  : 0/0
   594 ;;		Unchanged: 0/0
   595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   597 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   599 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   600 ;;Total ram usage:        1 bytes
   601 ;; Hardware stack levels used:    1
   602 ;; Hardware stack levels required when called:    1
   603 ;; This function calls:
   604 ;;		_pulse_e
   605 ;; This function is called by:
   606 ;;		_send_byte
   607 ;;		_initLCD
   608 ;; This function uses a non-reentrant model
   609 ;;
   610                           
   611                           	psect	text5
   612  0010EE                     __ptext5:
   613                           	opt stack 0
   614  0010EE                     _send_nibble:
   615                           	opt stack 27
   616                           
   617                           ;incstack = 0
   618                           ;send_nibble@data stored from wreg
   619  0010EE  6E02               	movwf	send_nibble@data,c
   620                           
   621                           ;lcd.c: 46: LATD = (unsigned char)(LATD & 0x0F);
   622  0010F0  508C               	movf	3980,w,c	;volatile
   623  0010F2  0B0F               	andlw	15
   624  0010F4  6E8C               	movwf	3980,c	;volatile
   625                           
   626                           ;lcd.c: 47: LATD = (unsigned char)((data << 4) | LATD);
   627  0010F6  3802               	swapf	send_nibble@data,w,c
   628  0010F8  0BF0               	andlw	240
   629  0010FA  108C               	iorwf	3980,w,c	;volatile
   630  0010FC  6E8C               	movwf	3980,c	;volatile
   631                           
   632                           ;lcd.c: 48: pulse_e();
   633  0010FE  EC62  F008         	call	_pulse_e	;wreg free
   634  001102  0012               	return		;funcret
   635  001104                     __end_of_send_nibble:
   636                           	opt stack 0
   637                           tblptru	equ	0xFF8
   638                           tblptrh	equ	0xFF7
   639                           tblptrl	equ	0xFF6
   640                           tablat	equ	0xFF5
   641                           prodh	equ	0xFF4
   642                           prodl	equ	0xFF3
   643                           wreg	equ	0xFE8
   644                           
   645 ;; *************** function _pulse_e *****************
   646 ;; Defined at:
   647 ;;		line 28 in file "lcd.c"
   648 ;; Parameters:    Size  Location     Type
   649 ;;		None
   650 ;; Auto vars:     Size  Location     Type
   651 ;;  interruptSta    1    0[COMRAM] unsigned char 
   652 ;; Return value:  Size  Location     Type
   653 ;;                  1    wreg      void 
   654 ;; Registers used:
   655 ;;		wreg
   656 ;; Tracked objects:
   657 ;;		On entry : 0/0
   658 ;;		On exit  : 0/0
   659 ;;		Unchanged: 0/0
   660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   662 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   664 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   665 ;;Total ram usage:        1 bytes
   666 ;; Hardware stack levels used:    1
   667 ;; This function calls:
   668 ;;		Nothing
   669 ;; This function is called by:
   670 ;;		_send_nibble
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           	psect	text6
   675  0010C4                     __ptext6:
   676                           	opt stack 0
   677  0010C4                     _pulse_e:
   678                           	opt stack 27
   679                           
   680                           ;lcd.c: 29: unsigned char interruptState = INTCONbits.GIE;
   681                           
   682                           ;incstack = 0
   683  0010C4  0E00               	movlw	0
   684  0010C6  BEF2               	btfsc	intcon,7,c	;volatile
   685  0010C8  0E01               	movlw	1
   686  0010CA  6E01               	movwf	pulse_e@interruptState,c
   687                           
   688                           ;lcd.c: 30: (INTCONbits.GIE = 0);
   689  0010CC  9EF2               	bcf	intcon,7,c	;volatile
   690                           
   691                           ;lcd.c: 31: LATDbits.LATD3 = 1;
   692  0010CE  868C               	bsf	3980,3,c	;volatile
   693                           
   694                           ;lcd.c: 34: _delay((unsigned long)((25)*(10000000/4000000.0)));
   695  0010D0  0E14               	movlw	20
   696  0010D2                     u127:
   697  0010D2  2EE8               	decfsz	wreg,f,c
   698  0010D4  D7FE               	bra	u127
   699  0010D6  D000               	nop2	
   700                           
   701                           ;lcd.c: 35: LATDbits.LATD3 = 0;
   702  0010D8  968C               	bcf	3980,3,c	;volatile
   703                           
   704                           ;lcd.c: 36: _delay((unsigned long)((100)*(10000000/4000000.0)));
   705  0010DA  0E53               	movlw	83
   706  0010DC                     u137:
   707  0010DC  2EE8               	decfsz	wreg,f,c
   708  0010DE  D7FE               	bra	u137
   709  0010E0  F000               	nop	
   710                           
   711                           ;lcd.c: 37: INTCONbits.GIE = interruptState;
   712  0010E2  B001               	btfsc	pulse_e@interruptState,0,c
   713  0010E4  D002               	bra	u15
   714  0010E6  9EF2               	bcf	intcon,7,c	;volatile
   715  0010E8  D001               	bra	u16
   716  0010EA                     u15:
   717  0010EA  8EF2               	bsf	intcon,7,c	;volatile
   718  0010EC                     u16:
   719  0010EC  0012               	return		;funcret
   720  0010EE                     __end_of_pulse_e:
   721                           	opt stack 0
   722                           tblptru	equ	0xFF8
   723                           tblptrh	equ	0xFF7
   724                           tblptrl	equ	0xFF6
   725                           tablat	equ	0xFF5
   726                           prodh	equ	0xFF4
   727                           prodl	equ	0xFF3
   728                           intcon	equ	0xFF2
   729                           wreg	equ	0xFE8
   730                           tblptru	equ	0xFF8
   731                           tblptrh	equ	0xFF7
   732                           tblptrl	equ	0xFF6
   733                           tablat	equ	0xFF5
   734                           prodh	equ	0xFF4
   735                           prodl	equ	0xFF3
   736                           intcon	equ	0xFF2
   737                           wreg	equ	0xFE8
   738                           
   739                           	psect	rparam
   740  0000                     tblptru	equ	0xFF8
   741                           tblptrh	equ	0xFF7
   742                           tblptrl	equ	0xFF6
   743                           tablat	equ	0xFF5
   744                           prodh	equ	0xFF4
   745                           prodl	equ	0xFF3
   746                           intcon	equ	0xFF2
   747                           wreg	equ	0xFE8


Data Sizes:
    Strings     0
    Constant    23
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127      7       7
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_initLCD
    _putch->_send_byte
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     270
                                              5 COMRAM     2     2      0
                            _initLCD
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      75
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     165
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      75
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (2) _send_byte                                            1     1      0      60
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (3) _send_nibble                                          1     1      0      30
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (4) _pulse_e                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _putch
     _send_byte
       _send_nibble
         _pulse_e

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F      7       7       1        5.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Dec 11 01:14:23 2018

                     l24 1094                       l27 10A0                       u15 10EA  
                     u16 10EC              __CFG_CPD$ON 000000                       u87 1020  
                     u97 1038              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000             __CFG_CPB$OFF 000000                      u107 104A  
                    u117 106C                      u127 10D2                      u137 10DC  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   _LATD 000F8C                     _main 1084                     _keys 1001  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ?_main 0001                    _PORTB 000F81                    _TRISD 000F95  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_lcdInst 113C  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000             main@keypress 0006           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
        __end_of_initLCD 1084           __CFG_EBTRB$OFF 000000                    _putch 1124  
                  tablat 000FF5          send_nibble@data 0002          __end_of_pulse_e 10EE  
         __CFG_PBADEN$ON 000000          __initialization 1116             __end_of_main 10C4  
           __end_of_keys 1012                   ??_main 0006            __activetblptr 000001  
                 _ADCON1 000FC1             ?_send_nibble 0001                   ?_putch 0001  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000                ??_lcdInst 0004  
              ??_initLCD 0005             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_pulse_e 0001  
  pulse_e@interruptState 0001               __accesstop 0080  __end_of__initialization 1116  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_putch 1130  
                ??_putch 0004       __size_of_send_byte 0012     __size_of_send_nibble 0016  
                __Hparam 0000                  __Lparam 0000             __psmallconst 1000  
                __pcinit 1116                  __ramtop 1000                  _lcdInst 1130  
                __ptext0 1084                  __ptext1 1124                  __ptext2 101A  
                __ptext3 1130                  __ptext4 1104                  __ptext5 10EE  
                __ptext6 10C4                  _initLCD 101A                  _pulse_e 10C4  
   end_of_initialization 1116    __end_of_LCD_SIZE_HORZ 1018        __end_of_send_byte 1116  
  __end_of_LCD_SIZE_VERT 1017                _PORTBbits 000F81            send_byte@data 0003  
    start_initialization 1116         __CFG_LPT1OSC$OFF 000000        __CFG_CCP2MX$PORTC 000000  
               ?_lcdInst 0001                 ?_initLCD 0001              __smallconst 1000  
          ??_send_nibble 0002                 ?_pulse_e 0001           __size_of_putch 000C  
               _LATDbits 000F8C                _send_byte 1104           _LCD_LINE1_ADDR 1015  
         _LCD_LINE2_ADDR 1014           _LCD_LINE3_ADDR 1013           _LCD_LINE4_ADDR 1012  
       __CFG_WDTPS$32768 000000   __end_of_LCD_LINE1_ADDR 1016   __end_of_LCD_LINE2_ADDR 1015  
 __end_of_LCD_LINE3_ADDR 1014   __end_of_LCD_LINE4_ADDR 1013      __end_of_send_nibble 1104  
             ?_send_byte 0001                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 1000       __CFG_BOREN$SBORDIS 000000         __size_of_lcdInst 000C  
       __size_of_initLCD 006A         __size_of_pulse_e 002A            __size_of_main 0040  
               main@temp 0007                putch@data 0004               _INTCONbits 000FF2  
            _send_nibble 10EE            _LCD_SIZE_HORZ 1017            _LCD_SIZE_VERT 1016  
            ??_send_byte 0003              lcdInst@data 0004  
