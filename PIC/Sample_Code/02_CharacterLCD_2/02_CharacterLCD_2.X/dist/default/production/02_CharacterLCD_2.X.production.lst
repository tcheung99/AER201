

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Dec 11 01:15:35 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1,inline
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38  0000                     
    39                           ; Version 1.42
    40                           ; Generated 13/04/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4620 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataCOMRAM
    75  00DE95                     __pidataCOMRAM:
    76                           	opt stack 0
    77                           
    78                           ;initializer for main@F3042
    79  00DE95  41                 	db	65
    80  00DE96  45                 	db	69
    81  00DE97  52                 	db	82
    82  00DE98  32                 	db	50
    83  00DE99  30                 	db	48
    84  00DE9A  31                 	db	49
    85  00DE9B  00                 	db	0
    86                           
    87                           	psect	mediumconst
    88  00FE86                     __pmediumconst:
    89                           	opt stack 0
    90  00FE86  00                 	db	0
    91  00FE87                     _dpowers:
    92                           	opt stack 0
    93  00FE87  0001               	dw	1
    94  00FE89  0000               	dw	0
    95  00FE8B  000A               	dw	10
    96  00FE8D  0000               	dw	0
    97  00FE8F  0064               	dw	100
    98  00FE91  0000               	dw	0
    99  00FE93  03E8               	dw	1000
   100  00FE95  0000               	dw	0
   101  00FE97  2710               	dw	10000
   102  00FE99  0000               	dw	0
   103  00FE9B  86A0               	dw	34464
   104  00FE9D  0001               	dw	1
   105  00FE9F  4240               	dw	16960
   106  00FEA1  000F               	dw	15
   107  00FEA3  9680               	dw	38528
   108  00FEA5  0098               	dw	152
   109  00FEA7  E100               	dw	57600
   110  00FEA9  05F5               	dw	1525
   111  00FEAB  CA00               	dw	51712
   112  00FEAD  3B9A               	dw	15258
   113  00FEAF                     __end_of_dpowers:
   114                           	opt stack 0
   115  00FEAF                     __powers_:
   116                           	opt stack 0
   117  00FEAF  00                 	db	0
   118  00FEB0  80                 	db	128
   119  00FEB1  3F                 	db	63
   120  00FEB2  00                 	db	0
   121  00FEB3  20                 	db	32
   122  00FEB4  41                 	db	65
   123  00FEB5  00                 	db	0
   124  00FEB6  C8                 	db	200
   125  00FEB7  42                 	db	66
   126  00FEB8  00                 	db	0
   127  00FEB9  7A                 	db	122
   128  00FEBA  44                 	db	68
   129  00FEBB  40                 	db	64
   130  00FEBC  1C                 	db	28
   131  00FEBD  46                 	db	70
   132  00FEBE  50                 	db	80
   133  00FEBF  C3                 	db	195
   134  00FEC0  47                 	db	71
   135  00FEC1  24                 	db	36
   136  00FEC2  74                 	db	116
   137  00FEC3  49                 	db	73
   138  00FEC4  97                 	db	151
   139  00FEC5  18                 	db	24
   140  00FEC6  4B                 	db	75
   141  00FEC7  BC                 	db	188
   142  00FEC8  BE                 	db	190
   143  00FEC9  4C                 	db	76
   144  00FECA  6B                 	db	107
   145  00FECB  6E                 	db	110
   146  00FECC  4E                 	db	78
   147  00FECD  03                 	db	3
   148  00FECE  15                 	db	21
   149  00FECF  50                 	db	80
   150  00FED0  79                 	db	121
   151  00FED1  AD                 	db	173
   152  00FED2  60                 	db	96
   153  00FED3  F3                 	db	243
   154  00FED4  49                 	db	73
   155  00FED5  71                 	db	113
   156  00FED6                     __end_of__powers_:
   157                           	opt stack 0
   158  00FED6                     __npowers_:
   159                           	opt stack 0
   160  00FED6  00                 	db	0
   161  00FED7  80                 	db	128
   162  00FED8  3F                 	db	63
   163  00FED9  CD                 	db	205
   164  00FEDA  CC                 	db	204
   165  00FEDB  3D                 	db	61
   166  00FEDC  D7                 	db	215
   167  00FEDD  23                 	db	35
   168  00FEDE  3C                 	db	60
   169  00FEDF  12                 	db	18
   170  00FEE0  83                 	db	131
   171  00FEE1  3A                 	db	58
   172  00FEE2  B7                 	db	183
   173  00FEE3  D1                 	db	209
   174  00FEE4  38                 	db	56
   175  00FEE5  C6                 	db	198
   176  00FEE6  27                 	db	39
   177  00FEE7  37                 	db	55
   178  00FEE8  38                 	db	56
   179  00FEE9  86                 	db	134
   180  00FEEA  35                 	db	53
   181  00FEEB  C0                 	db	192
   182  00FEEC  D6                 	db	214
   183  00FEED  33                 	db	51
   184  00FEEE  CC                 	db	204
   185  00FEEF  2B                 	db	43
   186  00FEF0  32                 	db	50
   187  00FEF1  70                 	db	112
   188  00FEF2  89                 	db	137
   189  00FEF3  30                 	db	48
   190  00FEF4  E7                 	db	231
   191  00FEF5  DB                 	db	219
   192  00FEF6  2E                 	db	46
   193  00FEF7  E5                 	db	229
   194  00FEF8  3C                 	db	60
   195  00FEF9  1E                 	db	30
   196  00FEFA  42                 	db	66
   197  00FEFB  A2                 	db	162
   198  00FEFC  0D                 	db	13
   199  00FEFD                     __end_of__npowers_:
   200                           	opt stack 0
   201  00FEFD                     _LCD_LINE4_ADDR:
   202                           	opt stack 0
   203  00FEFD  50                 	db	80
   204  00FEFE                     __end_of_LCD_LINE4_ADDR:
   205                           	opt stack 0
   206  00FEFE                     _LCD_LINE3_ADDR:
   207                           	opt stack 0
   208  00FEFE  10                 	db	16
   209  00FEFF                     __end_of_LCD_LINE3_ADDR:
   210                           	opt stack 0
   211  00FEFF                     _LCD_SIZE_VERT:
   212                           	opt stack 0
   213  00FEFF  04                 	db	4
   214  00FF00                     __end_of_LCD_SIZE_VERT:
   215                           	opt stack 0
   216  00FF00                     _LCD_LINE1_ADDR:
   217                           	opt stack 0
   218  00FF00  00                 	db	0
   219  00FF01                     __end_of_LCD_LINE1_ADDR:
   220                           	opt stack 0
   221  00FF01                     _LCD_SIZE_HORZ:
   222                           	opt stack 0
   223  00FF01  10                 	db	16
   224  00FF02                     __end_of_LCD_SIZE_HORZ:
   225                           	opt stack 0
   226  00FF02                     _LCD_LINE2_ADDR:
   227                           	opt stack 0
   228  00FF02  40                 	db	64
   229  00FF03                     __end_of_LCD_LINE2_ADDR:
   230                           	opt stack 0
   231  0000                     _LATDbits	set	3980
   232  0000                     _INTCONbits	set	4082
   233  0000                     _TRISD	set	3989
   234  0000                     _LATD	set	3980
   235  00FF03                     STR_22:
   236  00FF03  48                 	db	72	;'H'
   237  00FF04  65                 	db	101	;'e'
   238  00FF05  6C                 	db	108	;'l'
   239  00FF06  6C                 	db	108	;'l'
   240  00FF07  6F                 	db	111	;'o'
   241  00FF08  20                 	db	32
   242  00FF09  77                 	db	119	;'w'
   243  00FF0A  6F                 	db	111	;'o'
   244  00FF0B  72                 	db	114	;'r'
   245  00FF0C  6C                 	db	108	;'l'
   246  00FF0D  64                 	db	100	;'d'
   247  00FF0E  21                 	db	33
   248  00FF0F  20                 	db	32
   249  00FF10  20                 	db	32
   250  00FF11  20                 	db	32
   251  00FF12  20                 	db	32
   252  00FF13  00                 	db	0
   253  00FF14                     STR_17:
   254  00FF14  63                 	db	99	;'c'
   255  00FF15  61                 	db	97	;'a'
   256  00FF16  6E                 	db	110	;'n'
   257  00FF17  20                 	db	32
   258  00FF18  62                 	db	98	;'b'
   259  00FF19  65                 	db	101	;'e'
   260  00FF1A  20                 	db	32
   261  00FF1B  73                 	db	115	;'s'
   262  00FF1C  70                 	db	112	;'p'
   263  00FF1D  65                 	db	101	;'e'
   264  00FF1E  63                 	db	99	;'c'
   265  00FF1F  69                 	db	105	;'i'
   266  00FF20  66                 	db	102	;'f'
   267  00FF21  69                 	db	105	;'i'
   268  00FF22  65                 	db	101	;'e'
   269  00FF23  64                 	db	100	;'d'
   270  00FF24  00                 	db	0
   271  00FF25                     STR_8:
   272  00FF25  43                 	db	67	;'C'
   273  00FF26  75                 	db	117	;'u'
   274  00FF27  72                 	db	114	;'r'
   275  00FF28  73                 	db	115	;'s'
   276  00FF29  6F                 	db	111	;'o'
   277  00FF2A  72                 	db	114	;'r'
   278  00FF2B  20                 	db	32
   279  00FF2C  62                 	db	98	;'b'
   280  00FF2D  6C                 	db	108	;'l'
   281  00FF2E  69                 	db	105	;'i'
   282  00FF2F  6E                 	db	110	;'n'
   283  00FF30  6B                 	db	107	;'k'
   284  00FF31  20                 	db	32
   285  00FF32  63                 	db	99	;'c'
   286  00FF33  61                 	db	97	;'a'
   287  00FF34  6E                 	db	110	;'n'
   288  00FF35  00                 	db	0
   289  00FF36                     STR_15:
   290  00FF36  6C                 	db	108	;'l'
   291  00FF37  69                 	db	105	;'i'
   292  00FF38  6B                 	db	107	;'k'
   293  00FF39  65                 	db	101	;'e'
   294  00FF3A  6C                 	db	108	;'l'
   295  00FF3B  79                 	db	121	;'y'
   296  00FF3C  20                 	db	32
   297  00FF3D  73                 	db	115	;'s'
   298  00FF3E  74                 	db	116	;'t'
   299  00FF3F  61                 	db	97	;'a'
   300  00FF40  79                 	db	121	;'y'
   301  00FF41  20                 	db	32
   302  00FF42  6F                 	db	111	;'o'
   303  00FF43  6E                 	db	110	;'n'
   304  00FF44  21                 	db	33
   305  00FF45  00                 	db	0
   306  00FF46                     STR_16:
   307  00FF46  43                 	db	67	;'C'
   308  00FF47  75                 	db	117	;'u'
   309  00FF48  72                 	db	114	;'r'
   310  00FF49  73                 	db	115	;'s'
   311  00FF4A  6F                 	db	111	;'o'
   312  00FF4B  72                 	db	114	;'r'
   313  00FF4C  20                 	db	32
   314  00FF4D  70                 	db	112	;'p'
   315  00FF4E  6F                 	db	111	;'o'
   316  00FF4F  73                 	db	115	;'s'
   317  00FF50  69                 	db	105	;'i'
   318  00FF51  74                 	db	116	;'t'
   319  00FF52  69                 	db	105	;'i'
   320  00FF53  6F                 	db	111	;'o'
   321  00FF54  6E                 	db	110	;'n'
   322  00FF55  00                 	db	0
   323  00FF56                     STR_20:
   324  00FF56  44                 	db	68	;'D'
   325  00FF57  69                 	db	105	;'i'
   326  00FF58  73                 	db	115	;'s'
   327  00FF59  70                 	db	112	;'p'
   328  00FF5A  6C                 	db	108	;'l'
   329  00FF5B  61                 	db	97	;'a'
   330  00FF5C  79                 	db	121	;'y'
   331  00FF5D  20                 	db	32
   332  00FF5E  63                 	db	99	;'c'
   333  00FF5F  61                 	db	97	;'a'
   334  00FF60  6E                 	db	110	;'n'
   335  00FF61  20                 	db	32
   336  00FF62  62                 	db	98	;'b'
   337  00FF63  65                 	db	101	;'e'
   338  00FF64  00                 	db	0
   339  00FF65                     STR_2:
   340  00FF65  54                 	db	84	;'T'
   341  00FF66  65                 	db	101	;'e'
   342  00FF67  78                 	db	120	;'x'
   343  00FF68  74                 	db	116	;'t'
   344  00FF69  20                 	db	32
   345  00FF6A  63                 	db	99	;'c'
   346  00FF6B  61                 	db	97	;'a'
   347  00FF6C  6E                 	db	110	;'n'
   348  00FF6D  20                 	db	32
   349  00FF6E  62                 	db	98	;'b'
   350  00FF6F  65                 	db	101	;'e'
   351  00FF70  20                 	db	32
   352  00FF71  6F                 	db	111	;'o'
   353  00FF72  6E                 	db	110	;'n'
   354  00FF73  00                 	db	0
   355  00FF74                     STR_3:
   356  00FF74  6D                 	db	109	;'m'
   357  00FF75  75                 	db	117	;'u'
   358  00FF76  6C                 	db	108	;'l'
   359  00FF77  74                 	db	116	;'t'
   360  00FF78  69                 	db	105	;'i'
   361  00FF79  70                 	db	112	;'p'
   362  00FF7A  6C                 	db	108	;'l'
   363  00FF7B  65                 	db	101	;'e'
   364  00FF7C  20                 	db	32
   365  00FF7D  6C                 	db	108	;'l'
   366  00FF7E  69                 	db	105	;'i'
   367  00FF7F  6E                 	db	110	;'n'
   368  00FF80  65                 	db	101	;'e'
   369  00FF81  73                 	db	115	;'s'
   370  00FF82  00                 	db	0
   371  00FF83                     STR_14:
   372  00FF83  42                 	db	66	;'B'
   373  00FF84  75                 	db	117	;'u'
   374  00FF85  74                 	db	116	;'t'
   375  00FF86  20                 	db	32
   376  00FF87  74                 	db	116	;'t'
   377  00FF88  68                 	db	104	;'h'
   378  00FF89  61                 	db	97	;'a'
   379  00FF8A  74                 	db	116	;'t'
   380  00FF8B  20                 	db	32
   381  00FF8C  77                 	db	119	;'w'
   382  00FF8D  69                 	db	105	;'i'
   383  00FF8E  6C                 	db	108	;'l'
   384  00FF8F  6C                 	db	108	;'l'
   385  00FF90  00                 	db	0
   386  00FF91                     STR_1:
   387  00FF91  48                 	db	72	;'H'
   388  00FF92  65                 	db	101	;'e'
   389  00FF93  6C                 	db	108	;'l'
   390  00FF94  6C                 	db	108	;'l'
   391  00FF95  6F                 	db	111	;'o'
   392  00FF96  20                 	db	32
   393  00FF97  77                 	db	119	;'w'
   394  00FF98  6F                 	db	111	;'o'
   395  00FF99  72                 	db	114	;'r'
   396  00FF9A  6C                 	db	108	;'l'
   397  00FF9B  64                 	db	100	;'d'
   398  00FF9C  21                 	db	33
   399  00FF9D  00                 	db	0
   400  00FF9E                     STR_4:
   401  00FF9E  49                 	db	73	;'I'
   402  00FF9F  6E                 	db	110	;'n'
   403  00FFA0  74                 	db	116	;'t'
   404  00FFA1  65                 	db	101	;'e'
   405  00FFA2  67                 	db	103	;'g'
   406  00FFA3  65                 	db	101	;'e'
   407  00FFA4  72                 	db	114	;'r'
   408  00FFA5  3A                 	db	58	;':'
   409  00FFA6  20                 	db	32
   410  00FFA7  25                 	db	37
   411  00FFA8  64                 	db	100	;'d'
   412  00FFA9  00                 	db	0
   413  00FFAA                     STR_9:
   414  00FFAA  62                 	db	98	;'b'
   415  00FFAB  65                 	db	101	;'e'
   416  00FFAC  20                 	db	32
   417  00FFAD  74                 	db	116	;'t'
   418  00FFAE  6F                 	db	111	;'o'
   419  00FFAF  67                 	db	103	;'g'
   420  00FFB0  67                 	db	103	;'g'
   421  00FFB1  6C                 	db	108	;'l'
   422  00FFB2  65                 	db	101	;'e'
   423  00FFB3  64                 	db	100	;'d'
   424  00FFB4  00                 	db	0
   425  00FFB5                     STR_10:
   426  00FFB5  41                 	db	65	;'A'
   427  00FFB6  73                 	db	115	;'s'
   428  00FFB7  20                 	db	32
   429  00FFB8  63                 	db	99	;'c'
   430  00FFB9  61                 	db	97	;'a'
   431  00FFBA  6E                 	db	110	;'n'
   432  00FFBB  20                 	db	32
   433  00FFBC  74                 	db	116	;'t'
   434  00FFBD  68                 	db	104	;'h'
   435  00FFBE  65                 	db	101	;'e'
   436  00FFBF  00                 	db	0
   437  00FFC0                     STR_7:
   438  00FFC0  43                 	db	67	;'C'
   439  00FFC1  68                 	db	104	;'h'
   440  00FFC2  61                 	db	97	;'a'
   441  00FFC3  72                 	db	114	;'r'
   442  00FFC4  5B                 	db	91	;'['
   443  00FFC5  5D                 	db	93	;']'
   444  00FFC6  3A                 	db	58	;':'
   445  00FFC7  20                 	db	32
   446  00FFC8  25                 	db	37
   447  00FFC9  73                 	db	115	;'s'
   448  00FFCA  00                 	db	0
   449  00FFCB                     STR_5:
   450  00FFCB  46                 	db	70	;'F'
   451  00FFCC  6C                 	db	108	;'l'
   452  00FFCD  6F                 	db	111	;'o'
   453  00FFCE  61                 	db	97	;'a'
   454  00FFCF  74                 	db	116	;'t'
   455  00FFD0  3A                 	db	58	;':'
   456  00FFD1  20                 	db	32
   457  00FFD2  25                 	db	37
   458  00FFD3  66                 	db	102	;'f'
   459  00FFD4  00                 	db	0
   460  00FFD5                     STR_6:
   461  00FFD5  4C                 	db	76	;'L'
   462  00FFD6  6F                 	db	111	;'o'
   463  00FFD7  6E                 	db	110	;'n'
   464  00FFD8  67                 	db	103	;'g'
   465  00FFD9  3A                 	db	58	;':'
   466  00FFDA  20                 	db	32
   467  00FFDB  25                 	db	37
   468  00FFDC  6C                 	db	108	;'l'
   469  00FFDD  75                 	db	117	;'u'
   470  00FFDE  00                 	db	0
   471  00FFDF                     STR_11:
   472  00FFDF  63                 	db	99	;'c'
   473  00FFE0  75                 	db	117	;'u'
   474  00FFE1  72                 	db	114	;'r'
   475  00FFE2  73                 	db	115	;'s'
   476  00FFE3  6F                 	db	111	;'o'
   477  00FFE4  72                 	db	114	;'r'
   478  00FFE5  21                 	db	33
   479  00FFE6  00                 	db	0
   480  00FFE7                     STR_21:
   481  00FFE7  73                 	db	115	;'s'
   482  00FFE8  68                 	db	104	;'h'
   483  00FFE9  69                 	db	105	;'i'
   484  00FFEA  66                 	db	102	;'f'
   485  00FFEB  74                 	db	116	;'t'
   486  00FFEC  65                 	db	101	;'e'
   487  00FFED  64                 	db	100	;'d'
   488  00FFEE  00                 	db	0
   489  00FFEF                     STR_13:
   490  00FFEF  64                 	db	100	;'d'
   491  00FFF0  69                 	db	105	;'i'
   492  00FFF1  73                 	db	115	;'s'
   493  00FFF2  70                 	db	112	;'p'
   494  00FFF3  6C                 	db	108	;'l'
   495  00FFF4  61                 	db	97	;'a'
   496  00FFF5  79                 	db	121	;'y'
   497  00FFF6  00                 	db	0
   498  00FFF7                     STR_23:
   499  00FFF7  28                 	db	40
   500  00FFF8  6E                 	db	110	;'n'
   501  00FFF9  75                 	db	117	;'u'
   502  00FFFA  6C                 	db	108	;'l'
   503  00FFFB  6C                 	db	108	;'l'
   504  00FFFC  29                 	db	41
   505  00FFFD  00                 	db	0
   506  0000                     
   507                           ; #config settings
   508  00FFFE  00                 	db	0	; dummy byte at the end
   509  0000                     
   510                           	psect	cinit
   511  00DF42                     __pcinit:
   512                           	opt stack 0
   513  00DF42                     start_initialization:
   514                           	opt stack 0
   515  00DF42                     __initialization:
   516                           	opt stack 0
   517                           
   518                           ; Initialize objects allocated to COMRAM (7 bytes)
   519                           ; load TBLPTR registers with __pidataCOMRAM
   520  00DF42  0E95               	movlw	low __pidataCOMRAM
   521  00DF44  6EF6               	movwf	tblptrl,c
   522  00DF46  0EDE               	movlw	high __pidataCOMRAM
   523  00DF48  6EF7               	movwf	tblptrh,c
   524  00DF4A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   525  00DF4C  6EF8               	movwf	tblptru,c
   526  00DF4E  EE00  F074         	lfsr	0,__pdataCOMRAM
   527  00DF52  EE10 F007          	lfsr	1,7
   528  00DF56                     copy_data0:
   529  00DF56  0009               	tblrd		*+
   530  00DF58  CFF5 FFEE          	movff	tablat,postinc0
   531  00DF5C  50E5               	movf	postdec1,w,c
   532  00DF5E  50E1               	movf	fsr1l,w,c
   533  00DF60  E1FA               	bnz	copy_data0
   534  00DF62                     end_of_initialization:
   535                           	opt stack 0
   536  00DF62                     __end_of__initialization:
   537                           	opt stack 0
   538  00DF62  0100               	movlb	0
   539  00DF64  EF21  F078         	goto	_main	;jump to C main() function
   540                           tblptru	equ	0xFF8
   541                           tblptrh	equ	0xFF7
   542                           tblptrl	equ	0xFF6
   543                           tablat	equ	0xFF5
   544                           postinc0	equ	0xFEE
   545                           postdec1	equ	0xFE5
   546                           fsr1l	equ	0xFE1
   547                           
   548                           	psect	dataCOMRAM
   549  000074                     __pdataCOMRAM:
   550                           	opt stack 0
   551  000074                     main@F3042:
   552                           	opt stack 0
   553  000074                     	ds	7
   554                           tblptru	equ	0xFF8
   555                           tblptrh	equ	0xFF7
   556                           tblptrl	equ	0xFF6
   557                           tablat	equ	0xFF5
   558                           postinc0	equ	0xFEE
   559                           postdec1	equ	0xFE5
   560                           fsr1l	equ	0xFE1
   561                           
   562                           	psect	cstackCOMRAM
   563  000001                     __pcstackCOMRAM:
   564                           	opt stack 0
   565  000001                     ?___awmod:
   566                           	opt stack 0
   567  000001                     ?___ftpack:
   568                           	opt stack 0
   569  000001                     ?___ftneg:
   570                           	opt stack 0
   571  000001                     ?__tdiv_to_l_:
   572                           	opt stack 0
   573  000001                     ?__div_to_l_:
   574                           	opt stack 0
   575  000001                     ?___lldiv:
   576                           	opt stack 0
   577  000001                     pulse_e@interruptState:
   578                           	opt stack 0
   579  000001                     ___awmod@dividend:
   580                           	opt stack 0
   581  000001                     __div_to_l_@f1:
   582                           	opt stack 0
   583  000001                     ___ftpack@arg:
   584                           	opt stack 0
   585  000001                     __tdiv_to_l_@f1:
   586                           	opt stack 0
   587  000001                     ___ftge@ff1:
   588                           	opt stack 0
   589  000001                     ___ftneg@f1:
   590                           	opt stack 0
   591  000001                     ___lldiv@dividend:
   592                           	opt stack 0
   593                           
   594                           ; 4 bytes @ 0x0
   595  000001                     	ds	1
   596  000002                     send_nibble@data:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x1
   600  000002                     	ds	1
   601  000003                     send_byte@data:
   602                           	opt stack 0
   603  000003                     ___awmod@divisor:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x2
   607  000003                     	ds	1
   608  000004                     lcdInst@data:
   609                           	opt stack 0
   610  000004                     putch@data:
   611                           	opt stack 0
   612  000004                     ___ftpack@exp:
   613                           	opt stack 0
   614  000004                     __div_to_l_@f2:
   615                           	opt stack 0
   616  000004                     __tdiv_to_l_@f2:
   617                           	opt stack 0
   618  000004                     ___ftge@ff2:
   619                           	opt stack 0
   620                           
   621                           ; 3 bytes @ 0x3
   622  000004                     	ds	1
   623  000005                     ??_initLCD:
   624  000005                     lcd_shift_display@direction:
   625                           	opt stack 0
   626  000005                     ___awmod@counter:
   627                           	opt stack 0
   628  000005                     ___ftpack@sign:
   629                           	opt stack 0
   630  000005                     ___lldiv@divisor:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0x4
   634  000005                     	ds	1
   635  000006                     ??___ftpack:
   636  000006                     lcd_shift_display@numChars:
   637                           	opt stack 0
   638  000006                     ___awmod@sign:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x5
   642  000006                     	ds	1
   643  000007                     ??__tdiv_to_l_:
   644  000007                     ??___ftge:
   645  000007                     ?___awdiv:
   646                           	opt stack 0
   647  000007                     lcd_shift_display@n:
   648                           	opt stack 0
   649  000007                     ___awdiv@dividend:
   650                           	opt stack 0
   651  000007                     __div_to_l_@quot:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0x6
   655  000007                     	ds	2
   656  000009                     ?___lltoft:
   657                           	opt stack 0
   658  000009                     ___awdiv@divisor:
   659                           	opt stack 0
   660  000009                     ___lldiv@quotient:
   661                           	opt stack 0
   662  000009                     ___lltoft@c:
   663                           	opt stack 0
   664                           
   665                           ; 4 bytes @ 0x8
   666  000009                     	ds	1
   667  00000A                     __tdiv_to_l_@quot:
   668                           	opt stack 0
   669                           
   670                           ; 4 bytes @ 0x9
   671  00000A                     	ds	1
   672  00000B                     ___awdiv@counter:
   673                           	opt stack 0
   674  00000B                     __div_to_l_@cntr:
   675                           	opt stack 0
   676                           
   677                           ; 1 bytes @ 0xA
   678  00000B                     	ds	1
   679  00000C                     ___awdiv@sign:
   680                           	opt stack 0
   681  00000C                     __div_to_l_@exp1:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0xB
   685  00000C                     	ds	1
   686  00000D                     ??___lltoft:
   687  00000D                     ___lldiv@counter:
   688                           	opt stack 0
   689  00000D                     ___awdiv@quotient:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0xC
   693  00000D                     	ds	1
   694  00000E                     ?___llmod:
   695                           	opt stack 0
   696  00000E                     __tdiv_to_l_@cntr:
   697                           	opt stack 0
   698  00000E                     ___llmod@dividend:
   699                           	opt stack 0
   700                           
   701                           ; 4 bytes @ 0xD
   702  00000E                     	ds	1
   703  00000F                     ?___wmul:
   704                           	opt stack 0
   705  00000F                     __tdiv_to_l_@exp1:
   706                           	opt stack 0
   707  00000F                     ___wmul@multiplier:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0xE
   711  00000F                     	ds	2
   712  000011                     ___lltoft@exp:
   713                           	opt stack 0
   714  000011                     ___wmul@multiplicand:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x10
   718  000011                     	ds	1
   719  000012                     ___llmod@divisor:
   720                           	opt stack 0
   721                           
   722                           ; 4 bytes @ 0x11
   723  000012                     	ds	1
   724  000013                     ___wmul@product:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0x12
   728  000013                     	ds	2
   729  000015                     ?___ftmul:
   730                           	opt stack 0
   731  000015                     ___ftmul@f1:
   732                           	opt stack 0
   733                           
   734                           ; 3 bytes @ 0x14
   735  000015                     	ds	1
   736  000016                     ___llmod@counter:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x15
   740  000016                     	ds	2
   741  000018                     ___ftmul@f2:
   742                           	opt stack 0
   743                           
   744                           ; 3 bytes @ 0x17
   745  000018                     	ds	3
   746  00001B                     ??___ftmul:
   747                           
   748                           ; 1 bytes @ 0x1A
   749  00001B                     	ds	3
   750  00001E                     ___ftmul@exp:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x1D
   754  00001E                     	ds	1
   755  00001F                     ___ftmul@f3_as_product:
   756                           	opt stack 0
   757                           
   758                           ; 3 bytes @ 0x1E
   759  00001F                     	ds	3
   760  000022                     ___ftmul@cntr:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x21
   764  000022                     	ds	1
   765  000023                     ___ftmul@sign:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x22
   769  000023                     	ds	1
   770  000024                     ?_fround:
   771                           	opt stack 0
   772  000024                     ?_scale:
   773                           	opt stack 0
   774                           
   775                           ; 3 bytes @ 0x23
   776  000024                     	ds	3
   777  000027                     _fround$845:
   778                           	opt stack 0
   779  000027                     _scale$846:
   780                           	opt stack 0
   781                           
   782                           ; 3 bytes @ 0x26
   783  000027                     	ds	3
   784  00002A                     scale@scl:
   785                           	opt stack 0
   786  00002A                     _fround$844:
   787                           	opt stack 0
   788                           
   789                           ; 3 bytes @ 0x29
   790  00002A                     	ds	1
   791  00002B                     ?___fttol:
   792                           	opt stack 0
   793  00002B                     ___fttol@f1:
   794                           	opt stack 0
   795                           
   796                           ; 3 bytes @ 0x2A
   797  00002B                     	ds	2
   798  00002D                     fround@prec:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x2C
   802  00002D                     	ds	1
   803  00002E                     ?___ftadd:
   804                           	opt stack 0
   805  00002E                     ___ftadd@f1:
   806                           	opt stack 0
   807                           
   808                           ; 3 bytes @ 0x2D
   809  00002E                     	ds	1
   810  00002F                     ??___fttol:
   811                           
   812                           ; 1 bytes @ 0x2E
   813  00002F                     	ds	2
   814  000031                     ___ftadd@f2:
   815                           	opt stack 0
   816                           
   817                           ; 3 bytes @ 0x30
   818  000031                     	ds	3
   819  000034                     ??___ftadd:
   820  000034                     ___fttol@sign1:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0x33
   824  000034                     	ds	1
   825  000035                     ___fttol@lval:
   826                           	opt stack 0
   827                           
   828                           ; 4 bytes @ 0x34
   829  000035                     	ds	2
   830  000037                     ___ftadd@sign:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x36
   834  000037                     	ds	1
   835  000038                     ___ftadd@exp2:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x37
   839  000038                     	ds	1
   840  000039                     ___ftadd@exp1:
   841                           	opt stack 0
   842  000039                     ___fttol@exp1:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x38
   846  000039                     	ds	1
   847  00003A                     ?___ftsub:
   848                           	opt stack 0
   849  00003A                     ___ftsub@f1:
   850                           	opt stack 0
   851                           
   852                           ; 3 bytes @ 0x39
   853  00003A                     	ds	3
   854  00003D                     ___ftsub@f2:
   855                           	opt stack 0
   856                           
   857                           ; 3 bytes @ 0x3C
   858  00003D                     	ds	3
   859  000040                     ?_printf:
   860                           	opt stack 0
   861  000040                     printf@f:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0x3F
   865  000040                     	ds	6
   866  000046                     ??_printf:
   867                           
   868                           ; 1 bytes @ 0x45
   869  000046                     	ds	6
   870  00004C                     _printf$847:
   871                           	opt stack 0
   872                           
   873                           ; 3 bytes @ 0x4B
   874  00004C                     	ds	3
   875  00004F                     printf@cp:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x4E
   879  00004F                     	ds	2
   880  000051                     printf@flag:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x50
   884  000051                     	ds	2
   885  000053                     printf@ap:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x52
   889  000053                     	ds	2
   890  000055                     printf@prec:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x54
   894  000055                     	ds	2
   895  000057                     printf@exp:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0x56
   899  000057                     	ds	2
   900  000059                     printf@val:
   901                           	opt stack 0
   902                           
   903                           ; 4 bytes @ 0x58
   904  000059                     	ds	4
   905  00005D                     printf@tmpval:
   906                           	opt stack 0
   907                           
   908                           ; 4 bytes @ 0x5C
   909  00005D                     	ds	4
   910  000061                     printf@fval:
   911                           	opt stack 0
   912                           
   913                           ; 3 bytes @ 0x60
   914  000061                     	ds	3
   915  000064                     printf@c:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x63
   919  000064                     	ds	1
   920  000065                     ??_main:
   921                           
   922                           ; 1 bytes @ 0x64
   923  000065                     	ds	2
   924  000067                     main@arr:
   925                           	opt stack 0
   926                           
   927                           ; 7 bytes @ 0x66
   928  000067                     	ds	7
   929  00006E                     _main$843:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x6D
   933  00006E                     	ds	2
   934  000070                     main@i:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x6F
   938  000070                     	ds	1
   939  000071                     main@i_90:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x70
   943  000071                     	ds	1
   944  000072                     main@i_92:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x71
   948  000072                     	ds	1
   949  000073                     main@x:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x72
   953  000073                     	ds	1
   954                           tblptru	equ	0xFF8
   955                           tblptrh	equ	0xFF7
   956                           tblptrl	equ	0xFF6
   957                           tablat	equ	0xFF5
   958                           postinc0	equ	0xFEE
   959                           postdec1	equ	0xFE5
   960                           fsr1l	equ	0xFE1
   961                           
   962 ;;
   963 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   964 ;;
   965 ;; *************** function _main *****************
   966 ;; Defined at:
   967 ;;		line 21 in file "main.c"
   968 ;; Parameters:    Size  Location     Type
   969 ;;		None
   970 ;; Auto vars:     Size  Location     Type
   971 ;;  i               1  113[COMRAM] unsigned char 
   972 ;;  i               1  112[COMRAM] unsigned char 
   973 ;;  i               1  111[COMRAM] unsigned char 
   974 ;;  x               1  114[COMRAM] unsigned char 
   975 ;;  arr             7  102[COMRAM] unsigned char [7]
   976 ;; Return value:  Size  Location     Type
   977 ;;                  1    wreg      void 
   978 ;; Registers used:
   979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;Total ram usage:       15 bytes
   990 ;; Hardware stack levels required when called:    5
   991 ;; This function calls:
   992 ;;		___awmod
   993 ;;		_initLCD
   994 ;;		_lcdInst
   995 ;;		_lcd_shift_display
   996 ;;		_printf
   997 ;;		_putch
   998 ;; This function is called by:
   999 ;;		Startup code after reset
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           	psect	text0
  1004  00F042                     __ptext0:
  1005                           	opt stack 0
  1006  00F042                     _main:
  1007                           	opt stack 26
  1008                           
  1009                           ;main.c: 25: LATD = 0x00;
  1010                           
  1011                           ;incstack = 0
  1012  00F042  0E00               	movlw	0
  1013  00F044  6E8C               	movwf	3980,c	;volatile
  1014                           
  1015                           ;main.c: 26: TRISD = 0x00;
  1016  00F046  0E00               	movlw	0
  1017  00F048  6E95               	movwf	3989,c	;volatile
  1018                           
  1019                           ;main.c: 29: initLCD();
  1020  00F04A  EC4A  F070         	call	_initLCD	;wreg free
  1021                           
  1022                           ;main.c: 32: printf("Hello world!");
  1023  00F04E  0E91               	movlw	low STR_1
  1024  00F050  6E40               	movwf	printf@f,c
  1025  00F052  0EFF               	movlw	high STR_1
  1026  00F054  6E41               	movwf	printf@f+1,c
  1027  00F056  EC42  F07B         	call	_printf	;wreg free
  1028                           
  1029                           ;main.c: 33: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1030  00F05A  0E1A               	movlw	26
  1031  00F05C  6E66               	movwf	(??_main+1)& (0+255),c
  1032  00F05E  0E5E               	movlw	94
  1033  00F060  6E65               	movwf	??_main& (0+255),c
  1034  00F062  0E6E               	movlw	110
  1035  00F064                     u2877:
  1036  00F064  2EE8               	decfsz	wreg,f,c
  1037  00F066  D7FE               	bra	u2877
  1038  00F068  2E65               	decfsz	??_main& (0+255),f,c
  1039  00F06A  D7FC               	bra	u2877
  1040  00F06C  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1041  00F06E  D7FA               	bra	u2877
  1042  00F070  D307               	goto	L1
  1043  00F072                     l2724:
  1044                           
  1045                           ;main.c: 38: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1046  00F072  0E01               	movlw	1
  1047  00F074  EC4E  F06F         	call	_lcdInst
  1048  00F078  0E11               	movlw	17
  1049  00F07A  6E65               	movwf	??_main& (0+255),c
  1050  00F07C  0E3A               	movlw	58
  1051  00F07E                     u2887:
  1052  00F07E  2EE8               	decfsz	wreg,f,c
  1053  00F080  D7FE               	bra	u2887
  1054  00F082  2E65               	decfsz	??_main& (0+255),f,c
  1055  00F084  D7FC               	bra	u2887
  1056  00F086  D000               	nop2	
  1057                           
  1058                           ;main.c: 39: printf("Text can be on");
  1059  00F088  0E65               	movlw	low STR_2
  1060  00F08A  6E40               	movwf	printf@f,c
  1061  00F08C  0EFF               	movlw	high STR_2
  1062  00F08E  6E41               	movwf	printf@f+1,c
  1063  00F090  EC42  F07B         	call	_printf	;wreg free
  1064                           
  1065                           ;main.c: 40: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1066  00F094  0E02               	movlw	low _LCD_LINE2_ADDR
  1067  00F096  6EF6               	movwf	tblptrl,c
  1068  00F098                     	if	1	;There is more than 1 active tblptr byte
  1069  00F098  0EFF               	movlw	high _LCD_LINE2_ADDR
  1070  00F09A  6EF7               	movwf	tblptrh,c
  1071  00F09C                     	endif
  1072  00F09C                     	if	1	;There are 3 active tblptr bytes
  1073  00F09C  0E00               	movlw	low (_LCD_LINE2_ADDR shr (0+16))
  1074  00F09E  6EF8               	movwf	tblptru,c
  1075  00F0A0                     	endif
  1076  00F0A0  0008               	tblrd		*
  1077  00F0A2  50F5               	movf	tablat,w,c
  1078  00F0A4  0980               	iorlw	128
  1079  00F0A6  EC4E  F06F         	call	_lcdInst
  1080                           
  1081                           ;main.c: 41: printf("multiple lines");
  1082  00F0AA  0E74               	movlw	low STR_3
  1083  00F0AC  6E40               	movwf	printf@f,c
  1084  00F0AE  0EFF               	movlw	high STR_3
  1085  00F0B0  6E41               	movwf	printf@f+1,c
  1086  00F0B2  EC42  F07B         	call	_printf	;wreg free
  1087                           
  1088                           ;main.c: 42: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1089  00F0B6  0E1A               	movlw	26
  1090  00F0B8  6E66               	movwf	(??_main+1)& (0+255),c
  1091  00F0BA  0E5E               	movlw	94
  1092  00F0BC  6E65               	movwf	??_main& (0+255),c
  1093  00F0BE  0E6E               	movlw	110
  1094  00F0C0                     u2897:
  1095  00F0C0  2EE8               	decfsz	wreg,f,c
  1096  00F0C2  D7FE               	bra	u2897
  1097  00F0C4  2E65               	decfsz	??_main& (0+255),f,c
  1098  00F0C6  D7FC               	bra	u2897
  1099  00F0C8  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1100  00F0CA  D7FA               	bra	u2897
  1101  00F0CC  D000               	nop2	
  1102                           
  1103                           ;main.c: 45: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1104  00F0CE  0E01               	movlw	1
  1105  00F0D0  EC4E  F06F         	call	_lcdInst
  1106  00F0D4  0E11               	movlw	17
  1107  00F0D6  6E65               	movwf	??_main& (0+255),c
  1108  00F0D8  0E3A               	movlw	58
  1109  00F0DA                     u2907:
  1110  00F0DA  2EE8               	decfsz	wreg,f,c
  1111  00F0DC  D7FE               	bra	u2907
  1112  00F0DE  2E65               	decfsz	??_main& (0+255),f,c
  1113  00F0E0  D7FC               	bra	u2907
  1114  00F0E2  D000               	nop2	
  1115                           
  1116                           ;main.c: 46: printf("Integer: %d", 10);
  1117  00F0E4  0E9E               	movlw	low STR_4
  1118  00F0E6  6E40               	movwf	printf@f,c
  1119  00F0E8  0EFF               	movlw	high STR_4
  1120  00F0EA  6E41               	movwf	printf@f+1,c
  1121  00F0EC  0E00               	movlw	0
  1122  00F0EE  6E43               	movwf	?_printf+3,c
  1123  00F0F0  0E0A               	movlw	10
  1124  00F0F2  6E42               	movwf	?_printf+2,c
  1125  00F0F4  EC42  F07B         	call	_printf	;wreg free
  1126                           
  1127                           ;main.c: 47: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1128  00F0F8  0E02               	movlw	low _LCD_LINE2_ADDR
  1129  00F0FA  6EF6               	movwf	tblptrl,c
  1130  00F0FC                     	if	1	;There is more than 1 active tblptr byte
  1131  00F0FC  0EFF               	movlw	high _LCD_LINE2_ADDR
  1132  00F0FE  6EF7               	movwf	tblptrh,c
  1133  00F100                     	endif
  1134  00F100                     	if	1	;There are 3 active tblptr bytes
  1135  00F100  0E00               	movlw	low (_LCD_LINE2_ADDR shr (0+16))
  1136  00F102  6EF8               	movwf	tblptru,c
  1137  00F104                     	endif
  1138  00F104  0008               	tblrd		*
  1139  00F106  50F5               	movf	tablat,w,c
  1140  00F108  0980               	iorlw	128
  1141  00F10A  EC4E  F06F         	call	_lcdInst
  1142                           
  1143                           ;main.c: 48: printf("Float: %f", 3.14159265358979323846);
  1144  00F10E  0ECB               	movlw	low STR_5
  1145  00F110  6E40               	movwf	printf@f,c
  1146  00F112  0EFF               	movlw	high STR_5
  1147  00F114  6E41               	movwf	printf@f+1,c
  1148  00F116  0E10               	movlw	16
  1149  00F118  6E42               	movwf	?_printf+2,c
  1150  00F11A  0E49               	movlw	73
  1151  00F11C  6E43               	movwf	?_printf+3,c
  1152  00F11E  0E40               	movlw	64
  1153  00F120  6E44               	movwf	?_printf+4,c
  1154  00F122  EC42  F07B         	call	_printf	;wreg free
  1155                           
  1156                           ;main.c: 49: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1157  00F126  0E1A               	movlw	26
  1158  00F128  6E66               	movwf	(??_main+1)& (0+255),c
  1159  00F12A  0E5E               	movlw	94
  1160  00F12C  6E65               	movwf	??_main& (0+255),c
  1161  00F12E  0E6E               	movlw	110
  1162  00F130                     u2917:
  1163  00F130  2EE8               	decfsz	wreg,f,c
  1164  00F132  D7FE               	bra	u2917
  1165  00F134  2E65               	decfsz	??_main& (0+255),f,c
  1166  00F136  D7FC               	bra	u2917
  1167  00F138  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1168  00F13A  D7FA               	bra	u2917
  1169  00F13C  D000               	nop2	
  1170                           
  1171                           ;main.c: 51: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1172  00F13E  0E01               	movlw	1
  1173  00F140  EC4E  F06F         	call	_lcdInst
  1174  00F144  0E11               	movlw	17
  1175  00F146  6E65               	movwf	??_main& (0+255),c
  1176  00F148  0E3A               	movlw	58
  1177  00F14A                     u2927:
  1178  00F14A  2EE8               	decfsz	wreg,f,c
  1179  00F14C  D7FE               	bra	u2927
  1180  00F14E  2E65               	decfsz	??_main& (0+255),f,c
  1181  00F150  D7FC               	bra	u2927
  1182  00F152  D000               	nop2	
  1183                           
  1184                           ;main.c: 52: printf("Long: %lu", 4291234567);
  1185  00F154  0ED5               	movlw	low STR_6
  1186  00F156  6E40               	movwf	printf@f,c
  1187  00F158  0EFF               	movlw	high STR_6
  1188  00F15A  6E41               	movwf	printf@f+1,c
  1189  00F15C  0E07               	movlw	7
  1190  00F15E  6E42               	movwf	?_printf+2,c
  1191  00F160  0E0B               	movlw	11
  1192  00F162  6E43               	movwf	?_printf+3,c
  1193  00F164  0EC7               	movlw	199
  1194  00F166  6E44               	movwf	?_printf+4,c
  1195  00F168  0EFF               	movlw	255
  1196  00F16A  6E45               	movwf	?_printf+5,c
  1197  00F16C  EC42  F07B         	call	_printf	;wreg free
  1198                           
  1199                           ;main.c: 53: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1200  00F170  0E02               	movlw	low _LCD_LINE2_ADDR
  1201  00F172  6EF6               	movwf	tblptrl,c
  1202  00F174                     	if	1	;There is more than 1 active tblptr byte
  1203  00F174  0EFF               	movlw	high _LCD_LINE2_ADDR
  1204  00F176  6EF7               	movwf	tblptrh,c
  1205  00F178                     	endif
  1206  00F178                     	if	1	;There are 3 active tblptr bytes
  1207  00F178  0E00               	movlw	low (_LCD_LINE2_ADDR shr (0+16))
  1208  00F17A  6EF8               	movwf	tblptru,c
  1209  00F17C                     	endif
  1210  00F17C  0008               	tblrd		*
  1211  00F17E  50F5               	movf	tablat,w,c
  1212  00F180  0980               	iorlw	128
  1213  00F182  EC4E  F06F         	call	_lcdInst
  1214                           
  1215                           ;main.c: 54: char arr[] = "AER201";
  1216  00F186  EE20  F074         	lfsr	2,main@F3042
  1217  00F18A  EE10  F067         	lfsr	1,main@arr
  1218  00F18E  0E06               	movlw	6
  1219  00F190                     u2751:
  1220  00F190  CFDB FFE3          	movff	plusw2,plusw1
  1221  00F194  06E8               	decf	wreg,f,c
  1222  00F196  E2FC               	bc	u2751
  1223                           
  1224                           ;main.c: 55: printf("Char[]: %s", arr);
  1225  00F198  0EC0               	movlw	low STR_7
  1226  00F19A  6E40               	movwf	printf@f,c
  1227  00F19C  0EFF               	movlw	high STR_7
  1228  00F19E  6E41               	movwf	printf@f+1,c
  1229  00F1A0  0E67               	movlw	low main@arr
  1230  00F1A2  6E42               	movwf	?_printf+2,c
  1231  00F1A4  0E00               	movlw	high main@arr
  1232  00F1A6  6E43               	movwf	?_printf+3,c
  1233  00F1A8  EC42  F07B         	call	_printf	;wreg free
  1234                           
  1235                           ;main.c: 56: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1236  00F1AC  0E1A               	movlw	26
  1237  00F1AE  6E66               	movwf	(??_main+1)& (0+255),c
  1238  00F1B0  0E5E               	movlw	94
  1239  00F1B2  6E65               	movwf	??_main& (0+255),c
  1240  00F1B4  0E6E               	movlw	110
  1241  00F1B6                     u2937:
  1242  00F1B6  2EE8               	decfsz	wreg,f,c
  1243  00F1B8  D7FE               	bra	u2937
  1244  00F1BA  2E65               	decfsz	??_main& (0+255),f,c
  1245  00F1BC  D7FC               	bra	u2937
  1246  00F1BE  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1247  00F1C0  D7FA               	bra	u2937
  1248  00F1C2  D000               	nop2	
  1249                           
  1250                           ;main.c: 59: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1251  00F1C4  0E01               	movlw	1
  1252  00F1C6  EC4E  F06F         	call	_lcdInst
  1253  00F1CA  0E11               	movlw	17
  1254  00F1CC  6E65               	movwf	??_main& (0+255),c
  1255  00F1CE  0E3A               	movlw	58
  1256  00F1D0                     u2947:
  1257  00F1D0  2EE8               	decfsz	wreg,f,c
  1258  00F1D2  D7FE               	bra	u2947
  1259  00F1D4  2E65               	decfsz	??_main& (0+255),f,c
  1260  00F1D6  D7FC               	bra	u2947
  1261  00F1D8  D000               	nop2	
  1262                           
  1263                           ;main.c: 60: printf("Cursor blink can");
  1264  00F1DA  0E25               	movlw	low STR_8
  1265  00F1DC  6E40               	movwf	printf@f,c
  1266  00F1DE  0EFF               	movlw	high STR_8
  1267  00F1E0  6E41               	movwf	printf@f+1,c
  1268  00F1E2  EC42  F07B         	call	_printf	;wreg free
  1269                           
  1270                           ;main.c: 61: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1271  00F1E6  0E02               	movlw	low _LCD_LINE2_ADDR
  1272  00F1E8  6EF6               	movwf	tblptrl,c
  1273  00F1EA                     	if	1	;There is more than 1 active tblptr byte
  1274  00F1EA  0EFF               	movlw	high _LCD_LINE2_ADDR
  1275  00F1EC  6EF7               	movwf	tblptrh,c
  1276  00F1EE                     	endif
  1277  00F1EE                     	if	1	;There are 3 active tblptr bytes
  1278  00F1EE  0E00               	movlw	low (_LCD_LINE2_ADDR shr (0+16))
  1279  00F1F0  6EF8               	movwf	tblptru,c
  1280  00F1F2                     	endif
  1281  00F1F2  0008               	tblrd		*
  1282  00F1F4  50F5               	movf	tablat,w,c
  1283  00F1F6  0980               	iorlw	128
  1284  00F1F8  EC4E  F06F         	call	_lcdInst
  1285                           
  1286                           ;main.c: 62: printf("be toggled");
  1287  00F1FC  0EAA               	movlw	low STR_9
  1288  00F1FE  6E40               	movwf	printf@f,c
  1289  00F200  0EFF               	movlw	high STR_9
  1290  00F202  6E41               	movwf	printf@f+1,c
  1291  00F204  EC42  F07B         	call	_printf	;wreg free
  1292                           
  1293                           ;main.c: 63: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1294  00F208  0E1A               	movlw	26
  1295  00F20A  6E66               	movwf	(??_main+1)& (0+255),c
  1296  00F20C  0E5E               	movlw	94
  1297  00F20E  6E65               	movwf	??_main& (0+255),c
  1298  00F210  0E6E               	movlw	110
  1299  00F212                     u2957:
  1300  00F212  2EE8               	decfsz	wreg,f,c
  1301  00F214  D7FE               	bra	u2957
  1302  00F216  2E65               	decfsz	??_main& (0+255),f,c
  1303  00F218  D7FC               	bra	u2957
  1304  00F21A  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1305  00F21C  D7FA               	bra	u2957
  1306  00F21E  D000               	nop2	
  1307                           
  1308                           ;main.c: 65: { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 0) );};
  1309  00F220  0E0E               	movlw	14
  1310  00F222  EC4E  F06F         	call	_lcdInst
  1311                           
  1312                           ;main.c: 66: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1313  00F226  0E1A               	movlw	26
  1314  00F228  6E66               	movwf	(??_main+1)& (0+255),c
  1315  00F22A  0E5E               	movlw	94
  1316  00F22C  6E65               	movwf	??_main& (0+255),c
  1317  00F22E  0E6E               	movlw	110
  1318  00F230                     u2967:
  1319  00F230  2EE8               	decfsz	wreg,f,c
  1320  00F232  D7FE               	bra	u2967
  1321  00F234  2E65               	decfsz	??_main& (0+255),f,c
  1322  00F236  D7FC               	bra	u2967
  1323  00F238  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1324  00F23A  D7FA               	bra	u2967
  1325  00F23C  D000               	nop2	
  1326                           
  1327                           ;main.c: 69: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1328  00F23E  0E01               	movlw	1
  1329  00F240  EC4E  F06F         	call	_lcdInst
  1330  00F244  0E11               	movlw	17
  1331  00F246  6E65               	movwf	??_main& (0+255),c
  1332  00F248  0E3A               	movlw	58
  1333  00F24A                     u2977:
  1334  00F24A  2EE8               	decfsz	wreg,f,c
  1335  00F24C  D7FE               	bra	u2977
  1336  00F24E  2E65               	decfsz	??_main& (0+255),f,c
  1337  00F250  D7FC               	bra	u2977
  1338  00F252  D000               	nop2	
  1339                           
  1340                           ;main.c: 70: printf("As can the");
  1341  00F254  0EB5               	movlw	low STR_10
  1342  00F256  6E40               	movwf	printf@f,c
  1343  00F258  0EFF               	movlw	high STR_10
  1344  00F25A  6E41               	movwf	printf@f+1,c
  1345  00F25C  EC42  F07B         	call	_printf	;wreg free
  1346                           
  1347                           ;main.c: 71: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1348  00F260  0E02               	movlw	low _LCD_LINE2_ADDR
  1349  00F262  6EF6               	movwf	tblptrl,c
  1350  00F264                     	if	1	;There is more than 1 active tblptr byte
  1351  00F264  0EFF               	movlw	high _LCD_LINE2_ADDR
  1352  00F266  6EF7               	movwf	tblptrh,c
  1353  00F268                     	endif
  1354  00F268                     	if	1	;There are 3 active tblptr bytes
  1355  00F268  0E00               	movlw	low (_LCD_LINE2_ADDR shr (0+16))
  1356  00F26A  6EF8               	movwf	tblptru,c
  1357  00F26C                     	endif
  1358  00F26C  0008               	tblrd		*
  1359  00F26E  50F5               	movf	tablat,w,c
  1360  00F270  0980               	iorlw	128
  1361  00F272  EC4E  F06F         	call	_lcdInst
  1362                           
  1363                           ;main.c: 72: printf("cursor!");
  1364  00F276  0EDF               	movlw	low STR_11
  1365  00F278  6E40               	movwf	printf@f,c
  1366  00F27A  0EFF               	movlw	high STR_11
  1367  00F27C  6E41               	movwf	printf@f+1,c
  1368  00F27E  EC42  F07B         	call	_printf	;wreg free
  1369                           
  1370                           ;main.c: 73: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1371  00F282  0E1A               	movlw	26
  1372  00F284  6E66               	movwf	(??_main+1)& (0+255),c
  1373  00F286  0E5E               	movlw	94
  1374  00F288  6E65               	movwf	??_main& (0+255),c
  1375  00F28A  0E6E               	movlw	110
  1376  00F28C                     u2987:
  1377  00F28C  2EE8               	decfsz	wreg,f,c
  1378  00F28E  D7FE               	bra	u2987
  1379  00F290  2E65               	decfsz	??_main& (0+255),f,c
  1380  00F292  D7FC               	bra	u2987
  1381  00F294  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1382  00F296  D7FA               	bra	u2987
  1383  00F298  D000               	nop2	
  1384                           
  1385                           ;main.c: 75: { lcdInst( (unsigned char)(8 | (1 << 2) | (0 << 1) | 0) );};
  1386  00F29A  0E0C               	movlw	12
  1387  00F29C  EC4E  F06F         	call	_lcdInst
  1388                           
  1389                           ;main.c: 76: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1390  00F2A0  0E1A               	movlw	26
  1391  00F2A2  6E66               	movwf	(??_main+1)& (0+255),c
  1392  00F2A4  0E5E               	movlw	94
  1393  00F2A6  6E65               	movwf	??_main& (0+255),c
  1394  00F2A8  0E6E               	movlw	110
  1395  00F2AA                     u2997:
  1396  00F2AA  2EE8               	decfsz	wreg,f,c
  1397  00F2AC  D7FE               	bra	u2997
  1398  00F2AE  2E65               	decfsz	??_main& (0+255),f,c
  1399  00F2B0  D7FC               	bra	u2997
  1400  00F2B2  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1401  00F2B4  D7FA               	bra	u2997
  1402  00F2B6  D000               	nop2	
  1403                           
  1404                           ;main.c: 79: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1405  00F2B8  0E01               	movlw	1
  1406  00F2BA  EC4E  F06F         	call	_lcdInst
  1407  00F2BE  0E11               	movlw	17
  1408  00F2C0  6E65               	movwf	??_main& (0+255),c
  1409  00F2C2  0E3A               	movlw	58
  1410  00F2C4                     u3007:
  1411  00F2C4  2EE8               	decfsz	wreg,f,c
  1412  00F2C6  D7FE               	bra	u3007
  1413  00F2C8  2E65               	decfsz	??_main& (0+255),f,c
  1414  00F2CA  D7FC               	bra	u3007
  1415  00F2CC  D000               	nop2	
  1416                           
  1417                           ;main.c: 80: printf("As can the");
  1418  00F2CE  0EB5               	movlw	low STR_10
  1419  00F2D0  6E40               	movwf	printf@f,c
  1420  00F2D2  0EFF               	movlw	high STR_10
  1421  00F2D4  6E41               	movwf	printf@f+1,c
  1422  00F2D6  EC42  F07B         	call	_printf	;wreg free
  1423                           
  1424                           ;main.c: 81: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1425  00F2DA  0E02               	movlw	low _LCD_LINE2_ADDR
  1426  00F2DC  6EF6               	movwf	tblptrl,c
  1427  00F2DE                     	if	1	;There is more than 1 active tblptr byte
  1428  00F2DE  0EFF               	movlw	high _LCD_LINE2_ADDR
  1429  00F2E0  6EF7               	movwf	tblptrh,c
  1430  00F2E2                     	endif
  1431  00F2E2                     	if	1	;There are 3 active tblptr bytes
  1432  00F2E2  0E00               	movlw	low (_LCD_LINE2_ADDR shr (0+16))
  1433  00F2E4  6EF8               	movwf	tblptru,c
  1434  00F2E6                     	endif
  1435  00F2E6  0008               	tblrd		*
  1436  00F2E8  50F5               	movf	tablat,w,c
  1437  00F2EA  0980               	iorlw	128
  1438  00F2EC  EC4E  F06F         	call	_lcdInst
  1439                           
  1440                           ;main.c: 82: printf("display");
  1441  00F2F0  0EEF               	movlw	low STR_13
  1442  00F2F2  6E40               	movwf	printf@f,c
  1443  00F2F4  0EFF               	movlw	high STR_13
  1444  00F2F6  6E41               	movwf	printf@f+1,c
  1445  00F2F8  EC42  F07B         	call	_printf	;wreg free
  1446                           
  1447                           ;main.c: 83: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1448  00F2FC  0E1A               	movlw	26
  1449  00F2FE  6E66               	movwf	(??_main+1)& (0+255),c
  1450  00F300  0E5E               	movlw	94
  1451  00F302  6E65               	movwf	??_main& (0+255),c
  1452  00F304  0E6E               	movlw	110
  1453  00F306                     u3017:
  1454  00F306  2EE8               	decfsz	wreg,f,c
  1455  00F308  D7FE               	bra	u3017
  1456  00F30A  2E65               	decfsz	??_main& (0+255),f,c
  1457  00F30C  D7FC               	bra	u3017
  1458  00F30E  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1459  00F310  D7FA               	bra	u3017
  1460  00F312  D000               	nop2	
  1461                           
  1462                           ;main.c: 85: { lcdInst( (unsigned char)(8 | (0 << 2) | (0 << 1) | 0) );};
  1463  00F314  0E08               	movlw	8
  1464  00F316  EC4E  F06F         	call	_lcdInst
  1465                           
  1466                           ;main.c: 86: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1467  00F31A  0E1A               	movlw	26
  1468  00F31C  6E66               	movwf	(??_main+1)& (0+255),c
  1469  00F31E  0E5E               	movlw	94
  1470  00F320  6E65               	movwf	??_main& (0+255),c
  1471  00F322  0E6E               	movlw	110
  1472  00F324                     u3027:
  1473  00F324  2EE8               	decfsz	wreg,f,c
  1474  00F326  D7FE               	bra	u3027
  1475  00F328  2E65               	decfsz	??_main& (0+255),f,c
  1476  00F32A  D7FC               	bra	u3027
  1477  00F32C  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1478  00F32E  D7FA               	bra	u3027
  1479  00F330  D000               	nop2	
  1480                           
  1481                           ;main.c: 88: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1482  00F332  0E01               	movlw	1
  1483  00F334  EC4E  F06F         	call	_lcdInst
  1484  00F338  0E11               	movlw	17
  1485  00F33A  6E65               	movwf	??_main& (0+255),c
  1486  00F33C  0E3A               	movlw	58
  1487  00F33E                     u3037:
  1488  00F33E  2EE8               	decfsz	wreg,f,c
  1489  00F340  D7FE               	bra	u3037
  1490  00F342  2E65               	decfsz	??_main& (0+255),f,c
  1491  00F344  D7FC               	bra	u3037
  1492  00F346  D000               	nop2	
  1493                           
  1494                           ;main.c: 89: printf("But that will");
  1495  00F348  0E83               	movlw	low STR_14
  1496  00F34A  6E40               	movwf	printf@f,c
  1497  00F34C  0EFF               	movlw	high STR_14
  1498  00F34E  6E41               	movwf	printf@f+1,c
  1499  00F350  EC42  F07B         	call	_printf	;wreg free
  1500                           
  1501                           ;main.c: 90: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1502  00F354  0E02               	movlw	low _LCD_LINE2_ADDR
  1503  00F356  6EF6               	movwf	tblptrl,c
  1504  00F358                     	if	1	;There is more than 1 active tblptr byte
  1505  00F358  0EFF               	movlw	high _LCD_LINE2_ADDR
  1506  00F35A  6EF7               	movwf	tblptrh,c
  1507  00F35C                     	endif
  1508  00F35C                     	if	1	;There are 3 active tblptr bytes
  1509  00F35C  0E00               	movlw	low (_LCD_LINE2_ADDR shr (0+16))
  1510  00F35E  6EF8               	movwf	tblptru,c
  1511  00F360                     	endif
  1512  00F360  0008               	tblrd		*
  1513  00F362  50F5               	movf	tablat,w,c
  1514  00F364  0980               	iorlw	128
  1515  00F366  EC4E  F06F         	call	_lcdInst
  1516                           
  1517                           ;main.c: 91: printf("likely stay on!");
  1518  00F36A  0E36               	movlw	low STR_15
  1519  00F36C  6E40               	movwf	printf@f,c
  1520  00F36E  0EFF               	movlw	high STR_15
  1521  00F370  6E41               	movwf	printf@f+1,c
  1522  00F372  EC42  F07B         	call	_printf	;wreg free
  1523                           
  1524                           ;main.c: 92: { lcdInst( (unsigned char)(8 | (1 << 2) | (0 << 1) | 0) );};
  1525  00F376  0E0C               	movlw	12
  1526  00F378  EC4E  F06F         	call	_lcdInst
  1527                           
  1528                           ;main.c: 93: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1529  00F37C  0E1A               	movlw	26
  1530  00F37E  6E66               	movwf	(??_main+1)& (0+255),c
  1531  00F380  0E5E               	movlw	94
  1532  00F382  6E65               	movwf	??_main& (0+255),c
  1533  00F384  0E6E               	movlw	110
  1534  00F386                     u3047:
  1535  00F386  2EE8               	decfsz	wreg,f,c
  1536  00F388  D7FE               	bra	u3047
  1537  00F38A  2E65               	decfsz	??_main& (0+255),f,c
  1538  00F38C  D7FC               	bra	u3047
  1539  00F38E  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1540  00F390  D7FA               	bra	u3047
  1541  00F392  D000               	nop2	
  1542                           
  1543                           ;main.c: 96: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1544  00F394  0E01               	movlw	1
  1545  00F396  EC4E  F06F         	call	_lcdInst
  1546  00F39A  0E11               	movlw	17
  1547  00F39C  6E65               	movwf	??_main& (0+255),c
  1548  00F39E  0E3A               	movlw	58
  1549  00F3A0                     u3057:
  1550  00F3A0  2EE8               	decfsz	wreg,f,c
  1551  00F3A2  D7FE               	bra	u3057
  1552  00F3A4  2E65               	decfsz	??_main& (0+255),f,c
  1553  00F3A6  D7FC               	bra	u3057
  1554  00F3A8  D000               	nop2	
  1555                           
  1556                           ;main.c: 97: printf("Cursor position");
  1557  00F3AA  0E46               	movlw	low STR_16
  1558  00F3AC  6E40               	movwf	printf@f,c
  1559  00F3AE  0EFF               	movlw	high STR_16
  1560  00F3B0  6E41               	movwf	printf@f+1,c
  1561  00F3B2  EC42  F07B         	call	_printf	;wreg free
  1562                           
  1563                           ;main.c: 98: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1564  00F3B6  0E02               	movlw	low _LCD_LINE2_ADDR
  1565  00F3B8  6EF6               	movwf	tblptrl,c
  1566  00F3BA                     	if	1	;There is more than 1 active tblptr byte
  1567  00F3BA  0EFF               	movlw	high _LCD_LINE2_ADDR
  1568  00F3BC  6EF7               	movwf	tblptrh,c
  1569  00F3BE                     	endif
  1570  00F3BE                     	if	1	;There are 3 active tblptr bytes
  1571  00F3BE  0E00               	movlw	low (_LCD_LINE2_ADDR shr (0+16))
  1572  00F3C0  6EF8               	movwf	tblptru,c
  1573  00F3C2                     	endif
  1574  00F3C2  0008               	tblrd		*
  1575  00F3C4  50F5               	movf	tablat,w,c
  1576  00F3C6  0980               	iorlw	128
  1577  00F3C8  EC4E  F06F         	call	_lcdInst
  1578                           
  1579                           ;main.c: 99: printf("can be specified");
  1580  00F3CC  0E14               	movlw	low STR_17
  1581  00F3CE  6E40               	movwf	printf@f,c
  1582  00F3D0  0EFF               	movlw	high STR_17
  1583  00F3D2  6E41               	movwf	printf@f+1,c
  1584  00F3D4  EC42  F07B         	call	_printf	;wreg free
  1585                           
  1586                           ;main.c: 100: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1587  00F3D8  0E1A               	movlw	26
  1588  00F3DA  6E66               	movwf	(??_main+1)& (0+255),c
  1589  00F3DC  0E5E               	movlw	94
  1590  00F3DE  6E65               	movwf	??_main& (0+255),c
  1591  00F3E0  0E6E               	movlw	110
  1592  00F3E2                     u3067:
  1593  00F3E2  2EE8               	decfsz	wreg,f,c
  1594  00F3E4  D7FE               	bra	u3067
  1595  00F3E6  2E65               	decfsz	??_main& (0+255),f,c
  1596  00F3E8  D7FC               	bra	u3067
  1597  00F3EA  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1598  00F3EC  D7FA               	bra	u3067
  1599  00F3EE  D000               	nop2	
  1600                           
  1601                           ;main.c: 102: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1602  00F3F0  0E01               	movlw	1
  1603  00F3F2  EC4E  F06F         	call	_lcdInst
  1604  00F3F6  0E11               	movlw	17
  1605  00F3F8  6E65               	movwf	??_main& (0+255),c
  1606  00F3FA  0E3A               	movlw	58
  1607  00F3FC                     u3077:
  1608  00F3FC  2EE8               	decfsz	wreg,f,c
  1609  00F3FE  D7FE               	bra	u3077
  1610  00F400  2E65               	decfsz	??_main& (0+255),f,c
  1611  00F402  D7FC               	bra	u3077
  1612  00F404  D000               	nop2	
  1613                           
  1614                           ;main.c: 103: for(unsigned char x = 0; x < LCD_SIZE_HORZ; x++){
  1615  00F406  0E00               	movlw	0
  1616  00F408  6E73               	movwf	main@x,c
  1617  00F40A                     l2842:
  1618  00F40A  0E01               	movlw	low _LCD_SIZE_HORZ
  1619  00F40C  6EF6               	movwf	tblptrl,c
  1620  00F40E                     	if	1	;There is more than 1 active tblptr byte
  1621  00F40E  0EFF               	movlw	high _LCD_SIZE_HORZ
  1622  00F410  6EF7               	movwf	tblptrh,c
  1623  00F412                     	endif
  1624  00F412                     	if	1	;There are 3 active tblptr bytes
  1625  00F412  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1626  00F414  6EF8               	movwf	tblptru,c
  1627  00F416                     	endif
  1628  00F416  0009               	tblrd		*+
  1629  00F418  50F5               	movf	tablat,w,c
  1630  00F41A  5C73               	subwf	main@x,w,c
  1631  00F41C  B0D8               	btfsc	status,0,c
  1632  00F41E  D063               	goto	l2864
  1633                           
  1634                           ;main.c: 104: if(x % 2){
  1635  00F420  A073               	btfss	main@x,0,c
  1636  00F422  D031               	goto	l2852
  1637                           
  1638                           ;main.c: 105: { lcdInst(0x80 | LCD_LINE1_ADDR + LCD_SIZE_HORZ - x);};
  1639  00F424  0E01               	movlw	low _LCD_SIZE_HORZ
  1640  00F426  6EF6               	movwf	tblptrl,c
  1641  00F428                     	if	1	;There is more than 1 active tblptr byte
  1642  00F428  0EFF               	movlw	high _LCD_SIZE_HORZ
  1643  00F42A  6EF7               	movwf	tblptrh,c
  1644  00F42C                     	endif
  1645  00F42C                     	if	1	;There are 3 active tblptr bytes
  1646  00F42C  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1647  00F42E  6EF8               	movwf	tblptru,c
  1648  00F430                     	endif
  1649  00F430  0008               	tblrd		*
  1650  00F432  CFF5 F065          	movff	tablat,??_main
  1651  00F436  0E00               	movlw	low _LCD_LINE1_ADDR
  1652  00F438  6EF6               	movwf	tblptrl,c
  1653  00F43A                     	if	1	;There is more than 1 active tblptr byte
  1654  00F43A  0EFF               	movlw	high _LCD_LINE1_ADDR
  1655  00F43C  6EF7               	movwf	tblptrh,c
  1656  00F43E                     	endif
  1657  00F43E                     	if	1	;There are 3 active tblptr bytes
  1658  00F43E  0E00               	movlw	low (_LCD_LINE1_ADDR shr (0+16))
  1659  00F440  6EF8               	movwf	tblptru,c
  1660  00F442                     	endif
  1661  00F442  0008               	tblrd		*
  1662  00F444  CFF5 F066          	movff	tablat,??_main+1
  1663  00F448  5073               	movf	main@x,w,c
  1664  00F44A  0800               	sublw	0
  1665  00F44C  2466               	addwf	??_main+1,w,c
  1666  00F44E  2465               	addwf	??_main,w,c
  1667  00F450  0980               	iorlw	128
  1668  00F452  EC4E  F06F         	call	_lcdInst
  1669                           
  1670                           ;main.c: 106: printf("%d", x % 10);
  1671  00F456  C073  F001         	movff	main@x,___awmod@dividend
  1672  00F45A  6A02               	clrf	___awmod@dividend+1,c
  1673  00F45C  0E00               	movlw	0
  1674  00F45E  6E04               	movwf	___awmod@divisor+1,c
  1675  00F460  0E0A               	movlw	10
  1676  00F462  6E03               	movwf	___awmod@divisor,c
  1677  00F464  EC7F  F070         	call	___awmod	;wreg free
  1678  00F468  C001  F06E         	movff	?___awmod,_main$843
  1679  00F46C  C002  F06F         	movff	?___awmod+1,_main$843+1
  1680                           
  1681                           ;main.c: 106: printf("%d", x % 10);
  1682  00F470  0EA7               	movlw	low (STR_4+9)
  1683  00F472  6E40               	movwf	printf@f,c
  1684  00F474  0EFF               	movlw	high (STR_4+9)
  1685  00F476  6E41               	movwf	printf@f+1,c
  1686  00F478  C06E  F042         	movff	_main$843,?_printf+2
  1687  00F47C  C06F  F043         	movff	_main$843+1,?_printf+3
  1688  00F480  EC42  F07B         	call	_printf	;wreg free
  1689                           
  1690                           ;main.c: 107: }
  1691  00F484  D023               	goto	l2858
  1692  00F486                     l2852:
  1693                           
  1694                           ;main.c: 108: else{
  1695                           ;main.c: 109: { lcdInst(0x80 | LCD_LINE2_ADDR + x);};
  1696  00F486  0E02               	movlw	low _LCD_LINE2_ADDR
  1697  00F488  6EF6               	movwf	tblptrl,c
  1698  00F48A                     	if	1	;There is more than 1 active tblptr byte
  1699  00F48A  0EFF               	movlw	high _LCD_LINE2_ADDR
  1700  00F48C  6EF7               	movwf	tblptrh,c
  1701  00F48E                     	endif
  1702  00F48E                     	if	1	;There are 3 active tblptr bytes
  1703  00F48E  0E00               	movlw	low (_LCD_LINE2_ADDR shr (0+16))
  1704  00F490  6EF8               	movwf	tblptru,c
  1705  00F492                     	endif
  1706  00F492  0008               	tblrd		*
  1707  00F494  50F5               	movf	tablat,w,c
  1708  00F496  2473               	addwf	main@x,w,c
  1709  00F498  0980               	iorlw	128
  1710  00F49A  EC4E  F06F         	call	_lcdInst
  1711                           
  1712                           ;main.c: 110: printf("%d", x % 10);
  1713  00F49E  C073  F001         	movff	main@x,___awmod@dividend
  1714  00F4A2  6A02               	clrf	___awmod@dividend+1,c
  1715  00F4A4  0E00               	movlw	0
  1716  00F4A6  6E04               	movwf	___awmod@divisor+1,c
  1717  00F4A8  0E0A               	movlw	10
  1718  00F4AA  6E03               	movwf	___awmod@divisor,c
  1719  00F4AC  EC7F  F070         	call	___awmod	;wreg free
  1720  00F4B0  C001  F06E         	movff	?___awmod,_main$843
  1721  00F4B4  C002  F06F         	movff	?___awmod+1,_main$843+1
  1722                           
  1723                           ;main.c: 110: printf("%d", x % 10);
  1724  00F4B8  0EA7               	movlw	low (STR_4+9)
  1725  00F4BA  6E40               	movwf	printf@f,c
  1726  00F4BC  0EFF               	movlw	high (STR_4+9)
  1727  00F4BE  6E41               	movwf	printf@f+1,c
  1728  00F4C0  C06E  F042         	movff	_main$843,?_printf+2
  1729  00F4C4  C06F  F043         	movff	_main$843+1,?_printf+3
  1730  00F4C8  EC42  F07B         	call	_printf	;wreg free
  1731  00F4CC                     l2858:
  1732                           
  1733                           ;main.c: 111: }
  1734                           ;main.c: 112: _delay((unsigned long)((100)*(10000000/4000.0)));
  1735  00F4CC  0E02               	movlw	2
  1736  00F4CE  6E66               	movwf	(??_main+1)& (0+255),c
  1737  00F4D0  0E45               	movlw	69
  1738  00F4D2  6E65               	movwf	??_main& (0+255),c
  1739  00F4D4  0EAA               	movlw	170
  1740  00F4D6                     u3087:
  1741  00F4D6  2EE8               	decfsz	wreg,f,c
  1742  00F4D8  D7FE               	bra	u3087
  1743  00F4DA  2E65               	decfsz	??_main& (0+255),f,c
  1744  00F4DC  D7FC               	bra	u3087
  1745  00F4DE  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1746  00F4E0  D7FA               	bra	u3087
  1747  00F4E2  2A73               	incf	main@x,f,c
  1748  00F4E4  D792               	goto	l2842
  1749  00F4E6                     l2864:
  1750                           
  1751                           ;main.c: 113: }
  1752                           ;main.c: 116: { lcdInst(0x80 | LCD_LINE1_ADDR + LCD_SIZE_HORZ + 1);};
  1753  00F4E6  0E01               	movlw	low _LCD_SIZE_HORZ
  1754  00F4E8  6EF6               	movwf	tblptrl,c
  1755  00F4EA                     	if	1	;There is more than 1 active tblptr byte
  1756  00F4EA  0EFF               	movlw	high _LCD_SIZE_HORZ
  1757  00F4EC  6EF7               	movwf	tblptrh,c
  1758  00F4EE                     	endif
  1759  00F4EE                     	if	1	;There are 3 active tblptr bytes
  1760  00F4EE  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1761  00F4F0  6EF8               	movwf	tblptru,c
  1762  00F4F2                     	endif
  1763  00F4F2  0008               	tblrd		*
  1764  00F4F4  CFF5 F065          	movff	tablat,??_main
  1765  00F4F8  0E00               	movlw	low _LCD_LINE1_ADDR
  1766  00F4FA  6EF6               	movwf	tblptrl,c
  1767  00F4FC                     	if	1	;There is more than 1 active tblptr byte
  1768  00F4FC  0EFF               	movlw	high _LCD_LINE1_ADDR
  1769  00F4FE  6EF7               	movwf	tblptrh,c
  1770  00F500                     	endif
  1771  00F500                     	if	1	;There are 3 active tblptr bytes
  1772  00F500  0E00               	movlw	low (_LCD_LINE1_ADDR shr (0+16))
  1773  00F502  6EF8               	movwf	tblptru,c
  1774  00F504                     	endif
  1775  00F504  0008               	tblrd		*
  1776  00F506  50F5               	movf	tablat,w,c
  1777  00F508  2465               	addwf	??_main,w,c
  1778  00F50A  6E66               	movwf	(??_main+1)& (0+255),c
  1779  00F50C  2866               	incf	??_main+1,w,c
  1780  00F50E  0980               	iorlw	128
  1781  00F510  EC4E  F06F         	call	_lcdInst
  1782                           
  1783                           ;main.c: 117: printf("Display can be");
  1784  00F514  0E56               	movlw	low STR_20
  1785  00F516  6E40               	movwf	printf@f,c
  1786  00F518  0EFF               	movlw	high STR_20
  1787  00F51A  6E41               	movwf	printf@f+1,c
  1788  00F51C  EC42  F07B         	call	_printf	;wreg free
  1789                           
  1790                           ;main.c: 118: { lcdInst(0x80 | LCD_LINE2_ADDR + LCD_SIZE_HORZ + 4);};
  1791  00F520  0E01               	movlw	low _LCD_SIZE_HORZ
  1792  00F522  6EF6               	movwf	tblptrl,c
  1793  00F524                     	if	1	;There is more than 1 active tblptr byte
  1794  00F524  0EFF               	movlw	high _LCD_SIZE_HORZ
  1795  00F526  6EF7               	movwf	tblptrh,c
  1796  00F528                     	endif
  1797  00F528                     	if	1	;There are 3 active tblptr bytes
  1798  00F528  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1799  00F52A  6EF8               	movwf	tblptru,c
  1800  00F52C                     	endif
  1801  00F52C  0008               	tblrd		*
  1802  00F52E  CFF5 F065          	movff	tablat,??_main
  1803  00F532  0E02               	movlw	low _LCD_LINE2_ADDR
  1804  00F534  6EF6               	movwf	tblptrl,c
  1805  00F536                     	if	1	;There is more than 1 active tblptr byte
  1806  00F536  0EFF               	movlw	high _LCD_LINE2_ADDR
  1807  00F538  6EF7               	movwf	tblptrh,c
  1808  00F53A                     	endif
  1809  00F53A                     	if	1	;There are 3 active tblptr bytes
  1810  00F53A  0E00               	movlw	low (_LCD_LINE2_ADDR shr (0+16))
  1811  00F53C  6EF8               	movwf	tblptru,c
  1812  00F53E                     	endif
  1813  00F53E  0008               	tblrd		*
  1814  00F540  50F5               	movf	tablat,w,c
  1815  00F542  2465               	addwf	??_main,w,c
  1816  00F544  0F04               	addlw	4
  1817  00F546  0980               	iorlw	128
  1818  00F548  EC4E  F06F         	call	_lcdInst
  1819                           
  1820                           ;main.c: 119: printf("shifted");
  1821  00F54C  0EE7               	movlw	low STR_21
  1822  00F54E  6E40               	movwf	printf@f,c
  1823  00F550  0EFF               	movlw	high STR_21
  1824  00F552  6E41               	movwf	printf@f+1,c
  1825  00F554  EC42  F07B         	call	_printf	;wreg free
  1826                           
  1827                           ;main.c: 120: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1828  00F558  0E1A               	movlw	26
  1829  00F55A  6E66               	movwf	(??_main+1)& (0+255),c
  1830  00F55C  0E5E               	movlw	94
  1831  00F55E  6E65               	movwf	??_main& (0+255),c
  1832  00F560  0E6E               	movlw	110
  1833  00F562                     u3097:
  1834  00F562  2EE8               	decfsz	wreg,f,c
  1835  00F564  D7FE               	bra	u3097
  1836  00F566  2E65               	decfsz	??_main& (0+255),f,c
  1837  00F568  D7FC               	bra	u3097
  1838  00F56A  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1839  00F56C  D7FA               	bra	u3097
  1840  00F56E  D000               	nop2	
  1841                           
  1842                           ;main.c: 122: for(unsigned char i = 0; i < LCD_SIZE_HORZ; i++){
  1843  00F570  0E00               	movlw	0
  1844  00F572  6E70               	movwf	main@i,c
  1845  00F574                     l2874:
  1846  00F574  0E01               	movlw	low _LCD_SIZE_HORZ
  1847  00F576  6EF6               	movwf	tblptrl,c
  1848  00F578                     	if	1	;There is more than 1 active tblptr byte
  1849  00F578  0EFF               	movlw	high _LCD_SIZE_HORZ
  1850  00F57A  6EF7               	movwf	tblptrh,c
  1851  00F57C                     	endif
  1852  00F57C                     	if	1	;There are 3 active tblptr bytes
  1853  00F57C  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1854  00F57E  6EF8               	movwf	tblptru,c
  1855  00F580                     	endif
  1856  00F580  0009               	tblrd		*+
  1857  00F582  50F5               	movf	tablat,w,c
  1858  00F584  5C70               	subwf	main@i,w,c
  1859  00F586  B0D8               	btfsc	status,0,c
  1860  00F588  D013               	goto	l2886
  1861                           
  1862                           ;main.c: 123: lcd_shift_display(1, LCD_SHIFT_LEFT);
  1863  00F58A  0E00               	movlw	0
  1864  00F58C  6E05               	movwf	lcd_shift_display@direction,c
  1865  00F58E  0E01               	movlw	1
  1866  00F590  EC6E  F06F         	call	_lcd_shift_display
  1867                           
  1868                           ;main.c: 124: _delay((unsigned long)((150)*(10000000/4000.0)));
  1869  00F594  0E02               	movlw	2
  1870  00F596  6E66               	movwf	(??_main+1)& (0+255),c
  1871  00F598  0EE7               	movlw	231
  1872  00F59A  6E65               	movwf	??_main& (0+255),c
  1873  00F59C  0E00               	movlw	0
  1874  00F59E                     u3107:
  1875  00F59E  2EE8               	decfsz	wreg,f,c
  1876  00F5A0  D7FE               	bra	u3107
  1877  00F5A2  2E65               	decfsz	??_main& (0+255),f,c
  1878  00F5A4  D7FC               	bra	u3107
  1879  00F5A6  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1880  00F5A8  D7FA               	bra	u3107
  1881  00F5AA  D000               	nop2	
  1882  00F5AC  2A70               	incf	main@i,f,c
  1883  00F5AE  D7E2               	goto	l2874
  1884  00F5B0                     l2886:
  1885                           
  1886                           ;main.c: 125: }
  1887                           ;main.c: 126: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1888  00F5B0  0E1A               	movlw	26
  1889  00F5B2  6E66               	movwf	(??_main+1)& (0+255),c
  1890  00F5B4  0E5E               	movlw	94
  1891  00F5B6  6E65               	movwf	??_main& (0+255),c
  1892  00F5B8  0E6E               	movlw	110
  1893  00F5BA                     u3117:
  1894  00F5BA  2EE8               	decfsz	wreg,f,c
  1895  00F5BC  D7FE               	bra	u3117
  1896  00F5BE  2E65               	decfsz	??_main& (0+255),f,c
  1897  00F5C0  D7FC               	bra	u3117
  1898  00F5C2  2E66               	decfsz	(??_main+1)& (0+255),f,c
  1899  00F5C4  D7FA               	bra	u3117
  1900  00F5C6  D000               	nop2	
  1901                           
  1902                           ;main.c: 129: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1903  00F5C8  0E02               	movlw	low _LCD_LINE2_ADDR
  1904  00F5CA  6EF6               	movwf	tblptrl,c
  1905  00F5CC                     	if	1	;There is more than 1 active tblptr byte
  1906  00F5CC  0EFF               	movlw	high _LCD_LINE2_ADDR
  1907  00F5CE  6EF7               	movwf	tblptrh,c
  1908  00F5D0                     	endif
  1909  00F5D0                     	if	1	;There are 3 active tblptr bytes
  1910  00F5D0  0E00               	movlw	low (_LCD_LINE2_ADDR shr (0+16))
  1911  00F5D2  6EF8               	movwf	tblptru,c
  1912  00F5D4                     	endif
  1913  00F5D4  0008               	tblrd		*
  1914  00F5D6  50F5               	movf	tablat,w,c
  1915  00F5D8  0980               	iorlw	128
  1916  00F5DA  EC4E  F06F         	call	_lcdInst
  1917                           
  1918                           ;main.c: 130: for(unsigned char i = 0; i < LCD_SIZE_HORZ; i++){
  1919  00F5DE  0E00               	movlw	0
  1920  00F5E0  6E71               	movwf	main@i_90,c
  1921  00F5E2                     l2892:
  1922  00F5E2  0E01               	movlw	low _LCD_SIZE_HORZ
  1923  00F5E4  6EF6               	movwf	tblptrl,c
  1924  00F5E6                     	if	1	;There is more than 1 active tblptr byte
  1925  00F5E6  0EFF               	movlw	high _LCD_SIZE_HORZ
  1926  00F5E8  6EF7               	movwf	tblptrh,c
  1927  00F5EA                     	endif
  1928  00F5EA                     	if	1	;There are 3 active tblptr bytes
  1929  00F5EA  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1930  00F5EC  6EF8               	movwf	tblptru,c
  1931  00F5EE                     	endif
  1932  00F5EE  0009               	tblrd		*+
  1933  00F5F0  50F5               	movf	tablat,w,c
  1934  00F5F2  5C71               	subwf	main@i_90,w,c
  1935  00F5F4  B0D8               	btfsc	status,0,c
  1936  00F5F6  D005               	goto	l2902
  1937                           
  1938                           ;main.c: 131: putch(' ');
  1939  00F5F8  0E20               	movlw	32
  1940  00F5FA  EC54  F06F         	call	_putch
  1941  00F5FE  2A71               	incf	main@i_90,f,c
  1942  00F600  D7F0               	goto	l2892
  1943  00F602                     l2902:
  1944                           
  1945                           ;main.c: 132: }
  1946                           ;main.c: 136: { lcdInst(0x80 | LCD_LINE1_ADDR);};
  1947  00F602  0E00               	movlw	low _LCD_LINE1_ADDR
  1948  00F604  6EF6               	movwf	tblptrl,c
  1949  00F606                     	if	1	;There is more than 1 active tblptr byte
  1950  00F606  0EFF               	movlw	high _LCD_LINE1_ADDR
  1951  00F608  6EF7               	movwf	tblptrh,c
  1952  00F60A                     	endif
  1953  00F60A                     	if	1	;There are 3 active tblptr bytes
  1954  00F60A  0E00               	movlw	low (_LCD_LINE1_ADDR shr (0+16))
  1955  00F60C  6EF8               	movwf	tblptru,c
  1956  00F60E                     	endif
  1957  00F60E  0008               	tblrd		*
  1958  00F610  50F5               	movf	tablat,w,c
  1959  00F612  0980               	iorlw	128
  1960  00F614  EC4E  F06F         	call	_lcdInst
  1961                           
  1962                           ;main.c: 137: printf("Hello world!    ");
  1963  00F618  0E03               	movlw	low STR_22
  1964  00F61A  6E40               	movwf	printf@f,c
  1965  00F61C  0EFF               	movlw	high STR_22
  1966  00F61E  6E41               	movwf	printf@f+1,c
  1967  00F620  EC42  F07B         	call	_printf	;wreg free
  1968                           
  1969                           ;main.c: 138: for(unsigned char i = 0; i < LCD_SIZE_HORZ; i++){
  1970  00F624  0E00               	movlw	0
  1971  00F626  6E72               	movwf	main@i_92,c
  1972  00F628                     l2908:
  1973  00F628  0E01               	movlw	low _LCD_SIZE_HORZ
  1974  00F62A  6EF6               	movwf	tblptrl,c
  1975  00F62C                     	if	1	;There is more than 1 active tblptr byte
  1976  00F62C  0EFF               	movlw	high _LCD_SIZE_HORZ
  1977  00F62E  6EF7               	movwf	tblptrh,c
  1978  00F630                     	endif
  1979  00F630                     	if	1	;There are 3 active tblptr bytes
  1980  00F630  0E00               	movlw	low (_LCD_SIZE_HORZ shr (0+16))
  1981  00F632  6EF8               	movwf	tblptru,c
  1982  00F634                     	endif
  1983  00F634  0009               	tblrd		*+
  1984  00F636  50F5               	movf	tablat,w,c
  1985  00F638  5C72               	subwf	main@i_92,w,c
  1986  00F63A  B0D8               	btfsc	status,0,c
  1987  00F63C  D013               	goto	l2920
  1988                           
  1989                           ;main.c: 139: lcd_shift_display(1, LCD_SHIFT_RIGHT);
  1990  00F63E  0E01               	movlw	1
  1991  00F640  6E05               	movwf	lcd_shift_display@direction,c
  1992  00F642  0E01               	movlw	1
  1993  00F644  EC6E  F06F         	call	_lcd_shift_display
  1994                           
  1995                           ;main.c: 140: _delay((unsigned long)((150)*(10000000/4000.0)));
  1996  00F648  0E02               	movlw	2
  1997  00F64A  6E66               	movwf	(??_main+1)& (0+255),c
  1998  00F64C  0EE7               	movlw	231
  1999  00F64E  6E65               	movwf	??_main& (0+255),c
  2000  00F650  0E00               	movlw	0
  2001  00F652                     u3127:
  2002  00F652  2EE8               	decfsz	wreg,f,c
  2003  00F654  D7FE               	bra	u3127
  2004  00F656  2E65               	decfsz	??_main& (0+255),f,c
  2005  00F658  D7FC               	bra	u3127
  2006  00F65A  2E66               	decfsz	(??_main+1)& (0+255),f,c
  2007  00F65C  D7FA               	bra	u3127
  2008  00F65E  D000               	nop2	
  2009  00F660  2A72               	incf	main@i_92,f,c
  2010  00F662  D7E2               	goto	l2908
  2011  00F664                     l2920:
  2012                           
  2013                           ;main.c: 141: }
  2014                           ;main.c: 142: { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  2015  00F664  0E0F               	movlw	15
  2016  00F666  EC4E  F06F         	call	_lcdInst
  2017                           
  2018                           ;main.c: 143: _delay((unsigned long)((2000)*(10000000/4000.0)));
  2019  00F66A  0E1A               	movlw	26
  2020  00F66C  6E66               	movwf	(??_main+1)& (0+255),c
  2021  00F66E  0E5E               	movlw	94
  2022  00F670  6E65               	movwf	??_main& (0+255),c
  2023  00F672  0E6E               	movlw	110
  2024  00F674                     u3137:
  2025  00F674  2EE8               	decfsz	wreg,f,c
  2026  00F676  D7FE               	bra	u3137
  2027  00F678  2E65               	decfsz	??_main& (0+255),f,c
  2028  00F67A  D7FC               	bra	u3137
  2029  00F67C  2E66               	decfsz	(??_main+1)& (0+255),f,c
  2030  00F67E  D7FA               	bra	u3137
  2031  00F680                     L1:
  2032  00F680  D000               	nop2	
  2033  00F682  D4F7               	goto	l2724
  2034  00F684                     __end_of_main:
  2035                           	opt stack 0
  2036                           tblptru	equ	0xFF8
  2037                           tblptrh	equ	0xFF7
  2038                           tblptrl	equ	0xFF6
  2039                           tablat	equ	0xFF5
  2040                           postinc0	equ	0xFEE
  2041                           wreg	equ	0xFE8
  2042                           postdec1	equ	0xFE5
  2043                           plusw1	equ	0xFE3
  2044                           fsr1l	equ	0xFE1
  2045                           plusw2	equ	0xFDB
  2046                           status	equ	0xFD8
  2047                           
  2048 ;; *************** function _printf *****************
  2049 ;; Defined at:
  2050 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;  f               2   63[COMRAM] PTR const unsigned char 
  2053 ;;		 -> STR_22(17), STR_21(8), STR_20(15), STR_19(3), 
  2054 ;;		 -> STR_18(3), STR_17(17), STR_16(16), STR_15(16), 
  2055 ;;		 -> STR_14(14), STR_13(8), STR_12(11), STR_11(8), 
  2056 ;;		 -> STR_10(11), STR_9(11), STR_8(17), STR_7(11), 
  2057 ;;		 -> STR_6(10), STR_5(10), STR_4(12), STR_3(15), 
  2058 ;;		 -> STR_2(15), STR_1(13), 
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  tmpval          4   92[COMRAM] struct .
  2061 ;;  val             4   88[COMRAM] unsigned long 
  2062 ;;  fval            3   96[COMRAM] unsigned long 
  2063 ;;  exp             2   86[COMRAM] int 
  2064 ;;  prec            2   84[COMRAM] int 
  2065 ;;  ap              2   82[COMRAM] PTR void [1]
  2066 ;;		 -> ?_printf(2), 
  2067 ;;  flag            2   80[COMRAM] unsigned short 
  2068 ;;  cp              2   78[COMRAM] PTR const unsigned char 
  2069 ;;		 -> STR_23(7), main@arr(7), 
  2070 ;;  len             2    0        unsigned int 
  2071 ;;  width           2    0        int 
  2072 ;;  c               1   99[COMRAM] char 
  2073 ;;  d               1    0        unsigned char 
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  2   63[COMRAM] int 
  2076 ;; Registers used:
  2077 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2083 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;Total ram usage:       37 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:    4
  2090 ;; This function calls:
  2091 ;;		___awdiv
  2092 ;;		___ftadd
  2093 ;;		___ftge
  2094 ;;		___ftmul
  2095 ;;		___ftneg
  2096 ;;		___ftsub
  2097 ;;		___fttol
  2098 ;;		___lldiv
  2099 ;;		___llmod
  2100 ;;		___lltoft
  2101 ;;		___wmul
  2102 ;;		__div_to_l_
  2103 ;;		__tdiv_to_l_
  2104 ;;		_fround
  2105 ;;		_putch
  2106 ;;		_scale
  2107 ;; This function is called by:
  2108 ;;		_main
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           	psect	text1
  2113  00F684                     __ptext1:
  2114                           	opt stack 0
  2115  00F684                     _printf:
  2116                           	opt stack 26
  2117                           
  2118                           ;doprnt.c: 466: va_list ap;
  2119                           ;doprnt.c: 499: signed char c;
  2120                           ;doprnt.c: 501: int width;
  2121                           ;doprnt.c: 504: int prec;
  2122                           ;doprnt.c: 508: unsigned short flag;
  2123                           ;doprnt.c: 515: char d;
  2124                           ;doprnt.c: 516: double fval;
  2125                           ;doprnt.c: 517: int exp;
  2126                           ;doprnt.c: 523: union {
  2127                           ;doprnt.c: 524: unsigned long vd;
  2128                           ;doprnt.c: 525: double integ;
  2129                           ;doprnt.c: 526: } tmpval;
  2130                           ;doprnt.c: 528: unsigned long val;
  2131                           ;doprnt.c: 529: unsigned len;
  2132                           ;doprnt.c: 530: const char * cp;
  2133                           ;doprnt.c: 533: *ap = __va_start();
  2134                           
  2135                           ;incstack = 0
  2136  00F684  0E42               	movlw	low (?_printf+2)
  2137  00F686  6E53               	movwf	printf@ap,c
  2138  00F688  0E00               	movlw	high (?_printf+2)
  2139  00F68A  6E54               	movwf	printf@ap+1,c
  2140                           
  2141                           ;doprnt.c: 536: while(c = *f++) {
  2142  00F68C  D3EE               	goto	l2702
  2143  00F68E                     l2490:
  2144                           
  2145                           ;doprnt.c: 538: if(c != '%')
  2146  00F68E  0E25               	movlw	37
  2147  00F690  1864               	xorwf	printf@c,w,c
  2148  00F692  B4D8               	btfsc	status,2,c
  2149  00F694  D004               	goto	l2494
  2150                           
  2151                           ;doprnt.c: 540: {
  2152                           ;doprnt.c: 541: (putch(c) );
  2153  00F696  5064               	movf	printf@c,w,c
  2154  00F698  EC54  F06F         	call	_putch
  2155                           
  2156                           ;doprnt.c: 542: continue;
  2157  00F69C  D3E6               	goto	l2702
  2158  00F69E                     l2494:
  2159                           
  2160                           ;doprnt.c: 543: }
  2161                           ;doprnt.c: 548: flag = 0;
  2162  00F69E  0E00               	movlw	0
  2163  00F6A0  6E52               	movwf	printf@flag+1,c
  2164  00F6A2  0E00               	movlw	0
  2165  00F6A4  6E51               	movwf	printf@flag,c
  2166                           
  2167                           ;doprnt.c: 635: switch(c = *f++) {
  2168                           
  2169                           ;doprnt.c: 633: loop:
  2170  00F6A6  D045               	goto	l2518
  2171  00F6A8                     l2496:
  2172                           
  2173                           ;doprnt.c: 643: flag |= 0x10;
  2174  00F6A8  8851               	bsf	printf@flag,4,c
  2175                           
  2176                           ;doprnt.c: 644: goto loop;
  2177  00F6AA  D043               	goto	l2518
  2178  00F6AC                     l2498:
  2179                           
  2180                           ;doprnt.c: 663: flag |= 0x400;
  2181  00F6AC  8452               	bsf	printf@flag+1,2,c
  2182                           
  2183                           ;doprnt.c: 698: case 'i':
  2184                           ;doprnt.c: 699: break;
  2185                           
  2186                           ;doprnt.c: 697: case 'd':
  2187                           
  2188                           ;doprnt.c: 664: break;
  2189  00F6AE  D062               	goto	l2520
  2190  00F6B0                     l2500:
  2191                           
  2192                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2193  00F6B0  C053  FFD9         	movff	printf@ap,fsr2l
  2194  00F6B4  C054  FFDA         	movff	printf@ap+1,fsr2h
  2195  00F6B8  CFDE F04F          	movff	postinc2,printf@cp
  2196  00F6BC  CFDD F050          	movff	postdec2,printf@cp+1
  2197  00F6C0  0E02               	movlw	2
  2198  00F6C2  2653               	addwf	printf@ap,f,c
  2199  00F6C4  0E00               	movlw	0
  2200  00F6C6  2254               	addwfc	printf@ap+1,f,c
  2201                           
  2202                           ;doprnt.c: 740: if(!cp)
  2203  00F6C8  504F               	movf	printf@cp,w,c
  2204  00F6CA  1050               	iorwf	printf@cp+1,w,c
  2205  00F6CC  A4D8               	btfss	status,2,c
  2206  00F6CE  D01A               	goto	l2512
  2207                           
  2208                           ;doprnt.c: 741: cp = "(null)";
  2209  00F6D0  0EF7               	movlw	low STR_23
  2210  00F6D2  6E4F               	movwf	printf@cp,c
  2211  00F6D4  0EFF               	movlw	high STR_23
  2212  00F6D6  6E50               	movwf	printf@cp+1,c
  2213                           
  2214                           ;doprnt.c: 777: while(*cp)
  2215  00F6D8  D015               	goto	l2512
  2216  00F6DA                     l2508:
  2217                           
  2218                           ;doprnt.c: 778: (putch(*cp++) );
  2219  00F6DA  C04F  FFF6         	movff	printf@cp,tblptrl
  2220  00F6DE  C050  FFF7         	movff	printf@cp+1,tblptrh
  2221  00F6E2  0E00               	movlw	low (__mediumconst shr (0+16))
  2222  00F6E4  6EF8               	movwf	tblptru,c
  2223  00F6E6  0E0F               	movlw	(high __ramtop+-1)
  2224  00F6E8  64F7               	cpfsgt	tblptrh,c
  2225  00F6EA  D003               	bra	u2377
  2226  00F6EC  0008               	tblrd		*
  2227  00F6EE  50F5               	movf	tablat,w,c
  2228  00F6F0  D005               	bra	u2370
  2229  00F6F2                     u2377:
  2230  00F6F2  CFF6 FFE9          	movff	tblptrl,fsr0l
  2231  00F6F6  CFF7 FFEA          	movff	tblptrh,fsr0h
  2232  00F6FA  50EF               	movf	indf0,w,c
  2233  00F6FC                     u2370:
  2234  00F6FC  EC54  F06F         	call	_putch
  2235  00F700  4A4F               	infsnz	printf@cp,f,c
  2236  00F702  2A50               	incf	printf@cp+1,f,c
  2237  00F704                     l2512:
  2238  00F704  C04F  FFF6         	movff	printf@cp,tblptrl
  2239  00F708  C050  FFF7         	movff	printf@cp+1,tblptrh
  2240  00F70C  0E00               	movlw	low (__mediumconst shr (0+16))
  2241  00F70E  6EF8               	movwf	tblptru,c
  2242  00F710  0E0F               	movlw	(high __ramtop+-1)
  2243  00F712  64F7               	cpfsgt	tblptrh,c
  2244  00F714  D003               	bra	u2387
  2245  00F716  0008               	tblrd		*
  2246  00F718  50F5               	movf	tablat,w,c
  2247  00F71A  D005               	bra	u2380
  2248  00F71C                     u2387:
  2249  00F71C  CFF6 FFE9          	movff	tblptrl,fsr0l
  2250  00F720  CFF7 FFEA          	movff	tblptrh,fsr0h
  2251  00F724  50EF               	movf	indf0,w,c
  2252  00F726                     u2380:
  2253  00F726  0900               	iorlw	0
  2254  00F728  B4D8               	btfsc	status,2,c
  2255  00F72A  D39F               	goto	l2702
  2256  00F72C  D7D6               	goto	l2508
  2257  00F72E                     l2514:
  2258                           
  2259                           ;doprnt.c: 818: flag |= 0x40;
  2260  00F72E  8C51               	bsf	printf@flag,6,c
  2261                           
  2262                           ;doprnt.c: 822: }
  2263                           
  2264                           ;doprnt.c: 819: break;
  2265  00F730  D021               	goto	l2520
  2266  00F732                     l2518:
  2267  00F732  C040  FFF6         	movff	printf@f,tblptrl
  2268  00F736  C041  FFF7         	movff	printf@f+1,tblptrh
  2269  00F73A  4A40               	infsnz	printf@f,f,c
  2270  00F73C  2A41               	incf	printf@f+1,f,c
  2271  00F73E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2272  00F73E  6AF8               	clrf	tblptru,c
  2273  00F740                     	endif
  2274  00F740                     	if	0	;tblptru may be non-zero
  2275  00F740                     	endif
  2276  00F740  0008               	tblrd		*
  2277  00F742  CFF5 F064          	movff	tablat,printf@c
  2278  00F746  5064               	movf	printf@c,w,c
  2279                           
  2280                           ; Switch size 1, requested type "space"
  2281                           ; Number of cases is 7, Range of values is 0 to 117
  2282                           ; switch strategies available:
  2283                           ; Name         Instructions Cycles
  2284                           ; simple_byte           22    12 (average)
  2285                           ;	Chosen strategy is simple_byte
  2286  00F748  0A00               	xorlw	0	; case 0
  2287  00F74A  B4D8               	btfsc	status,2,c
  2288  00F74C  0012               	return	
  2289  00F74E  0A64               	xorlw	100	; case 100
  2290  00F750  B4D8               	btfsc	status,2,c
  2291  00F752  D010               	goto	l2520
  2292  00F754  0A02               	xorlw	2	; case 102
  2293  00F756  B4D8               	btfsc	status,2,c
  2294  00F758  D7A9               	goto	l2498
  2295  00F75A  0A0F               	xorlw	15	; case 105
  2296  00F75C  B4D8               	btfsc	status,2,c
  2297  00F75E  D00A               	goto	l2520
  2298  00F760  0A05               	xorlw	5	; case 108
  2299  00F762  B4D8               	btfsc	status,2,c
  2300  00F764  D7A1               	goto	l2496
  2301  00F766  0A1F               	xorlw	31	; case 115
  2302  00F768  B4D8               	btfsc	status,2,c
  2303  00F76A  D7A2               	goto	l2500
  2304  00F76C  0A06               	xorlw	6	; case 117
  2305  00F76E  B4D8               	btfsc	status,2,c
  2306  00F770  D7DE               	goto	l2514
  2307  00F772  D37B               	goto	l2702
  2308  00F774                     l2520:
  2309                           
  2310                           ;doprnt.c: 825: if(flag & (0x700)) {
  2311  00F774  0E07               	movlw	7
  2312  00F776  1452               	andwf	printf@flag+1,w,c
  2313  00F778  B4D8               	btfsc	status,2,c
  2314  00F77A  D2A8               	goto	l144
  2315                           
  2316                           ;doprnt.c: 829: prec = 6;
  2317  00F77C  0E00               	movlw	0
  2318  00F77E  6E56               	movwf	printf@prec+1,c
  2319  00F780  0E06               	movlw	6
  2320  00F782  6E55               	movwf	printf@prec,c
  2321                           
  2322                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2323  00F784  C053  FFD9         	movff	printf@ap,fsr2l
  2324  00F788  C054  FFDA         	movff	printf@ap+1,fsr2h
  2325  00F78C  CFDE F061          	movff	postinc2,printf@fval
  2326  00F790  CFDE F062          	movff	postinc2,printf@fval+1
  2327  00F794  CFDD F063          	movff	postdec2,printf@fval+2
  2328  00F798  0E03               	movlw	3
  2329  00F79A  2653               	addwf	printf@ap,f,c
  2330  00F79C  0E00               	movlw	0
  2331  00F79E  2254               	addwfc	printf@ap+1,f,c
  2332                           
  2333                           ;doprnt.c: 831: if(fval < 0.0) {
  2334  00F7A0  AE63               	btfss	printf@fval+2,7,c
  2335  00F7A2  D010               	goto	l2534
  2336                           
  2337                           ;doprnt.c: 832: fval = -fval;
  2338  00F7A4  C061  F001         	movff	printf@fval,___ftneg@f1
  2339  00F7A8  C062  F002         	movff	printf@fval+1,___ftneg@f1+1
  2340  00F7AC  C063  F003         	movff	printf@fval+2,___ftneg@f1+2
  2341  00F7B0  EC7C  F06F         	call	___ftneg	;wreg free
  2342  00F7B4  C001  F061         	movff	?___ftneg,printf@fval
  2343  00F7B8  C002  F062         	movff	?___ftneg+1,printf@fval+1
  2344  00F7BC  C003  F063         	movff	?___ftneg+2,printf@fval+2
  2345                           
  2346                           ;doprnt.c: 833: flag |= 0x03;
  2347  00F7C0  0E03               	movlw	3
  2348  00F7C2  1251               	iorwf	printf@flag,f,c
  2349  00F7C4                     l2534:
  2350                           
  2351                           ;doprnt.c: 834: }
  2352                           ;doprnt.c: 835: exp = 0;
  2353  00F7C4  0E00               	movlw	0
  2354  00F7C6  6E58               	movwf	printf@exp+1,c
  2355  00F7C8  0E00               	movlw	0
  2356  00F7CA  6E57               	movwf	printf@exp,c
  2357                           
  2358                           ;doprnt.c: 836: if( fval!=0) {
  2359  00F7CC  5061               	movf	printf@fval,w,c
  2360  00F7CE  1062               	iorwf	printf@fval+1,w,c
  2361  00F7D0  1063               	iorwf	printf@fval+2,w,c
  2362  00F7D2  B4D8               	btfsc	status,2,c
  2363  00F7D4  D083               	goto	l2562
  2364                           
  2365                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2366  00F7D6  0E82               	movlw	130
  2367  00F7D8  6E46               	movwf	??_printf& (0+255),c
  2368  00F7DA  0EFF               	movlw	255
  2369  00F7DC  6E47               	movwf	(??_printf+1)& (0+255),c
  2370  00F7DE  C061  F048         	movff	printf@fval,??_printf+2
  2371  00F7E2  C062  F049         	movff	printf@fval+1,??_printf+3
  2372  00F7E6  C063  F04A         	movff	printf@fval+2,??_printf+4
  2373  00F7EA  C064  F04B         	movff	printf@fval+3,??_printf+5
  2374  00F7EE  0E10               	movlw	16
  2375  00F7F0  D005               	goto	u2430
  2376  00F7F2                     u2435:
  2377  00F7F2  90D8               	bcf	status,0,c
  2378  00F7F4  324B               	rrcf	??_printf+5,f,c
  2379  00F7F6  324A               	rrcf	??_printf+4,f,c
  2380  00F7F8  3249               	rrcf	??_printf+3,f,c
  2381  00F7FA  3248               	rrcf	??_printf+2,f,c
  2382  00F7FC                     u2430:
  2383  00F7FC  2EE8               	decfsz	wreg,f,c
  2384  00F7FE  D7F9               	goto	u2435
  2385  00F800  5048               	movf	??_printf+2,w,c
  2386  00F802  2446               	addwf	??_printf,w,c
  2387  00F804  6E57               	movwf	printf@exp,c
  2388  00F806  0E00               	movlw	0
  2389  00F808  2047               	addwfc	??_printf+1,w,c
  2390  00F80A  6E58               	movwf	printf@exp+1,c
  2391                           
  2392                           ;doprnt.c: 838: exp--;
  2393  00F80C  0657               	decf	printf@exp,f,c
  2394  00F80E  A0D8               	btfss	status,0,c
  2395  00F810  0658               	decf	printf@exp+1,f,c
  2396                           
  2397                           ;doprnt.c: 839: exp *= 3;
  2398  00F812  C057  F00F         	movff	printf@exp,___wmul@multiplier
  2399  00F816  C058  F010         	movff	printf@exp+1,___wmul@multiplier+1
  2400  00F81A  0E00               	movlw	0
  2401  00F81C  6E12               	movwf	___wmul@multiplicand+1,c
  2402  00F81E  0E03               	movlw	3
  2403  00F820  6E11               	movwf	___wmul@multiplicand,c
  2404  00F822  EC8E  F06F         	call	___wmul	;wreg free
  2405  00F826  C00F  F057         	movff	?___wmul,printf@exp
  2406  00F82A  C010  F058         	movff	?___wmul+1,printf@exp+1
  2407                           
  2408                           ;doprnt.c: 840: exp /= 10;
  2409  00F82E  C057  F007         	movff	printf@exp,___awdiv@dividend
  2410  00F832  C058  F008         	movff	printf@exp+1,___awdiv@dividend+1
  2411  00F836  0E00               	movlw	0
  2412  00F838  6E0A               	movwf	___awdiv@divisor+1,c
  2413  00F83A  0E0A               	movlw	10
  2414  00F83C  6E09               	movwf	___awdiv@divisor,c
  2415  00F83E  ECF8  F070         	call	___awdiv	;wreg free
  2416  00F842  C007  F057         	movff	?___awdiv,printf@exp
  2417  00F846  C008  F058         	movff	?___awdiv+1,printf@exp+1
  2418                           
  2419                           ;doprnt.c: 841: if(exp < 0)
  2420  00F84A  AE58               	btfss	printf@exp+1,7,c
  2421  00F84C  D003               	goto	l2550
  2422                           
  2423                           ;doprnt.c: 842: exp--;
  2424  00F84E  0657               	decf	printf@exp,f,c
  2425  00F850  A0D8               	btfss	status,0,c
  2426  00F852  0658               	decf	printf@exp+1,f,c
  2427  00F854                     l2550:
  2428                           
  2429                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2430  00F854  5057               	movf	printf@exp,w,c
  2431  00F856  0800               	sublw	0
  2432  00F858  EC05  F076         	call	_scale
  2433  00F85C  C024  F05D         	movff	?_scale,printf@tmpval
  2434  00F860  C025  F05E         	movff	?_scale+1,printf@tmpval+1
  2435  00F864  C026  F05F         	movff	?_scale+2,printf@tmpval+2
  2436                           
  2437                           ;doprnt.c: 847: tmpval.integ *= fval;
  2438  00F868  C05D  F015         	movff	printf@tmpval,___ftmul@f1
  2439  00F86C  C05E  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  2440  00F870  C05F  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  2441  00F874  C061  F018         	movff	printf@fval,___ftmul@f2
  2442  00F878  C062  F019         	movff	printf@fval+1,___ftmul@f2+1
  2443  00F87C  C063  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2444  00F880  EC53  F072         	call	___ftmul	;wreg free
  2445  00F884  C015  F05D         	movff	?___ftmul,printf@tmpval
  2446  00F888  C016  F05E         	movff	?___ftmul+1,printf@tmpval+1
  2447  00F88C  C017  F05F         	movff	?___ftmul+2,printf@tmpval+2
  2448                           
  2449                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2450  00F890  C05D  F001         	movff	printf@tmpval,___ftge@ff1
  2451  00F894  C05E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2452  00F898  C05F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2453  00F89C  0E00               	movlw	0
  2454  00F89E  6E04               	movwf	___ftge@ff2,c
  2455  00F8A0  0E80               	movlw	128
  2456  00F8A2  6E05               	movwf	___ftge@ff2+1,c
  2457  00F8A4  0E3F               	movlw	63
  2458  00F8A6  6E06               	movwf	___ftge@ff2+2,c
  2459  00F8A8  EC3A  F071         	call	___ftge	;wreg free
  2460  00F8AC  B0D8               	btfsc	status,0,c
  2461  00F8AE  D004               	goto	l2558
  2462                           
  2463                           ;doprnt.c: 849: exp--;
  2464  00F8B0  0657               	decf	printf@exp,f,c
  2465  00F8B2  A0D8               	btfss	status,0,c
  2466  00F8B4  0658               	decf	printf@exp+1,f,c
  2467  00F8B6  D012               	goto	l2562
  2468  00F8B8                     l2558:
  2469                           
  2470                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2471  00F8B8  C05D  F001         	movff	printf@tmpval,___ftge@ff1
  2472  00F8BC  C05E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2473  00F8C0  C05F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2474  00F8C4  0E00               	movlw	0
  2475  00F8C6  6E04               	movwf	___ftge@ff2,c
  2476  00F8C8  0E20               	movlw	32
  2477  00F8CA  6E05               	movwf	___ftge@ff2+1,c
  2478  00F8CC  0E41               	movlw	65
  2479  00F8CE  6E06               	movwf	___ftge@ff2+2,c
  2480  00F8D0  EC3A  F071         	call	___ftge	;wreg free
  2481  00F8D4  A0D8               	btfss	status,0,c
  2482  00F8D6  D002               	goto	l2562
  2483                           
  2484                           ;doprnt.c: 851: exp++;
  2485  00F8D8  4A57               	infsnz	printf@exp,f,c
  2486  00F8DA  2A58               	incf	printf@exp+1,f,c
  2487  00F8DC                     l2562:
  2488                           
  2489                           ;doprnt.c: 852: }
  2490                           ;doprnt.c: 1112: if(prec <= 12)
  2491  00F8DC  BE56               	btfsc	printf@prec+1,7,c
  2492  00F8DE  D006               	goto	l2564
  2493  00F8E0  5056               	movf	printf@prec+1,w,c
  2494  00F8E2  E11B               	bnz	l2566
  2495  00F8E4  0E0D               	movlw	13
  2496  00F8E6  5C55               	subwf	printf@prec,w,c
  2497  00F8E8  B0D8               	btfsc	status,0,c
  2498  00F8EA  D017               	goto	l2566
  2499  00F8EC                     l2564:
  2500                           
  2501                           ;doprnt.c: 1113: fval += fround(prec);
  2502  00F8EC  C061  F02E         	movff	printf@fval,___ftadd@f1
  2503  00F8F0  C062  F02F         	movff	printf@fval+1,___ftadd@f1+1
  2504  00F8F4  C063  F030         	movff	printf@fval+2,___ftadd@f1+2
  2505  00F8F8  5055               	movf	printf@prec,w,c
  2506  00F8FA  ECD0  F074         	call	_fround
  2507  00F8FE  C024  F031         	movff	?_fround,___ftadd@f2
  2508  00F902  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  2509  00F906  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  2510  00F90A  ECFA  F073         	call	___ftadd	;wreg free
  2511  00F90E  C02E  F061         	movff	?___ftadd,printf@fval
  2512  00F912  C02F  F062         	movff	?___ftadd+1,printf@fval+1
  2513  00F916  C030  F063         	movff	?___ftadd+2,printf@fval+2
  2514  00F91A                     l2566:
  2515                           
  2516                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2517  00F91A  BE58               	btfsc	printf@exp+1,7,c
  2518  00F91C  D006               	goto	l2568
  2519  00F91E  5058               	movf	printf@exp+1,w,c
  2520  00F920  E11E               	bnz	l2574
  2521  00F922  0E0A               	movlw	10
  2522  00F924  5C57               	subwf	printf@exp,w,c
  2523  00F926  B0D8               	btfsc	status,0,c
  2524  00F928  D01A               	goto	l2574
  2525  00F92A                     l2568:
  2526  00F92A  5061               	movf	printf@fval,w,c
  2527  00F92C  1062               	iorwf	printf@fval+1,w,c
  2528  00F92E  1063               	iorwf	printf@fval+2,w,c
  2529  00F930  B4D8               	btfsc	status,2,c
  2530  00F932  D051               	goto	l2588
  2531  00F934  C061  F02B         	movff	printf@fval,___fttol@f1
  2532  00F938  C062  F02C         	movff	printf@fval+1,___fttol@f1+1
  2533  00F93C  C063  F02D         	movff	printf@fval+2,___fttol@f1+2
  2534  00F940  ECD9  F071         	call	___fttol	;wreg free
  2535  00F944  502B               	movf	?___fttol,w,c
  2536  00F946  102C               	iorwf	?___fttol+1,w,c
  2537  00F948  102D               	iorwf	?___fttol+2,w,c
  2538  00F94A  102E               	iorwf	?___fttol+3,w,c
  2539  00F94C  B4D8               	btfsc	status,2,c
  2540  00F94E  BE58               	btfsc	printf@exp+1,7,c
  2541  00F950  D042               	goto	l2588
  2542  00F952  5058               	movf	printf@exp+1,w,c
  2543  00F954  E104               	bnz	l2574
  2544  00F956  0E02               	movlw	2
  2545  00F958  5C57               	subwf	printf@exp,w,c
  2546  00F95A  A0D8               	btfss	status,0,c
  2547  00F95C  D03C               	goto	l2588
  2548  00F95E                     l2574:
  2549                           
  2550                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2551  00F95E  C05D  F001         	movff	printf@tmpval,___ftge@ff1
  2552  00F962  C05E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2553  00F966  C05F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2554  00F96A  0E70               	movlw	112
  2555  00F96C  6E04               	movwf	___ftge@ff2,c
  2556  00F96E  0E89               	movlw	137
  2557  00F970  6E05               	movwf	___ftge@ff2+1,c
  2558  00F972  0E40               	movlw	64
  2559  00F974  6E06               	movwf	___ftge@ff2+2,c
  2560  00F976  EC3A  F071         	call	___ftge	;wreg free
  2561  00F97A  B0D8               	btfsc	status,0,c
  2562  00F97C  D002               	goto	l2578
  2563                           
  2564                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2565  00F97E  0EF7               	movlw	247
  2566  00F980  D001               	goto	L2
  2567  00F982                     l2578:
  2568                           
  2569                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2570  00F982  0EF8               	movlw	248
  2571  00F984                     L2:
  2572  00F984  2657               	addwf	printf@exp,f,c
  2573  00F986  0EFF               	movlw	255
  2574  00F988  2258               	addwfc	printf@exp+1,f,c
  2575                           
  2576                           ;doprnt.c: 1124: }
  2577                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2578  00F98A  5057               	movf	printf@exp,w,c
  2579  00F98C  EC05  F076         	call	_scale
  2580  00F990  C024  F05D         	movff	?_scale,printf@tmpval
  2581  00F994  C025  F05E         	movff	?_scale+1,printf@tmpval+1
  2582  00F998  C026  F05F         	movff	?_scale+2,printf@tmpval+2
  2583                           
  2584                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2585  00F99C  C061  F001         	movff	printf@fval,__tdiv_to_l_@f1
  2586  00F9A0  C062  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2587  00F9A4  C063  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2588  00F9A8  C05D  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  2589  00F9AC  C05E  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2590  00F9B0  C05F  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2591  00F9B4  EC61  F073         	call	__tdiv_to_l_	;wreg free
  2592  00F9B8  C001  F059         	movff	?__tdiv_to_l_,printf@val
  2593  00F9BC  C002  F05A         	movff	?__tdiv_to_l_+1,printf@val+1
  2594  00F9C0  C003  F05B         	movff	?__tdiv_to_l_+2,printf@val+2
  2595  00F9C4  C004  F05C         	movff	?__tdiv_to_l_+3,printf@val+3
  2596                           
  2597                           ;doprnt.c: 1129: fval = 0.0;
  2598  00F9C8  0E00               	movlw	0
  2599  00F9CA  6E61               	movwf	printf@fval,c
  2600  00F9CC  0E00               	movlw	0
  2601  00F9CE  6E62               	movwf	printf@fval+1,c
  2602  00F9D0  0E00               	movlw	0
  2603  00F9D2  6E63               	movwf	printf@fval+2,c
  2604                           
  2605                           ;doprnt.c: 1130: } else {
  2606  00F9D4  D032               	goto	l2592
  2607  00F9D6                     l2588:
  2608                           
  2609                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2610  00F9D6  C061  F02B         	movff	printf@fval,___fttol@f1
  2611  00F9DA  C062  F02C         	movff	printf@fval+1,___fttol@f1+1
  2612  00F9DE  C063  F02D         	movff	printf@fval+2,___fttol@f1+2
  2613  00F9E2  ECD9  F071         	call	___fttol	;wreg free
  2614  00F9E6  C02B  F059         	movff	?___fttol,printf@val
  2615  00F9EA  C02C  F05A         	movff	?___fttol+1,printf@val+1
  2616  00F9EE  C02D  F05B         	movff	?___fttol+2,printf@val+2
  2617  00F9F2  C02E  F05C         	movff	?___fttol+3,printf@val+3
  2618                           
  2619                           ;doprnt.c: 1132: fval -= (double)val;
  2620  00F9F6  C061  F03A         	movff	printf@fval,___ftsub@f1
  2621  00F9FA  C062  F03B         	movff	printf@fval+1,___ftsub@f1+1
  2622  00F9FE  C063  F03C         	movff	printf@fval+2,___ftsub@f1+2
  2623  00FA02  C059  F009         	movff	printf@val,___lltoft@c
  2624  00FA06  C05A  F00A         	movff	printf@val+1,___lltoft@c+1
  2625  00FA0A  C05B  F00B         	movff	printf@val+2,___lltoft@c+2
  2626  00FA0E  C05C  F00C         	movff	printf@val+3,___lltoft@c+3
  2627  00FA12  ECE9  F06F         	call	___lltoft	;wreg free
  2628  00FA16  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2629  00FA1A  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2630  00FA1E  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2631  00FA22  ECC9  F06F         	call	___ftsub	;wreg free
  2632  00FA26  C03A  F061         	movff	?___ftsub,printf@fval
  2633  00FA2A  C03B  F062         	movff	?___ftsub+1,printf@fval+1
  2634  00FA2E  C03C  F063         	movff	?___ftsub+2,printf@fval+2
  2635                           
  2636                           ;doprnt.c: 1133: exp = 0;
  2637  00FA32  0E00               	movlw	0
  2638  00FA34  6E58               	movwf	printf@exp+1,c
  2639  00FA36  0E00               	movlw	0
  2640  00FA38  6E57               	movwf	printf@exp,c
  2641  00FA3A                     l2592:
  2642                           
  2643                           ;doprnt.c: 1134: }
  2644                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2645  00FA3A  0E01               	movlw	1
  2646  00FA3C  6E64               	movwf	printf@c,c
  2647  00FA3E                     l2594:
  2648  00FA3E  0E0A               	movlw	10
  2649  00FA40  1864               	xorwf	printf@c,w,c
  2650  00FA42  B4D8               	btfsc	status,2,c
  2651  00FA44  D01B               	goto	l2606
  2652                           
  2653                           ;doprnt.c: 1137: if(val < dpowers[c])
  2654  00FA46  5064               	movf	printf@c,w,c
  2655  00FA48  0D04               	mullw	4
  2656  00FA4A  0E87               	movlw	low _dpowers
  2657  00FA4C  24F3               	addwf	prodl,w,c
  2658  00FA4E  6EF6               	movwf	tblptrl,c
  2659  00FA50  0EFE               	movlw	high _dpowers
  2660  00FA52  20F4               	addwfc	prodh,w,c
  2661  00FA54  6EF7               	movwf	tblptrh,c
  2662  00FA56                     	if	1	;There are 3 active tblptr bytes
  2663  00FA56  6AF8               	clrf	tblptru,c
  2664  00FA58  0E00               	movlw	low (__mediumconst shr (0+16))
  2665  00FA5A  22F8               	addwfc	tblptru,f,c
  2666  00FA5C                     	endif
  2667  00FA5C  0009               	tblrd		*+
  2668  00FA5E  50F5               	movf	tablat,w,c
  2669  00FA60  5C59               	subwf	printf@val,w,c
  2670  00FA62  0009               	tblrd		*+
  2671  00FA64  50F5               	movf	tablat,w,c
  2672  00FA66  585A               	subwfb	printf@val+1,w,c
  2673  00FA68  0009               	tblrd		*+
  2674  00FA6A  50F5               	movf	tablat,w,c
  2675  00FA6C  585B               	subwfb	printf@val+2,w,c
  2676  00FA6E  0009               	tblrd		*+
  2677  00FA70  50F5               	movf	tablat,w,c
  2678  00FA72  585C               	subwfb	printf@val+3,w,c
  2679  00FA74  A0D8               	btfss	status,0,c
  2680  00FA76  D002               	goto	l2606
  2681                           
  2682                           ;doprnt.c: 1138: break;
  2683  00FA78  2A64               	incf	printf@c,f,c
  2684  00FA7A  D7E1               	goto	l2594
  2685  00FA7C                     l2606:
  2686                           
  2687                           ;doprnt.c: 1175: {
  2688                           ;doprnt.c: 1188: if(flag & 0x03)
  2689  00FA7C  0E03               	movlw	3
  2690  00FA7E  1451               	andwf	printf@flag,w,c
  2691  00FA80  6E46               	movwf	??_printf& (0+255),c
  2692  00FA82  0E00               	movlw	0
  2693  00FA84  1452               	andwf	printf@flag+1,w,c
  2694  00FA86  6E47               	movwf	(??_printf+1)& (0+255),c
  2695  00FA88  5046               	movf	??_printf,w,c
  2696  00FA8A  1047               	iorwf	??_printf+1,w,c
  2697  00FA8C  B4D8               	btfsc	status,2,c
  2698  00FA8E  D04B               	goto	l2616
  2699                           
  2700                           ;doprnt.c: 1190: (putch('-') );
  2701  00FA90  0E2D               	movlw	45
  2702  00FA92  EC54  F06F         	call	_putch
  2703                           
  2704                           ;doprnt.c: 1195: }
  2705                           ;doprnt.c: 1196: while(c--) {
  2706  00FA96  D047               	goto	l2616
  2707  00FA98                     l2610:
  2708                           
  2709                           ;doprnt.c: 1200: {
  2710                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2711  00FA98  C059  F001         	movff	printf@val,___lldiv@dividend
  2712  00FA9C  C05A  F002         	movff	printf@val+1,___lldiv@dividend+1
  2713  00FAA0  C05B  F003         	movff	printf@val+2,___lldiv@dividend+2
  2714  00FAA4  C05C  F004         	movff	printf@val+3,___lldiv@dividend+3
  2715  00FAA8  5064               	movf	printf@c,w,c
  2716  00FAAA  0D04               	mullw	4
  2717  00FAAC  0E87               	movlw	low _dpowers
  2718  00FAAE  24F3               	addwf	prodl,w,c
  2719  00FAB0  6EF6               	movwf	tblptrl,c
  2720  00FAB2  0EFE               	movlw	high _dpowers
  2721  00FAB4  20F4               	addwfc	prodh,w,c
  2722  00FAB6  6EF7               	movwf	tblptrh,c
  2723  00FAB8                     	if	1	;There are 3 active tblptr bytes
  2724  00FAB8  6AF8               	clrf	tblptru,c
  2725  00FABA  0E00               	movlw	low (__mediumconst shr (0+16))
  2726  00FABC  22F8               	addwfc	tblptru,f,c
  2727  00FABE                     	endif
  2728  00FABE  0009               	tblrd		*+
  2729  00FAC0  CFF5 F005          	movff	tablat,___lldiv@divisor
  2730  00FAC4  0009               	tblrd		*+
  2731  00FAC6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2732  00FACA  0009               	tblrd		*+
  2733  00FACC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2734  00FAD0  000A               	tblrd		*-
  2735  00FAD2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2736  00FAD6  ECB7  F070         	call	___lldiv	;wreg free
  2737  00FADA  C001  F05D         	movff	?___lldiv,printf@tmpval
  2738  00FADE  C002  F05E         	movff	?___lldiv+1,printf@tmpval+1
  2739  00FAE2  C003  F05F         	movff	?___lldiv+2,printf@tmpval+2
  2740  00FAE6  C004  F060         	movff	?___lldiv+3,printf@tmpval+3
  2741                           
  2742                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2743  00FAEA  C05D  F00E         	movff	printf@tmpval,___llmod@dividend
  2744  00FAEE  C05E  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2745  00FAF2  C05F  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2746  00FAF6  C060  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2747  00FAFA  0E0A               	movlw	10
  2748  00FAFC  6E12               	movwf	___llmod@divisor,c
  2749  00FAFE  0E00               	movlw	0
  2750  00FB00  6E13               	movwf	___llmod@divisor+1,c
  2751  00FB02  0E00               	movlw	0
  2752  00FB04  6E14               	movwf	___llmod@divisor+2,c
  2753  00FB06  0E00               	movlw	0
  2754  00FB08  6E15               	movwf	___llmod@divisor+3,c
  2755  00FB0A  EC17  F070         	call	___llmod	;wreg free
  2756  00FB0E  C00E  F05D         	movff	?___llmod,printf@tmpval
  2757  00FB12  C00F  F05E         	movff	?___llmod+1,printf@tmpval+1
  2758  00FB16  C010  F05F         	movff	?___llmod+2,printf@tmpval+2
  2759  00FB1A  C011  F060         	movff	?___llmod+3,printf@tmpval+3
  2760                           
  2761                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2762  00FB1E  505D               	movf	printf@tmpval,w,c
  2763  00FB20  0F30               	addlw	48
  2764  00FB22  EC54  F06F         	call	_putch
  2765  00FB26                     l2616:
  2766  00FB26  0664               	decf	printf@c,f,c
  2767  00FB28  2864               	incf	printf@c,w,c
  2768  00FB2A  B4D8               	btfsc	status,2,c
  2769  00FB2C  D007               	goto	l2622
  2770  00FB2E  D7B4               	goto	l2610
  2771  00FB30                     l2618:
  2772                           
  2773                           ;doprnt.c: 1208: (putch('0') );
  2774  00FB30  0E30               	movlw	48
  2775  00FB32  EC54  F06F         	call	_putch
  2776                           
  2777                           ;doprnt.c: 1209: exp--;
  2778  00FB36  0657               	decf	printf@exp,f,c
  2779  00FB38  A0D8               	btfss	status,0,c
  2780  00FB3A  0658               	decf	printf@exp+1,f,c
  2781  00FB3C                     l2622:
  2782  00FB3C  BE58               	btfsc	printf@exp+1,7,c
  2783  00FB3E  D005               	goto	l2624
  2784  00FB40  5058               	movf	printf@exp+1,w,c
  2785  00FB42  E1F6               	bnz	l2618
  2786  00FB44  0457               	decf	printf@exp,w,c
  2787  00FB46  B0D8               	btfsc	status,0,c
  2788  00FB48  D7F3               	goto	l2618
  2789  00FB4A                     l2624:
  2790                           
  2791                           ;doprnt.c: 1210: }
  2792                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2793  00FB4A  BE56               	btfsc	printf@prec+1,7,c
  2794  00FB4C  D009               	goto	l172
  2795  00FB4E  5056               	movf	printf@prec+1,w,c
  2796  00FB50  E104               	bnz	u2590
  2797  00FB52  0E09               	movlw	9
  2798  00FB54  5C55               	subwf	printf@prec,w,c
  2799  00FB56  A0D8               	btfss	status,0,c
  2800  00FB58  D003               	goto	l172
  2801  00FB5A                     u2590:
  2802                           
  2803                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2804  00FB5A  0E08               	movlw	8
  2805  00FB5C  6E64               	movwf	printf@c,c
  2806  00FB5E  D002               	goto	l2628
  2807  00FB60                     l172:
  2808                           
  2809                           ;doprnt.c: 1213: else
  2810                           ;doprnt.c: 1214: c = prec;
  2811  00FB60  C055  F064         	movff	printf@prec,printf@c
  2812  00FB64                     l2628:
  2813                           
  2814                           ;doprnt.c: 1215: prec -= c;
  2815  00FB64  5064               	movf	printf@c,w,c
  2816  00FB66  5E55               	subwf	printf@prec,f,c
  2817  00FB68  0E00               	movlw	0
  2818  00FB6A  BE64               	btfsc	printf@c,7,c
  2819  00FB6C  0EFF               	movlw	255
  2820  00FB6E  5A56               	subwfb	printf@prec+1,f,c
  2821                           
  2822                           ;doprnt.c: 1219: if(c)
  2823  00FB70  5064               	movf	printf@c,w,c
  2824  00FB72  B4D8               	btfsc	status,2,c
  2825  00FB74  D003               	goto	l2634
  2826                           
  2827                           ;doprnt.c: 1221: (putch('.') );
  2828  00FB76  0E2E               	movlw	46
  2829  00FB78  EC54  F06F         	call	_putch
  2830  00FB7C                     l2634:
  2831                           
  2832                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2833  00FB7C  5064               	movf	printf@c,w,c
  2834  00FB7E  EC05  F076         	call	_scale
  2835  00FB82  C024  F04C         	movff	?_scale,_printf$847
  2836  00FB86  C025  F04D         	movff	?_scale+1,_printf$847+1
  2837  00FB8A  C026  F04E         	movff	?_scale+2,_printf$847+2
  2838                           
  2839                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2840  00FB8E  C061  F018         	movff	printf@fval,___ftmul@f2
  2841  00FB92  C062  F019         	movff	printf@fval+1,___ftmul@f2+1
  2842  00FB96  C063  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2843  00FB9A  C04C  F015         	movff	_printf$847,___ftmul@f1
  2844  00FB9E  C04D  F016         	movff	_printf$847+1,___ftmul@f1+1
  2845  00FBA2  C04E  F017         	movff	_printf$847+2,___ftmul@f1+2
  2846  00FBA6  EC53  F072         	call	___ftmul	;wreg free
  2847  00FBAA  C015  F02B         	movff	?___ftmul,___fttol@f1
  2848  00FBAE  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2849  00FBB2  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2850  00FBB6  ECD9  F071         	call	___fttol	;wreg free
  2851  00FBBA  C02B  F059         	movff	?___fttol,printf@val
  2852  00FBBE  C02C  F05A         	movff	?___fttol+1,printf@val+1
  2853  00FBC2  C02D  F05B         	movff	?___fttol+2,printf@val+2
  2854  00FBC6  C02E  F05C         	movff	?___fttol+3,printf@val+3
  2855                           
  2856                           ;doprnt.c: 1228: while(c--) {
  2857  00FBCA  D070               	goto	l2644
  2858  00FBCC                     l2638:
  2859                           
  2860                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2861  00FBCC  C059  F001         	movff	printf@val,___lldiv@dividend
  2862  00FBD0  C05A  F002         	movff	printf@val+1,___lldiv@dividend+1
  2863  00FBD4  C05B  F003         	movff	printf@val+2,___lldiv@dividend+2
  2864  00FBD8  C05C  F004         	movff	printf@val+3,___lldiv@dividend+3
  2865  00FBDC  5064               	movf	printf@c,w,c
  2866  00FBDE  0D04               	mullw	4
  2867  00FBE0  0E87               	movlw	low _dpowers
  2868  00FBE2  24F3               	addwf	prodl,w,c
  2869  00FBE4  6EF6               	movwf	tblptrl,c
  2870  00FBE6  0EFE               	movlw	high _dpowers
  2871  00FBE8  20F4               	addwfc	prodh,w,c
  2872  00FBEA  6EF7               	movwf	tblptrh,c
  2873  00FBEC                     	if	1	;There are 3 active tblptr bytes
  2874  00FBEC  6AF8               	clrf	tblptru,c
  2875  00FBEE  0E00               	movlw	low (__mediumconst shr (0+16))
  2876  00FBF0  22F8               	addwfc	tblptru,f,c
  2877  00FBF2                     	endif
  2878  00FBF2  0009               	tblrd		*+
  2879  00FBF4  CFF5 F005          	movff	tablat,___lldiv@divisor
  2880  00FBF8  0009               	tblrd		*+
  2881  00FBFA  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2882  00FBFE  0009               	tblrd		*+
  2883  00FC00  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2884  00FC04  000A               	tblrd		*-
  2885  00FC06  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2886  00FC0A  ECB7  F070         	call	___lldiv	;wreg free
  2887  00FC0E  C001  F05D         	movff	?___lldiv,printf@tmpval
  2888  00FC12  C002  F05E         	movff	?___lldiv+1,printf@tmpval+1
  2889  00FC16  C003  F05F         	movff	?___lldiv+2,printf@tmpval+2
  2890  00FC1A  C004  F060         	movff	?___lldiv+3,printf@tmpval+3
  2891                           
  2892                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2893  00FC1E  C05D  F00E         	movff	printf@tmpval,___llmod@dividend
  2894  00FC22  C05E  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2895  00FC26  C05F  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2896  00FC2A  C060  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2897  00FC2E  0E0A               	movlw	10
  2898  00FC30  6E12               	movwf	___llmod@divisor,c
  2899  00FC32  0E00               	movlw	0
  2900  00FC34  6E13               	movwf	___llmod@divisor+1,c
  2901  00FC36  0E00               	movlw	0
  2902  00FC38  6E14               	movwf	___llmod@divisor+2,c
  2903  00FC3A  0E00               	movlw	0
  2904  00FC3C  6E15               	movwf	___llmod@divisor+3,c
  2905  00FC3E  EC17  F070         	call	___llmod	;wreg free
  2906  00FC42  C00E  F05D         	movff	?___llmod,printf@tmpval
  2907  00FC46  C00F  F05E         	movff	?___llmod+1,printf@tmpval+1
  2908  00FC4A  C010  F05F         	movff	?___llmod+2,printf@tmpval+2
  2909  00FC4E  C011  F060         	movff	?___llmod+3,printf@tmpval+3
  2910                           
  2911                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2912  00FC52  505D               	movf	printf@tmpval,w,c
  2913  00FC54  0F30               	addlw	48
  2914  00FC56  EC54  F06F         	call	_putch
  2915                           
  2916                           ;doprnt.c: 1232: val %= dpowers[c];
  2917  00FC5A  C059  F00E         	movff	printf@val,___llmod@dividend
  2918  00FC5E  C05A  F00F         	movff	printf@val+1,___llmod@dividend+1
  2919  00FC62  C05B  F010         	movff	printf@val+2,___llmod@dividend+2
  2920  00FC66  C05C  F011         	movff	printf@val+3,___llmod@dividend+3
  2921  00FC6A  5064               	movf	printf@c,w,c
  2922  00FC6C  0D04               	mullw	4
  2923  00FC6E  0E87               	movlw	low _dpowers
  2924  00FC70  24F3               	addwf	prodl,w,c
  2925  00FC72  6EF6               	movwf	tblptrl,c
  2926  00FC74  0EFE               	movlw	high _dpowers
  2927  00FC76  20F4               	addwfc	prodh,w,c
  2928  00FC78  6EF7               	movwf	tblptrh,c
  2929  00FC7A                     	if	1	;There are 3 active tblptr bytes
  2930  00FC7A  6AF8               	clrf	tblptru,c
  2931  00FC7C  0E00               	movlw	low (__mediumconst shr (0+16))
  2932  00FC7E  22F8               	addwfc	tblptru,f,c
  2933  00FC80                     	endif
  2934  00FC80  0009               	tblrd		*+
  2935  00FC82  CFF5 F012          	movff	tablat,___llmod@divisor
  2936  00FC86  0009               	tblrd		*+
  2937  00FC88  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2938  00FC8C  0009               	tblrd		*+
  2939  00FC8E  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2940  00FC92  000A               	tblrd		*-
  2941  00FC94  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2942  00FC98  EC17  F070         	call	___llmod	;wreg free
  2943  00FC9C  C00E  F059         	movff	?___llmod,printf@val
  2944  00FCA0  C00F  F05A         	movff	?___llmod+1,printf@val+1
  2945  00FCA4  C010  F05B         	movff	?___llmod+2,printf@val+2
  2946  00FCA8  C011  F05C         	movff	?___llmod+3,printf@val+3
  2947  00FCAC                     l2644:
  2948  00FCAC  0664               	decf	printf@c,f,c
  2949  00FCAE  2864               	incf	printf@c,w,c
  2950  00FCB0  B4D8               	btfsc	status,2,c
  2951  00FCB2  D007               	goto	l2650
  2952  00FCB4  D78B               	goto	l2638
  2953  00FCB6                     l2646:
  2954                           
  2955                           ;doprnt.c: 1236: (putch('0') );
  2956  00FCB6  0E30               	movlw	48
  2957  00FCB8  EC54  F06F         	call	_putch
  2958                           
  2959                           ;doprnt.c: 1237: prec--;
  2960  00FCBC  0655               	decf	printf@prec,f,c
  2961  00FCBE  A0D8               	btfss	status,0,c
  2962  00FCC0  0656               	decf	printf@prec+1,f,c
  2963  00FCC2                     l2650:
  2964  00FCC2  5055               	movf	printf@prec,w,c
  2965  00FCC4  1056               	iorwf	printf@prec+1,w,c
  2966  00FCC6  B4D8               	btfsc	status,2,c
  2967  00FCC8  D0D0               	goto	l2702
  2968  00FCCA  D7F5               	goto	l2646
  2969  00FCCC                     l144:
  2970                           
  2971                           ;doprnt.c: 1246: }
  2972                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  2973  00FCCC  BC51               	btfsc	printf@flag,6,c
  2974  00FCCE  D02E               	goto	l181
  2975                           
  2976                           ;doprnt.c: 1253: {
  2977                           ;doprnt.c: 1255: if(flag & 0x10)
  2978  00FCD0  A851               	btfss	printf@flag,4,c
  2979  00FCD2  D00E               	goto	l2658
  2980                           
  2981                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2982  00FCD4  C053  FFD9         	movff	printf@ap,fsr2l
  2983  00FCD8  C054  FFDA         	movff	printf@ap+1,fsr2h
  2984  00FCDC  CFDE F059          	movff	postinc2,printf@val
  2985  00FCE0  CFDE F05A          	movff	postinc2,printf@val+1
  2986  00FCE4  CFDE F05B          	movff	postinc2,printf@val+2
  2987  00FCE8  CFDE F05C          	movff	postinc2,printf@val+3
  2988  00FCEC  0E04               	movlw	4
  2989  00FCEE  D00E               	goto	L3
  2990  00FCF0                     l2658:
  2991                           
  2992                           ;doprnt.c: 1257: else
  2993                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2994  00FCF0  C053  FFD9         	movff	printf@ap,fsr2l
  2995  00FCF4  C054  FFDA         	movff	printf@ap+1,fsr2h
  2996  00FCF8  CFDE F059          	movff	postinc2,printf@val
  2997  00FCFC  CFDD F05A          	movff	postdec2,printf@val+1
  2998  00FD00  0E00               	movlw	0
  2999  00FD02  BE5A               	btfsc	printf@val+1,7,c
  3000  00FD04  0EFF               	movlw	-1
  3001  00FD06  6E5B               	movwf	printf@val+2,c
  3002  00FD08  6E5C               	movwf	printf@val+3,c
  3003  00FD0A  0E02               	movlw	2
  3004  00FD0C                     L3:
  3005  00FD0C  2653               	addwf	printf@ap,f,c
  3006  00FD0E  0E00               	movlw	0
  3007  00FD10  2254               	addwfc	printf@ap+1,f,c
  3008                           
  3009                           ;doprnt.c: 1261: if((long)val < 0) {
  3010  00FD12  AE5C               	btfss	printf@val+3,7,c
  3011  00FD14  D02D               	goto	l2676
  3012                           
  3013                           ;doprnt.c: 1262: flag |= 0x03;
  3014  00FD16  0E03               	movlw	3
  3015  00FD18  1251               	iorwf	printf@flag,f,c
  3016                           
  3017                           ;doprnt.c: 1263: val = -val;
  3018  00FD1A  1E5C               	comf	printf@val+3,f,c
  3019  00FD1C  1E5B               	comf	printf@val+2,f,c
  3020  00FD1E  1E5A               	comf	printf@val+1,f,c
  3021  00FD20  6C59               	negf	printf@val,c
  3022  00FD22  0E00               	movlw	0
  3023  00FD24  225A               	addwfc	printf@val+1,f,c
  3024  00FD26  225B               	addwfc	printf@val+2,f,c
  3025  00FD28  225C               	addwfc	printf@val+3,f,c
  3026                           
  3027                           ;doprnt.c: 1264: }
  3028                           ;doprnt.c: 1266: }
  3029  00FD2A  D022               	goto	l2676
  3030  00FD2C                     l181:
  3031                           
  3032                           ;doprnt.c: 1268: else
  3033                           ;doprnt.c: 1273: {
  3034                           ;doprnt.c: 1281: if(flag & 0x10)
  3035  00FD2C  A851               	btfss	printf@flag,4,c
  3036  00FD2E  D00E               	goto	l2672
  3037                           
  3038                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  3039  00FD30  C053  FFD9         	movff	printf@ap,fsr2l
  3040  00FD34  C054  FFDA         	movff	printf@ap+1,fsr2h
  3041  00FD38  CFDE F059          	movff	postinc2,printf@val
  3042  00FD3C  CFDE F05A          	movff	postinc2,printf@val+1
  3043  00FD40  CFDE F05B          	movff	postinc2,printf@val+2
  3044  00FD44  CFDE F05C          	movff	postinc2,printf@val+3
  3045  00FD48  0E04               	movlw	4
  3046  00FD4A  D00F               	goto	L4
  3047  00FD4C                     l2672:
  3048                           
  3049                           ;doprnt.c: 1283: else
  3050                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3051  00FD4C  C053  FFD9         	movff	printf@ap,fsr2l
  3052  00FD50  C054  FFDA         	movff	printf@ap+1,fsr2h
  3053  00FD54  CFDE F046          	movff	postinc2,??_printf
  3054  00FD58  CFDD F047          	movff	postdec2,??_printf+1
  3055  00FD5C  C046  F059         	movff	??_printf,printf@val
  3056  00FD60  C047  F05A         	movff	??_printf+1,printf@val+1
  3057  00FD64  6A5B               	clrf	printf@val+2,c
  3058  00FD66  6A5C               	clrf	printf@val+3,c
  3059  00FD68  0E02               	movlw	2
  3060  00FD6A                     L4:
  3061  00FD6A  2653               	addwf	printf@ap,f,c
  3062  00FD6C  0E00               	movlw	0
  3063  00FD6E  2254               	addwfc	printf@ap+1,f,c
  3064  00FD70                     l2676:
  3065                           
  3066                           ;doprnt.c: 1287: }
  3067                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3068  00FD70  0E01               	movlw	1
  3069  00FD72  6E64               	movwf	printf@c,c
  3070  00FD74                     l2678:
  3071  00FD74  0E0A               	movlw	10
  3072  00FD76  1864               	xorwf	printf@c,w,c
  3073  00FD78  B4D8               	btfsc	status,2,c
  3074  00FD7A  D01B               	goto	l2690
  3075                           
  3076                           ;doprnt.c: 1306: if(val < dpowers[c])
  3077  00FD7C  5064               	movf	printf@c,w,c
  3078  00FD7E  0D04               	mullw	4
  3079  00FD80  0E87               	movlw	low _dpowers
  3080  00FD82  24F3               	addwf	prodl,w,c
  3081  00FD84  6EF6               	movwf	tblptrl,c
  3082  00FD86  0EFE               	movlw	high _dpowers
  3083  00FD88  20F4               	addwfc	prodh,w,c
  3084  00FD8A  6EF7               	movwf	tblptrh,c
  3085  00FD8C                     	if	1	;There are 3 active tblptr bytes
  3086  00FD8C  6AF8               	clrf	tblptru,c
  3087  00FD8E  0E00               	movlw	low (__mediumconst shr (0+16))
  3088  00FD90  22F8               	addwfc	tblptru,f,c
  3089  00FD92                     	endif
  3090  00FD92  0009               	tblrd		*+
  3091  00FD94  50F5               	movf	tablat,w,c
  3092  00FD96  5C59               	subwf	printf@val,w,c
  3093  00FD98  0009               	tblrd		*+
  3094  00FD9A  50F5               	movf	tablat,w,c
  3095  00FD9C  585A               	subwfb	printf@val+1,w,c
  3096  00FD9E  0009               	tblrd		*+
  3097  00FDA0  50F5               	movf	tablat,w,c
  3098  00FDA2  585B               	subwfb	printf@val+2,w,c
  3099  00FDA4  0009               	tblrd		*+
  3100  00FDA6  50F5               	movf	tablat,w,c
  3101  00FDA8  585C               	subwfb	printf@val+3,w,c
  3102  00FDAA  A0D8               	btfss	status,0,c
  3103  00FDAC  D002               	goto	l2690
  3104                           
  3105                           ;doprnt.c: 1307: break;
  3106  00FDAE  2A64               	incf	printf@c,f,c
  3107  00FDB0  D7E1               	goto	l2678
  3108  00FDB2                     l2690:
  3109                           
  3110                           ;doprnt.c: 1422: {
  3111                           ;doprnt.c: 1438: if(flag & 0x03)
  3112  00FDB2  0E03               	movlw	3
  3113  00FDB4  1451               	andwf	printf@flag,w,c
  3114  00FDB6  6E46               	movwf	??_printf& (0+255),c
  3115  00FDB8  0E00               	movlw	0
  3116  00FDBA  1452               	andwf	printf@flag+1,w,c
  3117  00FDBC  6E47               	movwf	(??_printf+1)& (0+255),c
  3118  00FDBE  5046               	movf	??_printf,w,c
  3119  00FDC0  1047               	iorwf	??_printf+1,w,c
  3120  00FDC2  B4D8               	btfsc	status,2,c
  3121  00FDC4  D003               	goto	l2694
  3122                           
  3123                           ;doprnt.c: 1439: (putch('-') );
  3124  00FDC6  0E2D               	movlw	45
  3125  00FDC8  EC54  F06F         	call	_putch
  3126  00FDCC                     l2694:
  3127                           
  3128                           ;doprnt.c: 1469: }
  3129                           ;doprnt.c: 1472: prec = c;
  3130  00FDCC  5064               	movf	printf@c,w,c
  3131  00FDCE  6E55               	movwf	printf@prec,c
  3132  00FDD0  6A56               	clrf	printf@prec+1,c
  3133  00FDD2  BE55               	btfsc	printf@prec,7,c
  3134  00FDD4  0656               	decf	printf@prec+1,f,c
  3135                           
  3136                           ;doprnt.c: 1474: while(prec--) {
  3137  00FDD6  D041               	goto	l2700
  3138  00FDD8                     l2696:
  3139                           
  3140                           ;doprnt.c: 1478: {
  3141                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3142  00FDD8  C055  F046         	movff	printf@prec,??_printf
  3143  00FDDC  C056  F047         	movff	printf@prec+1,??_printf+1
  3144  00FDE0  90D8               	bcf	status,0,c
  3145  00FDE2  3646               	rlcf	??_printf,f,c
  3146  00FDE4  3647               	rlcf	??_printf+1,f,c
  3147  00FDE6  90D8               	bcf	status,0,c
  3148  00FDE8  3646               	rlcf	??_printf,f,c
  3149  00FDEA  3647               	rlcf	??_printf+1,f,c
  3150  00FDEC  0E87               	movlw	low _dpowers
  3151  00FDEE  2446               	addwf	??_printf,w,c
  3152  00FDF0  6EF6               	movwf	tblptrl,c
  3153  00FDF2  0EFE               	movlw	high _dpowers
  3154  00FDF4  2047               	addwfc	??_printf+1,w,c
  3155  00FDF6  6EF7               	movwf	tblptrh,c
  3156  00FDF8                     	if	1	;There are 3 active tblptr bytes
  3157  00FDF8  6AF8               	clrf	tblptru,c
  3158  00FDFA  0E00               	movlw	low (__mediumconst shr (0+16))
  3159  00FDFC  22F8               	addwfc	tblptru,f,c
  3160  00FDFE                     	endif
  3161  00FDFE  0009               	tblrd		*+
  3162  00FE00  CFF5 F005          	movff	tablat,___lldiv@divisor
  3163  00FE04  0009               	tblrd		*+
  3164  00FE06  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3165  00FE0A  0009               	tblrd		*+
  3166  00FE0C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3167  00FE10  000A               	tblrd		*-
  3168  00FE12  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3169  00FE16  C059  F001         	movff	printf@val,___lldiv@dividend
  3170  00FE1A  C05A  F002         	movff	printf@val+1,___lldiv@dividend+1
  3171  00FE1E  C05B  F003         	movff	printf@val+2,___lldiv@dividend+2
  3172  00FE22  C05C  F004         	movff	printf@val+3,___lldiv@dividend+3
  3173  00FE26  ECB7  F070         	call	___lldiv	;wreg free
  3174  00FE2A  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3175  00FE2E  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3176  00FE32  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3177  00FE36  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3178  00FE3A  0E0A               	movlw	10
  3179  00FE3C  6E12               	movwf	___llmod@divisor,c
  3180  00FE3E  0E00               	movlw	0
  3181  00FE40  6E13               	movwf	___llmod@divisor+1,c
  3182  00FE42  0E00               	movlw	0
  3183  00FE44  6E14               	movwf	___llmod@divisor+2,c
  3184  00FE46  0E00               	movlw	0
  3185  00FE48  6E15               	movwf	___llmod@divisor+3,c
  3186  00FE4A  EC17  F070         	call	___llmod	;wreg free
  3187  00FE4E  500E               	movf	?___llmod,w,c
  3188  00FE50  0F30               	addlw	48
  3189  00FE52  6E64               	movwf	printf@c,c
  3190                           
  3191                           ;doprnt.c: 1523: }
  3192                           ;doprnt.c: 1524: (putch(c) );
  3193  00FE54  5064               	movf	printf@c,w,c
  3194  00FE56  EC54  F06F         	call	_putch
  3195  00FE5A                     l2700:
  3196  00FE5A  0655               	decf	printf@prec,f,c
  3197  00FE5C  A0D8               	btfss	status,0,c
  3198  00FE5E  0656               	decf	printf@prec+1,f,c
  3199  00FE60  2855               	incf	printf@prec,w,c
  3200  00FE62  E1BA               	bnz	l2696
  3201  00FE64  2856               	incf	printf@prec+1,w,c
  3202  00FE66  A4D8               	btfss	status,2,c
  3203  00FE68  D7B7               	goto	l2696
  3204  00FE6A                     l2702:
  3205  00FE6A  C040  FFF6         	movff	printf@f,tblptrl
  3206  00FE6E  C041  FFF7         	movff	printf@f+1,tblptrh
  3207  00FE72  4A40               	infsnz	printf@f,f,c
  3208  00FE74  2A41               	incf	printf@f+1,f,c
  3209  00FE76                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3210  00FE76  6AF8               	clrf	tblptru,c
  3211  00FE78                     	endif
  3212  00FE78                     	if	0	;tblptru may be non-zero
  3213  00FE78                     	endif
  3214  00FE78  0008               	tblrd		*
  3215  00FE7A  CFF5 F064          	movff	tablat,printf@c
  3216  00FE7E  5064               	movf	printf@c,w,c
  3217  00FE80  B4D8               	btfsc	status,2,c
  3218  00FE82  0012               	return	
  3219  00FE84  D404               	goto	l2490
  3220  00FE86                     __end_of_printf:
  3221                           	opt stack 0
  3222                           tblptru	equ	0xFF8
  3223                           tblptrh	equ	0xFF7
  3224                           tblptrl	equ	0xFF6
  3225                           tablat	equ	0xFF5
  3226                           prodh	equ	0xFF4
  3227                           prodl	equ	0xFF3
  3228                           indf0	equ	0xFEF
  3229                           postinc0	equ	0xFEE
  3230                           fsr0h	equ	0xFEA
  3231                           fsr0l	equ	0xFE9
  3232                           wreg	equ	0xFE8
  3233                           postdec1	equ	0xFE5
  3234                           plusw1	equ	0xFE3
  3235                           fsr1l	equ	0xFE1
  3236                           postinc2	equ	0xFDE
  3237                           postdec2	equ	0xFDD
  3238                           plusw2	equ	0xFDB
  3239                           fsr2h	equ	0xFDA
  3240                           fsr2l	equ	0xFD9
  3241                           status	equ	0xFD8
  3242                           
  3243 ;; *************** function _scale *****************
  3244 ;; Defined at:
  3245 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  scl             1    wreg     char 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  scl             1   41[COMRAM] char 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  3   35[COMRAM] char 
  3252 ;; Registers used:
  3253 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3259 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;Total ram usage:        7 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    2
  3266 ;; This function calls:
  3267 ;;		___awdiv
  3268 ;;		___awmod
  3269 ;;		___ftmul
  3270 ;;		___wmul
  3271 ;; This function is called by:
  3272 ;;		_printf
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text2
  3277  00EC0A                     __ptext2:
  3278                           	opt stack 0
  3279  00EC0A                     _scale:
  3280                           	opt stack 27
  3281                           
  3282                           ;incstack = 0
  3283                           ;scale@scl stored from wreg
  3284  00EC0A  6E2A               	movwf	scale@scl,c
  3285                           
  3286                           ;doprnt.c: 428: if(scl < 0) {
  3287  00EC0C  AE2A               	btfss	scale@scl,7,c
  3288  00EC0E  D10D               	goto	l2210
  3289                           
  3290                           ;doprnt.c: 429: scl = -scl;
  3291  00EC10  6C2A               	negf	scale@scl,c
  3292                           
  3293                           ;doprnt.c: 430: if(scl>=110)
  3294  00EC12  502A               	movf	scale@scl,w,c
  3295  00EC14  0A80               	xorlw	128
  3296  00EC16  0F12               	addlw	-238
  3297  00EC18  A0D8               	btfss	status,0,c
  3298  00EC1A  D09A               	goto	l2200
  3299                           
  3300                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3301  00EC1C  0E00               	movlw	0
  3302  00EC1E  6E12               	movwf	___wmul@multiplicand+1,c
  3303  00EC20  0E03               	movlw	3
  3304  00EC22  6E11               	movwf	___wmul@multiplicand,c
  3305  00EC24  0E00               	movlw	0
  3306  00EC26  6E0A               	movwf	___awdiv@divisor+1,c
  3307  00EC28  0E0A               	movlw	10
  3308  00EC2A  6E09               	movwf	___awdiv@divisor,c
  3309  00EC2C  0E00               	movlw	0
  3310  00EC2E  6E04               	movwf	___awmod@divisor+1,c
  3311  00EC30  0E64               	movlw	100
  3312  00EC32  6E03               	movwf	___awmod@divisor,c
  3313  00EC34  502A               	movf	scale@scl,w,c
  3314  00EC36  6E01               	movwf	___awmod@dividend,c
  3315  00EC38  6A02               	clrf	___awmod@dividend+1,c
  3316  00EC3A  BE01               	btfsc	___awmod@dividend,7,c
  3317  00EC3C  0602               	decf	___awmod@dividend+1,f,c
  3318  00EC3E  EC7F  F070         	call	___awmod	;wreg free
  3319  00EC42  C001  F007         	movff	?___awmod,___awdiv@dividend
  3320  00EC46  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3321  00EC4A  ECF8  F070         	call	___awdiv	;wreg free
  3322  00EC4E  0E09               	movlw	9
  3323  00EC50  2407               	addwf	?___awdiv,w,c
  3324  00EC52  6E0F               	movwf	___wmul@multiplier,c
  3325  00EC54  0E00               	movlw	0
  3326  00EC56  2008               	addwfc	?___awdiv+1,w,c
  3327  00EC58  6E10               	movwf	___wmul@multiplier+1,c
  3328  00EC5A  EC8E  F06F         	call	___wmul	;wreg free
  3329  00EC5E  0ED6               	movlw	low __npowers_
  3330  00EC60  240F               	addwf	?___wmul,w,c
  3331  00EC62  6EF6               	movwf	tblptrl,c
  3332  00EC64  0EFE               	movlw	high __npowers_
  3333  00EC66  2010               	addwfc	?___wmul+1,w,c
  3334  00EC68  6EF7               	movwf	tblptrh,c
  3335  00EC6A                     	if	1	;There are 3 active tblptr bytes
  3336  00EC6A  6AF8               	clrf	tblptru,c
  3337  00EC6C  0E00               	movlw	low (__mediumconst shr (0+16))
  3338  00EC6E  22F8               	addwfc	tblptru,f,c
  3339  00EC70                     	endif
  3340  00EC70  0009               	tblrd		*+
  3341  00EC72  CFF5 F018          	movff	tablat,___ftmul@f2
  3342  00EC76  0009               	tblrd		*+
  3343  00EC78  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3344  00EC7C  000A               	tblrd		*-
  3345  00EC7E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3346  00EC82  0E00               	movlw	0
  3347  00EC84  6E0A               	movwf	___awdiv@divisor+1,c
  3348  00EC86  0E64               	movlw	100
  3349  00EC88  6E09               	movwf	___awdiv@divisor,c
  3350  00EC8A  502A               	movf	scale@scl,w,c
  3351  00EC8C  6E07               	movwf	___awdiv@dividend,c
  3352  00EC8E  6A08               	clrf	___awdiv@dividend+1,c
  3353  00EC90  BE07               	btfsc	___awdiv@dividend,7,c
  3354  00EC92  0608               	decf	___awdiv@dividend+1,f,c
  3355  00EC94  ECF8  F070         	call	___awdiv	;wreg free
  3356  00EC98  0E12               	movlw	18
  3357  00EC9A  2407               	addwf	?___awdiv,w,c
  3358  00EC9C  6E0F               	movwf	___wmul@multiplier,c
  3359  00EC9E  0E00               	movlw	0
  3360  00ECA0  2008               	addwfc	?___awdiv+1,w,c
  3361  00ECA2  6E10               	movwf	___wmul@multiplier+1,c
  3362  00ECA4  0E00               	movlw	0
  3363  00ECA6  6E12               	movwf	___wmul@multiplicand+1,c
  3364  00ECA8  0E03               	movlw	3
  3365  00ECAA  6E11               	movwf	___wmul@multiplicand,c
  3366  00ECAC  EC8E  F06F         	call	___wmul	;wreg free
  3367  00ECB0  0ED6               	movlw	low __npowers_
  3368  00ECB2  240F               	addwf	?___wmul,w,c
  3369  00ECB4  6EF6               	movwf	tblptrl,c
  3370  00ECB6  0EFE               	movlw	high __npowers_
  3371  00ECB8  2010               	addwfc	?___wmul+1,w,c
  3372  00ECBA  6EF7               	movwf	tblptrh,c
  3373  00ECBC                     	if	1	;There are 3 active tblptr bytes
  3374  00ECBC  6AF8               	clrf	tblptru,c
  3375  00ECBE  0E00               	movlw	low (__mediumconst shr (0+16))
  3376  00ECC0  22F8               	addwfc	tblptru,f,c
  3377  00ECC2                     	endif
  3378  00ECC2  0009               	tblrd		*+
  3379  00ECC4  CFF5 F015          	movff	tablat,___ftmul@f1
  3380  00ECC8  0009               	tblrd		*+
  3381  00ECCA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3382  00ECCE  000A               	tblrd		*-
  3383  00ECD0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3384  00ECD4  EC53  F072         	call	___ftmul	;wreg free
  3385  00ECD8  C015  F027         	movff	?___ftmul,_scale$846
  3386  00ECDC  C016  F028         	movff	?___ftmul+1,_scale$846+1
  3387  00ECE0  C017  F029         	movff	?___ftmul+2,_scale$846+2
  3388                           
  3389                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3390  00ECE4  C027  F015         	movff	_scale$846,___ftmul@f1
  3391  00ECE8  C028  F016         	movff	_scale$846+1,___ftmul@f1+1
  3392  00ECEC  C029  F017         	movff	_scale$846+2,___ftmul@f1+2
  3393  00ECF0  0E00               	movlw	0
  3394  00ECF2  6E12               	movwf	___wmul@multiplicand+1,c
  3395  00ECF4  0E03               	movlw	3
  3396  00ECF6  6E11               	movwf	___wmul@multiplicand,c
  3397  00ECF8  0E00               	movlw	0
  3398  00ECFA  6E04               	movwf	___awmod@divisor+1,c
  3399  00ECFC  0E0A               	movlw	10
  3400  00ECFE  6E03               	movwf	___awmod@divisor,c
  3401  00ED00  502A               	movf	scale@scl,w,c
  3402  00ED02  6E01               	movwf	___awmod@dividend,c
  3403  00ED04  6A02               	clrf	___awmod@dividend+1,c
  3404  00ED06  BE01               	btfsc	___awmod@dividend,7,c
  3405  00ED08  0602               	decf	___awmod@dividend+1,f,c
  3406  00ED0A  EC7F  F070         	call	___awmod	;wreg free
  3407  00ED0E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3408  00ED12  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3409  00ED16  EC8E  F06F         	call	___wmul	;wreg free
  3410  00ED1A  0ED6               	movlw	low __npowers_
  3411  00ED1C  240F               	addwf	?___wmul,w,c
  3412  00ED1E  6EF6               	movwf	tblptrl,c
  3413  00ED20  0EFE               	movlw	high __npowers_
  3414  00ED22  2010               	addwfc	?___wmul+1,w,c
  3415  00ED24  6EF7               	movwf	tblptrh,c
  3416  00ED26                     	if	1	;There are 3 active tblptr bytes
  3417  00ED26  6AF8               	clrf	tblptru,c
  3418  00ED28  0E00               	movlw	low (__mediumconst shr (0+16))
  3419  00ED2A  22F8               	addwfc	tblptru,f,c
  3420  00ED2C                     	endif
  3421  00ED2C  0009               	tblrd		*+
  3422  00ED2E  CFF5 F018          	movff	tablat,___ftmul@f2
  3423  00ED32  0009               	tblrd		*+
  3424  00ED34  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3425  00ED38  000A               	tblrd		*-
  3426  00ED3A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3427  00ED3E  EC53  F072         	call	___ftmul	;wreg free
  3428  00ED42  C015  F024         	movff	?___ftmul,?_scale
  3429  00ED46  C016  F025         	movff	?___ftmul+1,?_scale+1
  3430  00ED4A  C017  F026         	movff	?___ftmul+2,?_scale+2
  3431  00ED4E  0012               	return	
  3432  00ED50                     l2200:
  3433                           
  3434                           ;doprnt.c: 432: else if(scl > 10)
  3435  00ED50  502A               	movf	scale@scl,w,c
  3436  00ED52  0A80               	xorlw	128
  3437  00ED54  0F75               	addlw	-139
  3438  00ED56  A0D8               	btfss	status,0,c
  3439  00ED58  D053               	goto	l2206
  3440                           
  3441                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3442  00ED5A  0E00               	movlw	0
  3443  00ED5C  6E0A               	movwf	___awdiv@divisor+1,c
  3444  00ED5E  0E0A               	movlw	10
  3445  00ED60  6E09               	movwf	___awdiv@divisor,c
  3446  00ED62  502A               	movf	scale@scl,w,c
  3447  00ED64  6E07               	movwf	___awdiv@dividend,c
  3448  00ED66  6A08               	clrf	___awdiv@dividend+1,c
  3449  00ED68  BE07               	btfsc	___awdiv@dividend,7,c
  3450  00ED6A  0608               	decf	___awdiv@dividend+1,f,c
  3451  00ED6C  ECF8  F070         	call	___awdiv	;wreg free
  3452  00ED70  0E09               	movlw	9
  3453  00ED72  2407               	addwf	?___awdiv,w,c
  3454  00ED74  6E0F               	movwf	___wmul@multiplier,c
  3455  00ED76  0E00               	movlw	0
  3456  00ED78  2008               	addwfc	?___awdiv+1,w,c
  3457  00ED7A  6E10               	movwf	___wmul@multiplier+1,c
  3458  00ED7C  0E00               	movlw	0
  3459  00ED7E  6E12               	movwf	___wmul@multiplicand+1,c
  3460  00ED80  0E03               	movlw	3
  3461  00ED82  6E11               	movwf	___wmul@multiplicand,c
  3462  00ED84  EC8E  F06F         	call	___wmul	;wreg free
  3463  00ED88  0ED6               	movlw	low __npowers_
  3464  00ED8A  240F               	addwf	?___wmul,w,c
  3465  00ED8C  6EF6               	movwf	tblptrl,c
  3466  00ED8E  0EFE               	movlw	high __npowers_
  3467  00ED90  2010               	addwfc	?___wmul+1,w,c
  3468  00ED92  6EF7               	movwf	tblptrh,c
  3469  00ED94                     	if	1	;There are 3 active tblptr bytes
  3470  00ED94  6AF8               	clrf	tblptru,c
  3471  00ED96  0E00               	movlw	low (__mediumconst shr (0+16))
  3472  00ED98  22F8               	addwfc	tblptru,f,c
  3473  00ED9A                     	endif
  3474  00ED9A  0009               	tblrd		*+
  3475  00ED9C  CFF5 F015          	movff	tablat,___ftmul@f1
  3476  00EDA0  0009               	tblrd		*+
  3477  00EDA2  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3478  00EDA6  000A               	tblrd		*-
  3479  00EDA8  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3480  00EDAC  0E00               	movlw	0
  3481  00EDAE  6E12               	movwf	___wmul@multiplicand+1,c
  3482  00EDB0  0E03               	movlw	3
  3483  00EDB2  6E11               	movwf	___wmul@multiplicand,c
  3484  00EDB4  0E00               	movlw	0
  3485  00EDB6  6E04               	movwf	___awmod@divisor+1,c
  3486  00EDB8  0E0A               	movlw	10
  3487  00EDBA  6E03               	movwf	___awmod@divisor,c
  3488  00EDBC  502A               	movf	scale@scl,w,c
  3489  00EDBE  6E01               	movwf	___awmod@dividend,c
  3490  00EDC0  6A02               	clrf	___awmod@dividend+1,c
  3491  00EDC2  BE01               	btfsc	___awmod@dividend,7,c
  3492  00EDC4  0602               	decf	___awmod@dividend+1,f,c
  3493  00EDC6  EC7F  F070         	call	___awmod	;wreg free
  3494  00EDCA  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3495  00EDCE  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3496  00EDD2  EC8E  F06F         	call	___wmul	;wreg free
  3497  00EDD6  0ED6               	movlw	low __npowers_
  3498  00EDD8  240F               	addwf	?___wmul,w,c
  3499  00EDDA  6EF6               	movwf	tblptrl,c
  3500  00EDDC  0EFE               	movlw	high __npowers_
  3501  00EDDE  2010               	addwfc	?___wmul+1,w,c
  3502  00EDE0  6EF7               	movwf	tblptrh,c
  3503  00EDE2                     	if	1	;There are 3 active tblptr bytes
  3504  00EDE2  6AF8               	clrf	tblptru,c
  3505  00EDE4  0E00               	movlw	low (__mediumconst shr (0+16))
  3506  00EDE6  22F8               	addwfc	tblptru,f,c
  3507  00EDE8                     	endif
  3508  00EDE8  0009               	tblrd		*+
  3509  00EDEA  CFF5 F018          	movff	tablat,___ftmul@f2
  3510  00EDEE  0009               	tblrd		*+
  3511  00EDF0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3512  00EDF4  000A               	tblrd		*-
  3513  00EDF6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3514  00EDFA  EC53  F072         	call	___ftmul	;wreg free
  3515  00EDFE  D7A1               	goto	L5
  3516  00EE00                     l2206:
  3517                           
  3518                           ;doprnt.c: 434: return _npowers_[scl];
  3519  00EE00  502A               	movf	scale@scl,w,c
  3520  00EE02  0D03               	mullw	3
  3521  00EE04  0ED6               	movlw	low __npowers_
  3522  00EE06  24F3               	addwf	prodl,w,c
  3523  00EE08  6EF6               	movwf	tblptrl,c
  3524  00EE0A  0EFE               	movlw	high __npowers_
  3525  00EE0C  20F4               	addwfc	prodh,w,c
  3526  00EE0E  6EF7               	movwf	tblptrh,c
  3527  00EE10                     	if	1	;There are 3 active tblptr bytes
  3528  00EE10  6AF8               	clrf	tblptru,c
  3529  00EE12  0E00               	movlw	low (__mediumconst shr (0+16))
  3530  00EE14  22F8               	addwfc	tblptru,f,c
  3531  00EE16                     	endif
  3532  00EE16  0009               	tblrd		*+
  3533  00EE18  CFF5 F024          	movff	tablat,?_scale
  3534  00EE1C  0009               	tblrd		*+
  3535  00EE1E  CFF5 F025          	movff	tablat,?_scale+1
  3536  00EE22  000A               	tblrd		*-
  3537  00EE24  CFF5 F026          	movff	tablat,?_scale+2
  3538  00EE28  0012               	return	
  3539  00EE2A                     l2210:
  3540                           
  3541                           ;doprnt.c: 435: }
  3542                           ;doprnt.c: 436: if(scl>=110)
  3543  00EE2A  502A               	movf	scale@scl,w,c
  3544  00EE2C  0A80               	xorlw	128
  3545  00EE2E  0F12               	addlw	-238
  3546  00EE30  A0D8               	btfss	status,0,c
  3547  00EE32  D09A               	goto	l2218
  3548                           
  3549                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3550  00EE34  0E00               	movlw	0
  3551  00EE36  6E12               	movwf	___wmul@multiplicand+1,c
  3552  00EE38  0E03               	movlw	3
  3553  00EE3A  6E11               	movwf	___wmul@multiplicand,c
  3554  00EE3C  0E00               	movlw	0
  3555  00EE3E  6E0A               	movwf	___awdiv@divisor+1,c
  3556  00EE40  0E0A               	movlw	10
  3557  00EE42  6E09               	movwf	___awdiv@divisor,c
  3558  00EE44  0E00               	movlw	0
  3559  00EE46  6E04               	movwf	___awmod@divisor+1,c
  3560  00EE48  0E64               	movlw	100
  3561  00EE4A  6E03               	movwf	___awmod@divisor,c
  3562  00EE4C  502A               	movf	scale@scl,w,c
  3563  00EE4E  6E01               	movwf	___awmod@dividend,c
  3564  00EE50  6A02               	clrf	___awmod@dividend+1,c
  3565  00EE52  BE01               	btfsc	___awmod@dividend,7,c
  3566  00EE54  0602               	decf	___awmod@dividend+1,f,c
  3567  00EE56  EC7F  F070         	call	___awmod	;wreg free
  3568  00EE5A  C001  F007         	movff	?___awmod,___awdiv@dividend
  3569  00EE5E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3570  00EE62  ECF8  F070         	call	___awdiv	;wreg free
  3571  00EE66  0E09               	movlw	9
  3572  00EE68  2407               	addwf	?___awdiv,w,c
  3573  00EE6A  6E0F               	movwf	___wmul@multiplier,c
  3574  00EE6C  0E00               	movlw	0
  3575  00EE6E  2008               	addwfc	?___awdiv+1,w,c
  3576  00EE70  6E10               	movwf	___wmul@multiplier+1,c
  3577  00EE72  EC8E  F06F         	call	___wmul	;wreg free
  3578  00EE76  0EAF               	movlw	low __powers_
  3579  00EE78  240F               	addwf	?___wmul,w,c
  3580  00EE7A  6EF6               	movwf	tblptrl,c
  3581  00EE7C  0EFE               	movlw	high __powers_
  3582  00EE7E  2010               	addwfc	?___wmul+1,w,c
  3583  00EE80  6EF7               	movwf	tblptrh,c
  3584  00EE82                     	if	1	;There are 3 active tblptr bytes
  3585  00EE82  6AF8               	clrf	tblptru,c
  3586  00EE84  0E00               	movlw	low (__mediumconst shr (0+16))
  3587  00EE86  22F8               	addwfc	tblptru,f,c
  3588  00EE88                     	endif
  3589  00EE88  0009               	tblrd		*+
  3590  00EE8A  CFF5 F018          	movff	tablat,___ftmul@f2
  3591  00EE8E  0009               	tblrd		*+
  3592  00EE90  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3593  00EE94  000A               	tblrd		*-
  3594  00EE96  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3595  00EE9A  0E00               	movlw	0
  3596  00EE9C  6E0A               	movwf	___awdiv@divisor+1,c
  3597  00EE9E  0E64               	movlw	100
  3598  00EEA0  6E09               	movwf	___awdiv@divisor,c
  3599  00EEA2  502A               	movf	scale@scl,w,c
  3600  00EEA4  6E07               	movwf	___awdiv@dividend,c
  3601  00EEA6  6A08               	clrf	___awdiv@dividend+1,c
  3602  00EEA8  BE07               	btfsc	___awdiv@dividend,7,c
  3603  00EEAA  0608               	decf	___awdiv@dividend+1,f,c
  3604  00EEAC  ECF8  F070         	call	___awdiv	;wreg free
  3605  00EEB0  0E12               	movlw	18
  3606  00EEB2  2407               	addwf	?___awdiv,w,c
  3607  00EEB4  6E0F               	movwf	___wmul@multiplier,c
  3608  00EEB6  0E00               	movlw	0
  3609  00EEB8  2008               	addwfc	?___awdiv+1,w,c
  3610  00EEBA  6E10               	movwf	___wmul@multiplier+1,c
  3611  00EEBC  0E00               	movlw	0
  3612  00EEBE  6E12               	movwf	___wmul@multiplicand+1,c
  3613  00EEC0  0E03               	movlw	3
  3614  00EEC2  6E11               	movwf	___wmul@multiplicand,c
  3615  00EEC4  EC8E  F06F         	call	___wmul	;wreg free
  3616  00EEC8  0EAF               	movlw	low __powers_
  3617  00EECA  240F               	addwf	?___wmul,w,c
  3618  00EECC  6EF6               	movwf	tblptrl,c
  3619  00EECE  0EFE               	movlw	high __powers_
  3620  00EED0  2010               	addwfc	?___wmul+1,w,c
  3621  00EED2  6EF7               	movwf	tblptrh,c
  3622  00EED4                     	if	1	;There are 3 active tblptr bytes
  3623  00EED4  6AF8               	clrf	tblptru,c
  3624  00EED6  0E00               	movlw	low (__mediumconst shr (0+16))
  3625  00EED8  22F8               	addwfc	tblptru,f,c
  3626  00EEDA                     	endif
  3627  00EEDA  0009               	tblrd		*+
  3628  00EEDC  CFF5 F015          	movff	tablat,___ftmul@f1
  3629  00EEE0  0009               	tblrd		*+
  3630  00EEE2  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3631  00EEE6  000A               	tblrd		*-
  3632  00EEE8  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3633  00EEEC  EC53  F072         	call	___ftmul	;wreg free
  3634  00EEF0  C015  F027         	movff	?___ftmul,_scale$846
  3635  00EEF4  C016  F028         	movff	?___ftmul+1,_scale$846+1
  3636  00EEF8  C017  F029         	movff	?___ftmul+2,_scale$846+2
  3637                           
  3638                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3639  00EEFC  C027  F015         	movff	_scale$846,___ftmul@f1
  3640  00EF00  C028  F016         	movff	_scale$846+1,___ftmul@f1+1
  3641  00EF04  C029  F017         	movff	_scale$846+2,___ftmul@f1+2
  3642  00EF08  0E00               	movlw	0
  3643  00EF0A  6E12               	movwf	___wmul@multiplicand+1,c
  3644  00EF0C  0E03               	movlw	3
  3645  00EF0E  6E11               	movwf	___wmul@multiplicand,c
  3646  00EF10  0E00               	movlw	0
  3647  00EF12  6E04               	movwf	___awmod@divisor+1,c
  3648  00EF14  0E0A               	movlw	10
  3649  00EF16  6E03               	movwf	___awmod@divisor,c
  3650  00EF18  502A               	movf	scale@scl,w,c
  3651  00EF1A  6E01               	movwf	___awmod@dividend,c
  3652  00EF1C  6A02               	clrf	___awmod@dividend+1,c
  3653  00EF1E  BE01               	btfsc	___awmod@dividend,7,c
  3654  00EF20  0602               	decf	___awmod@dividend+1,f,c
  3655  00EF22  EC7F  F070         	call	___awmod	;wreg free
  3656  00EF26  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3657  00EF2A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3658  00EF2E  EC8E  F06F         	call	___wmul	;wreg free
  3659  00EF32  0EAF               	movlw	low __powers_
  3660  00EF34  240F               	addwf	?___wmul,w,c
  3661  00EF36  6EF6               	movwf	tblptrl,c
  3662  00EF38  0EFE               	movlw	high __powers_
  3663  00EF3A  2010               	addwfc	?___wmul+1,w,c
  3664  00EF3C  6EF7               	movwf	tblptrh,c
  3665  00EF3E                     	if	1	;There are 3 active tblptr bytes
  3666  00EF3E  6AF8               	clrf	tblptru,c
  3667  00EF40  0E00               	movlw	low (__mediumconst shr (0+16))
  3668  00EF42  22F8               	addwfc	tblptru,f,c
  3669  00EF44                     	endif
  3670  00EF44  0009               	tblrd		*+
  3671  00EF46  CFF5 F018          	movff	tablat,___ftmul@f2
  3672  00EF4A  0009               	tblrd		*+
  3673  00EF4C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3674  00EF50  000A               	tblrd		*-
  3675  00EF52  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3676  00EF56  EC53  F072         	call	___ftmul	;wreg free
  3677  00EF5A  C015  F024         	movff	?___ftmul,?_scale
  3678  00EF5E  C016  F025         	movff	?___ftmul+1,?_scale+1
  3679  00EF62  C017  F026         	movff	?___ftmul+2,?_scale+2
  3680  00EF66  0012               	return	
  3681  00EF68                     l2218:
  3682                           
  3683                           ;doprnt.c: 438: else if(scl > 10)
  3684  00EF68  502A               	movf	scale@scl,w,c
  3685  00EF6A  0A80               	xorlw	128
  3686  00EF6C  0F75               	addlw	-139
  3687  00EF6E  A0D8               	btfss	status,0,c
  3688  00EF70  D053               	goto	l2224
  3689                           
  3690                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3691  00EF72  0E00               	movlw	0
  3692  00EF74  6E0A               	movwf	___awdiv@divisor+1,c
  3693  00EF76  0E0A               	movlw	10
  3694  00EF78  6E09               	movwf	___awdiv@divisor,c
  3695  00EF7A  502A               	movf	scale@scl,w,c
  3696  00EF7C  6E07               	movwf	___awdiv@dividend,c
  3697  00EF7E  6A08               	clrf	___awdiv@dividend+1,c
  3698  00EF80  BE07               	btfsc	___awdiv@dividend,7,c
  3699  00EF82  0608               	decf	___awdiv@dividend+1,f,c
  3700  00EF84  ECF8  F070         	call	___awdiv	;wreg free
  3701  00EF88  0E09               	movlw	9
  3702  00EF8A  2407               	addwf	?___awdiv,w,c
  3703  00EF8C  6E0F               	movwf	___wmul@multiplier,c
  3704  00EF8E  0E00               	movlw	0
  3705  00EF90  2008               	addwfc	?___awdiv+1,w,c
  3706  00EF92  6E10               	movwf	___wmul@multiplier+1,c
  3707  00EF94  0E00               	movlw	0
  3708  00EF96  6E12               	movwf	___wmul@multiplicand+1,c
  3709  00EF98  0E03               	movlw	3
  3710  00EF9A  6E11               	movwf	___wmul@multiplicand,c
  3711  00EF9C  EC8E  F06F         	call	___wmul	;wreg free
  3712  00EFA0  0EAF               	movlw	low __powers_
  3713  00EFA2  240F               	addwf	?___wmul,w,c
  3714  00EFA4  6EF6               	movwf	tblptrl,c
  3715  00EFA6  0EFE               	movlw	high __powers_
  3716  00EFA8  2010               	addwfc	?___wmul+1,w,c
  3717  00EFAA  6EF7               	movwf	tblptrh,c
  3718  00EFAC                     	if	1	;There are 3 active tblptr bytes
  3719  00EFAC  6AF8               	clrf	tblptru,c
  3720  00EFAE  0E00               	movlw	low (__mediumconst shr (0+16))
  3721  00EFB0  22F8               	addwfc	tblptru,f,c
  3722  00EFB2                     	endif
  3723  00EFB2  0009               	tblrd		*+
  3724  00EFB4  CFF5 F015          	movff	tablat,___ftmul@f1
  3725  00EFB8  0009               	tblrd		*+
  3726  00EFBA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3727  00EFBE  000A               	tblrd		*-
  3728  00EFC0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3729  00EFC4  0E00               	movlw	0
  3730  00EFC6  6E12               	movwf	___wmul@multiplicand+1,c
  3731  00EFC8  0E03               	movlw	3
  3732  00EFCA  6E11               	movwf	___wmul@multiplicand,c
  3733  00EFCC  0E00               	movlw	0
  3734  00EFCE  6E04               	movwf	___awmod@divisor+1,c
  3735  00EFD0  0E0A               	movlw	10
  3736  00EFD2  6E03               	movwf	___awmod@divisor,c
  3737  00EFD4  502A               	movf	scale@scl,w,c
  3738  00EFD6  6E01               	movwf	___awmod@dividend,c
  3739  00EFD8  6A02               	clrf	___awmod@dividend+1,c
  3740  00EFDA  BE01               	btfsc	___awmod@dividend,7,c
  3741  00EFDC  0602               	decf	___awmod@dividend+1,f,c
  3742  00EFDE  EC7F  F070         	call	___awmod	;wreg free
  3743  00EFE2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3744  00EFE6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3745  00EFEA  EC8E  F06F         	call	___wmul	;wreg free
  3746  00EFEE  0EAF               	movlw	low __powers_
  3747  00EFF0  240F               	addwf	?___wmul,w,c
  3748  00EFF2  6EF6               	movwf	tblptrl,c
  3749  00EFF4  0EFE               	movlw	high __powers_
  3750  00EFF6  2010               	addwfc	?___wmul+1,w,c
  3751  00EFF8  6EF7               	movwf	tblptrh,c
  3752  00EFFA                     	if	1	;There are 3 active tblptr bytes
  3753  00EFFA  6AF8               	clrf	tblptru,c
  3754  00EFFC  0E00               	movlw	low (__mediumconst shr (0+16))
  3755  00EFFE  22F8               	addwfc	tblptru,f,c
  3756  00F000                     	endif
  3757  00F000  0009               	tblrd		*+
  3758  00F002  CFF5 F018          	movff	tablat,___ftmul@f2
  3759  00F006  0009               	tblrd		*+
  3760  00F008  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3761  00F00C  000A               	tblrd		*-
  3762  00F00E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3763  00F012  EC53  F072         	call	___ftmul	;wreg free
  3764  00F016  D7A1               	goto	L6
  3765  00F018                     l2224:
  3766                           
  3767                           ;doprnt.c: 440: return _powers_[scl];
  3768  00F018  502A               	movf	scale@scl,w,c
  3769  00F01A  0D03               	mullw	3
  3770  00F01C  0EAF               	movlw	low __powers_
  3771  00F01E  24F3               	addwf	prodl,w,c
  3772  00F020  6EF6               	movwf	tblptrl,c
  3773  00F022  0EFE               	movlw	high __powers_
  3774  00F024  20F4               	addwfc	prodh,w,c
  3775  00F026  6EF7               	movwf	tblptrh,c
  3776  00F028                     	if	1	;There are 3 active tblptr bytes
  3777  00F028  6AF8               	clrf	tblptru,c
  3778  00F02A  0E00               	movlw	low (__mediumconst shr (0+16))
  3779  00F02C  22F8               	addwfc	tblptru,f,c
  3780  00F02E                     	endif
  3781  00F02E  0009               	tblrd		*+
  3782  00F030  CFF5 F024          	movff	tablat,?_scale
  3783  00F034  0009               	tblrd		*+
  3784  00F036  CFF5 F025          	movff	tablat,?_scale+1
  3785  00F03A  000A               	tblrd		*-
  3786  00F03C  CFF5 F026          	movff	tablat,?_scale+2
  3787  00F040  0012               	return	
  3788  00F042                     __end_of_scale:
  3789                           	opt stack 0
  3790                           tblptru	equ	0xFF8
  3791                           tblptrh	equ	0xFF7
  3792                           tblptrl	equ	0xFF6
  3793                           tablat	equ	0xFF5
  3794                           prodh	equ	0xFF4
  3795                           prodl	equ	0xFF3
  3796                           indf0	equ	0xFEF
  3797                           postinc0	equ	0xFEE
  3798                           fsr0h	equ	0xFEA
  3799                           fsr0l	equ	0xFE9
  3800                           wreg	equ	0xFE8
  3801                           postdec1	equ	0xFE5
  3802                           plusw1	equ	0xFE3
  3803                           fsr1l	equ	0xFE1
  3804                           postinc2	equ	0xFDE
  3805                           postdec2	equ	0xFDD
  3806                           plusw2	equ	0xFDB
  3807                           fsr2h	equ	0xFDA
  3808                           fsr2l	equ	0xFD9
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function _putch *****************
  3812 ;; Defined at:
  3813 ;;		line 102 in file "lcd.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  data            1    wreg     unsigned char 
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  data            1    3[COMRAM] unsigned char 
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      void 
  3820 ;; Registers used:
  3821 ;;		wreg, status,2, status,0, cstack
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3828 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3830 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3831 ;;Total ram usage:        1 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    3
  3834 ;; This function calls:
  3835 ;;		_send_byte
  3836 ;; This function is called by:
  3837 ;;		_main
  3838 ;;		_printf
  3839 ;; This function uses a non-reentrant model
  3840 ;;
  3841                           
  3842                           	psect	text3
  3843  00DEA8                     __ptext3:
  3844                           	opt stack 0
  3845  00DEA8                     _putch:
  3846                           	opt stack 27
  3847                           
  3848                           ;incstack = 0
  3849                           ;putch@data stored from wreg
  3850  00DEA8  6E04               	movwf	putch@data,c
  3851                           
  3852                           ;lcd.c: 103: LATDbits.LATD2 = 1;
  3853  00DEAA  848C               	bsf	3980,2,c	;volatile
  3854                           
  3855                           ;lcd.c: 104: send_byte((unsigned char)data);
  3856  00DEAC  5004               	movf	putch@data,w,c
  3857  00DEAE  EC5A  F06F         	call	_send_byte
  3858  00DEB2  0012               	return		;funcret
  3859  00DEB4                     __end_of_putch:
  3860                           	opt stack 0
  3861                           tblptru	equ	0xFF8
  3862                           tblptrh	equ	0xFF7
  3863                           tblptrl	equ	0xFF6
  3864                           tablat	equ	0xFF5
  3865                           prodh	equ	0xFF4
  3866                           prodl	equ	0xFF3
  3867                           indf0	equ	0xFEF
  3868                           postinc0	equ	0xFEE
  3869                           fsr0h	equ	0xFEA
  3870                           fsr0l	equ	0xFE9
  3871                           wreg	equ	0xFE8
  3872                           postdec1	equ	0xFE5
  3873                           plusw1	equ	0xFE3
  3874                           fsr1l	equ	0xFE1
  3875                           postinc2	equ	0xFDE
  3876                           postdec2	equ	0xFDD
  3877                           plusw2	equ	0xFDB
  3878                           fsr2h	equ	0xFDA
  3879                           fsr2l	equ	0xFD9
  3880                           status	equ	0xFD8
  3881                           
  3882 ;; *************** function _fround *****************
  3883 ;; Defined at:
  3884 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3885 ;; Parameters:    Size  Location     Type
  3886 ;;  prec            1    wreg     unsigned char 
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;  prec            1   44[COMRAM] unsigned char 
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  3   35[COMRAM] unsigned char 
  3891 ;; Registers used:
  3892 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3893 ;; Tracked objects:
  3894 ;;		On entry : 0/0
  3895 ;;		On exit  : 0/0
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3898 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3899 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;Total ram usage:       10 bytes
  3903 ;; Hardware stack levels used:    1
  3904 ;; Hardware stack levels required when called:    2
  3905 ;; This function calls:
  3906 ;;		___awdiv
  3907 ;;		___awmod
  3908 ;;		___ftmul
  3909 ;;		___wmul
  3910 ;; This function is called by:
  3911 ;;		_printf
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text4
  3916  00E9A0                     __ptext4:
  3917                           	opt stack 0
  3918  00E9A0                     _fround:
  3919                           	opt stack 27
  3920                           
  3921                           ;incstack = 0
  3922                           ;fround@prec stored from wreg
  3923  00E9A0  6E2D               	movwf	fround@prec,c
  3924                           
  3925                           ;doprnt.c: 413: if(prec>=110)
  3926  00E9A2  0E6D               	movlw	109
  3927  00E9A4  642D               	cpfsgt	fround@prec,c
  3928  00E9A6  D0A8               	goto	l2178
  3929                           
  3930                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3931  00E9A8  0E00               	movlw	0
  3932  00E9AA  6E12               	movwf	___wmul@multiplicand+1,c
  3933  00E9AC  0E03               	movlw	3
  3934  00E9AE  6E11               	movwf	___wmul@multiplicand,c
  3935  00E9B0  0E00               	movlw	0
  3936  00E9B2  6E0A               	movwf	___awdiv@divisor+1,c
  3937  00E9B4  0E0A               	movlw	10
  3938  00E9B6  6E09               	movwf	___awdiv@divisor,c
  3939  00E9B8  0E00               	movlw	0
  3940  00E9BA  6E04               	movwf	___awmod@divisor+1,c
  3941  00E9BC  0E64               	movlw	100
  3942  00E9BE  6E03               	movwf	___awmod@divisor,c
  3943  00E9C0  C02D  F001         	movff	fround@prec,___awmod@dividend
  3944  00E9C4  6A02               	clrf	___awmod@dividend+1,c
  3945  00E9C6  EC7F  F070         	call	___awmod	;wreg free
  3946  00E9CA  C001  F007         	movff	?___awmod,___awdiv@dividend
  3947  00E9CE  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3948  00E9D2  ECF8  F070         	call	___awdiv	;wreg free
  3949  00E9D6  0E09               	movlw	9
  3950  00E9D8  2407               	addwf	?___awdiv,w,c
  3951  00E9DA  6E0F               	movwf	___wmul@multiplier,c
  3952  00E9DC  0E00               	movlw	0
  3953  00E9DE  2008               	addwfc	?___awdiv+1,w,c
  3954  00E9E0  6E10               	movwf	___wmul@multiplier+1,c
  3955  00E9E2  EC8E  F06F         	call	___wmul	;wreg free
  3956  00E9E6  0ED6               	movlw	low __npowers_
  3957  00E9E8  240F               	addwf	?___wmul,w,c
  3958  00E9EA  6EF6               	movwf	tblptrl,c
  3959  00E9EC  0EFE               	movlw	high __npowers_
  3960  00E9EE  2010               	addwfc	?___wmul+1,w,c
  3961  00E9F0  6EF7               	movwf	tblptrh,c
  3962  00E9F2                     	if	1	;There are 3 active tblptr bytes
  3963  00E9F2  6AF8               	clrf	tblptru,c
  3964  00E9F4  0E00               	movlw	low (__mediumconst shr (0+16))
  3965  00E9F6  22F8               	addwfc	tblptru,f,c
  3966  00E9F8                     	endif
  3967  00E9F8  0009               	tblrd		*+
  3968  00E9FA  CFF5 F018          	movff	tablat,___ftmul@f2
  3969  00E9FE  0009               	tblrd		*+
  3970  00EA00  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3971  00EA04  000A               	tblrd		*-
  3972  00EA06  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3973  00EA0A  0E00               	movlw	0
  3974  00EA0C  6E0A               	movwf	___awdiv@divisor+1,c
  3975  00EA0E  0E64               	movlw	100
  3976  00EA10  6E09               	movwf	___awdiv@divisor,c
  3977  00EA12  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3978  00EA16  6A08               	clrf	___awdiv@dividend+1,c
  3979  00EA18  ECF8  F070         	call	___awdiv	;wreg free
  3980  00EA1C  0E12               	movlw	18
  3981  00EA1E  2407               	addwf	?___awdiv,w,c
  3982  00EA20  6E0F               	movwf	___wmul@multiplier,c
  3983  00EA22  0E00               	movlw	0
  3984  00EA24  2008               	addwfc	?___awdiv+1,w,c
  3985  00EA26  6E10               	movwf	___wmul@multiplier+1,c
  3986  00EA28  0E00               	movlw	0
  3987  00EA2A  6E12               	movwf	___wmul@multiplicand+1,c
  3988  00EA2C  0E03               	movlw	3
  3989  00EA2E  6E11               	movwf	___wmul@multiplicand,c
  3990  00EA30  EC8E  F06F         	call	___wmul	;wreg free
  3991  00EA34  0ED6               	movlw	low __npowers_
  3992  00EA36  240F               	addwf	?___wmul,w,c
  3993  00EA38  6EF6               	movwf	tblptrl,c
  3994  00EA3A  0EFE               	movlw	high __npowers_
  3995  00EA3C  2010               	addwfc	?___wmul+1,w,c
  3996  00EA3E  6EF7               	movwf	tblptrh,c
  3997  00EA40                     	if	1	;There are 3 active tblptr bytes
  3998  00EA40  6AF8               	clrf	tblptru,c
  3999  00EA42  0E00               	movlw	low (__mediumconst shr (0+16))
  4000  00EA44  22F8               	addwfc	tblptru,f,c
  4001  00EA46                     	endif
  4002  00EA46  0009               	tblrd		*+
  4003  00EA48  CFF5 F015          	movff	tablat,___ftmul@f1
  4004  00EA4C  0009               	tblrd		*+
  4005  00EA4E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4006  00EA52  000A               	tblrd		*-
  4007  00EA54  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4008  00EA58  EC53  F072         	call	___ftmul	;wreg free
  4009  00EA5C  C015  F02A         	movff	?___ftmul,_fround$844
  4010  00EA60  C016  F02B         	movff	?___ftmul+1,_fround$844+1
  4011  00EA64  C017  F02C         	movff	?___ftmul+2,_fround$844+2
  4012                           
  4013                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4014  00EA68  0E00               	movlw	0
  4015  00EA6A  6E12               	movwf	___wmul@multiplicand+1,c
  4016  00EA6C  0E03               	movlw	3
  4017  00EA6E  6E11               	movwf	___wmul@multiplicand,c
  4018  00EA70  0E00               	movlw	0
  4019  00EA72  6E04               	movwf	___awmod@divisor+1,c
  4020  00EA74  0E0A               	movlw	10
  4021  00EA76  6E03               	movwf	___awmod@divisor,c
  4022  00EA78  C02D  F001         	movff	fround@prec,___awmod@dividend
  4023  00EA7C  6A02               	clrf	___awmod@dividend+1,c
  4024  00EA7E  EC7F  F070         	call	___awmod	;wreg free
  4025  00EA82  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4026  00EA86  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4027  00EA8A  EC8E  F06F         	call	___wmul	;wreg free
  4028  00EA8E  0ED6               	movlw	low __npowers_
  4029  00EA90  240F               	addwf	?___wmul,w,c
  4030  00EA92  6EF6               	movwf	tblptrl,c
  4031  00EA94  0EFE               	movlw	high __npowers_
  4032  00EA96  2010               	addwfc	?___wmul+1,w,c
  4033  00EA98  6EF7               	movwf	tblptrh,c
  4034  00EA9A                     	if	1	;There are 3 active tblptr bytes
  4035  00EA9A  6AF8               	clrf	tblptru,c
  4036  00EA9C  0E00               	movlw	low (__mediumconst shr (0+16))
  4037  00EA9E  22F8               	addwfc	tblptru,f,c
  4038  00EAA0                     	endif
  4039  00EAA0  0009               	tblrd		*+
  4040  00EAA2  CFF5 F018          	movff	tablat,___ftmul@f2
  4041  00EAA6  0009               	tblrd		*+
  4042  00EAA8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4043  00EAAC  000A               	tblrd		*-
  4044  00EAAE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4045  00EAB2  C02A  F015         	movff	_fround$844,___ftmul@f1
  4046  00EAB6  C02B  F016         	movff	_fround$844+1,___ftmul@f1+1
  4047  00EABA  C02C  F017         	movff	_fround$844+2,___ftmul@f1+2
  4048  00EABE  EC53  F072         	call	___ftmul	;wreg free
  4049  00EAC2  C015  F027         	movff	?___ftmul,_fround$845
  4050  00EAC6  C016  F028         	movff	?___ftmul+1,_fround$845+1
  4051  00EACA  C017  F029         	movff	?___ftmul+2,_fround$845+2
  4052                           
  4053                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4054  00EACE  C027  F015         	movff	_fround$845,___ftmul@f1
  4055  00EAD2  C028  F016         	movff	_fround$845+1,___ftmul@f1+1
  4056  00EAD6  C029  F017         	movff	_fround$845+2,___ftmul@f1+2
  4057  00EADA  0E00               	movlw	0
  4058  00EADC  6E18               	movwf	___ftmul@f2,c
  4059  00EADE  0E00               	movlw	0
  4060  00EAE0  6E19               	movwf	___ftmul@f2+1,c
  4061  00EAE2  0E3F               	movlw	63
  4062  00EAE4  6E1A               	movwf	___ftmul@f2+2,c
  4063  00EAE6  EC53  F072         	call	___ftmul	;wreg free
  4064  00EAEA  C015  F024         	movff	?___ftmul,?_fround
  4065  00EAEE  C016  F025         	movff	?___ftmul+1,?_fround+1
  4066  00EAF2  C017  F026         	movff	?___ftmul+2,?_fround+2
  4067  00EAF6  0012               	return	
  4068  00EAF8                     l2178:
  4069                           
  4070                           ;doprnt.c: 415: else if(prec > 10)
  4071  00EAF8  0E0A               	movlw	10
  4072  00EAFA  642D               	cpfsgt	fround@prec,c
  4073  00EAFC  D063               	goto	l2186
  4074                           
  4075                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4076  00EAFE  0E00               	movlw	0
  4077  00EB00  6E12               	movwf	___wmul@multiplicand+1,c
  4078  00EB02  0E03               	movlw	3
  4079  00EB04  6E11               	movwf	___wmul@multiplicand,c
  4080  00EB06  0E00               	movlw	0
  4081  00EB08  6E04               	movwf	___awmod@divisor+1,c
  4082  00EB0A  0E0A               	movlw	10
  4083  00EB0C  6E03               	movwf	___awmod@divisor,c
  4084  00EB0E  C02D  F001         	movff	fround@prec,___awmod@dividend
  4085  00EB12  6A02               	clrf	___awmod@dividend+1,c
  4086  00EB14  EC7F  F070         	call	___awmod	;wreg free
  4087  00EB18  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4088  00EB1C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4089  00EB20  EC8E  F06F         	call	___wmul	;wreg free
  4090  00EB24  0ED6               	movlw	low __npowers_
  4091  00EB26  240F               	addwf	?___wmul,w,c
  4092  00EB28  6EF6               	movwf	tblptrl,c
  4093  00EB2A  0EFE               	movlw	high __npowers_
  4094  00EB2C  2010               	addwfc	?___wmul+1,w,c
  4095  00EB2E  6EF7               	movwf	tblptrh,c
  4096  00EB30                     	if	1	;There are 3 active tblptr bytes
  4097  00EB30  6AF8               	clrf	tblptru,c
  4098  00EB32  0E00               	movlw	low (__mediumconst shr (0+16))
  4099  00EB34  22F8               	addwfc	tblptru,f,c
  4100  00EB36                     	endif
  4101  00EB36  0009               	tblrd		*+
  4102  00EB38  CFF5 F018          	movff	tablat,___ftmul@f2
  4103  00EB3C  0009               	tblrd		*+
  4104  00EB3E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4105  00EB42  000A               	tblrd		*-
  4106  00EB44  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4107  00EB48  0E00               	movlw	0
  4108  00EB4A  6E0A               	movwf	___awdiv@divisor+1,c
  4109  00EB4C  0E0A               	movlw	10
  4110  00EB4E  6E09               	movwf	___awdiv@divisor,c
  4111  00EB50  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4112  00EB54  6A08               	clrf	___awdiv@dividend+1,c
  4113  00EB56  ECF8  F070         	call	___awdiv	;wreg free
  4114  00EB5A  0E09               	movlw	9
  4115  00EB5C  2407               	addwf	?___awdiv,w,c
  4116  00EB5E  6E0F               	movwf	___wmul@multiplier,c
  4117  00EB60  0E00               	movlw	0
  4118  00EB62  2008               	addwfc	?___awdiv+1,w,c
  4119  00EB64  6E10               	movwf	___wmul@multiplier+1,c
  4120  00EB66  0E00               	movlw	0
  4121  00EB68  6E12               	movwf	___wmul@multiplicand+1,c
  4122  00EB6A  0E03               	movlw	3
  4123  00EB6C  6E11               	movwf	___wmul@multiplicand,c
  4124  00EB6E  EC8E  F06F         	call	___wmul	;wreg free
  4125  00EB72  0ED6               	movlw	low __npowers_
  4126  00EB74  240F               	addwf	?___wmul,w,c
  4127  00EB76  6EF6               	movwf	tblptrl,c
  4128  00EB78  0EFE               	movlw	high __npowers_
  4129  00EB7A  2010               	addwfc	?___wmul+1,w,c
  4130  00EB7C  6EF7               	movwf	tblptrh,c
  4131  00EB7E                     	if	1	;There are 3 active tblptr bytes
  4132  00EB7E  6AF8               	clrf	tblptru,c
  4133  00EB80  0E00               	movlw	low (__mediumconst shr (0+16))
  4134  00EB82  22F8               	addwfc	tblptru,f,c
  4135  00EB84                     	endif
  4136  00EB84  0009               	tblrd		*+
  4137  00EB86  CFF5 F015          	movff	tablat,___ftmul@f1
  4138  00EB8A  0009               	tblrd		*+
  4139  00EB8C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4140  00EB90  000A               	tblrd		*-
  4141  00EB92  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4142  00EB96  EC53  F072         	call	___ftmul	;wreg free
  4143  00EB9A  C015  F02A         	movff	?___ftmul,_fround$844
  4144  00EB9E  C016  F02B         	movff	?___ftmul+1,_fround$844+1
  4145  00EBA2  C017  F02C         	movff	?___ftmul+2,_fround$844+2
  4146                           
  4147                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4148  00EBA6  C02A  F015         	movff	_fround$844,___ftmul@f1
  4149  00EBAA  C02B  F016         	movff	_fround$844+1,___ftmul@f1+1
  4150  00EBAE  C02C  F017         	movff	_fround$844+2,___ftmul@f1+2
  4151  00EBB2  0E00               	movlw	0
  4152  00EBB4  6E18               	movwf	___ftmul@f2,c
  4153  00EBB6  0E00               	movlw	0
  4154  00EBB8  6E19               	movwf	___ftmul@f2+1,c
  4155  00EBBA  0E3F               	movlw	63
  4156  00EBBC  6E1A               	movwf	___ftmul@f2+2,c
  4157  00EBBE  EC53  F072         	call	___ftmul	;wreg free
  4158  00EBC2  D793               	goto	L7
  4159  00EBC4                     l2186:
  4160                           
  4161                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4162  00EBC4  502D               	movf	fround@prec,w,c
  4163  00EBC6  0D03               	mullw	3
  4164  00EBC8  0ED6               	movlw	low __npowers_
  4165  00EBCA  24F3               	addwf	prodl,w,c
  4166  00EBCC  6EF6               	movwf	tblptrl,c
  4167  00EBCE  0EFE               	movlw	high __npowers_
  4168  00EBD0  20F4               	addwfc	prodh,w,c
  4169  00EBD2  6EF7               	movwf	tblptrh,c
  4170  00EBD4                     	if	1	;There are 3 active tblptr bytes
  4171  00EBD4  6AF8               	clrf	tblptru,c
  4172  00EBD6  0E00               	movlw	low (__mediumconst shr (0+16))
  4173  00EBD8  22F8               	addwfc	tblptru,f,c
  4174  00EBDA                     	endif
  4175  00EBDA  0009               	tblrd		*+
  4176  00EBDC  CFF5 F015          	movff	tablat,___ftmul@f1
  4177  00EBE0  0009               	tblrd		*+
  4178  00EBE2  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4179  00EBE6  000A               	tblrd		*-
  4180  00EBE8  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4181  00EBEC  0E00               	movlw	0
  4182  00EBEE  6E18               	movwf	___ftmul@f2,c
  4183  00EBF0  0E00               	movlw	0
  4184  00EBF2  6E19               	movwf	___ftmul@f2+1,c
  4185  00EBF4  0E3F               	movlw	63
  4186  00EBF6  6E1A               	movwf	___ftmul@f2+2,c
  4187  00EBF8  EC53  F072         	call	___ftmul	;wreg free
  4188  00EBFC  C015  F024         	movff	?___ftmul,?_fround
  4189  00EC00  C016  F025         	movff	?___ftmul+1,?_fround+1
  4190  00EC04  C017  F026         	movff	?___ftmul+2,?_fround+2
  4191  00EC08  0012               	return	
  4192  00EC0A                     __end_of_fround:
  4193                           	opt stack 0
  4194                           tblptru	equ	0xFF8
  4195                           tblptrh	equ	0xFF7
  4196                           tblptrl	equ	0xFF6
  4197                           tablat	equ	0xFF5
  4198                           prodh	equ	0xFF4
  4199                           prodl	equ	0xFF3
  4200                           indf0	equ	0xFEF
  4201                           postinc0	equ	0xFEE
  4202                           fsr0h	equ	0xFEA
  4203                           fsr0l	equ	0xFE9
  4204                           wreg	equ	0xFE8
  4205                           postdec1	equ	0xFE5
  4206                           plusw1	equ	0xFE3
  4207                           fsr1l	equ	0xFE1
  4208                           postinc2	equ	0xFDE
  4209                           postdec2	equ	0xFDD
  4210                           plusw2	equ	0xFDB
  4211                           fsr2h	equ	0xFDA
  4212                           fsr2l	equ	0xFD9
  4213                           status	equ	0xFD8
  4214                           
  4215 ;; *************** function ___wmul *****************
  4216 ;; Defined at:
  4217 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;  multiplier      2   14[COMRAM] unsigned int 
  4220 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;  product         2   18[COMRAM] unsigned int 
  4223 ;; Return value:  Size  Location     Type
  4224 ;;                  2   14[COMRAM] unsigned int 
  4225 ;; Registers used:
  4226 ;;		wreg, status,2, status,0, prodl, prodh
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4232 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;Total ram usage:        6 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; This function calls:
  4239 ;;		Nothing
  4240 ;; This function is called by:
  4241 ;;		_fround
  4242 ;;		_scale
  4243 ;;		_printf
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           	psect	text5
  4248  00DF1C                     __ptext5:
  4249                           	opt stack 0
  4250  00DF1C                     ___wmul:
  4251                           	opt stack 28
  4252                           
  4253                           ;incstack = 0
  4254  00DF1C  500F               	movf	___wmul@multiplier,w,c
  4255  00DF1E  0211               	mulwf	___wmul@multiplicand,c
  4256  00DF20  CFF3 F013          	movff	prodl,___wmul@product
  4257  00DF24  CFF4 F014          	movff	prodh,___wmul@product+1
  4258  00DF28  500F               	movf	___wmul@multiplier,w,c
  4259  00DF2A  0212               	mulwf	___wmul@multiplicand+1,c
  4260  00DF2C  50F3               	movf	prodl,w,c
  4261  00DF2E  2614               	addwf	___wmul@product+1,f,c
  4262  00DF30  5010               	movf	___wmul@multiplier+1,w,c
  4263  00DF32  0211               	mulwf	___wmul@multiplicand,c
  4264  00DF34  50F3               	movf	prodl,w,c
  4265  00DF36  2614               	addwf	___wmul@product+1,f,c
  4266  00DF38  C013  F00F         	movff	___wmul@product,?___wmul
  4267  00DF3C  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4268  00DF40  0012               	return	
  4269  00DF42                     __end_of___wmul:
  4270                           	opt stack 0
  4271                           tblptru	equ	0xFF8
  4272                           tblptrh	equ	0xFF7
  4273                           tblptrl	equ	0xFF6
  4274                           tablat	equ	0xFF5
  4275                           prodh	equ	0xFF4
  4276                           prodl	equ	0xFF3
  4277                           indf0	equ	0xFEF
  4278                           postinc0	equ	0xFEE
  4279                           fsr0h	equ	0xFEA
  4280                           fsr0l	equ	0xFE9
  4281                           wreg	equ	0xFE8
  4282                           postdec1	equ	0xFE5
  4283                           plusw1	equ	0xFE3
  4284                           fsr1l	equ	0xFE1
  4285                           postinc2	equ	0xFDE
  4286                           postdec2	equ	0xFDD
  4287                           plusw2	equ	0xFDB
  4288                           fsr2h	equ	0xFDA
  4289                           fsr2l	equ	0xFD9
  4290                           status	equ	0xFD8
  4291                           
  4292 ;; *************** function ___ftmul *****************
  4293 ;; Defined at:
  4294 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;  f1              3   20[COMRAM] float 
  4297 ;;  f2              3   23[COMRAM] float 
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  4300 ;;  sign            1   34[COMRAM] unsigned char 
  4301 ;;  cntr            1   33[COMRAM] unsigned char 
  4302 ;;  exp             1   29[COMRAM] unsigned char 
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  3   20[COMRAM] float 
  4305 ;; Registers used:
  4306 ;;		wreg, status,2, status,0, cstack
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4312 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;Total ram usage:       15 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    1
  4319 ;; This function calls:
  4320 ;;		___ftpack
  4321 ;; This function is called by:
  4322 ;;		_fround
  4323 ;;		_scale
  4324 ;;		_printf
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           	psect	text6
  4329  00E4A6                     __ptext6:
  4330                           	opt stack 0
  4331  00E4A6                     ___ftmul:
  4332                           	opt stack 27
  4333                           
  4334                           ;incstack = 0
  4335  00E4A6  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  4336  00E4AA  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  4337  00E4AC  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  4338  00E4AE  3416               	rlcf	___ftmul@f1+1,w,c
  4339  00E4B0  361B               	rlcf	??___ftmul& (0+255),f,c
  4340  00E4B2  E301               	bnc	u1741
  4341  00E4B4  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  4342  00E4B6                     u1741:
  4343  00E4B6  501B               	movf	??___ftmul,w,c
  4344  00E4B8  6E1E               	movwf	___ftmul@exp,c
  4345  00E4BA  501E               	movf	___ftmul@exp,w,c
  4346  00E4BC  A4D8               	btfss	status,2,c
  4347  00E4BE  D007               	goto	l2038
  4348  00E4C0  0E00               	movlw	0
  4349  00E4C2  6E15               	movwf	?___ftmul,c
  4350  00E4C4  0E00               	movlw	0
  4351  00E4C6  6E16               	movwf	?___ftmul+1,c
  4352  00E4C8  0E00               	movlw	0
  4353  00E4CA  6E17               	movwf	?___ftmul+2,c
  4354  00E4CC  0012               	return	
  4355  00E4CE                     l2038:
  4356  00E4CE  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  4357  00E4D2  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  4358  00E4D4  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  4359  00E4D6  3419               	rlcf	___ftmul@f2+1,w,c
  4360  00E4D8  361B               	rlcf	??___ftmul& (0+255),f,c
  4361  00E4DA  E301               	bnc	u1761
  4362  00E4DC  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  4363  00E4DE                     u1761:
  4364  00E4DE  501B               	movf	??___ftmul,w,c
  4365  00E4E0  6E23               	movwf	___ftmul@sign,c
  4366  00E4E2  5023               	movf	___ftmul@sign,w,c
  4367  00E4E4  A4D8               	btfss	status,2,c
  4368  00E4E6  D007               	goto	l2044
  4369  00E4E8  0E00               	movlw	0
  4370  00E4EA  6E15               	movwf	?___ftmul,c
  4371  00E4EC  0E00               	movlw	0
  4372  00E4EE  6E16               	movwf	?___ftmul+1,c
  4373  00E4F0  0E00               	movlw	0
  4374  00E4F2  6E17               	movwf	?___ftmul+2,c
  4375  00E4F4  0012               	return	
  4376  00E4F6                     l2044:
  4377  00E4F6  5023               	movf	___ftmul@sign,w,c
  4378  00E4F8  0F7B               	addlw	123
  4379  00E4FA  261E               	addwf	___ftmul@exp,f,c
  4380  00E4FC  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  4381  00E500  501A               	movf	___ftmul@f2+2,w,c
  4382  00E502  1A23               	xorwf	___ftmul@sign,f,c
  4383  00E504  0E80               	movlw	128
  4384  00E506  1623               	andwf	___ftmul@sign,f,c
  4385  00E508  8E16               	bsf	___ftmul@f1+1,7,c
  4386  00E50A  8E19               	bsf	___ftmul@f2+1,7,c
  4387  00E50C  0EFF               	movlw	255
  4388  00E50E  1618               	andwf	___ftmul@f2,f,c
  4389  00E510  0EFF               	movlw	255
  4390  00E512  1619               	andwf	___ftmul@f2+1,f,c
  4391  00E514  0E00               	movlw	0
  4392  00E516  161A               	andwf	___ftmul@f2+2,f,c
  4393  00E518  0E00               	movlw	0
  4394  00E51A  6E1F               	movwf	___ftmul@f3_as_product,c
  4395  00E51C  0E00               	movlw	0
  4396  00E51E  6E20               	movwf	___ftmul@f3_as_product+1,c
  4397  00E520  0E00               	movlw	0
  4398  00E522  6E21               	movwf	___ftmul@f3_as_product+2,c
  4399  00E524  0E07               	movlw	7
  4400  00E526  6E22               	movwf	___ftmul@cntr,c
  4401  00E528                     l2058:
  4402  00E528  A015               	btfss	___ftmul@f1,0,c
  4403  00E52A  D006               	goto	l2062
  4404  00E52C  5018               	movf	___ftmul@f2,w,c
  4405  00E52E  261F               	addwf	___ftmul@f3_as_product,f,c
  4406  00E530  5019               	movf	___ftmul@f2+1,w,c
  4407  00E532  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4408  00E534  501A               	movf	___ftmul@f2+2,w,c
  4409  00E536  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4410  00E538                     l2062:
  4411  00E538  90D8               	bcf	status,0,c
  4412  00E53A  3217               	rrcf	___ftmul@f1+2,f,c
  4413  00E53C  3216               	rrcf	___ftmul@f1+1,f,c
  4414  00E53E  3215               	rrcf	___ftmul@f1,f,c
  4415  00E540  90D8               	bcf	status,0,c
  4416  00E542  3618               	rlcf	___ftmul@f2,f,c
  4417  00E544  3619               	rlcf	___ftmul@f2+1,f,c
  4418  00E546  361A               	rlcf	___ftmul@f2+2,f,c
  4419  00E548  2E22               	decfsz	___ftmul@cntr,f,c
  4420  00E54A  D7EE               	goto	l2058
  4421  00E54C  0E09               	movlw	9
  4422  00E54E  6E22               	movwf	___ftmul@cntr,c
  4423  00E550                     l2068:
  4424  00E550  A015               	btfss	___ftmul@f1,0,c
  4425  00E552  D006               	goto	l2072
  4426  00E554  5018               	movf	___ftmul@f2,w,c
  4427  00E556  261F               	addwf	___ftmul@f3_as_product,f,c
  4428  00E558  5019               	movf	___ftmul@f2+1,w,c
  4429  00E55A  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  4430  00E55C  501A               	movf	___ftmul@f2+2,w,c
  4431  00E55E  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  4432  00E560                     l2072:
  4433  00E560  90D8               	bcf	status,0,c
  4434  00E562  3217               	rrcf	___ftmul@f1+2,f,c
  4435  00E564  3216               	rrcf	___ftmul@f1+1,f,c
  4436  00E566  3215               	rrcf	___ftmul@f1,f,c
  4437  00E568  90D8               	bcf	status,0,c
  4438  00E56A  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  4439  00E56C  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  4440  00E56E  321F               	rrcf	___ftmul@f3_as_product,f,c
  4441  00E570  2E22               	decfsz	___ftmul@cntr,f,c
  4442  00E572  D7EE               	goto	l2068
  4443  00E574  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4444  00E578  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4445  00E57C  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4446  00E580  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  4447  00E584  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  4448  00E588  EC82  F071         	call	___ftpack	;wreg free
  4449  00E58C  C001  F015         	movff	?___ftpack,?___ftmul
  4450  00E590  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  4451  00E594  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  4452  00E598  0012               	return	
  4453  00E59A                     __end_of___ftmul:
  4454                           	opt stack 0
  4455                           tblptru	equ	0xFF8
  4456                           tblptrh	equ	0xFF7
  4457                           tblptrl	equ	0xFF6
  4458                           tablat	equ	0xFF5
  4459                           prodh	equ	0xFF4
  4460                           prodl	equ	0xFF3
  4461                           indf0	equ	0xFEF
  4462                           postinc0	equ	0xFEE
  4463                           fsr0h	equ	0xFEA
  4464                           fsr0l	equ	0xFE9
  4465                           wreg	equ	0xFE8
  4466                           postdec1	equ	0xFE5
  4467                           plusw1	equ	0xFE3
  4468                           fsr1l	equ	0xFE1
  4469                           postinc2	equ	0xFDE
  4470                           postdec2	equ	0xFDD
  4471                           plusw2	equ	0xFDB
  4472                           fsr2h	equ	0xFDA
  4473                           fsr2l	equ	0xFD9
  4474                           status	equ	0xFD8
  4475                           
  4476 ;; *************** function ___awmod *****************
  4477 ;; Defined at:
  4478 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  dividend        2    0[COMRAM] int 
  4481 ;;  divisor         2    2[COMRAM] int 
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;  sign            1    5[COMRAM] unsigned char 
  4484 ;;  counter         1    4[COMRAM] unsigned char 
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  2    0[COMRAM] int 
  4487 ;; Registers used:
  4488 ;;		wreg, status,2, status,0
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4494 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4495 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;Total ram usage:        6 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; This function calls:
  4501 ;;		Nothing
  4502 ;; This function is called by:
  4503 ;;		_main
  4504 ;;		_fround
  4505 ;;		_scale
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           	psect	text7
  4510  00E0FE                     __ptext7:
  4511                           	opt stack 0
  4512  00E0FE                     ___awmod:
  4513                           	opt stack 28
  4514                           
  4515                           ;incstack = 0
  4516  00E0FE  0E00               	movlw	0
  4517  00E100  6E06               	movwf	___awmod@sign,c
  4518  00E102  AE02               	btfss	___awmod@dividend+1,7,c
  4519  00E104  D006               	goto	l2132
  4520  00E106  6C01               	negf	___awmod@dividend,c
  4521  00E108  1E02               	comf	___awmod@dividend+1,f,c
  4522  00E10A  B0D8               	btfsc	status,0,c
  4523  00E10C  2A02               	incf	___awmod@dividend+1,f,c
  4524  00E10E  0E01               	movlw	1
  4525  00E110  6E06               	movwf	___awmod@sign,c
  4526  00E112                     l2132:
  4527  00E112  AE04               	btfss	___awmod@divisor+1,7,c
  4528  00E114  D004               	goto	l2136
  4529  00E116  6C03               	negf	___awmod@divisor,c
  4530  00E118  1E04               	comf	___awmod@divisor+1,f,c
  4531  00E11A  B0D8               	btfsc	status,0,c
  4532  00E11C  2A04               	incf	___awmod@divisor+1,f,c
  4533  00E11E                     l2136:
  4534  00E11E  5003               	movf	___awmod@divisor,w,c
  4535  00E120  1004               	iorwf	___awmod@divisor+1,w,c
  4536  00E122  B4D8               	btfsc	status,2,c
  4537  00E124  D018               	goto	l2152
  4538  00E126  0E01               	movlw	1
  4539  00E128  6E05               	movwf	___awmod@counter,c
  4540  00E12A  D004               	goto	l2142
  4541  00E12C                     l2140:
  4542  00E12C  90D8               	bcf	status,0,c
  4543  00E12E  3603               	rlcf	___awmod@divisor,f,c
  4544  00E130  3604               	rlcf	___awmod@divisor+1,f,c
  4545  00E132  2A05               	incf	___awmod@counter,f,c
  4546  00E134                     l2142:
  4547  00E134  AE04               	btfss	___awmod@divisor+1,7,c
  4548  00E136  D7FA               	goto	l2140
  4549  00E138                     l2144:
  4550  00E138  5003               	movf	___awmod@divisor,w,c
  4551  00E13A  5C01               	subwf	___awmod@dividend,w,c
  4552  00E13C  5004               	movf	___awmod@divisor+1,w,c
  4553  00E13E  5802               	subwfb	___awmod@dividend+1,w,c
  4554  00E140  A0D8               	btfss	status,0,c
  4555  00E142  D004               	goto	l2148
  4556  00E144  5003               	movf	___awmod@divisor,w,c
  4557  00E146  5E01               	subwf	___awmod@dividend,f,c
  4558  00E148  5004               	movf	___awmod@divisor+1,w,c
  4559  00E14A  5A02               	subwfb	___awmod@dividend+1,f,c
  4560  00E14C                     l2148:
  4561  00E14C  90D8               	bcf	status,0,c
  4562  00E14E  3204               	rrcf	___awmod@divisor+1,f,c
  4563  00E150  3203               	rrcf	___awmod@divisor,f,c
  4564  00E152  2E05               	decfsz	___awmod@counter,f,c
  4565  00E154  D7F1               	goto	l2144
  4566  00E156                     l2152:
  4567  00E156  5006               	movf	___awmod@sign,w,c
  4568  00E158  B4D8               	btfsc	status,2,c
  4569  00E15A  D004               	goto	l2156
  4570  00E15C  6C01               	negf	___awmod@dividend,c
  4571  00E15E  1E02               	comf	___awmod@dividend+1,f,c
  4572  00E160  B0D8               	btfsc	status,0,c
  4573  00E162  2A02               	incf	___awmod@dividend+1,f,c
  4574  00E164                     l2156:
  4575  00E164  C001  F001         	movff	___awmod@dividend,?___awmod
  4576  00E168  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4577  00E16C  0012               	return	
  4578  00E16E                     __end_of___awmod:
  4579                           	opt stack 0
  4580                           tblptru	equ	0xFF8
  4581                           tblptrh	equ	0xFF7
  4582                           tblptrl	equ	0xFF6
  4583                           tablat	equ	0xFF5
  4584                           prodh	equ	0xFF4
  4585                           prodl	equ	0xFF3
  4586                           indf0	equ	0xFEF
  4587                           postinc0	equ	0xFEE
  4588                           fsr0h	equ	0xFEA
  4589                           fsr0l	equ	0xFE9
  4590                           wreg	equ	0xFE8
  4591                           postdec1	equ	0xFE5
  4592                           plusw1	equ	0xFE3
  4593                           fsr1l	equ	0xFE1
  4594                           postinc2	equ	0xFDE
  4595                           postdec2	equ	0xFDD
  4596                           plusw2	equ	0xFDB
  4597                           fsr2h	equ	0xFDA
  4598                           fsr2l	equ	0xFD9
  4599                           status	equ	0xFD8
  4600                           
  4601 ;; *************** function ___awdiv *****************
  4602 ;; Defined at:
  4603 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;  dividend        2    6[COMRAM] int 
  4606 ;;  divisor         2    8[COMRAM] int 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  quotient        2   12[COMRAM] int 
  4609 ;;  sign            1   11[COMRAM] unsigned char 
  4610 ;;  counter         1   10[COMRAM] unsigned char 
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  2    6[COMRAM] int 
  4613 ;; Registers used:
  4614 ;;		wreg, status,2, status,0
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4620 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4621 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4623 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4624 ;;Total ram usage:        8 bytes
  4625 ;; Hardware stack levels used:    1
  4626 ;; This function calls:
  4627 ;;		Nothing
  4628 ;; This function is called by:
  4629 ;;		_fround
  4630 ;;		_scale
  4631 ;;		_printf
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text8
  4636  00E1F0                     __ptext8:
  4637                           	opt stack 0
  4638  00E1F0                     ___awdiv:
  4639                           	opt stack 28
  4640                           
  4641                           ;incstack = 0
  4642  00E1F0  0E00               	movlw	0
  4643  00E1F2  6E0C               	movwf	___awdiv@sign,c
  4644  00E1F4  AE0A               	btfss	___awdiv@divisor+1,7,c
  4645  00E1F6  D006               	goto	l2088
  4646  00E1F8  6C09               	negf	___awdiv@divisor,c
  4647  00E1FA  1E0A               	comf	___awdiv@divisor+1,f,c
  4648  00E1FC  B0D8               	btfsc	status,0,c
  4649  00E1FE  2A0A               	incf	___awdiv@divisor+1,f,c
  4650  00E200  0E01               	movlw	1
  4651  00E202  6E0C               	movwf	___awdiv@sign,c
  4652  00E204                     l2088:
  4653  00E204  AE08               	btfss	___awdiv@dividend+1,7,c
  4654  00E206  D006               	goto	l2094
  4655  00E208  6C07               	negf	___awdiv@dividend,c
  4656  00E20A  1E08               	comf	___awdiv@dividend+1,f,c
  4657  00E20C  B0D8               	btfsc	status,0,c
  4658  00E20E  2A08               	incf	___awdiv@dividend+1,f,c
  4659  00E210  0E01               	movlw	1
  4660  00E212  1A0C               	xorwf	___awdiv@sign,f,c
  4661  00E214                     l2094:
  4662  00E214  0E00               	movlw	0
  4663  00E216  6E0E               	movwf	___awdiv@quotient+1,c
  4664  00E218  0E00               	movlw	0
  4665  00E21A  6E0D               	movwf	___awdiv@quotient,c
  4666  00E21C  5009               	movf	___awdiv@divisor,w,c
  4667  00E21E  100A               	iorwf	___awdiv@divisor+1,w,c
  4668  00E220  B4D8               	btfsc	status,2,c
  4669  00E222  D01C               	goto	l2116
  4670  00E224  0E01               	movlw	1
  4671  00E226  6E0B               	movwf	___awdiv@counter,c
  4672  00E228  D004               	goto	l2102
  4673  00E22A                     l2100:
  4674  00E22A  90D8               	bcf	status,0,c
  4675  00E22C  3609               	rlcf	___awdiv@divisor,f,c
  4676  00E22E  360A               	rlcf	___awdiv@divisor+1,f,c
  4677  00E230  2A0B               	incf	___awdiv@counter,f,c
  4678  00E232                     l2102:
  4679  00E232  AE0A               	btfss	___awdiv@divisor+1,7,c
  4680  00E234  D7FA               	goto	l2100
  4681  00E236                     l2104:
  4682  00E236  90D8               	bcf	status,0,c
  4683  00E238  360D               	rlcf	___awdiv@quotient,f,c
  4684  00E23A  360E               	rlcf	___awdiv@quotient+1,f,c
  4685  00E23C  5009               	movf	___awdiv@divisor,w,c
  4686  00E23E  5C07               	subwf	___awdiv@dividend,w,c
  4687  00E240  500A               	movf	___awdiv@divisor+1,w,c
  4688  00E242  5808               	subwfb	___awdiv@dividend+1,w,c
  4689  00E244  A0D8               	btfss	status,0,c
  4690  00E246  D005               	goto	l2112
  4691  00E248  5009               	movf	___awdiv@divisor,w,c
  4692  00E24A  5E07               	subwf	___awdiv@dividend,f,c
  4693  00E24C  500A               	movf	___awdiv@divisor+1,w,c
  4694  00E24E  5A08               	subwfb	___awdiv@dividend+1,f,c
  4695  00E250  800D               	bsf	___awdiv@quotient,0,c
  4696  00E252                     l2112:
  4697  00E252  90D8               	bcf	status,0,c
  4698  00E254  320A               	rrcf	___awdiv@divisor+1,f,c
  4699  00E256  3209               	rrcf	___awdiv@divisor,f,c
  4700  00E258  2E0B               	decfsz	___awdiv@counter,f,c
  4701  00E25A  D7ED               	goto	l2104
  4702  00E25C                     l2116:
  4703  00E25C  500C               	movf	___awdiv@sign,w,c
  4704  00E25E  B4D8               	btfsc	status,2,c
  4705  00E260  D004               	goto	l2120
  4706  00E262  6C0D               	negf	___awdiv@quotient,c
  4707  00E264  1E0E               	comf	___awdiv@quotient+1,f,c
  4708  00E266  B0D8               	btfsc	status,0,c
  4709  00E268  2A0E               	incf	___awdiv@quotient+1,f,c
  4710  00E26A                     l2120:
  4711  00E26A  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4712  00E26E  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4713  00E272  0012               	return	
  4714  00E274                     __end_of___awdiv:
  4715                           	opt stack 0
  4716                           tblptru	equ	0xFF8
  4717                           tblptrh	equ	0xFF7
  4718                           tblptrl	equ	0xFF6
  4719                           tablat	equ	0xFF5
  4720                           prodh	equ	0xFF4
  4721                           prodl	equ	0xFF3
  4722                           indf0	equ	0xFEF
  4723                           postinc0	equ	0xFEE
  4724                           fsr0h	equ	0xFEA
  4725                           fsr0l	equ	0xFE9
  4726                           wreg	equ	0xFE8
  4727                           postdec1	equ	0xFE5
  4728                           plusw1	equ	0xFE3
  4729                           fsr1l	equ	0xFE1
  4730                           postinc2	equ	0xFDE
  4731                           postdec2	equ	0xFDD
  4732                           plusw2	equ	0xFDB
  4733                           fsr2h	equ	0xFDA
  4734                           fsr2l	equ	0xFD9
  4735                           status	equ	0xFD8
  4736                           
  4737 ;; *************** function __tdiv_to_l_ *****************
  4738 ;; Defined at:
  4739 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdivl.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;  f1              3    0[COMRAM] float 
  4742 ;;  f2              3    3[COMRAM] float 
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;  quot            4    9[COMRAM] unsigned long 
  4745 ;;  exp1            1   14[COMRAM] unsigned char 
  4746 ;;  cntr            1   13[COMRAM] unsigned char 
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  4    0[COMRAM] unsigned long 
  4749 ;; Registers used:
  4750 ;;		wreg, status,2, status,0
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4756 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4757 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4758 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4759 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4760 ;;Total ram usage:       15 bytes
  4761 ;; Hardware stack levels used:    1
  4762 ;; This function calls:
  4763 ;;		Nothing
  4764 ;; This function is called by:
  4765 ;;		_printf
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           	psect	text9
  4770  00E6C2                     __ptext9:
  4771                           	opt stack 0
  4772  00E6C2                     __tdiv_to_l_:
  4773                           	opt stack 29
  4774                           
  4775                           ;incstack = 0
  4776  00E6C2  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4777  00E6C6  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4778  00E6C8  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4779  00E6CA  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4780  00E6CC  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4781  00E6CE  E301               	bnc	u1991
  4782  00E6D0  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4783  00E6D2                     u1991:
  4784  00E6D2  5007               	movf	??__tdiv_to_l_,w,c
  4785  00E6D4  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4786  00E6D6  500F               	movf	__tdiv_to_l_@exp1,w,c
  4787  00E6D8  A4D8               	btfss	status,2,c
  4788  00E6DA  D009               	goto	l2234
  4789  00E6DC  0E00               	movlw	0
  4790  00E6DE  6E01               	movwf	?__tdiv_to_l_,c
  4791  00E6E0  0E00               	movlw	0
  4792  00E6E2  6E02               	movwf	?__tdiv_to_l_+1,c
  4793  00E6E4  0E00               	movlw	0
  4794  00E6E6  6E03               	movwf	?__tdiv_to_l_+2,c
  4795  00E6E8  0E00               	movlw	0
  4796  00E6EA  6E04               	movwf	?__tdiv_to_l_+3,c
  4797  00E6EC  0012               	return	
  4798  00E6EE                     l2234:
  4799  00E6EE  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4800  00E6F2  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4801  00E6F4  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4802  00E6F6  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4803  00E6F8  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4804  00E6FA  E301               	bnc	u2011
  4805  00E6FC  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4806  00E6FE                     u2011:
  4807  00E6FE  5007               	movf	??__tdiv_to_l_,w,c
  4808  00E700  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4809  00E702  500E               	movf	__tdiv_to_l_@cntr,w,c
  4810  00E704  A4D8               	btfss	status,2,c
  4811  00E706  D009               	goto	l2240
  4812  00E708  0E00               	movlw	0
  4813  00E70A  6E01               	movwf	?__tdiv_to_l_,c
  4814  00E70C  0E00               	movlw	0
  4815  00E70E  6E02               	movwf	?__tdiv_to_l_+1,c
  4816  00E710  0E00               	movlw	0
  4817  00E712  6E03               	movwf	?__tdiv_to_l_+2,c
  4818  00E714  0E00               	movlw	0
  4819  00E716  6E04               	movwf	?__tdiv_to_l_+3,c
  4820  00E718  0012               	return	
  4821  00E71A                     l2240:
  4822  00E71A  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4823  00E71C  0EFF               	movlw	255
  4824  00E71E  1601               	andwf	__tdiv_to_l_@f1,f,c
  4825  00E720  0EFF               	movlw	255
  4826  00E722  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4827  00E724  0E00               	movlw	0
  4828  00E726  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4829  00E728  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4830  00E72A  0EFF               	movlw	255
  4831  00E72C  1604               	andwf	__tdiv_to_l_@f2,f,c
  4832  00E72E  0EFF               	movlw	255
  4833  00E730  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4834  00E732  0E00               	movlw	0
  4835  00E734  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4836  00E736  0E00               	movlw	0
  4837  00E738  6E0A               	movwf	__tdiv_to_l_@quot,c
  4838  00E73A  0E00               	movlw	0
  4839  00E73C  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4840  00E73E  0E00               	movlw	0
  4841  00E740  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4842  00E742  0E00               	movlw	0
  4843  00E744  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4844  00E746  0E7F               	movlw	127
  4845  00E748  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4846  00E74A  500E               	movf	__tdiv_to_l_@cntr,w,c
  4847  00E74C  0F98               	addlw	152
  4848  00E74E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4849  00E750  0E18               	movlw	24
  4850  00E752  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4851  00E754                     l503:
  4852  00E754  90D8               	bcf	status,0,c
  4853  00E756  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4854  00E758  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4855  00E75A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4856  00E75C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4857  00E75E  5004               	movf	__tdiv_to_l_@f2,w,c
  4858  00E760  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4859  00E762  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4860  00E764  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4861  00E766  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4862  00E768  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4863  00E76A  A0D8               	btfss	status,0,c
  4864  00E76C  D007               	goto	l504
  4865  00E76E  5004               	movf	__tdiv_to_l_@f2,w,c
  4866  00E770  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4867  00E772  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4868  00E774  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4869  00E776  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4870  00E778  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4871  00E77A  800A               	bsf	__tdiv_to_l_@quot,0,c
  4872  00E77C                     l504:
  4873  00E77C  90D8               	bcf	status,0,c
  4874  00E77E  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4875  00E780  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4876  00E782  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4877  00E784  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4878  00E786  D7E6               	goto	l503
  4879  00E788  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4880  00E78A  D016               	goto	l2274
  4881  00E78C  500F               	movf	__tdiv_to_l_@exp1,w,c
  4882  00E78E  0A80               	xorlw	128
  4883  00E790  0F97               	addlw	151
  4884  00E792  B0D8               	btfsc	status,0,c
  4885  00E794  D009               	goto	l2270
  4886  00E796  0E00               	movlw	0
  4887  00E798  6E01               	movwf	?__tdiv_to_l_,c
  4888  00E79A  0E00               	movlw	0
  4889  00E79C  6E02               	movwf	?__tdiv_to_l_+1,c
  4890  00E79E  0E00               	movlw	0
  4891  00E7A0  6E03               	movwf	?__tdiv_to_l_+2,c
  4892  00E7A2  0E00               	movlw	0
  4893  00E7A4  6E04               	movwf	?__tdiv_to_l_+3,c
  4894  00E7A6  0012               	return	
  4895  00E7A8                     l2270:
  4896  00E7A8  90D8               	bcf	status,0,c
  4897  00E7AA  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4898  00E7AC  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4899  00E7AE  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4900  00E7B0  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4901  00E7B2  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4902  00E7B4  D7F9               	goto	l2270
  4903  00E7B6  D015               	goto	l510
  4904  00E7B8                     l2274:
  4905  00E7B8  0E17               	movlw	23
  4906  00E7BA  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4907  00E7BC  D00F               	goto	l2282
  4908  00E7BE  0E00               	movlw	0
  4909  00E7C0  6E01               	movwf	?__tdiv_to_l_,c
  4910  00E7C2  0E00               	movlw	0
  4911  00E7C4  6E02               	movwf	?__tdiv_to_l_+1,c
  4912  00E7C6  0E00               	movlw	0
  4913  00E7C8  6E03               	movwf	?__tdiv_to_l_+2,c
  4914  00E7CA  0E00               	movlw	0
  4915  00E7CC  6E04               	movwf	?__tdiv_to_l_+3,c
  4916  00E7CE  0012               	return	
  4917  00E7D0                     l2280:
  4918  00E7D0  90D8               	bcf	status,0,c
  4919  00E7D2  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4920  00E7D4  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4921  00E7D6  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4922  00E7D8  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4923  00E7DA  060F               	decf	__tdiv_to_l_@exp1,f,c
  4924  00E7DC                     l2282:
  4925  00E7DC  500F               	movf	__tdiv_to_l_@exp1,w,c
  4926  00E7DE  A4D8               	btfss	status,2,c
  4927  00E7E0  D7F7               	goto	l2280
  4928  00E7E2                     l510:
  4929  00E7E2  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4930  00E7E6  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4931  00E7EA  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4932  00E7EE  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4933  00E7F2  0012               	return		;funcret
  4934  00E7F4                     __end_of__tdiv_to_l_:
  4935                           	opt stack 0
  4936                           tblptru	equ	0xFF8
  4937                           tblptrh	equ	0xFF7
  4938                           tblptrl	equ	0xFF6
  4939                           tablat	equ	0xFF5
  4940                           prodh	equ	0xFF4
  4941                           prodl	equ	0xFF3
  4942                           indf0	equ	0xFEF
  4943                           postinc0	equ	0xFEE
  4944                           fsr0h	equ	0xFEA
  4945                           fsr0l	equ	0xFE9
  4946                           wreg	equ	0xFE8
  4947                           postdec1	equ	0xFE5
  4948                           plusw1	equ	0xFE3
  4949                           fsr1l	equ	0xFE1
  4950                           postinc2	equ	0xFDE
  4951                           postdec2	equ	0xFDD
  4952                           plusw2	equ	0xFDB
  4953                           fsr2h	equ	0xFDA
  4954                           fsr2l	equ	0xFD9
  4955                           status	equ	0xFD8
  4956                           
  4957 ;; *************** function __div_to_l_ *****************
  4958 ;; Defined at:
  4959 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fldivl.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;  f1              3    0[COMRAM] unsigned long 
  4962 ;;  f2              3    3[COMRAM] unsigned long 
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;  quot            4    6[COMRAM] unsigned long 
  4965 ;;  exp1            1   11[COMRAM] unsigned char 
  4966 ;;  cntr            1   10[COMRAM] unsigned char 
  4967 ;; Return value:  Size  Location     Type
  4968 ;;                  4    0[COMRAM] unsigned long 
  4969 ;; Registers used:
  4970 ;;		wreg, status,2, status,0
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4976 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4977 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4979 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4980 ;;Total ram usage:       12 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; This function calls:
  4983 ;;		Nothing
  4984 ;; This function is called by:
  4985 ;;		_printf
  4986 ;; This function uses a non-reentrant model
  4987 ;;
  4988                           
  4989                           	psect	text10
  4990  00E59A                     __ptext10:
  4991                           	opt stack 0
  4992  00E59A                     __div_to_l_:
  4993                           	opt stack 29
  4994                           
  4995                           ;incstack = 0
  4996  00E59A  3403               	rlcf	__div_to_l_@f1+2,w,c
  4997  00E59C  3404               	rlcf	__div_to_l_@f1+3,w,c
  4998  00E59E  6E0C               	movwf	__div_to_l_@exp1,c
  4999  00E5A0  500C               	movf	__div_to_l_@exp1,w,c
  5000  00E5A2  A4D8               	btfss	status,2,c
  5001  00E5A4  D009               	goto	l2290
  5002  00E5A6  0E00               	movlw	0
  5003  00E5A8  6E01               	movwf	?__div_to_l_,c
  5004  00E5AA  0E00               	movlw	0
  5005  00E5AC  6E02               	movwf	?__div_to_l_+1,c
  5006  00E5AE  0E00               	movlw	0
  5007  00E5B0  6E03               	movwf	?__div_to_l_+2,c
  5008  00E5B2  0E00               	movlw	0
  5009  00E5B4  6E04               	movwf	?__div_to_l_+3,c
  5010  00E5B6  0012               	return	
  5011  00E5B8                     l2290:
  5012  00E5B8  3406               	rlcf	__div_to_l_@f2+2,w,c
  5013  00E5BA  3407               	rlcf	__div_to_l_@f2+3,w,c
  5014  00E5BC  6E0B               	movwf	__div_to_l_@cntr,c
  5015  00E5BE  500B               	movf	__div_to_l_@cntr,w,c
  5016  00E5C0  A4D8               	btfss	status,2,c
  5017  00E5C2  D009               	goto	l2296
  5018  00E5C4  0E00               	movlw	0
  5019  00E5C6  6E01               	movwf	?__div_to_l_,c
  5020  00E5C8  0E00               	movlw	0
  5021  00E5CA  6E02               	movwf	?__div_to_l_+1,c
  5022  00E5CC  0E00               	movlw	0
  5023  00E5CE  6E03               	movwf	?__div_to_l_+2,c
  5024  00E5D0  0E00               	movlw	0
  5025  00E5D2  6E04               	movwf	?__div_to_l_+3,c
  5026  00E5D4  0012               	return	
  5027  00E5D6                     l2296:
  5028  00E5D6  8E03               	bsf	__div_to_l_@f1+2,7,c
  5029  00E5D8  0EFF               	movlw	255
  5030  00E5DA  1601               	andwf	__div_to_l_@f1,f,c
  5031  00E5DC  0EFF               	movlw	255
  5032  00E5DE  1602               	andwf	__div_to_l_@f1+1,f,c
  5033  00E5E0  0EFF               	movlw	255
  5034  00E5E2  1603               	andwf	__div_to_l_@f1+2,f,c
  5035  00E5E4  0E00               	movlw	0
  5036  00E5E6  1604               	andwf	__div_to_l_@f1+3,f,c
  5037  00E5E8  8E06               	bsf	__div_to_l_@f2+2,7,c
  5038  00E5EA  0EFF               	movlw	255
  5039  00E5EC  1604               	andwf	__div_to_l_@f2,f,c
  5040  00E5EE  0EFF               	movlw	255
  5041  00E5F0  1605               	andwf	__div_to_l_@f2+1,f,c
  5042  00E5F2  0EFF               	movlw	255
  5043  00E5F4  1606               	andwf	__div_to_l_@f2+2,f,c
  5044  00E5F6  0E00               	movlw	0
  5045  00E5F8  1607               	andwf	__div_to_l_@f2+3,f,c
  5046  00E5FA  0E00               	movlw	0
  5047  00E5FC  6E07               	movwf	__div_to_l_@quot,c
  5048  00E5FE  0E00               	movlw	0
  5049  00E600  6E08               	movwf	__div_to_l_@quot+1,c
  5050  00E602  0E00               	movlw	0
  5051  00E604  6E09               	movwf	__div_to_l_@quot+2,c
  5052  00E606  0E00               	movlw	0
  5053  00E608  6E0A               	movwf	__div_to_l_@quot+3,c
  5054  00E60A  0E7F               	movlw	127
  5055  00E60C  5E0C               	subwf	__div_to_l_@exp1,f,c
  5056  00E60E  500B               	movf	__div_to_l_@cntr,w,c
  5057  00E610  0FA0               	addlw	160
  5058  00E612  5E0C               	subwf	__div_to_l_@exp1,f,c
  5059  00E614  0E20               	movlw	32
  5060  00E616  6E0B               	movwf	__div_to_l_@cntr,c
  5061  00E618                     l2310:
  5062  00E618  90D8               	bcf	status,0,c
  5063  00E61A  3607               	rlcf	__div_to_l_@quot,f,c
  5064  00E61C  3608               	rlcf	__div_to_l_@quot+1,f,c
  5065  00E61E  3609               	rlcf	__div_to_l_@quot+2,f,c
  5066  00E620  360A               	rlcf	__div_to_l_@quot+3,f,c
  5067  00E622  5004               	movf	__div_to_l_@f2,w,c
  5068  00E624  5C01               	subwf	__div_to_l_@f1,w,c
  5069  00E626  5005               	movf	__div_to_l_@f2+1,w,c
  5070  00E628  5802               	subwfb	__div_to_l_@f1+1,w,c
  5071  00E62A  5006               	movf	__div_to_l_@f2+2,w,c
  5072  00E62C  5803               	subwfb	__div_to_l_@f1+2,w,c
  5073  00E62E  5007               	movf	__div_to_l_@f2+3,w,c
  5074  00E630  5804               	subwfb	__div_to_l_@f1+3,w,c
  5075  00E632  A0D8               	btfss	status,0,c
  5076  00E634  D009               	goto	l2318
  5077  00E636  5004               	movf	__div_to_l_@f2,w,c
  5078  00E638  5E01               	subwf	__div_to_l_@f1,f,c
  5079  00E63A  5005               	movf	__div_to_l_@f2+1,w,c
  5080  00E63C  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5081  00E63E  5006               	movf	__div_to_l_@f2+2,w,c
  5082  00E640  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5083  00E642  5007               	movf	__div_to_l_@f2+3,w,c
  5084  00E644  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5085  00E646  8007               	bsf	__div_to_l_@quot,0,c
  5086  00E648                     l2318:
  5087  00E648  90D8               	bcf	status,0,c
  5088  00E64A  3601               	rlcf	__div_to_l_@f1,f,c
  5089  00E64C  3602               	rlcf	__div_to_l_@f1+1,f,c
  5090  00E64E  3603               	rlcf	__div_to_l_@f1+2,f,c
  5091  00E650  3604               	rlcf	__div_to_l_@f1+3,f,c
  5092  00E652  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5093  00E654  D7E1               	goto	l2310
  5094  00E656  AE0C               	btfss	__div_to_l_@exp1,7,c
  5095  00E658  D016               	goto	l2334
  5096  00E65A  500C               	movf	__div_to_l_@exp1,w,c
  5097  00E65C  0A80               	xorlw	128
  5098  00E65E  0F9F               	addlw	159
  5099  00E660  B0D8               	btfsc	status,0,c
  5100  00E662  D009               	goto	l2330
  5101  00E664  0E00               	movlw	0
  5102  00E666  6E01               	movwf	?__div_to_l_,c
  5103  00E668  0E00               	movlw	0
  5104  00E66A  6E02               	movwf	?__div_to_l_+1,c
  5105  00E66C  0E00               	movlw	0
  5106  00E66E  6E03               	movwf	?__div_to_l_+2,c
  5107  00E670  0E00               	movlw	0
  5108  00E672  6E04               	movwf	?__div_to_l_+3,c
  5109  00E674  0012               	return	
  5110  00E676                     l2330:
  5111  00E676  90D8               	bcf	status,0,c
  5112  00E678  320A               	rrcf	__div_to_l_@quot+3,f,c
  5113  00E67A  3209               	rrcf	__div_to_l_@quot+2,f,c
  5114  00E67C  3208               	rrcf	__div_to_l_@quot+1,f,c
  5115  00E67E  3207               	rrcf	__div_to_l_@quot,f,c
  5116  00E680  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5117  00E682  D7F9               	goto	l2330
  5118  00E684  D015               	goto	l406
  5119  00E686                     l2334:
  5120  00E686  0E1F               	movlw	31
  5121  00E688  640C               	cpfsgt	__div_to_l_@exp1,c
  5122  00E68A  D00F               	goto	l2342
  5123  00E68C  0E00               	movlw	0
  5124  00E68E  6E01               	movwf	?__div_to_l_,c
  5125  00E690  0E00               	movlw	0
  5126  00E692  6E02               	movwf	?__div_to_l_+1,c
  5127  00E694  0E00               	movlw	0
  5128  00E696  6E03               	movwf	?__div_to_l_+2,c
  5129  00E698  0E00               	movlw	0
  5130  00E69A  6E04               	movwf	?__div_to_l_+3,c
  5131  00E69C  0012               	return	
  5132  00E69E                     l2340:
  5133  00E69E  90D8               	bcf	status,0,c
  5134  00E6A0  3607               	rlcf	__div_to_l_@quot,f,c
  5135  00E6A2  3608               	rlcf	__div_to_l_@quot+1,f,c
  5136  00E6A4  3609               	rlcf	__div_to_l_@quot+2,f,c
  5137  00E6A6  360A               	rlcf	__div_to_l_@quot+3,f,c
  5138  00E6A8  060C               	decf	__div_to_l_@exp1,f,c
  5139  00E6AA                     l2342:
  5140  00E6AA  500C               	movf	__div_to_l_@exp1,w,c
  5141  00E6AC  A4D8               	btfss	status,2,c
  5142  00E6AE  D7F7               	goto	l2340
  5143  00E6B0                     l406:
  5144  00E6B0  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5145  00E6B4  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5146  00E6B8  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5147  00E6BC  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5148  00E6C0  0012               	return		;funcret
  5149  00E6C2                     __end_of__div_to_l_:
  5150                           	opt stack 0
  5151                           tblptru	equ	0xFF8
  5152                           tblptrh	equ	0xFF7
  5153                           tblptrl	equ	0xFF6
  5154                           tablat	equ	0xFF5
  5155                           prodh	equ	0xFF4
  5156                           prodl	equ	0xFF3
  5157                           indf0	equ	0xFEF
  5158                           postinc0	equ	0xFEE
  5159                           fsr0h	equ	0xFEA
  5160                           fsr0l	equ	0xFE9
  5161                           wreg	equ	0xFE8
  5162                           postdec1	equ	0xFE5
  5163                           plusw1	equ	0xFE3
  5164                           fsr1l	equ	0xFE1
  5165                           postinc2	equ	0xFDE
  5166                           postdec2	equ	0xFDD
  5167                           plusw2	equ	0xFDB
  5168                           fsr2h	equ	0xFDA
  5169                           fsr2l	equ	0xFD9
  5170                           status	equ	0xFD8
  5171                           
  5172 ;; *************** function ___lltoft *****************
  5173 ;; Defined at:
  5174 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lltoft.c"
  5175 ;; Parameters:    Size  Location     Type
  5176 ;;  c               4    8[COMRAM] unsigned long 
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;  exp             1   16[COMRAM] unsigned char 
  5179 ;; Return value:  Size  Location     Type
  5180 ;;                  3    8[COMRAM] float 
  5181 ;; Registers used:
  5182 ;;		wreg, status,2, status,0, cstack
  5183 ;; Tracked objects:
  5184 ;;		On entry : 0/0
  5185 ;;		On exit  : 0/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5188 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;Total ram usage:        9 bytes
  5193 ;; Hardware stack levels used:    1
  5194 ;; Hardware stack levels required when called:    1
  5195 ;; This function calls:
  5196 ;;		___ftpack
  5197 ;; This function is called by:
  5198 ;;		_printf
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text11
  5203  00DFD2                     __ptext11:
  5204                           	opt stack 0
  5205  00DFD2                     ___lltoft:
  5206                           	opt stack 28
  5207                           
  5208                           ;incstack = 0
  5209  00DFD2  0E8E               	movlw	142
  5210  00DFD4  6E11               	movwf	___lltoft@exp,c
  5211  00DFD6  D006               	goto	l2462
  5212  00DFD8                     l2460:
  5213  00DFD8  90D8               	bcf	status,0,c
  5214  00DFDA  320C               	rrcf	___lltoft@c+3,f,c
  5215  00DFDC  320B               	rrcf	___lltoft@c+2,f,c
  5216  00DFDE  320A               	rrcf	___lltoft@c+1,f,c
  5217  00DFE0  3209               	rrcf	___lltoft@c,f,c
  5218  00DFE2  2A11               	incf	___lltoft@exp,f,c
  5219  00DFE4                     l2462:
  5220  00DFE4  0E00               	movlw	0
  5221  00DFE6  1409               	andwf	___lltoft@c,w,c
  5222  00DFE8  6E0D               	movwf	??___lltoft& (0+255),c
  5223  00DFEA  0E00               	movlw	0
  5224  00DFEC  140A               	andwf	___lltoft@c+1,w,c
  5225  00DFEE  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  5226  00DFF0  0E00               	movlw	0
  5227  00DFF2  140B               	andwf	___lltoft@c+2,w,c
  5228  00DFF4  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  5229  00DFF6  0EFF               	movlw	255
  5230  00DFF8  140C               	andwf	___lltoft@c+3,w,c
  5231  00DFFA  6E10               	movwf	(??___lltoft+3)& (0+255),c
  5232  00DFFC  500D               	movf	??___lltoft,w,c
  5233  00DFFE  100E               	iorwf	??___lltoft+1,w,c
  5234  00E000  100F               	iorwf	??___lltoft+2,w,c
  5235  00E002  1010               	iorwf	??___lltoft+3,w,c
  5236  00E004  A4D8               	btfss	status,2,c
  5237  00E006  D7E8               	goto	l2460
  5238  00E008  C009  F001         	movff	___lltoft@c,___ftpack@arg
  5239  00E00C  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5240  00E010  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5241  00E014  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  5242  00E018  0E00               	movlw	0
  5243  00E01A  6E05               	movwf	___ftpack@sign,c
  5244  00E01C  EC82  F071         	call	___ftpack	;wreg free
  5245  00E020  C001  F009         	movff	?___ftpack,?___lltoft
  5246  00E024  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  5247  00E028  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  5248  00E02C  0012               	return	
  5249  00E02E                     __end_of___lltoft:
  5250                           	opt stack 0
  5251                           tblptru	equ	0xFF8
  5252                           tblptrh	equ	0xFF7
  5253                           tblptrl	equ	0xFF6
  5254                           tablat	equ	0xFF5
  5255                           prodh	equ	0xFF4
  5256                           prodl	equ	0xFF3
  5257                           indf0	equ	0xFEF
  5258                           postinc0	equ	0xFEE
  5259                           fsr0h	equ	0xFEA
  5260                           fsr0l	equ	0xFE9
  5261                           wreg	equ	0xFE8
  5262                           postdec1	equ	0xFE5
  5263                           plusw1	equ	0xFE3
  5264                           fsr1l	equ	0xFE1
  5265                           postinc2	equ	0xFDE
  5266                           postdec2	equ	0xFDD
  5267                           plusw2	equ	0xFDB
  5268                           fsr2h	equ	0xFDA
  5269                           fsr2l	equ	0xFD9
  5270                           status	equ	0xFD8
  5271                           
  5272 ;; *************** function ___llmod *****************
  5273 ;; Defined at:
  5274 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  dividend        4   13[COMRAM] unsigned long 
  5277 ;;  divisor         4   17[COMRAM] unsigned long 
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  counter         1   21[COMRAM] unsigned char 
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  4   13[COMRAM] unsigned long 
  5282 ;; Registers used:
  5283 ;;		wreg, status,2, status,0
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5289 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5290 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5293 ;;Total ram usage:        9 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; This function calls:
  5296 ;;		Nothing
  5297 ;; This function is called by:
  5298 ;;		_printf
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           	psect	text12
  5303  00E02E                     __ptext12:
  5304                           	opt stack 0
  5305  00E02E                     ___llmod:
  5306                           	opt stack 29
  5307                           
  5308                           ;incstack = 0
  5309  00E02E  5012               	movf	___llmod@divisor,w,c
  5310  00E030  1013               	iorwf	___llmod@divisor+1,w,c
  5311  00E032  1014               	iorwf	___llmod@divisor+2,w,c
  5312  00E034  1015               	iorwf	___llmod@divisor+3,w,c
  5313  00E036  B4D8               	btfsc	status,2,c
  5314  00E038  D024               	goto	l590
  5315  00E03A  0E01               	movlw	1
  5316  00E03C  6E16               	movwf	___llmod@counter,c
  5317  00E03E  D006               	goto	l2448
  5318  00E040                     l2446:
  5319  00E040  90D8               	bcf	status,0,c
  5320  00E042  3612               	rlcf	___llmod@divisor,f,c
  5321  00E044  3613               	rlcf	___llmod@divisor+1,f,c
  5322  00E046  3614               	rlcf	___llmod@divisor+2,f,c
  5323  00E048  3615               	rlcf	___llmod@divisor+3,f,c
  5324  00E04A  2A16               	incf	___llmod@counter,f,c
  5325  00E04C                     l2448:
  5326  00E04C  AE15               	btfss	___llmod@divisor+3,7,c
  5327  00E04E  D7F8               	goto	l2446
  5328  00E050                     l2450:
  5329  00E050  5012               	movf	___llmod@divisor,w,c
  5330  00E052  5C0E               	subwf	___llmod@dividend,w,c
  5331  00E054  5013               	movf	___llmod@divisor+1,w,c
  5332  00E056  580F               	subwfb	___llmod@dividend+1,w,c
  5333  00E058  5014               	movf	___llmod@divisor+2,w,c
  5334  00E05A  5810               	subwfb	___llmod@dividend+2,w,c
  5335  00E05C  5015               	movf	___llmod@divisor+3,w,c
  5336  00E05E  5811               	subwfb	___llmod@dividend+3,w,c
  5337  00E060  A0D8               	btfss	status,0,c
  5338  00E062  D008               	goto	l2454
  5339  00E064  5012               	movf	___llmod@divisor,w,c
  5340  00E066  5E0E               	subwf	___llmod@dividend,f,c
  5341  00E068  5013               	movf	___llmod@divisor+1,w,c
  5342  00E06A  5A0F               	subwfb	___llmod@dividend+1,f,c
  5343  00E06C  5014               	movf	___llmod@divisor+2,w,c
  5344  00E06E  5A10               	subwfb	___llmod@dividend+2,f,c
  5345  00E070  5015               	movf	___llmod@divisor+3,w,c
  5346  00E072  5A11               	subwfb	___llmod@dividend+3,f,c
  5347  00E074                     l2454:
  5348  00E074  90D8               	bcf	status,0,c
  5349  00E076  3215               	rrcf	___llmod@divisor+3,f,c
  5350  00E078  3214               	rrcf	___llmod@divisor+2,f,c
  5351  00E07A  3213               	rrcf	___llmod@divisor+1,f,c
  5352  00E07C  3212               	rrcf	___llmod@divisor,f,c
  5353  00E07E  2E16               	decfsz	___llmod@counter,f,c
  5354  00E080  D7E7               	goto	l2450
  5355  00E082                     l590:
  5356  00E082  C00E  F00E         	movff	___llmod@dividend,?___llmod
  5357  00E086  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  5358  00E08A  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  5359  00E08E  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  5360  00E092  0012               	return		;funcret
  5361  00E094                     __end_of___llmod:
  5362                           	opt stack 0
  5363                           tblptru	equ	0xFF8
  5364                           tblptrh	equ	0xFF7
  5365                           tblptrl	equ	0xFF6
  5366                           tablat	equ	0xFF5
  5367                           prodh	equ	0xFF4
  5368                           prodl	equ	0xFF3
  5369                           indf0	equ	0xFEF
  5370                           postinc0	equ	0xFEE
  5371                           fsr0h	equ	0xFEA
  5372                           fsr0l	equ	0xFE9
  5373                           wreg	equ	0xFE8
  5374                           postdec1	equ	0xFE5
  5375                           plusw1	equ	0xFE3
  5376                           fsr1l	equ	0xFE1
  5377                           postinc2	equ	0xFDE
  5378                           postdec2	equ	0xFDD
  5379                           plusw2	equ	0xFDB
  5380                           fsr2h	equ	0xFDA
  5381                           fsr2l	equ	0xFD9
  5382                           status	equ	0xFD8
  5383                           
  5384 ;; *************** function ___lldiv *****************
  5385 ;; Defined at:
  5386 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;  dividend        4    0[COMRAM] unsigned long 
  5389 ;;  divisor         4    4[COMRAM] unsigned long 
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;  quotient        4    8[COMRAM] unsigned long 
  5392 ;;  counter         1   12[COMRAM] unsigned char 
  5393 ;; Return value:  Size  Location     Type
  5394 ;;                  4    0[COMRAM] unsigned long 
  5395 ;; Registers used:
  5396 ;;		wreg, status,2, status,0
  5397 ;; Tracked objects:
  5398 ;;		On entry : 0/0
  5399 ;;		On exit  : 0/0
  5400 ;;		Unchanged: 0/0
  5401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5402 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5403 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;Total ram usage:       13 bytes
  5407 ;; Hardware stack levels used:    1
  5408 ;; This function calls:
  5409 ;;		Nothing
  5410 ;; This function is called by:
  5411 ;;		_printf
  5412 ;; This function uses a non-reentrant model
  5413 ;;
  5414                           
  5415                           	psect	text13
  5416  00E16E                     __ptext13:
  5417                           	opt stack 0
  5418  00E16E                     ___lldiv:
  5419                           	opt stack 29
  5420                           
  5421                           ;incstack = 0
  5422  00E16E  0E00               	movlw	0
  5423  00E170  6E09               	movwf	___lldiv@quotient,c
  5424  00E172  0E00               	movlw	0
  5425  00E174  6E0A               	movwf	___lldiv@quotient+1,c
  5426  00E176  0E00               	movlw	0
  5427  00E178  6E0B               	movwf	___lldiv@quotient+2,c
  5428  00E17A  0E00               	movlw	0
  5429  00E17C  6E0C               	movwf	___lldiv@quotient+3,c
  5430  00E17E  5005               	movf	___lldiv@divisor,w,c
  5431  00E180  1006               	iorwf	___lldiv@divisor+1,w,c
  5432  00E182  1007               	iorwf	___lldiv@divisor+2,w,c
  5433  00E184  1008               	iorwf	___lldiv@divisor+3,w,c
  5434  00E186  B4D8               	btfsc	status,2,c
  5435  00E188  D02A               	goto	l580
  5436  00E18A  0E01               	movlw	1
  5437  00E18C  6E0D               	movwf	___lldiv@counter,c
  5438  00E18E  D006               	goto	l2428
  5439  00E190                     l2426:
  5440  00E190  90D8               	bcf	status,0,c
  5441  00E192  3605               	rlcf	___lldiv@divisor,f,c
  5442  00E194  3606               	rlcf	___lldiv@divisor+1,f,c
  5443  00E196  3607               	rlcf	___lldiv@divisor+2,f,c
  5444  00E198  3608               	rlcf	___lldiv@divisor+3,f,c
  5445  00E19A  2A0D               	incf	___lldiv@counter,f,c
  5446  00E19C                     l2428:
  5447  00E19C  AE08               	btfss	___lldiv@divisor+3,7,c
  5448  00E19E  D7F8               	goto	l2426
  5449  00E1A0                     l2430:
  5450  00E1A0  90D8               	bcf	status,0,c
  5451  00E1A2  3609               	rlcf	___lldiv@quotient,f,c
  5452  00E1A4  360A               	rlcf	___lldiv@quotient+1,f,c
  5453  00E1A6  360B               	rlcf	___lldiv@quotient+2,f,c
  5454  00E1A8  360C               	rlcf	___lldiv@quotient+3,f,c
  5455  00E1AA  5005               	movf	___lldiv@divisor,w,c
  5456  00E1AC  5C01               	subwf	___lldiv@dividend,w,c
  5457  00E1AE  5006               	movf	___lldiv@divisor+1,w,c
  5458  00E1B0  5802               	subwfb	___lldiv@dividend+1,w,c
  5459  00E1B2  5007               	movf	___lldiv@divisor+2,w,c
  5460  00E1B4  5803               	subwfb	___lldiv@dividend+2,w,c
  5461  00E1B6  5008               	movf	___lldiv@divisor+3,w,c
  5462  00E1B8  5804               	subwfb	___lldiv@dividend+3,w,c
  5463  00E1BA  A0D8               	btfss	status,0,c
  5464  00E1BC  D009               	goto	l2438
  5465  00E1BE  5005               	movf	___lldiv@divisor,w,c
  5466  00E1C0  5E01               	subwf	___lldiv@dividend,f,c
  5467  00E1C2  5006               	movf	___lldiv@divisor+1,w,c
  5468  00E1C4  5A02               	subwfb	___lldiv@dividend+1,f,c
  5469  00E1C6  5007               	movf	___lldiv@divisor+2,w,c
  5470  00E1C8  5A03               	subwfb	___lldiv@dividend+2,f,c
  5471  00E1CA  5008               	movf	___lldiv@divisor+3,w,c
  5472  00E1CC  5A04               	subwfb	___lldiv@dividend+3,f,c
  5473  00E1CE  8009               	bsf	___lldiv@quotient,0,c
  5474  00E1D0                     l2438:
  5475  00E1D0  90D8               	bcf	status,0,c
  5476  00E1D2  3208               	rrcf	___lldiv@divisor+3,f,c
  5477  00E1D4  3207               	rrcf	___lldiv@divisor+2,f,c
  5478  00E1D6  3206               	rrcf	___lldiv@divisor+1,f,c
  5479  00E1D8  3205               	rrcf	___lldiv@divisor,f,c
  5480  00E1DA  2E0D               	decfsz	___lldiv@counter,f,c
  5481  00E1DC  D7E1               	goto	l2430
  5482  00E1DE                     l580:
  5483  00E1DE  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5484  00E1E2  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5485  00E1E6  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5486  00E1EA  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5487  00E1EE  0012               	return		;funcret
  5488  00E1F0                     __end_of___lldiv:
  5489                           	opt stack 0
  5490                           tblptru	equ	0xFF8
  5491                           tblptrh	equ	0xFF7
  5492                           tblptrl	equ	0xFF6
  5493                           tablat	equ	0xFF5
  5494                           prodh	equ	0xFF4
  5495                           prodl	equ	0xFF3
  5496                           indf0	equ	0xFEF
  5497                           postinc0	equ	0xFEE
  5498                           fsr0h	equ	0xFEA
  5499                           fsr0l	equ	0xFE9
  5500                           wreg	equ	0xFE8
  5501                           postdec1	equ	0xFE5
  5502                           plusw1	equ	0xFE3
  5503                           fsr1l	equ	0xFE1
  5504                           postinc2	equ	0xFDE
  5505                           postdec2	equ	0xFDD
  5506                           plusw2	equ	0xFDB
  5507                           fsr2h	equ	0xFDA
  5508                           fsr2l	equ	0xFD9
  5509                           status	equ	0xFD8
  5510                           
  5511 ;; *************** function ___fttol *****************
  5512 ;; Defined at:
  5513 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;  f1              3   42[COMRAM] float 
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;  lval            4   52[COMRAM] unsigned long 
  5518 ;;  exp1            1   56[COMRAM] unsigned char 
  5519 ;;  sign1           1   51[COMRAM] unsigned char 
  5520 ;; Return value:  Size  Location     Type
  5521 ;;                  4   42[COMRAM] long 
  5522 ;; Registers used:
  5523 ;;		wreg, status,2, status,0
  5524 ;; Tracked objects:
  5525 ;;		On entry : 0/0
  5526 ;;		On exit  : 0/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5529 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5530 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5531 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5532 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5533 ;;Total ram usage:       15 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; This function calls:
  5536 ;;		Nothing
  5537 ;; This function is called by:
  5538 ;;		_printf
  5539 ;; This function uses a non-reentrant model
  5540 ;;
  5541                           
  5542                           	psect	text14
  5543  00E3B2                     __ptext14:
  5544                           	opt stack 0
  5545  00E3B2                     ___fttol:
  5546                           	opt stack 29
  5547                           
  5548                           ;incstack = 0
  5549  00E3B2  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  5550  00E3B6  6A30               	clrf	(??___fttol+1)& (0+255),c
  5551  00E3B8  6A31               	clrf	(??___fttol+2)& (0+255),c
  5552  00E3BA  342C               	rlcf	___fttol@f1+1,w,c
  5553  00E3BC  362F               	rlcf	??___fttol& (0+255),f,c
  5554  00E3BE  E301               	bnc	u2201
  5555  00E3C0  8030               	bsf	(??___fttol+1)& (0+255),0,c
  5556  00E3C2                     u2201:
  5557  00E3C2  502F               	movf	??___fttol,w,c
  5558  00E3C4  6E39               	movwf	___fttol@exp1,c
  5559  00E3C6  5039               	movf	___fttol@exp1,w,c
  5560  00E3C8  A4D8               	btfss	status,2,c
  5561  00E3CA  D009               	goto	l2380
  5562  00E3CC  0E00               	movlw	0
  5563  00E3CE  6E2B               	movwf	?___fttol,c
  5564  00E3D0  0E00               	movlw	0
  5565  00E3D2  6E2C               	movwf	?___fttol+1,c
  5566  00E3D4  0E00               	movlw	0
  5567  00E3D6  6E2D               	movwf	?___fttol+2,c
  5568  00E3D8  0E00               	movlw	0
  5569  00E3DA  6E2E               	movwf	?___fttol+3,c
  5570  00E3DC  0012               	return	
  5571  00E3DE                     l2380:
  5572  00E3DE  0E17               	movlw	23
  5573  00E3E0  6E2F               	movwf	??___fttol& (0+255),c
  5574  00E3E2  C02B  F030         	movff	___fttol@f1,??___fttol+1
  5575  00E3E6  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  5576  00E3EA  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  5577  00E3EE  282F               	incf	??___fttol,w,c
  5578  00E3F0  6E33               	movwf	(??___fttol+4)& (0+255),c
  5579  00E3F2  D004               	goto	u2220
  5580  00E3F4                     u2225:
  5581  00E3F4  90D8               	bcf	status,0,c
  5582  00E3F6  3232               	rrcf	??___fttol+3,f,c
  5583  00E3F8  3231               	rrcf	??___fttol+2,f,c
  5584  00E3FA  3230               	rrcf	??___fttol+1,f,c
  5585  00E3FC                     u2220:
  5586  00E3FC  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  5587  00E3FE  D7FA               	goto	u2225
  5588  00E400  5030               	movf	??___fttol+1,w,c
  5589  00E402  6E34               	movwf	___fttol@sign1,c
  5590  00E404  8E2C               	bsf	___fttol@f1+1,7,c
  5591  00E406  0EFF               	movlw	255
  5592  00E408  162B               	andwf	___fttol@f1,f,c
  5593  00E40A  0EFF               	movlw	255
  5594  00E40C  162C               	andwf	___fttol@f1+1,f,c
  5595  00E40E  0E00               	movlw	0
  5596  00E410  162D               	andwf	___fttol@f1+2,f,c
  5597  00E412  502B               	movf	___fttol@f1,w,c
  5598  00E414  6E35               	movwf	___fttol@lval,c
  5599  00E416  502C               	movf	___fttol@f1+1,w,c
  5600  00E418  6E36               	movwf	___fttol@lval+1,c
  5601  00E41A  502D               	movf	___fttol@f1+2,w,c
  5602  00E41C  6E37               	movwf	___fttol@lval+2,c
  5603  00E41E  6A38               	clrf	___fttol@lval+3,c
  5604  00E420  0E8E               	movlw	142
  5605  00E422  5E39               	subwf	___fttol@exp1,f,c
  5606  00E424  AE39               	btfss	___fttol@exp1,7,c
  5607  00E426  D016               	goto	l2402
  5608  00E428  5039               	movf	___fttol@exp1,w,c
  5609  00E42A  0A80               	xorlw	128
  5610  00E42C  0F8F               	addlw	143
  5611  00E42E  B0D8               	btfsc	status,0,c
  5612  00E430  D009               	goto	l2398
  5613  00E432  0E00               	movlw	0
  5614  00E434  6E2B               	movwf	?___fttol,c
  5615  00E436  0E00               	movlw	0
  5616  00E438  6E2C               	movwf	?___fttol+1,c
  5617  00E43A  0E00               	movlw	0
  5618  00E43C  6E2D               	movwf	?___fttol+2,c
  5619  00E43E  0E00               	movlw	0
  5620  00E440  6E2E               	movwf	?___fttol+3,c
  5621  00E442  0012               	return	
  5622  00E444                     l2398:
  5623  00E444  90D8               	bcf	status,0,c
  5624  00E446  3238               	rrcf	___fttol@lval+3,f,c
  5625  00E448  3237               	rrcf	___fttol@lval+2,f,c
  5626  00E44A  3236               	rrcf	___fttol@lval+1,f,c
  5627  00E44C  3235               	rrcf	___fttol@lval,f,c
  5628  00E44E  3E39               	incfsz	___fttol@exp1,f,c
  5629  00E450  D7F9               	goto	l2398
  5630  00E452  D015               	goto	l2412
  5631  00E454                     l2402:
  5632  00E454  0E17               	movlw	23
  5633  00E456  6439               	cpfsgt	___fttol@exp1,c
  5634  00E458  D00F               	goto	l2410
  5635  00E45A  0E00               	movlw	0
  5636  00E45C  6E2B               	movwf	?___fttol,c
  5637  00E45E  0E00               	movlw	0
  5638  00E460  6E2C               	movwf	?___fttol+1,c
  5639  00E462  0E00               	movlw	0
  5640  00E464  6E2D               	movwf	?___fttol+2,c
  5641  00E466  0E00               	movlw	0
  5642  00E468  6E2E               	movwf	?___fttol+3,c
  5643  00E46A  0012               	return	
  5644  00E46C                     l2408:
  5645  00E46C  90D8               	bcf	status,0,c
  5646  00E46E  3635               	rlcf	___fttol@lval,f,c
  5647  00E470  3636               	rlcf	___fttol@lval+1,f,c
  5648  00E472  3637               	rlcf	___fttol@lval+2,f,c
  5649  00E474  3638               	rlcf	___fttol@lval+3,f,c
  5650  00E476  0639               	decf	___fttol@exp1,f,c
  5651  00E478                     l2410:
  5652  00E478  5039               	movf	___fttol@exp1,w,c
  5653  00E47A  A4D8               	btfss	status,2,c
  5654  00E47C  D7F7               	goto	l2408
  5655  00E47E                     l2412:
  5656  00E47E  5034               	movf	___fttol@sign1,w,c
  5657  00E480  B4D8               	btfsc	status,2,c
  5658  00E482  D008               	goto	l2416
  5659  00E484  1E38               	comf	___fttol@lval+3,f,c
  5660  00E486  1E37               	comf	___fttol@lval+2,f,c
  5661  00E488  1E36               	comf	___fttol@lval+1,f,c
  5662  00E48A  6C35               	negf	___fttol@lval,c
  5663  00E48C  0E00               	movlw	0
  5664  00E48E  2236               	addwfc	___fttol@lval+1,f,c
  5665  00E490  2237               	addwfc	___fttol@lval+2,f,c
  5666  00E492  2238               	addwfc	___fttol@lval+3,f,c
  5667  00E494                     l2416:
  5668  00E494  C035  F02B         	movff	___fttol@lval,?___fttol
  5669  00E498  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  5670  00E49C  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  5671  00E4A0  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  5672  00E4A4  0012               	return	
  5673  00E4A6                     __end_of___fttol:
  5674                           	opt stack 0
  5675                           tblptru	equ	0xFF8
  5676                           tblptrh	equ	0xFF7
  5677                           tblptrl	equ	0xFF6
  5678                           tablat	equ	0xFF5
  5679                           prodh	equ	0xFF4
  5680                           prodl	equ	0xFF3
  5681                           indf0	equ	0xFEF
  5682                           postinc0	equ	0xFEE
  5683                           fsr0h	equ	0xFEA
  5684                           fsr0l	equ	0xFE9
  5685                           wreg	equ	0xFE8
  5686                           postdec1	equ	0xFE5
  5687                           plusw1	equ	0xFE3
  5688                           fsr1l	equ	0xFE1
  5689                           postinc2	equ	0xFDE
  5690                           postdec2	equ	0xFDD
  5691                           plusw2	equ	0xFDB
  5692                           fsr2h	equ	0xFDA
  5693                           fsr2l	equ	0xFD9
  5694                           status	equ	0xFD8
  5695                           
  5696 ;; *************** function ___ftsub *****************
  5697 ;; Defined at:
  5698 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftsub.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;  f1              3   57[COMRAM] float 
  5701 ;;  f2              3   60[COMRAM] float 
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;		None
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  3   57[COMRAM] float 
  5706 ;; Registers used:
  5707 ;;		wreg, status,2, status,0, cstack
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5713 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5716 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5717 ;;Total ram usage:        6 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:    2
  5720 ;; This function calls:
  5721 ;;		___ftadd
  5722 ;; This function is called by:
  5723 ;;		_printf
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text15
  5728  00DF92                     __ptext15:
  5729                           	opt stack 0
  5730  00DF92                     ___ftsub:
  5731                           	opt stack 27
  5732                           
  5733                           ;incstack = 0
  5734  00DF92  503D               	movf	___ftsub@f2,w,c
  5735  00DF94  103E               	iorwf	___ftsub@f2+1,w,c
  5736  00DF96  103F               	iorwf	___ftsub@f2+2,w,c
  5737  00DF98  B4D8               	btfsc	status,2,c
  5738  00DF9A  D006               	goto	l2348
  5739  00DF9C  0E00               	movlw	0
  5740  00DF9E  1A3D               	xorwf	___ftsub@f2,f,c
  5741  00DFA0  0E00               	movlw	0
  5742  00DFA2  1A3E               	xorwf	___ftsub@f2+1,f,c
  5743  00DFA4  0E80               	movlw	128
  5744  00DFA6  1A3F               	xorwf	___ftsub@f2+2,f,c
  5745  00DFA8                     l2348:
  5746  00DFA8  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5747  00DFAC  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5748  00DFB0  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5749  00DFB4  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5750  00DFB8  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5751  00DFBC  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5752  00DFC0  ECFA  F073         	call	___ftadd	;wreg free
  5753  00DFC4  C02E  F03A         	movff	?___ftadd,?___ftsub
  5754  00DFC8  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5755  00DFCC  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5756  00DFD0  0012               	return	
  5757  00DFD2                     __end_of___ftsub:
  5758                           	opt stack 0
  5759                           tblptru	equ	0xFF8
  5760                           tblptrh	equ	0xFF7
  5761                           tblptrl	equ	0xFF6
  5762                           tablat	equ	0xFF5
  5763                           prodh	equ	0xFF4
  5764                           prodl	equ	0xFF3
  5765                           indf0	equ	0xFEF
  5766                           postinc0	equ	0xFEE
  5767                           fsr0h	equ	0xFEA
  5768                           fsr0l	equ	0xFE9
  5769                           wreg	equ	0xFE8
  5770                           postdec1	equ	0xFE5
  5771                           plusw1	equ	0xFE3
  5772                           fsr1l	equ	0xFE1
  5773                           postinc2	equ	0xFDE
  5774                           postdec2	equ	0xFDD
  5775                           plusw2	equ	0xFDB
  5776                           fsr2h	equ	0xFDA
  5777                           fsr2l	equ	0xFD9
  5778                           status	equ	0xFD8
  5779                           
  5780 ;; *************** function ___ftadd *****************
  5781 ;; Defined at:
  5782 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;  f1              3   45[COMRAM] float 
  5785 ;;  f2              3   48[COMRAM] float 
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;  exp1            1   56[COMRAM] unsigned char 
  5788 ;;  exp2            1   55[COMRAM] unsigned char 
  5789 ;;  sign            1   54[COMRAM] unsigned char 
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  3   45[COMRAM] float 
  5792 ;; Registers used:
  5793 ;;		wreg, status,2, status,0, cstack
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5799 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5801 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5802 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5803 ;;Total ram usage:       12 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; Hardware stack levels required when called:    1
  5806 ;; This function calls:
  5807 ;;		___ftpack
  5808 ;; This function is called by:
  5809 ;;		_printf
  5810 ;;		___ftsub
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           	psect	text16
  5815  00E7F4                     __ptext16:
  5816                           	opt stack 0
  5817  00E7F4                     ___ftadd:
  5818                           	opt stack 27
  5819                           
  5820                           ;incstack = 0
  5821  00E7F4  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5822  00E7F8  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5823  00E7FA  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5824  00E7FC  342F               	rlcf	___ftadd@f1+1,w,c
  5825  00E7FE  3634               	rlcf	??___ftadd& (0+255),f,c
  5826  00E800  E301               	bnc	u1531
  5827  00E802  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5828  00E804                     u1531:
  5829  00E804  5034               	movf	??___ftadd,w,c
  5830  00E806  6E39               	movwf	___ftadd@exp1,c
  5831  00E808  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5832  00E80C  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5833  00E80E  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5834  00E810  3432               	rlcf	___ftadd@f2+1,w,c
  5835  00E812  3634               	rlcf	??___ftadd& (0+255),f,c
  5836  00E814  E301               	bnc	u1541
  5837  00E816  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5838  00E818                     u1541:
  5839  00E818  5034               	movf	??___ftadd,w,c
  5840  00E81A  6E38               	movwf	___ftadd@exp2,c
  5841  00E81C  5039               	movf	___ftadd@exp1,w,c
  5842  00E81E  B4D8               	btfsc	status,2,c
  5843  00E820  D00B               	goto	l461
  5844  00E822  5038               	movf	___ftadd@exp2,w,c
  5845  00E824  5C39               	subwf	___ftadd@exp1,w,c
  5846  00E826  B0D8               	btfsc	status,0,c
  5847  00E828  D00E               	goto	l1970
  5848  00E82A  5039               	movf	___ftadd@exp1,w,c
  5849  00E82C  0800               	sublw	0
  5850  00E82E  2438               	addwf	___ftadd@exp2,w,c
  5851  00E830  6E34               	movwf	??___ftadd& (0+255),c
  5852  00E832  0E18               	movlw	24
  5853  00E834  6434               	cpfsgt	??___ftadd,c
  5854  00E836  D007               	goto	l1970
  5855  00E838                     l461:
  5856  00E838  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5857  00E83C  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5858  00E840  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5859  00E844  0012               	return	
  5860  00E846                     l1970:
  5861  00E846  5038               	movf	___ftadd@exp2,w,c
  5862  00E848  B4D8               	btfsc	status,2,c
  5863  00E84A  D00B               	goto	l465
  5864  00E84C  5039               	movf	___ftadd@exp1,w,c
  5865  00E84E  5C38               	subwf	___ftadd@exp2,w,c
  5866  00E850  B0D8               	btfsc	status,0,c
  5867  00E852  D00E               	goto	l1976
  5868  00E854  5038               	movf	___ftadd@exp2,w,c
  5869  00E856  0800               	sublw	0
  5870  00E858  2439               	addwf	___ftadd@exp1,w,c
  5871  00E85A  6E34               	movwf	??___ftadd& (0+255),c
  5872  00E85C  0E18               	movlw	24
  5873  00E85E  6434               	cpfsgt	??___ftadd,c
  5874  00E860  D007               	goto	l1976
  5875  00E862                     l465:
  5876  00E862  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5877  00E866  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5878  00E86A  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5879  00E86E  0012               	return	
  5880  00E870                     l1976:
  5881  00E870  0E06               	movlw	6
  5882  00E872  6E37               	movwf	___ftadd@sign,c
  5883  00E874  BE30               	btfsc	___ftadd@f1+2,7,c
  5884  00E876  8E37               	bsf	___ftadd@sign,7,c
  5885  00E878  BE33               	btfsc	___ftadd@f2+2,7,c
  5886  00E87A  8C37               	bsf	___ftadd@sign,6,c
  5887  00E87C  8E2F               	bsf	___ftadd@f1+1,7,c
  5888  00E87E  0EFF               	movlw	255
  5889  00E880  162E               	andwf	___ftadd@f1,f,c
  5890  00E882  0EFF               	movlw	255
  5891  00E884  162F               	andwf	___ftadd@f1+1,f,c
  5892  00E886  0E00               	movlw	0
  5893  00E888  1630               	andwf	___ftadd@f1+2,f,c
  5894  00E88A  8E32               	bsf	___ftadd@f2+1,7,c
  5895  00E88C  0EFF               	movlw	255
  5896  00E88E  1631               	andwf	___ftadd@f2,f,c
  5897  00E890  0EFF               	movlw	255
  5898  00E892  1632               	andwf	___ftadd@f2+1,f,c
  5899  00E894  0E00               	movlw	0
  5900  00E896  1633               	andwf	___ftadd@f2+2,f,c
  5901  00E898  5038               	movf	___ftadd@exp2,w,c
  5902  00E89A  5C39               	subwf	___ftadd@exp1,w,c
  5903  00E89C  B0D8               	btfsc	status,0,c
  5904  00E89E  D01B               	goto	l2002
  5905  00E8A0                     l1992:
  5906  00E8A0  90D8               	bcf	status,0,c
  5907  00E8A2  3631               	rlcf	___ftadd@f2,f,c
  5908  00E8A4  3632               	rlcf	___ftadd@f2+1,f,c
  5909  00E8A6  3633               	rlcf	___ftadd@f2+2,f,c
  5910  00E8A8  0638               	decf	___ftadd@exp2,f,c
  5911  00E8AA  5039               	movf	___ftadd@exp1,w,c
  5912  00E8AC  1838               	xorwf	___ftadd@exp2,w,c
  5913  00E8AE  B4D8               	btfsc	status,2,c
  5914  00E8B0  D00D               	goto	l2000
  5915  00E8B2  0637               	decf	___ftadd@sign,f,c
  5916  00E8B4  C037  F034         	movff	___ftadd@sign,??___ftadd
  5917  00E8B8  0E07               	movlw	7
  5918  00E8BA  1634               	andwf	??___ftadd,f,c
  5919  00E8BC  B4D8               	btfsc	status,2,c
  5920  00E8BE  D006               	goto	l2000
  5921  00E8C0  D7EF               	goto	l1992
  5922  00E8C2                     l1998:
  5923  00E8C2  90D8               	bcf	status,0,c
  5924  00E8C4  3230               	rrcf	___ftadd@f1+2,f,c
  5925  00E8C6  322F               	rrcf	___ftadd@f1+1,f,c
  5926  00E8C8  322E               	rrcf	___ftadd@f1,f,c
  5927  00E8CA  2A39               	incf	___ftadd@exp1,f,c
  5928  00E8CC                     l2000:
  5929  00E8CC  5038               	movf	___ftadd@exp2,w,c
  5930  00E8CE  1839               	xorwf	___ftadd@exp1,w,c
  5931  00E8D0  B4D8               	btfsc	status,2,c
  5932  00E8D2  D01F               	goto	l476
  5933  00E8D4  D7F6               	goto	l1998
  5934  00E8D6                     l2002:
  5935  00E8D6  5039               	movf	___ftadd@exp1,w,c
  5936  00E8D8  5C38               	subwf	___ftadd@exp2,w,c
  5937  00E8DA  B0D8               	btfsc	status,0,c
  5938  00E8DC  D01A               	goto	l476
  5939  00E8DE                     l2004:
  5940  00E8DE  90D8               	bcf	status,0,c
  5941  00E8E0  362E               	rlcf	___ftadd@f1,f,c
  5942  00E8E2  362F               	rlcf	___ftadd@f1+1,f,c
  5943  00E8E4  3630               	rlcf	___ftadd@f1+2,f,c
  5944  00E8E6  0639               	decf	___ftadd@exp1,f,c
  5945  00E8E8  5039               	movf	___ftadd@exp1,w,c
  5946  00E8EA  1838               	xorwf	___ftadd@exp2,w,c
  5947  00E8EC  B4D8               	btfsc	status,2,c
  5948  00E8EE  D00D               	goto	l2012
  5949  00E8F0  0637               	decf	___ftadd@sign,f,c
  5950  00E8F2  C037  F034         	movff	___ftadd@sign,??___ftadd
  5951  00E8F6  0E07               	movlw	7
  5952  00E8F8  1634               	andwf	??___ftadd,f,c
  5953  00E8FA  B4D8               	btfsc	status,2,c
  5954  00E8FC  D006               	goto	l2012
  5955  00E8FE  D7EF               	goto	l2004
  5956  00E900                     l2010:
  5957  00E900  90D8               	bcf	status,0,c
  5958  00E902  3233               	rrcf	___ftadd@f2+2,f,c
  5959  00E904  3232               	rrcf	___ftadd@f2+1,f,c
  5960  00E906  3231               	rrcf	___ftadd@f2,f,c
  5961  00E908  2A38               	incf	___ftadd@exp2,f,c
  5962  00E90A                     l2012:
  5963  00E90A  5038               	movf	___ftadd@exp2,w,c
  5964  00E90C  1839               	xorwf	___ftadd@exp1,w,c
  5965  00E90E  A4D8               	btfss	status,2,c
  5966  00E910  D7F7               	goto	l2010
  5967  00E912                     l476:
  5968  00E912  AE37               	btfss	___ftadd@sign,7,c
  5969  00E914  D00C               	goto	l485
  5970  00E916  0EFF               	movlw	255
  5971  00E918  1A2E               	xorwf	___ftadd@f1,f,c
  5972  00E91A  0EFF               	movlw	255
  5973  00E91C  1A2F               	xorwf	___ftadd@f1+1,f,c
  5974  00E91E  0EFF               	movlw	255
  5975  00E920  1A30               	xorwf	___ftadd@f1+2,f,c
  5976  00E922  0E01               	movlw	1
  5977  00E924  262E               	addwf	___ftadd@f1,f,c
  5978  00E926  0E00               	movlw	0
  5979  00E928  222F               	addwfc	___ftadd@f1+1,f,c
  5980  00E92A  0E00               	movlw	0
  5981  00E92C  2230               	addwfc	___ftadd@f1+2,f,c
  5982  00E92E                     l485:
  5983  00E92E  AC37               	btfss	___ftadd@sign,6,c
  5984  00E930  D00C               	goto	l2018
  5985  00E932  0EFF               	movlw	255
  5986  00E934  1A31               	xorwf	___ftadd@f2,f,c
  5987  00E936  0EFF               	movlw	255
  5988  00E938  1A32               	xorwf	___ftadd@f2+1,f,c
  5989  00E93A  0EFF               	movlw	255
  5990  00E93C  1A33               	xorwf	___ftadd@f2+2,f,c
  5991  00E93E  0E01               	movlw	1
  5992  00E940  2631               	addwf	___ftadd@f2,f,c
  5993  00E942  0E00               	movlw	0
  5994  00E944  2232               	addwfc	___ftadd@f2+1,f,c
  5995  00E946  0E00               	movlw	0
  5996  00E948  2233               	addwfc	___ftadd@f2+2,f,c
  5997  00E94A                     l2018:
  5998  00E94A  0E00               	movlw	0
  5999  00E94C  6E37               	movwf	___ftadd@sign,c
  6000  00E94E  502E               	movf	___ftadd@f1,w,c
  6001  00E950  2631               	addwf	___ftadd@f2,f,c
  6002  00E952  502F               	movf	___ftadd@f1+1,w,c
  6003  00E954  2232               	addwfc	___ftadd@f2+1,f,c
  6004  00E956  5030               	movf	___ftadd@f1+2,w,c
  6005  00E958  2233               	addwfc	___ftadd@f2+2,f,c
  6006  00E95A  AE33               	btfss	___ftadd@f2+2,7,c
  6007  00E95C  D00E               	goto	l2028
  6008  00E95E  0EFF               	movlw	255
  6009  00E960  1A31               	xorwf	___ftadd@f2,f,c
  6010  00E962  0EFF               	movlw	255
  6011  00E964  1A32               	xorwf	___ftadd@f2+1,f,c
  6012  00E966  0EFF               	movlw	255
  6013  00E968  1A33               	xorwf	___ftadd@f2+2,f,c
  6014  00E96A  0E01               	movlw	1
  6015  00E96C  2631               	addwf	___ftadd@f2,f,c
  6016  00E96E  0E00               	movlw	0
  6017  00E970  2232               	addwfc	___ftadd@f2+1,f,c
  6018  00E972  0E00               	movlw	0
  6019  00E974  2233               	addwfc	___ftadd@f2+2,f,c
  6020  00E976  0E01               	movlw	1
  6021  00E978  6E37               	movwf	___ftadd@sign,c
  6022  00E97A                     l2028:
  6023  00E97A  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  6024  00E97E  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6025  00E982  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6026  00E986  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  6027  00E98A  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  6028  00E98E  EC82  F071         	call	___ftpack	;wreg free
  6029  00E992  C001  F02E         	movff	?___ftpack,?___ftadd
  6030  00E996  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  6031  00E99A  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  6032  00E99E  0012               	return	
  6033  00E9A0                     __end_of___ftadd:
  6034                           	opt stack 0
  6035                           tblptru	equ	0xFF8
  6036                           tblptrh	equ	0xFF7
  6037                           tblptrl	equ	0xFF6
  6038                           tablat	equ	0xFF5
  6039                           prodh	equ	0xFF4
  6040                           prodl	equ	0xFF3
  6041                           indf0	equ	0xFEF
  6042                           postinc0	equ	0xFEE
  6043                           fsr0h	equ	0xFEA
  6044                           fsr0l	equ	0xFE9
  6045                           wreg	equ	0xFE8
  6046                           postdec1	equ	0xFE5
  6047                           plusw1	equ	0xFE3
  6048                           fsr1l	equ	0xFE1
  6049                           postinc2	equ	0xFDE
  6050                           postdec2	equ	0xFDD
  6051                           plusw2	equ	0xFDB
  6052                           fsr2h	equ	0xFDA
  6053                           fsr2l	equ	0xFD9
  6054                           status	equ	0xFD8
  6055                           
  6056 ;; *************** function ___ftpack *****************
  6057 ;; Defined at:
  6058 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;  arg             3    0[COMRAM] unsigned um
  6061 ;;  exp             1    3[COMRAM] unsigned char 
  6062 ;;  sign            1    4[COMRAM] unsigned char 
  6063 ;; Auto vars:     Size  Location     Type
  6064 ;;		None
  6065 ;; Return value:  Size  Location     Type
  6066 ;;                  3    0[COMRAM] float 
  6067 ;; Registers used:
  6068 ;;		wreg, status,2, status,0
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6074 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6076 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6077 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6078 ;;Total ram usage:        8 bytes
  6079 ;; Hardware stack levels used:    1
  6080 ;; This function calls:
  6081 ;;		Nothing
  6082 ;; This function is called by:
  6083 ;;		___ftadd
  6084 ;;		___ftmul
  6085 ;;		___lltoft
  6086 ;; This function uses a non-reentrant model
  6087 ;;
  6088                           
  6089                           	psect	text17
  6090  00E304                     __ptext17:
  6091                           	opt stack 0
  6092  00E304                     ___ftpack:
  6093                           	opt stack 27
  6094                           
  6095                           ;incstack = 0
  6096  00E304  5004               	movf	___ftpack@exp,w,c
  6097  00E306  B4D8               	btfsc	status,2,c
  6098  00E308  D005               	goto	l1922
  6099  00E30A  5001               	movf	___ftpack@arg,w,c
  6100  00E30C  1002               	iorwf	___ftpack@arg+1,w,c
  6101  00E30E  1003               	iorwf	___ftpack@arg+2,w,c
  6102  00E310  A4D8               	btfss	status,2,c
  6103  00E312  D00C               	goto	l1928
  6104  00E314                     l1922:
  6105  00E314  0E00               	movlw	0
  6106  00E316  6E01               	movwf	?___ftpack,c
  6107  00E318  0E00               	movlw	0
  6108  00E31A  6E02               	movwf	?___ftpack+1,c
  6109  00E31C  0E00               	movlw	0
  6110  00E31E  6E03               	movwf	?___ftpack+2,c
  6111  00E320  0012               	return	
  6112  00E322                     l1926:
  6113  00E322  2A04               	incf	___ftpack@exp,f,c
  6114  00E324  90D8               	bcf	status,0,c
  6115  00E326  3203               	rrcf	___ftpack@arg+2,f,c
  6116  00E328  3202               	rrcf	___ftpack@arg+1,f,c
  6117  00E32A  3201               	rrcf	___ftpack@arg,f,c
  6118  00E32C                     l1928:
  6119  00E32C  0E00               	movlw	0
  6120  00E32E  1401               	andwf	___ftpack@arg,w,c
  6121  00E330  6E06               	movwf	??___ftpack& (0+255),c
  6122  00E332  0E00               	movlw	0
  6123  00E334  1402               	andwf	___ftpack@arg+1,w,c
  6124  00E336  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6125  00E338  0EFE               	movlw	254
  6126  00E33A  1403               	andwf	___ftpack@arg+2,w,c
  6127  00E33C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6128  00E33E  5006               	movf	??___ftpack,w,c
  6129  00E340  1007               	iorwf	??___ftpack+1,w,c
  6130  00E342  1008               	iorwf	??___ftpack+2,w,c
  6131  00E344  B4D8               	btfsc	status,2,c
  6132  00E346  D00C               	goto	l1934
  6133  00E348  D7EC               	goto	l1926
  6134  00E34A                     l1930:
  6135  00E34A  2A04               	incf	___ftpack@exp,f,c
  6136  00E34C  0E01               	movlw	1
  6137  00E34E  2601               	addwf	___ftpack@arg,f,c
  6138  00E350  0E00               	movlw	0
  6139  00E352  2202               	addwfc	___ftpack@arg+1,f,c
  6140  00E354  0E00               	movlw	0
  6141  00E356  2203               	addwfc	___ftpack@arg+2,f,c
  6142  00E358  90D8               	bcf	status,0,c
  6143  00E35A  3203               	rrcf	___ftpack@arg+2,f,c
  6144  00E35C  3202               	rrcf	___ftpack@arg+1,f,c
  6145  00E35E  3201               	rrcf	___ftpack@arg,f,c
  6146  00E360                     l1934:
  6147  00E360  0E00               	movlw	0
  6148  00E362  1401               	andwf	___ftpack@arg,w,c
  6149  00E364  6E06               	movwf	??___ftpack& (0+255),c
  6150  00E366  0E00               	movlw	0
  6151  00E368  1402               	andwf	___ftpack@arg+1,w,c
  6152  00E36A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6153  00E36C  0EFF               	movlw	255
  6154  00E36E  1403               	andwf	___ftpack@arg+2,w,c
  6155  00E370  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6156  00E372  5006               	movf	??___ftpack,w,c
  6157  00E374  1007               	iorwf	??___ftpack+1,w,c
  6158  00E376  1008               	iorwf	??___ftpack+2,w,c
  6159  00E378  B4D8               	btfsc	status,2,c
  6160  00E37A  D006               	goto	l1938
  6161  00E37C  D7E6               	goto	l1930
  6162  00E37E                     l1936:
  6163  00E37E  0604               	decf	___ftpack@exp,f,c
  6164  00E380  90D8               	bcf	status,0,c
  6165  00E382  3601               	rlcf	___ftpack@arg,f,c
  6166  00E384  3602               	rlcf	___ftpack@arg+1,f,c
  6167  00E386  3603               	rlcf	___ftpack@arg+2,f,c
  6168  00E388                     l1938:
  6169  00E388  BE02               	btfsc	___ftpack@arg+1,7,c
  6170  00E38A  D003               	goto	l438
  6171  00E38C  0E02               	movlw	2
  6172  00E38E  6004               	cpfslt	___ftpack@exp,c
  6173  00E390  D7F6               	goto	l1936
  6174  00E392                     l438:
  6175  00E392  A004               	btfss	___ftpack@exp,0,c
  6176  00E394  9E02               	bcf	___ftpack@arg+1,7,c
  6177  00E396  90D8               	bcf	status,0,c
  6178  00E398  3204               	rrcf	___ftpack@exp,f,c
  6179  00E39A  5004               	movf	___ftpack@exp,w,c
  6180  00E39C  1203               	iorwf	___ftpack@arg+2,f,c
  6181  00E39E  5005               	movf	___ftpack@sign,w,c
  6182  00E3A0  A4D8               	btfss	status,2,c
  6183  00E3A2  8E03               	bsf	___ftpack@arg+2,7,c
  6184  00E3A4  C001  F001         	movff	___ftpack@arg,?___ftpack
  6185  00E3A8  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6186  00E3AC  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6187  00E3B0  0012               	return	
  6188  00E3B2                     __end_of___ftpack:
  6189                           	opt stack 0
  6190                           tblptru	equ	0xFF8
  6191                           tblptrh	equ	0xFF7
  6192                           tblptrl	equ	0xFF6
  6193                           tablat	equ	0xFF5
  6194                           prodh	equ	0xFF4
  6195                           prodl	equ	0xFF3
  6196                           indf0	equ	0xFEF
  6197                           postinc0	equ	0xFEE
  6198                           fsr0h	equ	0xFEA
  6199                           fsr0l	equ	0xFE9
  6200                           wreg	equ	0xFE8
  6201                           postdec1	equ	0xFE5
  6202                           plusw1	equ	0xFE3
  6203                           fsr1l	equ	0xFE1
  6204                           postinc2	equ	0xFDE
  6205                           postdec2	equ	0xFDD
  6206                           plusw2	equ	0xFDB
  6207                           fsr2h	equ	0xFDA
  6208                           fsr2l	equ	0xFD9
  6209                           status	equ	0xFD8
  6210                           
  6211 ;; *************** function ___ftneg *****************
  6212 ;; Defined at:
  6213 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;  f1              3    0[COMRAM] float 
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;		None
  6218 ;; Return value:  Size  Location     Type
  6219 ;;                  3    0[COMRAM] float 
  6220 ;; Registers used:
  6221 ;;		wreg, status,2, status,0
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6227 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6230 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;Total ram usage:        3 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; This function calls:
  6234 ;;		Nothing
  6235 ;; This function is called by:
  6236 ;;		_printf
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           	psect	text18
  6241  00DEF8                     __ptext18:
  6242                           	opt stack 0
  6243  00DEF8                     ___ftneg:
  6244                           	opt stack 29
  6245                           
  6246                           ;incstack = 0
  6247  00DEF8  5001               	movf	___ftneg@f1,w,c
  6248  00DEFA  1002               	iorwf	___ftneg@f1+1,w,c
  6249  00DEFC  1003               	iorwf	___ftneg@f1+2,w,c
  6250  00DEFE  B4D8               	btfsc	status,2,c
  6251  00DF00  D006               	goto	l535
  6252  00DF02  0E00               	movlw	0
  6253  00DF04  1A01               	xorwf	___ftneg@f1,f,c
  6254  00DF06  0E00               	movlw	0
  6255  00DF08  1A02               	xorwf	___ftneg@f1+1,f,c
  6256  00DF0A  0E80               	movlw	128
  6257  00DF0C  1A03               	xorwf	___ftneg@f1+2,f,c
  6258  00DF0E                     l535:
  6259  00DF0E  C001  F001         	movff	___ftneg@f1,?___ftneg
  6260  00DF12  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  6261  00DF16  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  6262  00DF1A  0012               	return		;funcret
  6263  00DF1C                     __end_of___ftneg:
  6264                           	opt stack 0
  6265                           tblptru	equ	0xFF8
  6266                           tblptrh	equ	0xFF7
  6267                           tblptrl	equ	0xFF6
  6268                           tablat	equ	0xFF5
  6269                           prodh	equ	0xFF4
  6270                           prodl	equ	0xFF3
  6271                           indf0	equ	0xFEF
  6272                           postinc0	equ	0xFEE
  6273                           fsr0h	equ	0xFEA
  6274                           fsr0l	equ	0xFE9
  6275                           wreg	equ	0xFE8
  6276                           postdec1	equ	0xFE5
  6277                           plusw1	equ	0xFE3
  6278                           fsr1l	equ	0xFE1
  6279                           postinc2	equ	0xFDE
  6280                           postdec2	equ	0xFDD
  6281                           plusw2	equ	0xFDB
  6282                           fsr2h	equ	0xFDA
  6283                           fsr2l	equ	0xFD9
  6284                           status	equ	0xFD8
  6285                           
  6286 ;; *************** function ___ftge *****************
  6287 ;; Defined at:
  6288 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;  ff1             3    0[COMRAM] float 
  6291 ;;  ff2             3    3[COMRAM] float 
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;		None
  6294 ;; Return value:  Size  Location     Type
  6295 ;;		None               void
  6296 ;; Registers used:
  6297 ;;		wreg, status,2, status,0
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/0
  6300 ;;		On exit  : 0/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6303 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6305 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6306 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;Total ram usage:        9 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; This function calls:
  6310 ;;		Nothing
  6311 ;; This function is called by:
  6312 ;;		_printf
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316                           	psect	text19
  6317  00E274                     __ptext19:
  6318                           	opt stack 0
  6319  00E274                     ___ftge:
  6320                           	opt stack 29
  6321                           
  6322                           ;incstack = 0
  6323  00E274  AE03               	btfss	___ftge@ff1+2,7,c
  6324  00E276  D016               	goto	l2356
  6325  00E278  C001  F007         	movff	___ftge@ff1,??___ftge
  6326  00E27C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  6327  00E280  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  6328  00E284  1E07               	comf	??___ftge,f,c
  6329  00E286  1E08               	comf	??___ftge+1,f,c
  6330  00E288  1E09               	comf	??___ftge+2,f,c
  6331  00E28A  2A07               	incf	??___ftge,f,c
  6332  00E28C  0E00               	movlw	0
  6333  00E28E  2208               	addwfc	??___ftge+1,f,c
  6334  00E290  2209               	addwfc	??___ftge+2,f,c
  6335  00E292  0E00               	movlw	0
  6336  00E294  2407               	addwf	??___ftge,w,c
  6337  00E296  6E01               	movwf	___ftge@ff1,c
  6338  00E298  0E00               	movlw	0
  6339  00E29A  2008               	addwfc	??___ftge+1,w,c
  6340  00E29C  6E02               	movwf	___ftge@ff1+1,c
  6341  00E29E  0E80               	movlw	128
  6342  00E2A0  2009               	addwfc	??___ftge+2,w,c
  6343  00E2A2  6E03               	movwf	___ftge@ff1+2,c
  6344  00E2A4                     l2356:
  6345  00E2A4  AE06               	btfss	___ftge@ff2+2,7,c
  6346  00E2A6  D016               	goto	l2360
  6347  00E2A8  C004  F007         	movff	___ftge@ff2,??___ftge
  6348  00E2AC  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  6349  00E2B0  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  6350  00E2B4  1E07               	comf	??___ftge,f,c
  6351  00E2B6  1E08               	comf	??___ftge+1,f,c
  6352  00E2B8  1E09               	comf	??___ftge+2,f,c
  6353  00E2BA  2A07               	incf	??___ftge,f,c
  6354  00E2BC  0E00               	movlw	0
  6355  00E2BE  2208               	addwfc	??___ftge+1,f,c
  6356  00E2C0  2209               	addwfc	??___ftge+2,f,c
  6357  00E2C2  0E00               	movlw	0
  6358  00E2C4  2407               	addwf	??___ftge,w,c
  6359  00E2C6  6E04               	movwf	___ftge@ff2,c
  6360  00E2C8  0E00               	movlw	0
  6361  00E2CA  2008               	addwfc	??___ftge+1,w,c
  6362  00E2CC  6E05               	movwf	___ftge@ff2+1,c
  6363  00E2CE  0E80               	movlw	128
  6364  00E2D0  2009               	addwfc	??___ftge+2,w,c
  6365  00E2D2  6E06               	movwf	___ftge@ff2+2,c
  6366  00E2D4                     l2360:
  6367  00E2D4  0E00               	movlw	0
  6368  00E2D6  1A01               	xorwf	___ftge@ff1,f,c
  6369  00E2D8  0E00               	movlw	0
  6370  00E2DA  1A02               	xorwf	___ftge@ff1+1,f,c
  6371  00E2DC  0E80               	movlw	128
  6372  00E2DE  1A03               	xorwf	___ftge@ff1+2,f,c
  6373  00E2E0  0E00               	movlw	0
  6374  00E2E2  1A04               	xorwf	___ftge@ff2,f,c
  6375  00E2E4  0E00               	movlw	0
  6376  00E2E6  1A05               	xorwf	___ftge@ff2+1,f,c
  6377  00E2E8  0E80               	movlw	128
  6378  00E2EA  1A06               	xorwf	___ftge@ff2+2,f,c
  6379  00E2EC  5004               	movf	___ftge@ff2,w,c
  6380  00E2EE  5C01               	subwf	___ftge@ff1,w,c
  6381  00E2F0  5005               	movf	___ftge@ff2+1,w,c
  6382  00E2F2  5802               	subwfb	___ftge@ff1+1,w,c
  6383  00E2F4  5006               	movf	___ftge@ff2+2,w,c
  6384  00E2F6  5803               	subwfb	___ftge@ff1+2,w,c
  6385  00E2F8  B0D8               	btfsc	status,0,c
  6386  00E2FA  D002               	goto	l2366
  6387  00E2FC  90D8               	bcf	status,0,c
  6388  00E2FE  0012               	return	
  6389  00E300                     l2366:
  6390  00E300  80D8               	bsf	status,0,c
  6391  00E302  0012               	return	
  6392  00E304                     __end_of___ftge:
  6393                           	opt stack 0
  6394                           tblptru	equ	0xFF8
  6395                           tblptrh	equ	0xFF7
  6396                           tblptrl	equ	0xFF6
  6397                           tablat	equ	0xFF5
  6398                           prodh	equ	0xFF4
  6399                           prodl	equ	0xFF3
  6400                           indf0	equ	0xFEF
  6401                           postinc0	equ	0xFEE
  6402                           fsr0h	equ	0xFEA
  6403                           fsr0l	equ	0xFE9
  6404                           wreg	equ	0xFE8
  6405                           postdec1	equ	0xFE5
  6406                           plusw1	equ	0xFE3
  6407                           fsr1l	equ	0xFE1
  6408                           postinc2	equ	0xFDE
  6409                           postdec2	equ	0xFDD
  6410                           plusw2	equ	0xFDB
  6411                           fsr2h	equ	0xFDA
  6412                           fsr2l	equ	0xFD9
  6413                           status	equ	0xFD8
  6414                           
  6415 ;; *************** function _lcd_shift_display *****************
  6416 ;; Defined at:
  6417 ;;		line 96 in file "lcd.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;  numChars        1    wreg     unsigned char 
  6420 ;;  direction       1    4[COMRAM] enum E2958
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;  numChars        1    5[COMRAM] unsigned char 
  6423 ;;  n               1    6[COMRAM] unsigned char 
  6424 ;; Return value:  Size  Location     Type
  6425 ;;                  1    wreg      void 
  6426 ;; Registers used:
  6427 ;;		wreg, status,2, status,0, cstack
  6428 ;; Tracked objects:
  6429 ;;		On entry : 0/0
  6430 ;;		On exit  : 0/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6433 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6436 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6437 ;;Total ram usage:        3 bytes
  6438 ;; Hardware stack levels used:    1
  6439 ;; Hardware stack levels required when called:    4
  6440 ;; This function calls:
  6441 ;;		_lcdInst
  6442 ;; This function is called by:
  6443 ;;		_main
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           	psect	text20
  6448  00DEDC                     __ptext20:
  6449                           	opt stack 0
  6450  00DEDC                     _lcd_shift_display:
  6451                           	opt stack 26
  6452                           
  6453                           ;incstack = 0
  6454                           ;lcd_shift_display@numChars stored from wreg
  6455  00DEDC  6E06               	movwf	lcd_shift_display@numChars,c
  6456                           
  6457                           ;lcd.c: 97: for(unsigned char n = numChars; n > 0; n--){
  6458  00DEDE  C006  F007         	movff	lcd_shift_display@numChars,lcd_shift_display@n
  6459  00DEE2                     l2706:
  6460  00DEE2  5007               	movf	lcd_shift_display@n,w,c
  6461  00DEE4  B4D8               	btfsc	status,2,c
  6462  00DEE6  0012               	return	
  6463                           
  6464                           ;lcd.c: 98: lcdInst((unsigned char)(0x18 | (direction << 2)));
  6465  00DEE8  4405               	rlncf	lcd_shift_display@direction,w,c
  6466  00DEEA  46E8               	rlncf	wreg,f,c
  6467  00DEEC  0BFC               	andlw	252
  6468  00DEEE  0918               	iorlw	24
  6469  00DEF0  EC4E  F06F         	call	_lcdInst
  6470  00DEF4  0607               	decf	lcd_shift_display@n,f,c
  6471  00DEF6  D7F5               	goto	l2706
  6472  00DEF8                     __end_of_lcd_shift_display:
  6473                           	opt stack 0
  6474                           tblptru	equ	0xFF8
  6475                           tblptrh	equ	0xFF7
  6476                           tblptrl	equ	0xFF6
  6477                           tablat	equ	0xFF5
  6478                           prodh	equ	0xFF4
  6479                           prodl	equ	0xFF3
  6480                           indf0	equ	0xFEF
  6481                           postinc0	equ	0xFEE
  6482                           fsr0h	equ	0xFEA
  6483                           fsr0l	equ	0xFE9
  6484                           wreg	equ	0xFE8
  6485                           postdec1	equ	0xFE5
  6486                           plusw1	equ	0xFE3
  6487                           fsr1l	equ	0xFE1
  6488                           postinc2	equ	0xFDE
  6489                           postdec2	equ	0xFDD
  6490                           plusw2	equ	0xFDB
  6491                           fsr2h	equ	0xFDA
  6492                           fsr2l	equ	0xFD9
  6493                           status	equ	0xFD8
  6494                           
  6495 ;; *************** function _initLCD *****************
  6496 ;; Defined at:
  6497 ;;		line 69 in file "lcd.c"
  6498 ;; Parameters:    Size  Location     Type
  6499 ;;		None
  6500 ;; Auto vars:     Size  Location     Type
  6501 ;;		None
  6502 ;; Return value:  Size  Location     Type
  6503 ;;                  1    wreg      void 
  6504 ;; Registers used:
  6505 ;;		wreg, status,2, status,0, cstack
  6506 ;; Tracked objects:
  6507 ;;		On entry : 0/0
  6508 ;;		On exit  : 0/0
  6509 ;;		Unchanged: 0/0
  6510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6513 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6514 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6515 ;;Total ram usage:        1 bytes
  6516 ;; Hardware stack levels used:    1
  6517 ;; Hardware stack levels required when called:    4
  6518 ;; This function calls:
  6519 ;;		_lcdInst
  6520 ;;		_send_byte
  6521 ;;		_send_nibble
  6522 ;; This function is called by:
  6523 ;;		_main
  6524 ;; This function uses a non-reentrant model
  6525 ;;
  6526                           
  6527                           	psect	text21
  6528  00E094                     __ptext21:
  6529                           	opt stack 0
  6530  00E094                     _initLCD:
  6531                           	opt stack 26
  6532                           
  6533                           ;lcd.c: 70: _delay((unsigned long)((15)*(10000000/4000.0)));
  6534                           
  6535                           ;incstack = 0
  6536  00E094  0E31               	movlw	49
  6537  00E096  6E05               	movwf	??_initLCD& (0+255),c
  6538  00E098  0EB2               	movlw	178
  6539  00E09A                     u3147:
  6540  00E09A  2EE8               	decfsz	wreg,f,c
  6541  00E09C  D7FE               	bra	u3147
  6542  00E09E  2E05               	decfsz	??_initLCD& (0+255),f,c
  6543  00E0A0  D7FC               	bra	u3147
  6544  00E0A2  D000               	nop2	
  6545                           
  6546                           ;lcd.c: 72: LATDbits.LATD2 = 0;
  6547  00E0A4  948C               	bcf	3980,2,c	;volatile
  6548                           
  6549                           ;lcd.c: 74: send_nibble(0b0011);
  6550  00E0A6  0E03               	movlw	3
  6551  00E0A8  EC63  F06F         	call	_send_nibble
  6552                           
  6553                           ;lcd.c: 75: _delay((unsigned long)((5)*(10000000/4000.0)));
  6554  00E0AC  0E11               	movlw	17
  6555  00E0AE  6E05               	movwf	??_initLCD& (0+255),c
  6556  00E0B0  0E3A               	movlw	58
  6557  00E0B2                     u3157:
  6558  00E0B2  2EE8               	decfsz	wreg,f,c
  6559  00E0B4  D7FE               	bra	u3157
  6560  00E0B6  2E05               	decfsz	??_initLCD& (0+255),f,c
  6561  00E0B8  D7FC               	bra	u3157
  6562  00E0BA  D000               	nop2	
  6563                           
  6564                           ;lcd.c: 76: send_nibble(0b0011);
  6565  00E0BC  0E03               	movlw	3
  6566  00E0BE  EC63  F06F         	call	_send_nibble
  6567                           
  6568                           ;lcd.c: 77: _delay((unsigned long)((150)*(10000000/4000000.0)));
  6569  00E0C2  0E7D               	movlw	125
  6570  00E0C4                     u3167:
  6571  00E0C4  2EE8               	decfsz	wreg,f,c
  6572  00E0C6  D7FE               	bra	u3167
  6573                           
  6574                           ;lcd.c: 78: send_byte(0b00110010);
  6575  00E0C8  0E32               	movlw	50
  6576  00E0CA  EC5A  F06F         	call	_send_byte
  6577                           
  6578                           ;lcd.c: 80: send_byte(0b00101000);
  6579  00E0CE  0E28               	movlw	40
  6580  00E0D0  EC5A  F06F         	call	_send_byte
  6581                           
  6582                           ;lcd.c: 81: send_byte(0b00001000);
  6583  00E0D4  0E08               	movlw	8
  6584  00E0D6  EC5A  F06F         	call	_send_byte
  6585                           
  6586                           ;lcd.c: 82: send_byte(0b00000001);
  6587  00E0DA  0E01               	movlw	1
  6588  00E0DC  EC5A  F06F         	call	_send_byte
  6589                           
  6590                           ;lcd.c: 83: _delay((unsigned long)((5)*(10000000/4000.0)));
  6591  00E0E0  0E11               	movlw	17
  6592  00E0E2  6E05               	movwf	??_initLCD& (0+255),c
  6593  00E0E4  0E3A               	movlw	58
  6594  00E0E6                     u3177:
  6595  00E0E6  2EE8               	decfsz	wreg,f,c
  6596  00E0E8  D7FE               	bra	u3177
  6597  00E0EA  2E05               	decfsz	??_initLCD& (0+255),f,c
  6598  00E0EC  D7FC               	bra	u3177
  6599  00E0EE  D000               	nop2	
  6600                           
  6601                           ;lcd.c: 84: send_byte(0b00000110);
  6602  00E0F0  0E06               	movlw	6
  6603  00E0F2  EC5A  F06F         	call	_send_byte
  6604                           
  6605                           ;lcd.c: 87: { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  6606  00E0F6  0E0F               	movlw	15
  6607  00E0F8  EC4E  F06F         	call	_lcdInst
  6608  00E0FC  0012               	return		;funcret
  6609  00E0FE                     __end_of_initLCD:
  6610                           	opt stack 0
  6611                           tblptru	equ	0xFF8
  6612                           tblptrh	equ	0xFF7
  6613                           tblptrl	equ	0xFF6
  6614                           tablat	equ	0xFF5
  6615                           prodh	equ	0xFF4
  6616                           prodl	equ	0xFF3
  6617                           indf0	equ	0xFEF
  6618                           postinc0	equ	0xFEE
  6619                           fsr0h	equ	0xFEA
  6620                           fsr0l	equ	0xFE9
  6621                           wreg	equ	0xFE8
  6622                           postdec1	equ	0xFE5
  6623                           plusw1	equ	0xFE3
  6624                           fsr1l	equ	0xFE1
  6625                           postinc2	equ	0xFDE
  6626                           postdec2	equ	0xFDD
  6627                           plusw2	equ	0xFDB
  6628                           fsr2h	equ	0xFDA
  6629                           fsr2l	equ	0xFD9
  6630                           status	equ	0xFD8
  6631                           
  6632 ;; *************** function _lcdInst *****************
  6633 ;; Defined at:
  6634 ;;		line 64 in file "lcd.c"
  6635 ;; Parameters:    Size  Location     Type
  6636 ;;  data            1    wreg     unsigned char 
  6637 ;; Auto vars:     Size  Location     Type
  6638 ;;  data            1    3[COMRAM] unsigned char 
  6639 ;; Return value:  Size  Location     Type
  6640 ;;                  1    wreg      void 
  6641 ;; Registers used:
  6642 ;;		wreg, status,2, status,0, cstack
  6643 ;; Tracked objects:
  6644 ;;		On entry : 0/0
  6645 ;;		On exit  : 0/0
  6646 ;;		Unchanged: 0/0
  6647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6651 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6652 ;;Total ram usage:        1 bytes
  6653 ;; Hardware stack levels used:    1
  6654 ;; Hardware stack levels required when called:    3
  6655 ;; This function calls:
  6656 ;;		_send_byte
  6657 ;; This function is called by:
  6658 ;;		_main
  6659 ;;		_initLCD
  6660 ;;		_lcd_shift_display
  6661 ;;		_lcd_shift_cursor
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           	psect	text22
  6666  00DE9C                     __ptext22:
  6667                           	opt stack 0
  6668  00DE9C                     _lcdInst:
  6669                           	opt stack 26
  6670                           
  6671                           ;incstack = 0
  6672                           ;lcdInst@data stored from wreg
  6673  00DE9C  6E04               	movwf	lcdInst@data,c
  6674                           
  6675                           ;lcd.c: 65: LATDbits.LATD2 = 0;
  6676  00DE9E  948C               	bcf	3980,2,c	;volatile
  6677                           
  6678                           ;lcd.c: 66: send_byte(data);
  6679  00DEA0  5004               	movf	lcdInst@data,w,c
  6680  00DEA2  EC5A  F06F         	call	_send_byte
  6681  00DEA6  0012               	return		;funcret
  6682  00DEA8                     __end_of_lcdInst:
  6683                           	opt stack 0
  6684                           tblptru	equ	0xFF8
  6685                           tblptrh	equ	0xFF7
  6686                           tblptrl	equ	0xFF6
  6687                           tablat	equ	0xFF5
  6688                           prodh	equ	0xFF4
  6689                           prodl	equ	0xFF3
  6690                           indf0	equ	0xFEF
  6691                           postinc0	equ	0xFEE
  6692                           fsr0h	equ	0xFEA
  6693                           fsr0l	equ	0xFE9
  6694                           wreg	equ	0xFE8
  6695                           postdec1	equ	0xFE5
  6696                           plusw1	equ	0xFE3
  6697                           fsr1l	equ	0xFE1
  6698                           postinc2	equ	0xFDE
  6699                           postdec2	equ	0xFDD
  6700                           plusw2	equ	0xFDB
  6701                           fsr2h	equ	0xFDA
  6702                           fsr2l	equ	0xFD9
  6703                           status	equ	0xFD8
  6704                           
  6705 ;; *************** function _send_byte *****************
  6706 ;; Defined at:
  6707 ;;		line 55 in file "lcd.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;  data            1    wreg     unsigned char 
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;  data            1    2[COMRAM] unsigned char 
  6712 ;; Return value:  Size  Location     Type
  6713 ;;                  1    wreg      void 
  6714 ;; Registers used:
  6715 ;;		wreg, status,2, status,0, cstack
  6716 ;; Tracked objects:
  6717 ;;		On entry : 0/0
  6718 ;;		On exit  : 0/0
  6719 ;;		Unchanged: 0/0
  6720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6724 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6725 ;;Total ram usage:        1 bytes
  6726 ;; Hardware stack levels used:    1
  6727 ;; Hardware stack levels required when called:    2
  6728 ;; This function calls:
  6729 ;;		_send_nibble
  6730 ;; This function is called by:
  6731 ;;		_lcdInst
  6732 ;;		_initLCD
  6733 ;;		_putch
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737                           	psect	text23
  6738  00DEB4                     __ptext23:
  6739                           	opt stack 0
  6740  00DEB4                     _send_byte:
  6741                           	opt stack 27
  6742                           
  6743                           ;incstack = 0
  6744                           ;send_byte@data stored from wreg
  6745  00DEB4  6E03               	movwf	send_byte@data,c
  6746                           
  6747                           ;lcd.c: 57: send_nibble(data >> 4);
  6748  00DEB6  3803               	swapf	send_byte@data,w,c
  6749  00DEB8  0B0F               	andlw	15
  6750  00DEBA  EC63  F06F         	call	_send_nibble
  6751                           
  6752                           ;lcd.c: 60: send_nibble(data);
  6753  00DEBE  5003               	movf	send_byte@data,w,c
  6754  00DEC0  EC63  F06F         	call	_send_nibble
  6755  00DEC4  0012               	return		;funcret
  6756  00DEC6                     __end_of_send_byte:
  6757                           	opt stack 0
  6758                           tblptru	equ	0xFF8
  6759                           tblptrh	equ	0xFF7
  6760                           tblptrl	equ	0xFF6
  6761                           tablat	equ	0xFF5
  6762                           prodh	equ	0xFF4
  6763                           prodl	equ	0xFF3
  6764                           indf0	equ	0xFEF
  6765                           postinc0	equ	0xFEE
  6766                           fsr0h	equ	0xFEA
  6767                           fsr0l	equ	0xFE9
  6768                           wreg	equ	0xFE8
  6769                           postdec1	equ	0xFE5
  6770                           plusw1	equ	0xFE3
  6771                           fsr1l	equ	0xFE1
  6772                           postinc2	equ	0xFDE
  6773                           postdec2	equ	0xFDD
  6774                           plusw2	equ	0xFDB
  6775                           fsr2h	equ	0xFDA
  6776                           fsr2l	equ	0xFD9
  6777                           status	equ	0xFD8
  6778                           
  6779 ;; *************** function _send_nibble *****************
  6780 ;; Defined at:
  6781 ;;		line 44 in file "lcd.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;  data            1    wreg     unsigned char 
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;  data            1    1[COMRAM] unsigned char 
  6786 ;; Return value:  Size  Location     Type
  6787 ;;                  1    wreg      void 
  6788 ;; Registers used:
  6789 ;;		wreg, status,2, status,0, cstack
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6796 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6798 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;Total ram usage:        1 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    1
  6802 ;; This function calls:
  6803 ;;		_pulse_e
  6804 ;; This function is called by:
  6805 ;;		_send_byte
  6806 ;;		_initLCD
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           	psect	text24
  6811  00DEC6                     __ptext24:
  6812                           	opt stack 0
  6813  00DEC6                     _send_nibble:
  6814                           	opt stack 27
  6815                           
  6816                           ;incstack = 0
  6817                           ;send_nibble@data stored from wreg
  6818  00DEC6  6E02               	movwf	send_nibble@data,c
  6819                           
  6820                           ;lcd.c: 46: LATD = (unsigned char)(LATD & 0x0F);
  6821  00DEC8  508C               	movf	3980,w,c	;volatile
  6822  00DECA  0B0F               	andlw	15
  6823  00DECC  6E8C               	movwf	3980,c	;volatile
  6824                           
  6825                           ;lcd.c: 47: LATD = (unsigned char)((data << 4) | LATD);
  6826  00DECE  3802               	swapf	send_nibble@data,w,c
  6827  00DED0  0BF0               	andlw	240
  6828  00DED2  108C               	iorwf	3980,w,c	;volatile
  6829  00DED4  6E8C               	movwf	3980,c	;volatile
  6830                           
  6831                           ;lcd.c: 48: pulse_e();
  6832  00DED6  ECB4  F06F         	call	_pulse_e	;wreg free
  6833  00DEDA  0012               	return		;funcret
  6834  00DEDC                     __end_of_send_nibble:
  6835                           	opt stack 0
  6836                           tblptru	equ	0xFF8
  6837                           tblptrh	equ	0xFF7
  6838                           tblptrl	equ	0xFF6
  6839                           tablat	equ	0xFF5
  6840                           prodh	equ	0xFF4
  6841                           prodl	equ	0xFF3
  6842                           indf0	equ	0xFEF
  6843                           postinc0	equ	0xFEE
  6844                           fsr0h	equ	0xFEA
  6845                           fsr0l	equ	0xFE9
  6846                           wreg	equ	0xFE8
  6847                           postdec1	equ	0xFE5
  6848                           plusw1	equ	0xFE3
  6849                           fsr1l	equ	0xFE1
  6850                           postinc2	equ	0xFDE
  6851                           postdec2	equ	0xFDD
  6852                           plusw2	equ	0xFDB
  6853                           fsr2h	equ	0xFDA
  6854                           fsr2l	equ	0xFD9
  6855                           status	equ	0xFD8
  6856                           
  6857 ;; *************** function _pulse_e *****************
  6858 ;; Defined at:
  6859 ;;		line 28 in file "lcd.c"
  6860 ;; Parameters:    Size  Location     Type
  6861 ;;		None
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;  interruptSta    1    0[COMRAM] unsigned char 
  6864 ;; Return value:  Size  Location     Type
  6865 ;;                  1    wreg      void 
  6866 ;; Registers used:
  6867 ;;		wreg
  6868 ;; Tracked objects:
  6869 ;;		On entry : 0/0
  6870 ;;		On exit  : 0/0
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6874 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6876 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;Total ram usage:        1 bytes
  6878 ;; Hardware stack levels used:    1
  6879 ;; This function calls:
  6880 ;;		Nothing
  6881 ;; This function is called by:
  6882 ;;		_send_nibble
  6883 ;; This function uses a non-reentrant model
  6884 ;;
  6885                           
  6886                           	psect	text25
  6887  00DF68                     __ptext25:
  6888                           	opt stack 0
  6889  00DF68                     _pulse_e:
  6890                           	opt stack 27
  6891                           
  6892                           ;lcd.c: 29: unsigned char interruptState = INTCONbits.GIE;
  6893                           
  6894                           ;incstack = 0
  6895  00DF68  0E00               	movlw	0
  6896  00DF6A  BEF2               	btfsc	intcon,7,c	;volatile
  6897  00DF6C  0E01               	movlw	1
  6898  00DF6E  6E01               	movwf	pulse_e@interruptState,c
  6899                           
  6900                           ;lcd.c: 30: (INTCONbits.GIE = 0);
  6901  00DF70  9EF2               	bcf	intcon,7,c	;volatile
  6902                           
  6903                           ;lcd.c: 31: LATDbits.LATD3 = 1;
  6904  00DF72  868C               	bsf	3980,3,c	;volatile
  6905                           
  6906                           ;lcd.c: 34: _delay((unsigned long)((25)*(10000000/4000000.0)));
  6907  00DF74  0E14               	movlw	20
  6908  00DF76                     u3187:
  6909  00DF76  2EE8               	decfsz	wreg,f,c
  6910  00DF78  D7FE               	bra	u3187
  6911  00DF7A  D000               	nop2	
  6912                           
  6913                           ;lcd.c: 35: LATDbits.LATD3 = 0;
  6914  00DF7C  968C               	bcf	3980,3,c	;volatile
  6915                           
  6916                           ;lcd.c: 36: _delay((unsigned long)((100)*(10000000/4000000.0)));
  6917  00DF7E  0E53               	movlw	83
  6918  00DF80                     u3197:
  6919  00DF80  2EE8               	decfsz	wreg,f,c
  6920  00DF82  D7FE               	bra	u3197
  6921  00DF84  F000               	nop	
  6922                           
  6923                           ;lcd.c: 37: INTCONbits.GIE = interruptState;
  6924  00DF86  B001               	btfsc	pulse_e@interruptState,0,c
  6925  00DF88  D002               	bra	u1445
  6926  00DF8A  9EF2               	bcf	intcon,7,c	;volatile
  6927  00DF8C  D001               	bra	u1446
  6928  00DF8E                     u1445:
  6929  00DF8E  8EF2               	bsf	intcon,7,c	;volatile
  6930  00DF90                     u1446:
  6931  00DF90  0012               	return		;funcret
  6932  00DF92                     __end_of_pulse_e:
  6933                           	opt stack 0
  6934                           tblptru	equ	0xFF8
  6935                           tblptrh	equ	0xFF7
  6936                           tblptrl	equ	0xFF6
  6937                           tablat	equ	0xFF5
  6938                           prodh	equ	0xFF4
  6939                           prodl	equ	0xFF3
  6940                           intcon	equ	0xFF2
  6941                           indf0	equ	0xFEF
  6942                           postinc0	equ	0xFEE
  6943                           fsr0h	equ	0xFEA
  6944                           fsr0l	equ	0xFE9
  6945                           wreg	equ	0xFE8
  6946                           postdec1	equ	0xFE5
  6947                           plusw1	equ	0xFE3
  6948                           fsr1l	equ	0xFE1
  6949                           postinc2	equ	0xFDE
  6950                           postdec2	equ	0xFDD
  6951                           plusw2	equ	0xFDB
  6952                           fsr2h	equ	0xFDA
  6953                           fsr2l	equ	0xFD9
  6954                           status	equ	0xFD8
  6955                           tblptru	equ	0xFF8
  6956                           tblptrh	equ	0xFF7
  6957                           tblptrl	equ	0xFF6
  6958                           tablat	equ	0xFF5
  6959                           prodh	equ	0xFF4
  6960                           prodl	equ	0xFF3
  6961                           intcon	equ	0xFF2
  6962                           indf0	equ	0xFEF
  6963                           postinc0	equ	0xFEE
  6964                           fsr0h	equ	0xFEA
  6965                           fsr0l	equ	0xFE9
  6966                           wreg	equ	0xFE8
  6967                           postdec1	equ	0xFE5
  6968                           plusw1	equ	0xFE3
  6969                           fsr1l	equ	0xFE1
  6970                           postinc2	equ	0xFDE
  6971                           postdec2	equ	0xFDD
  6972                           plusw2	equ	0xFDB
  6973                           fsr2h	equ	0xFDA
  6974                           fsr2l	equ	0xFD9
  6975                           status	equ	0xFD8
  6976                           
  6977                           	psect	rparam
  6978  0000                     tblptru	equ	0xFF8
  6979                           tblptrh	equ	0xFF7
  6980                           tblptrl	equ	0xFF6
  6981                           tablat	equ	0xFF5
  6982                           prodh	equ	0xFF4
  6983                           prodl	equ	0xFF3
  6984                           intcon	equ	0xFF2
  6985                           indf0	equ	0xFEF
  6986                           postinc0	equ	0xFEE
  6987                           fsr0h	equ	0xFEA
  6988                           fsr0l	equ	0xFE9
  6989                           wreg	equ	0xFE8
  6990                           postdec1	equ	0xFE5
  6991                           plusw1	equ	0xFE3
  6992                           fsr1l	equ	0xFE1
  6993                           postinc2	equ	0xFDE
  6994                           postdec2	equ	0xFDD
  6995                           plusw2	equ	0xFDB
  6996                           fsr2h	equ	0xFDA
  6997                           fsr2l	equ	0xFD9
  6998                           status	equ	0xFD8


Data Sizes:
    Strings     251
    Constant    124
    Data        7
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    115     122
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_22(CODE[17]), STR_21(CODE[8]), STR_20(CODE[15]), STR_19(CODE[3]), 
		 -> STR_18(CODE[3]), STR_17(CODE[17]), STR_16(CODE[16]), STR_15(CODE[16]), 
		 -> STR_14(CODE[14]), STR_13(CODE[8]), STR_12(CODE[11]), STR_11(CODE[8]), 
		 -> STR_10(CODE[11]), STR_9(CODE[11]), STR_8(CODE[17]), STR_7(CODE[11]), 
		 -> STR_6(CODE[10]), STR_5(CODE[10]), STR_4(CODE[12]), STR_3(CODE[15]), 
		 -> STR_2(CODE[15]), STR_1(CODE[13]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_23(CODE[7]), main@arr(COMRAM[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_send_byte
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _lcd_shift_display->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   53785
                                            100 COMRAM    15    15      0
                            ___awmod
                            _initLCD
                            _lcdInst
                  _lcd_shift_display
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    36      6   50586
                                             63 COMRAM    37    31      6
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   11875
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   11677
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2591
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5007
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1968
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2572
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4042
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3697
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2427
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _lcd_shift_display                                    3     2      1     353
                                              4 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     245
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (2) _send_byte                                            1     1      0      89
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (3) _send_nibble                                          1     1      0      45
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (4) _pulse_e                                              1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _lcd_shift_display
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _send_byte
         _send_nibble
           _pulse_e
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _putch
     _send_byte
       _send_nibble
         _pulse_e

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     73      7A       1       96.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7A      34        0.0%
DATA                 0      0      7A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Dec 11 01:15:35 2018

               __CFG_CPD$ON 000000                ___awdiv@sign 000C         ___wmul@multiplicand 0011  
               __CFG_BORV$3 000000                __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000  
              __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000                 __CFG_OSC$HS 000000  
              ___ftadd@exp1 0039                ___ftadd@exp2 0038                ___ftadd@sign 0037  
                       l144 FCCC                         l172 FB60                         l181 FD2C  
                       l406 E6B0                         l510 E7E2                         l503 E754  
                       l504 E77C                         l461 E838                         l438 E392  
                       l535 DF0E                         l465 E862                         l476 E912  
                       l580 E1DE                         l485 E92E                         l590 E082  
              __CFG_CPB$OFF 000000                ___awmod@sign 0006                         wreg 000FE8  
              __CFG_LVP$OFF 000000                __CFG_WDT$OFF 000000                        l2000 E8CC  
                      l2010 E900                        l2002 E8D6                        l2012 E90A  
                      l2004 E8DE                        l2100 E22A                        l2102 E232  
                      l2120 E26A                        l2112 E252                        l2104 E236  
                      l2200 ED50                        l2018 E94A                        l2210 EE2A  
                      l2028 E97A                        l2116 E25C                        l2140 E12C  
                      l2132 E112                        l2044 E4F6                        l2310 E618  
                      l2142 E134                        l2062 E538                        l2038 E4CE  
                      l2206 EE00                        l2240 E71A                        l2144 E138  
                      l2152 E156                        l2136 E11E                        l2072 E560  
                      l2224 F018                        l2410 E478                        l2402 E454  
                      l2330 E676                        l2234 E6EE                        l2058 E528  
                      l2218 EF68                        l2412 E47E                        l2340 E69E  
                      l2156 E164                        l2148 E14C                        l2068 E550  
                      l2500 F6B0                        l2430 E1A0                        l2342 E6AA  
                      l2334 E686                        l2318 E648                        l2270 E7A8  
                      l2094 E214                        l2360 E2D4                        l2416 E494  
                      l2408 E46C                        l2280 E7D0                        l2088 E204  
                      l2512 F704                        l2520 F774                        l2426 E190  
                      l2450 E050                        l2290 E5B8                        l2282 E7DC  
                      l2274 E7B8                        l2186 EBC4                        l2178 EAF8  
                      l2610 FA98                        l2514 F72E                        l2356 E2A4  
                      l2348 DFA8                        l2380 E3DE                        l2428 E19C  
                      l2460 DFD8                        l2700 FE5A                        l2508 F6DA  
                      l2366 E300                        l2438 E1D0                        l2454 E074  
                      l2446 E040                        l2462 DFE4                        l2622 FB3C  
                      l2606 FA7C                        l2550 F854                        l2534 F7C4  
                      l2518 F732                        l2702 FE6A                        l2448 E04C  
                      l2296 E5D6                        l2624 FB4A                        l2616 FB26  
                      l2706 DEE2                        l1930 E34A                        l1922 E314  
                      l2650 FCC2                        l2634 FB7C                        l2618 FB30  
                      l2562 F8DC                        l2490 F68E                        l2644 FCAC  
                      l2628 FB64                        l2564 F8EC                        l2724 F072  
                      l1934 E360                        l1926 E322                        l2398 E444  
                      l2646 FCB6                        l2638 FBCC                        l2574 F95E  
                      l2566 F91A                        l2558 F8B8                        l2494 F69E  
                      l2902 F602                        l1936 E37E                        l1928 E32C  
                      l2672 FD4C                        l2592 FA3A                        l2568 F92A  
                      l2496 F6A8                        l2920 F664                        l1938 E388  
                      l1970 E846                        l2690 FDB2                        l2658 FCF0  
                      l2594 FA3E                        l2578 F982                        l2498 F6AC  
                      l2842 F40A                        l2676 FD70                        l2588 F9D6  
                      l2908 F628                        l2852 F486                        l2694 FDCC  
                      l2678 FD74                        l1992 E8A0                        l1976 E870  
                      l2696 FDD8                        l2864 F4E6                        l2874 F574  
                      l2858 F4CC                        l2892 F5E2                        l1998 E8C2  
                      l2886 F5B0                        STR_1 FF91                        STR_2 FF65  
                      STR_3 FF74                        STR_4 FF9E                        STR_5 FFCB  
                      STR_6 FFD5                        STR_7 FFC0                        STR_8 FF25  
                      STR_9 FFAA                        u2011 E6FE                        u2201 E3C2  
                      u2220 E3FC                        u3007 F2C4                        _LATD 000F8C  
                      u2225 E3F4                        u3017 F306                        u1531 E804  
                      u3107 F59E                        u3027 F324                        u1445 DF8E  
                      u1541 E818                        u3117 F5BA                        u3037 F33E  
                      u1446 DF90                        u2430 F7FC                        u3127 F652  
                      u3047 F386                        u3137 F674                        u3057 F3A0  
                      u2370 F6FC                        u3147 E09A                        u2435 F7F2  
                      u3067 F3E2                        u2380 F726                        u3157 E0B2  
                      u1741 E4B6                        u3077 F3FC                        u3167 E0C4  
                      u3087 F4D6                        u3177 E0E6                        u1761 E4DE  
                      u2377 F6F2                        u3097 F562                        u3187 DF76  
                      u2387 F71C                printf@tmpval 005D                        u3197 DF80  
                      u2590 FB5A                        u2751 F190                        u2907 F0DA  
                      u2917 F130                        u1991 E6D2                        u2927 F14A  
                      u2937 F1B6                        u2947 F1D0                        u2957 F212  
                      u2877 F064                        u2967 F230                        u2887 F07E  
                      u2977 F24A                        u2897 F0C0                        u2987 F28C  
                      u2997 F2AA                        _main F042                ___ftpack@arg 0001  
              ___ftpack@exp 0004                        fsr0h 000FEA                        indf0 000FEF  
                      fsr2h 000FDA                        fsr0l 000FE9                        fsr1l 000FE1  
                      fsr2l 000FD9                        prodh 000FF4                        prodl 000FF3  
                      start 0000               __CFG_IESO$OFF 000000               __CFG_MCLRE$ON 000000  
              ___ftmul@cntr 0022                ___param_bank 000000                ___ftmul@sign 0023  
              ___fttol@exp1 0039                ___fttol@lval 0035                       ?_main 0001  
           __end_of___awdiv E274             __end_of___ftadd E9A0                       STR_10 FFB5  
                     STR_11 FFDF                       STR_12 FFB5                       STR_20 FF56  
                     STR_13 FFEF                       STR_21 FFE7                       STR_14 FF83  
                     STR_22 FF03                       STR_23 FFF7                       STR_15 FF36  
                     STR_16 FF46                       STR_17 FF14                       STR_18 FFA7  
                     STR_19 FFA7             __end_of___awmod E16E             __end_of___ftneg DF1C  
           __end_of___lldiv E1F0             __end_of___ftmul E59A             ___awdiv@divisor 0009  
           __end_of___llmod E094             __end_of___ftsub DFD2             __end_of___fttol E4A6  
           ___awdiv@counter 000B                       _TRISD 000F95               __CFG_PWRT$OFF 000000  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000  
             __CFG_WRT3$OFF 000000                ___lltoft@exp 0011             __end_of_lcdInst DEA8  
            __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000  
            __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000  
             __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000             __end_of_initLCD E0FE  
            __CFG_EBTRB$OFF 000000             __end_of_dpowers FEAF                       _scale EC0A  
             ___ftpack@sign 0005                       _putch DEA8                       main@i 0070  
                     main@x 0073                       tablat 000FF5             send_nibble@data 0002  
                     plusw1 000FE3                       plusw2 000FDB             __end_of_pulse_e DF92  
                     status 000FD8              __CFG_PBADEN$ON 000000             __initialization DF42  
              __end_of_main F684                      ??_main 0065               ___fttol@sign1 0034  
             __activetblptr 000003        __size_of__tdiv_to_l_ 0132                ?_send_nibble 0001  
          ___llmod@dividend 000E                      ?_scale 0024            ___awdiv@dividend 0007  
                    ?_putch 0001            __end_of___ftpack E3B2            __end_of___lltoft E02E  
            __CFG_XINST$OFF 000000            __end_of__powers_ FED6                      ___ftge E274  
                    ___wmul DF1C                   ??___awdiv 000B                   ??___ftadd 0034  
            __CFG_STVREN$ON 000000                   ??___awmod 0005                   ??___ftneg 0004  
                 ??___lldiv 0009                   ??___ftmul 001B                   ??___llmod 0016  
                 ??___ftsub 0040                   ??___fttol 002F                      _fround E9A0  
          ___awdiv@quotient 000D             ___awmod@divisor 0003             ___awmod@counter 0005  
                 ??_lcdInst 0004                      _printf F684       ___ftmul@f3_as_product 001F  
                 ??_initLCD 0005                __pdataCOMRAM 0074                __mediumconst FE86  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                 ??_pulse_e 0001       pulse_e@interruptState 0001                  __accesstop 0080  
   __end_of__initialization DF62                  ___ftadd@f1 002E                  ___ftadd@f2 0031  
                ___ftge@ff1 0001                  ___ftge@ff2 0004               ___rparam_used 000001  
                ___ftneg@f1 0001                  ___ftmul@f1 0015                  ___ftmul@f2 0018  
                ___ftsub@f1 003A                  ___ftsub@f2 003D                  ___fttol@f1 002B  
            __pcstackCOMRAM 0001                  ___lltoft@c 0009               __end_of_scale F042  
         _lcd_shift_display DEDC               __end_of_putch DEB4          ?_lcd_shift_display 0005  
                __div_to_l_ E59A         ??_lcd_shift_display 0006             __div_to_l_@exp1 000C  
           __div_to_l_@cntr 000B                     ??_scale 0027             __div_to_l_@quot 0007  
                   ??_putch 0004               __div_to_l_@f1 0001               __div_to_l_@f2 0004  
                   ?___ftge 0001   __end_of_lcd_shift_display DEF8                     ?___wmul 000F  
        __size_of_send_byte 0012                     ?_fround 0024                   ?___ftpack 0001  
                   ?_printf 0040                   ?___lltoft 0009        __size_of_send_nibble 0016  
         __end_of__npowers_ FEFD                     __Hparam 0000                     __Lparam 0000  
           __size_of___ftge 0090                     ___awdiv E1F0                     ___ftadd E7F4  
                   ___awmod E0FE                     ___ftneg DEF8                     ___lldiv E16E  
           __size_of___wmul 0026                     ___ftmul E4A6                     ___llmod E02E  
                   ___ftsub DF92                     ___fttol E3B2                  _fround$844 002A  
                _fround$845 0027                     __pcinit DF42                  ??___ftpack 0006  
           __size_of_fround 026A                     __ramtop 1000                     _lcdInst DE9C  
                ??___lltoft 000D                     __ptext0 F042                     __ptext1 F684  
                   __ptext2 EC0A                     __ptext3 DEA8                     __ptext4 E9A0  
                   __ptext5 DF1C                     __ptext6 E4A6                     __ptext7 E0FE  
                   __ptext8 E1F0                     __ptext9 E6C2             __size_of_printf 0802  
                   _initLCD E094                 ?__div_to_l_ 0001                     _dpowers FE87  
          ___awmod@dividend 0001                     _pulse_e DF68                     main@arr 0067  
      end_of_initialization DF62       __end_of_LCD_SIZE_HORZ FF02           __end_of_send_byte DEC6  
     __end_of_LCD_SIZE_VERT FF00             ___lldiv@divisor 0005             ___lldiv@counter 000D  
                   printf@c 0064                     printf@f 0040  __size_of_lcd_shift_display 001C  
                   postdec1 000FE5                     postdec2 000FDD                     postinc0 000FEE  
                   postinc2 000FDE              __tdiv_to_l_@f1 0001              __tdiv_to_l_@f2 0004  
                _printf$847 004C               ??__tdiv_to_l_ 0007               send_byte@data 0003  
       __size_of__div_to_l_ 0128                 ___ftmul@exp 001E              __end_of___ftge E304  
            __end_of___wmul DF42               __pidataCOMRAM DE95              __end_of_fround EC0A  
            __end_of_printf FE86         start_initialization DF42         __end_of__tdiv_to_l_ E7F4  
           ___llmod@divisor 0012             ___llmod@counter 0016                    ??___ftge 0007  
                  ??___wmul 0013            __CFG_LPT1OSC$OFF 000000                    ??_fround 0027  
                  ??_printf 0046                  fround@prec 002D           __size_of___ftpack 00AE  
         __size_of___lltoft 005C           __CFG_CCP2MX$PORTC 000000               __pmediumconst FE86  
                  ?___awdiv 0007                    ?___ftadd 002E                    ?___awmod 0001  
                  ?___ftneg 0001                    ?___lldiv 0001                    ?___ftmul 0015  
                  ?___llmod 000E                    ?___ftsub 003A                   __npowers_ FED6  
                  ?___fttol 002B                    ?_lcdInst 0001                 __tdiv_to_l_ E6C2  
              ??__div_to_l_ 0007                    ?_initLCD 0001   lcd_shift_display@numChars 0006  
                 _scale$846 0027               ??_send_nibble 0002                    ?_pulse_e 0001  
            __size_of_scale 0438              __size_of_putch 000C              ___wmul@product 0013  
                  _LATDbits 000F8C                   _send_byte DEB4              _LCD_LINE1_ADDR FF00  
            _LCD_LINE2_ADDR FF02              _LCD_LINE3_ADDR FEFE              _LCD_LINE4_ADDR FEFD  
        __end_of__div_to_l_ E6C2            __CFG_WDTPS$32768 000000                   main@F3042 0074  
         ___wmul@multiplier 000F          lcd_shift_display@n 0007                  printf@flag 0051  
                printf@fval 0061                  printf@prec 0055                   copy_data0 DF56  
    __end_of_LCD_LINE1_ADDR FF01      __end_of_LCD_LINE2_ADDR FF03      __end_of_LCD_LINE3_ADDR FEFF  
    __end_of_LCD_LINE4_ADDR FEFE         __end_of_send_nibble DEDC                  ?_send_byte 0001  
                  __Hrparam 0000                    __Lrparam 0000          __CFG_BOREN$SBORDIS 000000  
          __size_of___awdiv 0084            __size_of___ftadd 01AC            __size_of___awmod 0070  
          __size_of___ftneg 0024            __size_of___lldiv 0082            __size_of___ftmul 00F4  
          __size_of___llmod 0066            __size_of___ftsub 0040            __size_of___fttol 00F4  
                  ___ftpack E304                    ___lltoft DFD2            __size_of_lcdInst 000C  
          __size_of_initLCD 006A                    _main$843 006E                    __ptext10 E59A  
                  __ptext11 DFD2                    __ptext20 DEDC                    __ptext12 E02E  
                  __ptext21 E094                    __ptext13 E16E                    __ptext22 DE9C  
                  __ptext14 E3B2                    __ptext23 DEB4                    __ptext15 DF92  
                  __ptext24 DEC6                    __ptext16 E7F4                    __ptext25 DF68  
                  __ptext17 E304                    __ptext18 DEF8                    __ptext19 E274  
                  __powers_ FEAF            __size_of_pulse_e 002A               __size_of_main 0642  
                  main@i_90 0071                    main@i_92 0072                   printf@exp 0057  
                 printf@val 0059                   putch@data 0004                  _INTCONbits 000FF2  
                  scale@scl 002A                 _send_nibble DEC6            __tdiv_to_l_@exp1 000F  
          __tdiv_to_l_@cntr 000E            __tdiv_to_l_@quot 000A               _LCD_SIZE_HORZ FF01  
             _LCD_SIZE_VERT FEFF            ___lldiv@dividend 0001                 ??_send_byte 0003  
lcd_shift_display@direction 0005                    printf@ap 0053                    printf@cp 004F  
               lcdInst@data 0004                ?__tdiv_to_l_ 0001            ___lldiv@quotient 0009  
