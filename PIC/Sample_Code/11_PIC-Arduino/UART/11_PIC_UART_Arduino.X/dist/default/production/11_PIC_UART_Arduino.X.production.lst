

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Jan 05 16:52:17 2019

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    13  0000                     
    14                           ; Version 1.42
    15                           ; Generated 13/04/2017 GMT
    16                           ; 
    17                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC18F4620 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     
    49                           	psect	idataCOMRAM
    50  00FE2A                     __pidataCOMRAM:
    51                           	opt stack 0
    52                           
    53                           ;initializer for main@F2895
    54  00FE2A  3A                 	db	58
    55  00FE2B  29                 	db	41
    56  00FE2C  20                 	db	32
    57  00FE2D  00                 	db	0
    58  0000                     _TXREG	set	4013
    59  0000                     _TRISCbits	set	3988
    60  0000                     _RCSTAbits	set	4011
    61  0000                     _TXSTAbits	set	4012
    62  0000                     _SPBRG	set	4015
    63  0000                     _TRMT	set	32097
    64  0000                     _TXIF	set	31988
    65                           
    66                           ; #config settings
    67  0000                     
    68                           	psect	cinit
    69  00FE2E                     __pcinit:
    70                           	opt stack 0
    71  00FE2E                     start_initialization:
    72                           	opt stack 0
    73  00FE2E                     __initialization:
    74                           	opt stack 0
    75                           
    76                           ; Initialize objects allocated to COMRAM (4 bytes)
    77                           ; load TBLPTR registers with __pidataCOMRAM
    78  00FE2E  0E2A               	movlw	low __pidataCOMRAM
    79  00FE30  6EF6               	movwf	tblptrl,c
    80  00FE32  0EFE               	movlw	high __pidataCOMRAM
    81  00FE34  6EF7               	movwf	tblptrh,c
    82  00FE36  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    83  00FE38  6EF8               	movwf	tblptru,c
    84  00FE3A  EE00  F01C         	lfsr	0,__pdataCOMRAM
    85  00FE3E  EE10 F004          	lfsr	1,4
    86  00FE42                     copy_data0:
    87  00FE42  0009               	tblrd		*+
    88  00FE44  CFF5 FFEE          	movff	tablat,postinc0
    89  00FE48  50E5               	movf	postdec1,w,c
    90  00FE4A  50E1               	movf	fsr1l,w,c
    91  00FE4C  E1FA               	bnz	copy_data0
    92  00FE4E                     end_of_initialization:
    93                           	opt stack 0
    94  00FE4E                     __end_of__initialization:
    95                           	opt stack 0
    96  00FE4E  0100               	movlb	0
    97  00FE50  EF90  F07F         	goto	_main	;jump to C main() function
    98                           tblptru	equ	0xFF8
    99                           tblptrh	equ	0xFF7
   100                           tblptrl	equ	0xFF6
   101                           tablat	equ	0xFF5
   102                           postinc0	equ	0xFEE
   103                           postdec1	equ	0xFE5
   104                           fsr1l	equ	0xFE1
   105                           
   106                           	psect	dataCOMRAM
   107  00001C                     __pdataCOMRAM:
   108                           	opt stack 0
   109  00001C                     main@F2895:
   110                           	opt stack 0
   111  00001C                     	ds	4
   112                           tblptru	equ	0xFF8
   113                           tblptrh	equ	0xFF7
   114                           tblptrl	equ	0xFF6
   115                           tablat	equ	0xFF5
   116                           postinc0	equ	0xFEE
   117                           postdec1	equ	0xFE5
   118                           fsr1l	equ	0xFE1
   119                           
   120                           	psect	cstackCOMRAM
   121  000001                     __pcstackCOMRAM:
   122                           	opt stack 0
   123  000001                     ?___aldiv:
   124                           	opt stack 0
   125  000001                     ___aldiv@dividend:
   126                           	opt stack 0
   127                           
   128                           ; 4 bytes @ 0x0
   129  000001                     	ds	4
   130  000005                     ___aldiv@divisor:
   131                           	opt stack 0
   132                           
   133                           ; 4 bytes @ 0x4
   134  000005                     	ds	4
   135  000009                     ___aldiv@counter:
   136                           	opt stack 0
   137                           
   138                           ; 1 bytes @ 0x8
   139  000009                     	ds	1
   140  00000A                     ___aldiv@sign:
   141                           	opt stack 0
   142                           
   143                           ; 1 bytes @ 0x9
   144  00000A                     	ds	1
   145  00000B                     ___aldiv@quotient:
   146                           	opt stack 0
   147                           
   148                           ; 4 bytes @ 0xA
   149  00000B                     	ds	4
   150  00000F                     ??_main:
   151                           
   152                           ; 1 bytes @ 0xE
   153  00000F                     	ds	4
   154  000013                     main@msg:
   155                           	opt stack 0
   156                           
   157                           ; 4 bytes @ 0x12
   158  000013                     	ds	4
   159  000017                     main@baudRate:
   160                           	opt stack 0
   161                           
   162                           ; 4 bytes @ 0x16
   163  000017                     	ds	4
   164  00001B                     main@i:
   165                           	opt stack 0
   166                           
   167                           ; 1 bytes @ 0x1A
   168  00001B                     	ds	1
   169                           tblptru	equ	0xFF8
   170                           tblptrh	equ	0xFF7
   171                           tblptrl	equ	0xFF6
   172                           tablat	equ	0xFF5
   173                           postinc0	equ	0xFEE
   174                           postdec1	equ	0xFE5
   175                           fsr1l	equ	0xFE1
   176                           
   177 ;;
   178 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   179 ;;
   180 ;; *************** function _main *****************
   181 ;; Defined at:
   182 ;;		line 24 in file "main.c"
   183 ;; Parameters:    Size  Location     Type
   184 ;;		None
   185 ;; Auto vars:     Size  Location     Type
   186 ;;  i               1   26[COMRAM] unsigned char 
   187 ;;  msg             4   18[COMRAM] unsigned char [4]
   188 ;;  baudRate        4   22[COMRAM] long 
   189 ;; Return value:  Size  Location     Type
   190 ;;                  1    wreg      void 
   191 ;; Registers used:
   192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   193 ;; Tracked objects:
   194 ;;		On entry : 0/0
   195 ;;		On exit  : 0/0
   196 ;;		Unchanged: 0/0
   197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   199 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   200 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   201 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   202 ;;Total ram usage:       13 bytes
   203 ;; Hardware stack levels required when called:    1
   204 ;; This function calls:
   205 ;;		___aldiv
   206 ;; This function is called by:
   207 ;;		Startup code after reset
   208 ;; This function uses a non-reentrant model
   209 ;;
   210                           
   211                           	psect	text0
   212  00FF20                     __ptext0:
   213                           	opt stack 0
   214  00FF20                     _main:
   215                           	opt stack 30
   216                           
   217                           ;main.c: 26: long baudRate = 9600;
   218                           
   219                           ;incstack = 0
   220  00FF20  0E80               	movlw	128
   221  00FF22  6E17               	movwf	main@baudRate,c
   222  00FF24  0E25               	movlw	37
   223  00FF26  6E18               	movwf	main@baudRate+1,c
   224  00FF28  0E00               	movlw	0
   225  00FF2A  6E19               	movwf	main@baudRate+2,c
   226  00FF2C  0E00               	movlw	0
   227  00FF2E  6E1A               	movwf	main@baudRate+3,c
   228                           
   229                           ;main.c: 27: SPBRG = (unsigned char)((10000000 / (64 * baudRate)) - 1);
   230  00FF30  0E80               	movlw	128
   231  00FF32  6E01               	movwf	___aldiv@dividend,c
   232  00FF34  0E96               	movlw	150
   233  00FF36  6E02               	movwf	___aldiv@dividend+1,c
   234  00FF38  0E98               	movlw	152
   235  00FF3A  6E03               	movwf	___aldiv@dividend+2,c
   236  00FF3C  0E00               	movlw	0
   237  00FF3E  6E04               	movwf	___aldiv@dividend+3,c
   238  00FF40  C017  F00F         	movff	main@baudRate,??_main
   239  00FF44  C018  F010         	movff	main@baudRate+1,??_main+1
   240  00FF48  C019  F011         	movff	main@baudRate+2,??_main+2
   241  00FF4C  C01A  F012         	movff	main@baudRate+3,??_main+3
   242  00FF50  0E06               	movlw	6
   243  00FF52                     u185:
   244  00FF52  90D8               	bcf	status,0,c
   245  00FF54  360F               	rlcf	??_main,f,c
   246  00FF56  3610               	rlcf	??_main+1,f,c
   247  00FF58  3611               	rlcf	??_main+2,f,c
   248  00FF5A  3612               	rlcf	??_main+3,f,c
   249  00FF5C  2EE8               	decfsz	wreg,f,c
   250  00FF5E  D7F9               	goto	u185
   251  00FF60  C00F  F005         	movff	??_main,___aldiv@divisor
   252  00FF64  C010  F006         	movff	??_main+1,___aldiv@divisor+1
   253  00FF68  C011  F007         	movff	??_main+2,___aldiv@divisor+2
   254  00FF6C  C012  F008         	movff	??_main+3,___aldiv@divisor+3
   255  00FF70  EC2A  F07F         	call	___aldiv	;wreg free
   256  00FF74  0401               	decf	?___aldiv,w,c
   257  00FF76  6EAF               	movwf	4015,c	;volatile
   258                           
   259                           ;main.c: 30: TXSTAbits.TX9 = 0;
   260  00FF78  9CAC               	bcf	4012,6,c	;volatile
   261                           
   262                           ;main.c: 31: TXSTAbits.SYNC = 0;
   263  00FF7A  98AC               	bcf	4012,4,c	;volatile
   264                           
   265                           ;main.c: 32: TXSTAbits.TXEN = 1;
   266  00FF7C  8AAC               	bsf	4012,5,c	;volatile
   267                           
   268                           ;main.c: 33: _delay((unsigned long)((5)*(10000000/4000.0)));
   269  00FF7E  0E11               	movlw	17
   270  00FF80  6E0F               	movwf	??_main& (0+255),c
   271  00FF82  0E3A               	movlw	58
   272  00FF84                     u237:
   273  00FF84  2EE8               	decfsz	wreg,f,c
   274  00FF86  D7FE               	bra	u237
   275  00FF88  2E0F               	decfsz	??_main& (0+255),f,c
   276  00FF8A  D7FC               	bra	u237
   277  00FF8C  D000               	nop2	
   278                           
   279                           ;main.c: 36: RCSTAbits.RX9 = 0;
   280  00FF8E  9CAB               	bcf	4011,6,c	;volatile
   281                           
   282                           ;main.c: 37: RCSTAbits.CREN = 1;
   283  00FF90  88AB               	bsf	4011,4,c	;volatile
   284                           
   285                           ;main.c: 40: TRISCbits.TRISC6 = 0;
   286  00FF92  9C94               	bcf	3988,6,c	;volatile
   287                           
   288                           ;main.c: 41: TRISCbits.TRISC7 = 1;
   289  00FF94  8E94               	bsf	3988,7,c	;volatile
   290                           
   291                           ;main.c: 44: RCSTAbits.SPEN = 1;
   292  00FF96  8EAB               	bsf	4011,7,c	;volatile
   293                           
   294                           ;main.c: 47: unsigned char msg[] = ":) ";
   295  00FF98  C01C  F013         	movff	main@F2895,main@msg
   296  00FF9C  C01D  F014         	movff	main@F2895+1,main@msg+1
   297  00FFA0  C01E  F015         	movff	main@F2895+2,main@msg+2
   298  00FFA4  C01F  F016         	movff	main@F2895+3,main@msg+3
   299  00FFA8                     l805:
   300                           
   301                           ;main.c: 51: for(unsigned char i = 0; i < sizeof(msg) - 1; i++)
   302  00FFA8  0E00               	movlw	0
   303  00FFAA  6E1B               	movwf	main@i,c
   304  00FFAC                     l807:
   305  00FFAC  0E02               	movlw	2
   306  00FFAE  641B               	cpfsgt	main@i,c
   307  00FFB0  D001               	goto	l811
   308  00FFB2  D019               	goto	l819
   309  00FFB4                     l811:
   310  00FFB4  B2AC               	btfsc	4012,1,c	;volatile
   311  00FFB6  D002               	goto	u200
   312  00FFB8  0E01               	movlw	1
   313  00FFBA  D001               	goto	u202
   314  00FFBC                     u200:
   315  00FFBC  0E00               	movlw	0
   316  00FFBE                     u202:
   317  00FFBE  6E0F               	movwf	??_main& (0+255),c
   318  00FFC0  B89E               	btfsc	3998,4,c	;volatile
   319  00FFC2  D002               	goto	u210
   320  00FFC4  0E01               	movlw	1
   321  00FFC6  D001               	goto	u212
   322  00FFC8                     u210:
   323  00FFC8  0E00               	movlw	0
   324  00FFCA                     u212:
   325  00FFCA  100F               	iorwf	??_main,w,c
   326  00FFCC  E1F3               	bnz	l811
   327                           
   328                           ;main.c: 58: }
   329                           ;main.c: 61: TXREG = msg[i];
   330  00FFCE  501B               	movf	main@i,w,c
   331  00FFD0  0D01               	mullw	1
   332  00FFD2  0E13               	movlw	low main@msg
   333  00FFD4  24F3               	addwf	prodl,w,c
   334  00FFD6  6ED9               	movwf	fsr2l,c
   335  00FFD8  0E00               	movlw	high main@msg
   336  00FFDA  20F4               	addwfc	prodh,w,c
   337  00FFDC  6EDA               	movwf	fsr2h,c
   338  00FFDE  50DF               	movf	indf2,w,c
   339  00FFE0  6EAD               	movwf	4013,c	;volatile
   340  00FFE2  2A1B               	incf	main@i,f,c
   341  00FFE4  D7E3               	goto	l807
   342  00FFE6                     l819:
   343                           
   344                           ;main.c: 62: }
   345                           ;main.c: 63: _delay((unsigned long)((1000)*(10000000/4000.0)));
   346  00FFE6  0E0D               	movlw	13
   347  00FFE8  6E10               	movwf	(??_main+1)& (0+255),c
   348  00FFEA  0EAF               	movlw	175
   349  00FFEC  6E0F               	movwf	??_main& (0+255),c
   350  00FFEE  0EB6               	movlw	182
   351  00FFF0                     u247:
   352  00FFF0  2EE8               	decfsz	wreg,f,c
   353  00FFF2  D7FE               	bra	u247
   354  00FFF4  2E0F               	decfsz	??_main& (0+255),f,c
   355  00FFF6  D7FC               	bra	u247
   356  00FFF8  2E10               	decfsz	(??_main+1)& (0+255),f,c
   357  00FFFA  D7FA               	bra	u247
   358  00FFFC  D000               	nop2	
   359  00FFFE  D7D4               	goto	l805
   360  010000                     __end_of_main:
   361                           	opt stack 0
   362                           tblptru	equ	0xFF8
   363                           tblptrh	equ	0xFF7
   364                           tblptrl	equ	0xFF6
   365                           tablat	equ	0xFF5
   366                           prodh	equ	0xFF4
   367                           prodl	equ	0xFF3
   368                           postinc0	equ	0xFEE
   369                           wreg	equ	0xFE8
   370                           postdec1	equ	0xFE5
   371                           fsr1l	equ	0xFE1
   372                           indf2	equ	0xFDF
   373                           fsr2h	equ	0xFDA
   374                           fsr2l	equ	0xFD9
   375                           status	equ	0xFD8
   376                           
   377 ;; *************** function ___aldiv *****************
   378 ;; Defined at:
   379 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
   380 ;; Parameters:    Size  Location     Type
   381 ;;  dividend        4    0[COMRAM] long 
   382 ;;  divisor         4    4[COMRAM] long 
   383 ;; Auto vars:     Size  Location     Type
   384 ;;  quotient        4   10[COMRAM] long 
   385 ;;  sign            1    9[COMRAM] unsigned char 
   386 ;;  counter         1    8[COMRAM] unsigned char 
   387 ;; Return value:  Size  Location     Type
   388 ;;                  4    0[COMRAM] long 
   389 ;; Registers used:
   390 ;;		wreg, status,2, status,0
   391 ;; Tracked objects:
   392 ;;		On entry : 0/0
   393 ;;		On exit  : 0/0
   394 ;;		Unchanged: 0/0
   395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   396 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   397 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   399 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   400 ;;Total ram usage:       14 bytes
   401 ;; Hardware stack levels used:    1
   402 ;; This function calls:
   403 ;;		Nothing
   404 ;; This function is called by:
   405 ;;		_main
   406 ;; This function uses a non-reentrant model
   407 ;;
   408                           
   409                           	psect	text1
   410  00FE54                     __ptext1:
   411                           	opt stack 0
   412  00FE54                     ___aldiv:
   413                           	opt stack 30
   414                           
   415                           ;incstack = 0
   416  00FE54  0E00               	movlw	0
   417  00FE56  6E0A               	movwf	___aldiv@sign,c
   418  00FE58  AE08               	btfss	___aldiv@divisor+3,7,c
   419  00FE5A  D00A               	goto	l745
   420  00FE5C  1E08               	comf	___aldiv@divisor+3,f,c
   421  00FE5E  1E07               	comf	___aldiv@divisor+2,f,c
   422  00FE60  1E06               	comf	___aldiv@divisor+1,f,c
   423  00FE62  6C05               	negf	___aldiv@divisor,c
   424  00FE64  0E00               	movlw	0
   425  00FE66  2206               	addwfc	___aldiv@divisor+1,f,c
   426  00FE68  2207               	addwfc	___aldiv@divisor+2,f,c
   427  00FE6A  2208               	addwfc	___aldiv@divisor+3,f,c
   428  00FE6C  0E01               	movlw	1
   429  00FE6E  6E0A               	movwf	___aldiv@sign,c
   430  00FE70                     l745:
   431  00FE70  AE04               	btfss	___aldiv@dividend+3,7,c
   432  00FE72  D00A               	goto	l751
   433  00FE74  1E04               	comf	___aldiv@dividend+3,f,c
   434  00FE76  1E03               	comf	___aldiv@dividend+2,f,c
   435  00FE78  1E02               	comf	___aldiv@dividend+1,f,c
   436  00FE7A  6C01               	negf	___aldiv@dividend,c
   437  00FE7C  0E00               	movlw	0
   438  00FE7E  2202               	addwfc	___aldiv@dividend+1,f,c
   439  00FE80  2203               	addwfc	___aldiv@dividend+2,f,c
   440  00FE82  2204               	addwfc	___aldiv@dividend+3,f,c
   441  00FE84  0E01               	movlw	1
   442  00FE86  1A0A               	xorwf	___aldiv@sign,f,c
   443  00FE88                     l751:
   444  00FE88  0E00               	movlw	0
   445  00FE8A  6E0B               	movwf	___aldiv@quotient,c
   446  00FE8C  0E00               	movlw	0
   447  00FE8E  6E0C               	movwf	___aldiv@quotient+1,c
   448  00FE90  0E00               	movlw	0
   449  00FE92  6E0D               	movwf	___aldiv@quotient+2,c
   450  00FE94  0E00               	movlw	0
   451  00FE96  6E0E               	movwf	___aldiv@quotient+3,c
   452  00FE98  5005               	movf	___aldiv@divisor,w,c
   453  00FE9A  1006               	iorwf	___aldiv@divisor+1,w,c
   454  00FE9C  1007               	iorwf	___aldiv@divisor+2,w,c
   455  00FE9E  1008               	iorwf	___aldiv@divisor+3,w,c
   456  00FEA0  B4D8               	btfsc	status,2,c
   457  00FEA2  D02A               	goto	l773
   458  00FEA4  0E01               	movlw	1
   459  00FEA6  6E09               	movwf	___aldiv@counter,c
   460  00FEA8  D006               	goto	l759
   461  00FEAA                     l757:
   462  00FEAA  90D8               	bcf	status,0,c
   463  00FEAC  3605               	rlcf	___aldiv@divisor,f,c
   464  00FEAE  3606               	rlcf	___aldiv@divisor+1,f,c
   465  00FEB0  3607               	rlcf	___aldiv@divisor+2,f,c
   466  00FEB2  3608               	rlcf	___aldiv@divisor+3,f,c
   467  00FEB4  2A09               	incf	___aldiv@counter,f,c
   468  00FEB6                     l759:
   469  00FEB6  AE08               	btfss	___aldiv@divisor+3,7,c
   470  00FEB8  D7F8               	goto	l757
   471  00FEBA                     l761:
   472  00FEBA  90D8               	bcf	status,0,c
   473  00FEBC  360B               	rlcf	___aldiv@quotient,f,c
   474  00FEBE  360C               	rlcf	___aldiv@quotient+1,f,c
   475  00FEC0  360D               	rlcf	___aldiv@quotient+2,f,c
   476  00FEC2  360E               	rlcf	___aldiv@quotient+3,f,c
   477  00FEC4  5005               	movf	___aldiv@divisor,w,c
   478  00FEC6  5C01               	subwf	___aldiv@dividend,w,c
   479  00FEC8  5006               	movf	___aldiv@divisor+1,w,c
   480  00FECA  5802               	subwfb	___aldiv@dividend+1,w,c
   481  00FECC  5007               	movf	___aldiv@divisor+2,w,c
   482  00FECE  5803               	subwfb	___aldiv@dividend+2,w,c
   483  00FED0  5008               	movf	___aldiv@divisor+3,w,c
   484  00FED2  5804               	subwfb	___aldiv@dividend+3,w,c
   485  00FED4  A0D8               	btfss	status,0,c
   486  00FED6  D009               	goto	l769
   487  00FED8  5005               	movf	___aldiv@divisor,w,c
   488  00FEDA  5E01               	subwf	___aldiv@dividend,f,c
   489  00FEDC  5006               	movf	___aldiv@divisor+1,w,c
   490  00FEDE  5A02               	subwfb	___aldiv@dividend+1,f,c
   491  00FEE0  5007               	movf	___aldiv@divisor+2,w,c
   492  00FEE2  5A03               	subwfb	___aldiv@dividend+2,f,c
   493  00FEE4  5008               	movf	___aldiv@divisor+3,w,c
   494  00FEE6  5A04               	subwfb	___aldiv@dividend+3,f,c
   495  00FEE8  800B               	bsf	___aldiv@quotient,0,c
   496  00FEEA                     l769:
   497  00FEEA  90D8               	bcf	status,0,c
   498  00FEEC  3208               	rrcf	___aldiv@divisor+3,f,c
   499  00FEEE  3207               	rrcf	___aldiv@divisor+2,f,c
   500  00FEF0  3206               	rrcf	___aldiv@divisor+1,f,c
   501  00FEF2  3205               	rrcf	___aldiv@divisor,f,c
   502  00FEF4  2E09               	decfsz	___aldiv@counter,f,c
   503  00FEF6  D7E1               	goto	l761
   504  00FEF8                     l773:
   505  00FEF8  500A               	movf	___aldiv@sign,w,c
   506  00FEFA  B4D8               	btfsc	status,2,c
   507  00FEFC  D008               	goto	l777
   508  00FEFE  1E0E               	comf	___aldiv@quotient+3,f,c
   509  00FF00  1E0D               	comf	___aldiv@quotient+2,f,c
   510  00FF02  1E0C               	comf	___aldiv@quotient+1,f,c
   511  00FF04  6C0B               	negf	___aldiv@quotient,c
   512  00FF06  0E00               	movlw	0
   513  00FF08  220C               	addwfc	___aldiv@quotient+1,f,c
   514  00FF0A  220D               	addwfc	___aldiv@quotient+2,f,c
   515  00FF0C  220E               	addwfc	___aldiv@quotient+3,f,c
   516  00FF0E                     l777:
   517  00FF0E  C00B  F001         	movff	___aldiv@quotient,?___aldiv
   518  00FF12  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
   519  00FF16  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
   520  00FF1A  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
   521  00FF1E  0012               	return	
   522  00FF20                     __end_of___aldiv:
   523                           	opt stack 0
   524  0000                     tblptru	equ	0xFF8
   525                           tblptrh	equ	0xFF7
   526                           tblptrl	equ	0xFF6
   527                           tablat	equ	0xFF5
   528                           prodh	equ	0xFF4
   529                           prodl	equ	0xFF3
   530                           postinc0	equ	0xFEE
   531                           wreg	equ	0xFE8
   532                           postdec1	equ	0xFE5
   533                           fsr1l	equ	0xFE1
   534                           indf2	equ	0xFDF
   535                           fsr2h	equ	0xFDA
   536                           fsr2l	equ	0xFD9
   537                           status	equ	0xFD8
   538                           tblptru	equ	0xFF8
   539                           tblptrh	equ	0xFF7
   540                           tblptrl	equ	0xFF6
   541                           tablat	equ	0xFF5
   542                           prodh	equ	0xFF4
   543                           prodl	equ	0xFF3
   544                           postinc0	equ	0xFEE
   545                           wreg	equ	0xFE8
   546                           postdec1	equ	0xFE5
   547                           fsr1l	equ	0xFE1
   548                           indf2	equ	0xFDF
   549                           fsr2h	equ	0xFDA
   550                           fsr2l	equ	0xFD9
   551                           status	equ	0xFD8
   552                           
   553                           	psect	rparam
   554  0000                     tblptru	equ	0xFF8
   555                           tblptrh	equ	0xFF7
   556                           tblptrl	equ	0xFF6
   557                           tablat	equ	0xFF5
   558                           prodh	equ	0xFF4
   559                           prodl	equ	0xFF3
   560                           postinc0	equ	0xFEE
   561                           wreg	equ	0xFE8
   562                           postdec1	equ	0xFE5
   563                           fsr1l	equ	0xFE1
   564                           indf2	equ	0xFDF
   565                           fsr2h	equ	0xFDA
   566                           fsr2l	equ	0xFD9
   567                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     27      31
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0     567
                                             14 COMRAM    13    13      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1B      1F       1       24.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1F      34        0.0%
DATA                 0      0      1F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Jan 05 16:52:17 2019

            __CFG_CPD$ON 000000              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000                      l811 FFB4                      l805 FFA8  
                    l751 FE88                      l807 FFAC                      l761 FEBA  
                    l745 FE70                      l819 FFE6                      l757 FEAA  
                    l773 FEF8                      l759 FEB6                      l777 FF0E  
                    l769 FEEA             __CFG_CPB$OFF 000000                      u200 FFBC  
                    u210 FFC8                      u202 FFBE                      u212 FFCA  
                    u237 FF84                      u247 FFF0                      u185 FF52  
                    prod 000FF3                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     _TRMT 007D61                     _TXIF 007CF4  
                   _main FF20                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000             main@baudRate 0017            __CFG_MCLRE$ON 000000  
           ___param_bank 000000          __end_of___aldiv FF20                    ?_main 0001  
                  _SPBRG 000FAF                    _TXREG 000FAD            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    main@i 001B                    tablat 000FF5  
                  status 000FD8           __CFG_PBADEN$ON 000000          __initialization FE2E  
           __end_of_main 0000                   ??_main 000F            __activetblptr 000000  
         __CFG_XINST$OFF 000000                ??___aldiv 0009           __CFG_STVREN$ON 000000  
           __pdataCOMRAM 001C                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0080  __end_of__initialization FE4E  
          ___rparam_used 000001           __pcstackCOMRAM 0001                  __Hparam 0000  
                __Lparam 0000                  ___aldiv FE54                  __pcinit FE2E  
                __ramtop 1000                  __ptext0 FF20                  __ptext1 FE54  
       ___aldiv@dividend 0001                  main@msg 0013     end_of_initialization FE4E  
              _RCSTAbits 000FAB         ___aldiv@quotient 000B                  postdec1 000FE5  
                postinc0 000FEE                _TRISCbits 000F94                _TXSTAbits 000FAC  
          __pidataCOMRAM FE2A      start_initialization FE2E         __CFG_LPT1OSC$OFF 000000  
      __CFG_CCP2MX$PORTC 000000                 ?___aldiv 0001          ___aldiv@divisor 0005  
        ___aldiv@counter 0009         __CFG_WDTPS$32768 000000                main@F2895 001C  
              copy_data0 FE42                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000         __size_of___aldiv 00CC            __size_of_main 00E0  
           ___aldiv@sign 000A  
