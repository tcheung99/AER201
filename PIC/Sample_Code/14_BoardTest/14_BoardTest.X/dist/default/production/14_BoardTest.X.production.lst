

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Tue Dec 11 01:33:04 2018

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,inline
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text56,global,reloc=2,class=CODE,delta=1
    67                           	psect	text57,global,reloc=2,class=CODE,delta=1
    68                           	psect	text58,global,reloc=2,class=CODE,delta=1
    69                           	psect	text59,global,reloc=2,class=CODE,delta=1
    70                           	psect	text60,global,reloc=2,class=CODE,delta=1,inline
    71                           	psect	text61,global,reloc=2,class=CODE,delta=1
    72                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    75  0000                     
    76                           ; Version 1.43
    77                           ; Generated 25/07/2017 GMT
    78                           ; 
    79                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC18F4620 Definitions
   108                           ; 
   109                           ; SFR Addresses
   110  0000                     
   111                           	psect	mediumconst
   112  00FE5E                     __pmediumconst:
   113                           	opt stack 0
   114  00FE5E  00                 	db	0
   115  00FE5F                     _dpowers:
   116                           	opt stack 0
   117  00FE5F  0001               	dw	1
   118  00FE61  0000               	dw	0
   119  00FE63  000A               	dw	10
   120  00FE65  0000               	dw	0
   121  00FE67  0064               	dw	100
   122  00FE69  0000               	dw	0
   123  00FE6B  03E8               	dw	1000
   124  00FE6D  0000               	dw	0
   125  00FE6F  2710               	dw	10000
   126  00FE71  0000               	dw	0
   127  00FE73  86A0               	dw	34464
   128  00FE75  0001               	dw	1
   129  00FE77  4240               	dw	16960
   130  00FE79  000F               	dw	15
   131  00FE7B  9680               	dw	38528
   132  00FE7D  0098               	dw	152
   133  00FE7F  E100               	dw	57600
   134  00FE81  05F5               	dw	1525
   135  00FE83  CA00               	dw	51712
   136  00FE85  3B9A               	dw	15258
   137  00FE87                     __end_of_dpowers:
   138                           	opt stack 0
   139  00FE87                     __powers_:
   140                           	opt stack 0
   141  00FE87  00                 	db	0
   142  00FE88  80                 	db	128
   143  00FE89  3F                 	db	63
   144  00FE8A  00                 	db	0
   145  00FE8B  20                 	db	32
   146  00FE8C  41                 	db	65
   147  00FE8D  00                 	db	0
   148  00FE8E  C8                 	db	200
   149  00FE8F  42                 	db	66
   150  00FE90  00                 	db	0
   151  00FE91  7A                 	db	122
   152  00FE92  44                 	db	68
   153  00FE93  40                 	db	64
   154  00FE94  1C                 	db	28
   155  00FE95  46                 	db	70
   156  00FE96  50                 	db	80
   157  00FE97  C3                 	db	195
   158  00FE98  47                 	db	71
   159  00FE99  24                 	db	36
   160  00FE9A  74                 	db	116
   161  00FE9B  49                 	db	73
   162  00FE9C  97                 	db	151
   163  00FE9D  18                 	db	24
   164  00FE9E  4B                 	db	75
   165  00FE9F  BC                 	db	188
   166  00FEA0  BE                 	db	190
   167  00FEA1  4C                 	db	76
   168  00FEA2  6B                 	db	107
   169  00FEA3  6E                 	db	110
   170  00FEA4  4E                 	db	78
   171  00FEA5  03                 	db	3
   172  00FEA6  15                 	db	21
   173  00FEA7  50                 	db	80
   174  00FEA8  79                 	db	121
   175  00FEA9  AD                 	db	173
   176  00FEAA  60                 	db	96
   177  00FEAB  F3                 	db	243
   178  00FEAC  49                 	db	73
   179  00FEAD  71                 	db	113
   180  00FEAE                     __end_of__powers_:
   181                           	opt stack 0
   182  00FEAE                     __npowers_:
   183                           	opt stack 0
   184  00FEAE  00                 	db	0
   185  00FEAF  80                 	db	128
   186  00FEB0  3F                 	db	63
   187  00FEB1  CD                 	db	205
   188  00FEB2  CC                 	db	204
   189  00FEB3  3D                 	db	61
   190  00FEB4  D7                 	db	215
   191  00FEB5  23                 	db	35
   192  00FEB6  3C                 	db	60
   193  00FEB7  12                 	db	18
   194  00FEB8  83                 	db	131
   195  00FEB9  3A                 	db	58
   196  00FEBA  B7                 	db	183
   197  00FEBB  D1                 	db	209
   198  00FEBC  38                 	db	56
   199  00FEBD  C6                 	db	198
   200  00FEBE  27                 	db	39
   201  00FEBF  37                 	db	55
   202  00FEC0  38                 	db	56
   203  00FEC1  86                 	db	134
   204  00FEC2  35                 	db	53
   205  00FEC3  C0                 	db	192
   206  00FEC4  D6                 	db	214
   207  00FEC5  33                 	db	51
   208  00FEC6  CC                 	db	204
   209  00FEC7  2B                 	db	43
   210  00FEC8  32                 	db	50
   211  00FEC9  70                 	db	112
   212  00FECA  89                 	db	137
   213  00FECB  30                 	db	48
   214  00FECC  E7                 	db	231
   215  00FECD  DB                 	db	219
   216  00FECE  2E                 	db	46
   217  00FECF  E5                 	db	229
   218  00FED0  3C                 	db	60
   219  00FED1  1E                 	db	30
   220  00FED2  42                 	db	66
   221  00FED3  A2                 	db	162
   222  00FED4  0D                 	db	13
   223  00FED5                     __end_of__npowers_:
   224                           	opt stack 0
   225  00FED5                     _hexpowers:
   226                           	opt stack 0
   227  00FED5  0001               	dw	1
   228  00FED7  0000               	dw	0
   229  00FED9  0010               	dw	16
   230  00FEDB  0000               	dw	0
   231  00FEDD  0100               	dw	256
   232  00FEDF  0000               	dw	0
   233  00FEE1  1000               	dw	4096
   234  00FEE3  0000               	dw	0
   235  00FEE5  0000               	dw	0
   236  00FEE7  0001               	dw	1
   237  00FEE9  0000               	dw	0
   238  00FEEB  0010               	dw	16
   239  00FEED  0000               	dw	0
   240  00FEEF  0100               	dw	256
   241  00FEF1  0000               	dw	0
   242  00FEF3  1000               	dw	4096
   243  00FEF5                     __end_of_hexpowers:
   244                           	opt stack 0
   245  00FEF5                     _key_map:
   246                           	opt stack 0
   247  00FEF5  00                 	db	0
   248  00FEF6  01                 	db	1
   249  00FEF7  02                 	db	2
   250  00FEF8  07                 	db	7
   251  00FEF9  03                 	db	3
   252  00FEFA  04                 	db	4
   253  00FEFB  05                 	db	5
   254  00FEFC  07                 	db	7
   255  00FEFD  06                 	db	6
   256  00FEFE  07                 	db	7
   257  00FEFF  07                 	db	7
   258  00FF00  07                 	db	7
   259  00FF01  07                 	db	7
   260  00FF02  07                 	db	7
   261  00FF03  07                 	db	7
   262  00FF04  07                 	db	7
   263  00FF05                     __end_of_key_map:
   264                           	opt stack 0
   265  00FF05                     testUART@F3214:
   266                           	opt stack 0
   267  00FF05  48                 	db	72
   268  00FF06  65                 	db	101
   269  00FF07  6C                 	db	108
   270  00FF08  6C                 	db	108
   271  00FF09  6F                 	db	111
   272  00FF0A  20                 	db	32
   273  00FF0B  77                 	db	119
   274  00FF0C  6F                 	db	111
   275  00FF0D  72                 	db	114
   276  00FF0E  6C                 	db	108
   277  00FF0F  64                 	db	100
   278  00FF10  21                 	db	33
   279  00FF11  00                 	db	0
   280  00FF12                     __end_oftestUART@F3214:
   281                           	opt stack 0
   282  00FF12                     testRTCSet@happynewyear:
   283                           	opt stack 0
   284  00FF12  45                 	db	69
   285  00FF13  59                 	db	89
   286  00FF14  23                 	db	35
   287  00FF15  00                 	db	0
   288  00FF16  31                 	db	49
   289  00FF17  12                 	db	18
   290  00FF18  18                 	db	24
   291  00FF19                     __end_oftestRTCSet@happynewyear:
   292                           	opt stack 0
   293  00FF19                     _INDIGO:
   294                           	opt stack 0
   295  00FF19  0082               	dw	130
   296  00FF1B  004B               	dw	75
   297  00FF1D                     __end_of_INDIGO:
   298                           	opt stack 0
   299  00FF1D                     _BLUE:
   300                           	opt stack 0
   301  00FF1D  00FF               	dw	255
   302  00FF1F  0000               	dw	0
   303  00FF21                     __end_of_BLUE:
   304                           	opt stack 0
   305  00FF21                     _GREEN:
   306                           	opt stack 0
   307  00FF21  FF00               	dw	65280
   308  00FF23  0000               	dw	0
   309  00FF25                     __end_of_GREEN:
   310                           	opt stack 0
   311  00FF25                     _YELLOW:
   312                           	opt stack 0
   313  00FF25  FF00               	dw	65280
   314  00FF27  00FF               	dw	255
   315  00FF29                     __end_of_YELLOW:
   316                           	opt stack 0
   317  00FF29                     _ORANGE:
   318                           	opt stack 0
   319  00FF29  8C00               	dw	35840
   320  00FF2B  00FF               	dw	255
   321  00FF2D                     __end_of_ORANGE:
   322                           	opt stack 0
   323  00FF2D                     _WHITE:
   324                           	opt stack 0
   325  00FF2D  FFFF               	dw	65535
   326  00FF2F  00FF               	dw	255
   327  00FF31                     __end_of_WHITE:
   328                           	opt stack 0
   329  00FF31                     _GREY:
   330                           	opt stack 0
   331  00FF31  8080               	dw	32896
   332  00FF33  0080               	dw	128
   333  00FF35                     __end_of_GREY:
   334                           	opt stack 0
   335  00FF35                     _BLACK:
   336                           	opt stack 0
   337  00FF35  0000               	dw	0
   338  00FF37  0000               	dw	0
   339  00FF39                     __end_of_BLACK:
   340                           	opt stack 0
   341  00FF39                     _VIOLET:
   342                           	opt stack 0
   343  00FF39  00D3               	dw	211
   344  00FF3B  0094               	dw	148
   345  00FF3D                     __end_of_VIOLET:
   346                           	opt stack 0
   347  00FF3D                     _RED:
   348                           	opt stack 0
   349  00FF3D  0000               	dw	0
   350  00FF3F  00FF               	dw	255
   351  00FF41                     __end_of_RED:
   352                           	opt stack 0
   353  00FF41                     _LCD_LINE4_ADDR:
   354                           	opt stack 0
   355  00FF41  50                 	db	80
   356  00FF42                     __end_of_LCD_LINE4_ADDR:
   357                           	opt stack 0
   358  00FF42                     _LCD_LINE3_ADDR:
   359                           	opt stack 0
   360  00FF42  10                 	db	16
   361  00FF43                     __end_of_LCD_LINE3_ADDR:
   362                           	opt stack 0
   363  00FF43                     _LCD_LINE1_ADDR:
   364                           	opt stack 0
   365  00FF43  00                 	db	0
   366  00FF44                     __end_of_LCD_LINE1_ADDR:
   367                           	opt stack 0
   368  00FF44                     _LCD_SIZE_VERT:
   369                           	opt stack 0
   370  00FF44  04                 	db	4
   371  00FF45                     __end_of_LCD_SIZE_VERT:
   372                           	opt stack 0
   373  00FF45                     _LCD_SIZE_HORZ:
   374                           	opt stack 0
   375  00FF45  10                 	db	16
   376  00FF46                     __end_of_LCD_SIZE_HORZ:
   377                           	opt stack 0
   378  00FF46                     _STOP_TRAN:
   379                           	opt stack 0
   380  00FF46  FD                 	db	253
   381  00FF47                     __end_of_STOP_TRAN:
   382                           	opt stack 0
   383  00FF47                     _START_BLOCK_TOKEN:
   384                           	opt stack 0
   385  00FF47  FC                 	db	252
   386  00FF48                     __end_of_START_BLOCK_TOKEN:
   387                           	opt stack 0
   388  00FF48                     _START_BLOCK:
   389                           	opt stack 0
   390  00FF48  FE                 	db	254
   391  00FF49                     __end_of_START_BLOCK:
   392                           	opt stack 0
   393  00FF49                     _R1_ILLEGAL_COMMAND:
   394                           	opt stack 0
   395  00FF49  04                 	db	4
   396  00FF4A                     __end_of_R1_ILLEGAL_COMMAND:
   397                           	opt stack 0
   398  00FF4A                     _R1_IDLE_STATE:
   399                           	opt stack 0
   400  00FF4A  01                 	db	1
   401  00FF4B                     __end_of_R1_IDLE_STATE:
   402                           	opt stack 0
   403  00FF4B                     _R1_READY_STATE:
   404                           	opt stack 0
   405  00FF4B  00                 	db	0
   406  00FF4C                     __end_of_R1_READY_STATE:
   407                           	opt stack 0
   408  00FF4C                     _ACMD41:
   409                           	opt stack 0
   410  00FF4C  29                 	db	41
   411  00FF4D                     __end_of_ACMD41:
   412                           	opt stack 0
   413  00FF4D                     _ACMD23:
   414                           	opt stack 0
   415  00FF4D  17                 	db	23
   416  00FF4E                     __end_of_ACMD23:
   417                           	opt stack 0
   418  00FF4E                     _ACMD22:
   419                           	opt stack 0
   420  00FF4E  16                 	db	22
   421  00FF4F                     __end_of_ACMD22:
   422                           	opt stack 0
   423  00FF4F                     _CMD58:
   424                           	opt stack 0
   425  00FF4F  3A                 	db	58
   426  00FF50                     __end_of_CMD58:
   427                           	opt stack 0
   428  00FF50                     _CMD55:
   429                           	opt stack 0
   430  00FF50  37                 	db	55
   431  00FF51                     __end_of_CMD55:
   432                           	opt stack 0
   433  00FF51                     _CMD38:
   434                           	opt stack 0
   435  00FF51  26                 	db	38
   436  00FF52                     __end_of_CMD38:
   437                           	opt stack 0
   438  00FF52                     _CMD33:
   439                           	opt stack 0
   440  00FF52  21                 	db	33
   441  00FF53                     __end_of_CMD33:
   442                           	opt stack 0
   443  00FF53                     _CMD32:
   444                           	opt stack 0
   445  00FF53  20                 	db	32
   446  00FF54                     __end_of_CMD32:
   447                           	opt stack 0
   448  00FF54                     _CMD25:
   449                           	opt stack 0
   450  00FF54  19                 	db	25
   451  00FF55                     __end_of_CMD25:
   452                           	opt stack 0
   453  00FF55                     _CMD24:
   454                           	opt stack 0
   455  00FF55  18                 	db	24
   456  00FF56                     __end_of_CMD24:
   457                           	opt stack 0
   458  00FF56                     _CMD18:
   459                           	opt stack 0
   460  00FF56  12                 	db	18
   461  00FF57                     __end_of_CMD18:
   462                           	opt stack 0
   463  00FF57                     _CMD17:
   464                           	opt stack 0
   465  00FF57  11                 	db	17
   466  00FF58                     __end_of_CMD17:
   467                           	opt stack 0
   468  00FF58                     _CMD16:
   469                           	opt stack 0
   470  00FF58  10                 	db	16
   471  00FF59                     __end_of_CMD16:
   472                           	opt stack 0
   473  00FF59                     _CMD13:
   474                           	opt stack 0
   475  00FF59  0D                 	db	13
   476  00FF5A                     __end_of_CMD13:
   477                           	opt stack 0
   478  00FF5A                     _CMD12:
   479                           	opt stack 0
   480  00FF5A  0C                 	db	12
   481  00FF5B                     __end_of_CMD12:
   482                           	opt stack 0
   483  00FF5B                     _CMD10:
   484                           	opt stack 0
   485  00FF5B  0A                 	db	10
   486  00FF5C                     __end_of_CMD10:
   487                           	opt stack 0
   488  00FF5C                     _CMD9:
   489                           	opt stack 0
   490  00FF5C  09                 	db	9
   491  00FF5D                     __end_of_CMD9:
   492                           	opt stack 0
   493  00FF5D                     _CMD8CRC:
   494                           	opt stack 0
   495  00FF5D  87                 	db	135
   496  00FF5E                     __end_of_CMD8CRC:
   497                           	opt stack 0
   498  00FF5E                     _CMD8:
   499                           	opt stack 0
   500  00FF5E  08                 	db	8
   501  00FF5F                     __end_of_CMD8:
   502                           	opt stack 0
   503  00FF5F                     _CMD1:
   504                           	opt stack 0
   505  00FF5F  01                 	db	1
   506  00FF60                     __end_of_CMD1:
   507                           	opt stack 0
   508  00FF60                     _CMD0CRC:
   509                           	opt stack 0
   510  00FF60  95                 	db	149
   511  00FF61                     __end_of_CMD0CRC:
   512                           	opt stack 0
   513  00FF61                     _CMD0:
   514                           	opt stack 0
   515  00FF61  00                 	db	0
   516  00FF62                     __end_of_CMD0:
   517                           	opt stack 0
   518  00FF62  C7                 	db	199
   519  00FF63                     __end_of_INST_VMOFCTR2:
   520                           	opt stack 0
   521  00FF63                     _INST_VMCTR1:
   522                           	opt stack 0
   523  00FF63  C5                 	db	197
   524  00FF64                     __end_of_INST_VMCTR1:
   525                           	opt stack 0
   526  00FF64                     _INST_PWCTR5:
   527                           	opt stack 0
   528  00FF64  C4                 	db	196
   529  00FF65                     __end_of_INST_PWCTR5:
   530                           	opt stack 0
   531  00FF65                     _INST_PWCTR4:
   532                           	opt stack 0
   533  00FF65  C3                 	db	195
   534  00FF66                     __end_of_INST_PWCTR4:
   535                           	opt stack 0
   536  00FF66                     _INST_PWCTR3:
   537                           	opt stack 0
   538  00FF66  C2                 	db	194
   539  00FF67                     __end_of_INST_PWCTR3:
   540                           	opt stack 0
   541  00FF67                     _INST_PWCTR2:
   542                           	opt stack 0
   543  00FF67  C1                 	db	193
   544  00FF68                     __end_of_INST_PWCTR2:
   545                           	opt stack 0
   546  00FF68                     _INST_PWCTR1:
   547                           	opt stack 0
   548  00FF68  C0                 	db	192
   549  00FF69                     __end_of_INST_PWCTR1:
   550                           	opt stack 0
   551  00FF69                     _INST_INVCTR:
   552                           	opt stack 0
   553  00FF69  B4                 	db	180
   554  00FF6A                     __end_of_INST_INVCTR:
   555                           	opt stack 0
   556  00FF6A                     _INST_FRMCTR3:
   557                           	opt stack 0
   558  00FF6A  B3                 	db	179
   559  00FF6B                     __end_of_INST_FRMCTR3:
   560                           	opt stack 0
   561  00FF6B                     _INST_FRMCTR2:
   562                           	opt stack 0
   563  00FF6B  B2                 	db	178
   564  00FF6C                     __end_of_INST_FRMCTR2:
   565                           	opt stack 0
   566  00FF6C                     _INST_FRMCTR1:
   567                           	opt stack 0
   568  00FF6C  B1                 	db	177
   569  00FF6D                     __end_of_INST_FRMCTR1:
   570                           	opt stack 0
   571  00FF6D                     _INST_COLMOD:
   572                           	opt stack 0
   573  00FF6D  3A                 	db	58
   574  00FF6E                     __end_of_INST_COLMOD:
   575                           	opt stack 0
   576  00FF6E                     _INST_IDMON:
   577                           	opt stack 0
   578  00FF6E  39                 	db	57
   579  00FF6F                     __end_of_INST_IDMON:
   580                           	opt stack 0
   581  00FF6F                     _INST_IDMOFF:
   582                           	opt stack 0
   583  00FF6F  38                 	db	56
   584  00FF70                     __end_of_INST_IDMOFF:
   585                           	opt stack 0
   586  00FF70                     _INST_MADCTL:
   587                           	opt stack 0
   588  00FF70  36                 	db	54
   589  00FF71                     __end_of_INST_MADCTL:
   590                           	opt stack 0
   591  00FF71  35                 	db	53
   592  00FF72                     __end_of_INST_TEON:
   593                           	opt stack 0
   594  00FF72                     _INST_TEOFF:
   595                           	opt stack 0
   596  00FF72  34                 	db	52
   597  00FF73                     __end_of_INST_TEOFF:
   598                           	opt stack 0
   599  00FF73  30                 	db	48
   600  00FF74                     __end_of_INST_PTLAR:
   601                           	opt stack 0
   602  00FF74                     _INST_RAMWR:
   603                           	opt stack 0
   604  00FF74  2C                 	db	44
   605  00FF75                     __end_of_INST_RAMWR:
   606                           	opt stack 0
   607  00FF75                     _INST_RASET:
   608                           	opt stack 0
   609  00FF75  2B                 	db	43
   610  00FF76                     __end_of_INST_RASET:
   611                           	opt stack 0
   612  00FF76                     _INST_CASET:
   613                           	opt stack 0
   614  00FF76  2A                 	db	42
   615  00FF77                     __end_of_INST_CASET:
   616                           	opt stack 0
   617  00FF77                     _INST_DISPON:
   618                           	opt stack 0
   619  00FF77  29                 	db	41
   620  00FF78                     __end_of_INST_DISPON:
   621                           	opt stack 0
   622  00FF78                     _INST_DISPOFF:
   623                           	opt stack 0
   624  00FF78  28                 	db	40
   625  00FF79                     __end_of_INST_DISPOFF:
   626                           	opt stack 0
   627  00FF79                     _INST_GAMSET:
   628                           	opt stack 0
   629  00FF79  26                 	db	38
   630  00FF7A                     __end_of_INST_GAMSET:
   631                           	opt stack 0
   632  00FF7A                     _INST_INVON:
   633                           	opt stack 0
   634  00FF7A  21                 	db	33
   635  00FF7B                     __end_of_INST_INVON:
   636                           	opt stack 0
   637  00FF7B                     _INST_INVOFF:
   638                           	opt stack 0
   639  00FF7B  20                 	db	32
   640  00FF7C                     __end_of_INST_INVOFF:
   641                           	opt stack 0
   642  00FF7C                     _INST_NORON:
   643                           	opt stack 0
   644  00FF7C  13                 	db	19
   645  00FF7D                     __end_of_INST_NORON:
   646                           	opt stack 0
   647  00FF7D                     _INST_PTLON:
   648                           	opt stack 0
   649  00FF7D  12                 	db	18
   650  00FF7E                     __end_of_INST_PTLON:
   651                           	opt stack 0
   652  00FF7E                     _INST_SLPOUT:
   653                           	opt stack 0
   654  00FF7E  11                 	db	17
   655  00FF7F                     __end_of_INST_SLPOUT:
   656                           	opt stack 0
   657  00FF7F                     _INST_SLPIN:
   658                           	opt stack 0
   659  00FF7F  10                 	db	16
   660  00FF80                     __end_of_INST_SLPIN:
   661                           	opt stack 0
   662  00FF80                     _INST_SWRESET:
   663                           	opt stack 0
   664  00FF80  01                 	db	1
   665  00FF81                     __end_of_INST_SWRESET:
   666                           	opt stack 0
   667  00FF81  00                 	db	0
   668  00FF82                     __end_of_INST_NOP:
   669                           	opt stack 0
   670  00FF82                     _GLCD_SIZE_VERT:
   671                           	opt stack 0
   672  00FF82  80                 	db	128
   673  00FF83                     __end_of_GLCD_SIZE_VERT:
   674                           	opt stack 0
   675  00FF83                     _GLCD_SIZE_HORZ:
   676                           	opt stack 0
   677  00FF83  80                 	db	128
   678  00FF84                     __end_of_GLCD_SIZE_HORZ:
   679                           	opt stack 0
   680  00FF84                     _GLCD_ADDRESSABLE_SIZE_VERT:
   681                           	opt stack 0
   682  00FF84  A0                 	db	160
   683  00FF85                     __end_of_GLCD_ADDRESSABLE_SIZE_VERT:
   684                           	opt stack 0
   685  00FF85                     _GLCD_ADDRESSABLE_SIZE_HORZ:
   686                           	opt stack 0
   687  00FF85  80                 	db	128
   688  00FF86                     __end_of_GLCD_ADDRESSABLE_SIZE_HORZ:
   689                           	opt stack 0
   690  00FF86                     _LCD_LINE2_ADDR:
   691                           	opt stack 0
   692  00FF86  40                 	db	64
   693  00FF87                     __end_of_LCD_LINE2_ADDR:
   694                           	opt stack 0
   695  0000                     _INTCONbits	set	4082
   696  0000                     _SSPSTATbits	set	4039
   697  0000                     _TRISEbits	set	3990
   698  0000                     _OSCCONbits	set	4051
   699  0000                     _OSCTUNEbits	set	3995
   700  0000                     _OSCTUNE	set	3995
   701  0000                     _OSCCON	set	4051
   702  0000                     _LATEbits	set	3981
   703  0000                     _SSPBUF	set	4041
   704  0000                     _SSPCON2bits	set	4037
   705  0000                     _SSPCON1	set	4038
   706  0000                     _SSPADD	set	4040
   707  0000                     _SSPCON2	set	4037
   708  0000                     _SSPSTAT	set	4039
   709  0000                     _TRISDbits	set	3989
   710  0000                     _LATDbits	set	3980
   711  0000                     _ADRESL	set	4035
   712  0000                     _ADRESH	set	4036
   713  0000                     _ADCON0bits	set	4034
   714  0000                     _TXREG	set	4013
   715  0000                     _SSPCON1bits	set	4038
   716  0000                     _RCSTAbits	set	4011
   717  0000                     _TRISCbits	set	3988
   718  0000                     _TXSTAbits	set	4012
   719  0000                     _SPBRG	set	4015
   720  0000                     _ADCON2	set	4032
   721  0000                     _CMCONbits	set	4020
   722  0000                     _CVRCON	set	4021
   723  0000                     _ADCON2bits	set	4032
   724  0000                     _ADCON1	set	4033
   725  0000                     _ADCON0	set	4034
   726  0000                     _TRISE	set	3990
   727  0000                     _TRISD	set	3989
   728  0000                     _TRISC	set	3988
   729  0000                     _TRISB	set	3987
   730  0000                     _TRISA	set	3986
   731  0000                     _LATE	set	3981
   732  0000                     _LATD	set	3980
   733  0000                     _LATC	set	3979
   734  0000                     _LATB	set	3978
   735  0000                     _LATA	set	3977
   736  0000                     _PORTB	set	3969
   737  0000                     _PORTBbits	set	3969
   738  0000                     _SSPIF	set	31987
   739  0000                     _ADON	set	32272
   740  0000                     _TRMT	set	32097
   741  0000                     _TXIF	set	31988
   742  00FF87                     STR_11:
   743  00FF87  30                 	db	48	;'0'
   744  00FF88  31                 	db	49	;'1'
   745  00FF89  32                 	db	50	;'2'
   746  00FF8A  33                 	db	51	;'3'
   747  00FF8B  34                 	db	52	;'4'
   748  00FF8C  35                 	db	53	;'5'
   749  00FF8D  36                 	db	54	;'6'
   750  00FF8E  37                 	db	55	;'7'
   751  00FF8F  38                 	db	56	;'8'
   752  00FF90  39                 	db	57	;'9'
   753  00FF91  61                 	db	97	;'a'
   754  00FF92  62                 	db	98	;'b'
   755  00FF93  63                 	db	99	;'c'
   756  00FF94  64                 	db	100	;'d'
   757  00FF95  65                 	db	101	;'e'
   758  00FF96  66                 	db	102	;'f'
   759  00FF97  00                 	db	0
   760  00FF98                     STR_7:
   761  00FF98  53                 	db	83	;'S'
   762  00FF99  44                 	db	68	;'D'
   763  00FF9A  20                 	db	32
   764  00FF9B  43                 	db	67	;'C'
   765  00FF9C  61                 	db	97	;'a'
   766  00FF9D  72                 	db	114	;'r'
   767  00FF9E  64                 	db	100	;'d'
   768  00FF9F  20                 	db	32
   769  00FFA0  73                 	db	115	;'s'
   770  00FFA1  75                 	db	117	;'u'
   771  00FFA2  63                 	db	99	;'c'
   772  00FFA3  63                 	db	99	;'c'
   773  00FFA4  65                 	db	101	;'e'
   774  00FFA5  73                 	db	115	;'s'
   775  00FFA6  73                 	db	115	;'s'
   776  00FFA7  21                 	db	33
   777  00FFA8  00                 	db	0
   778  00FFA9                     STR_5:
   779  00FFA9  25                 	db	37
   780  00FFAA  30                 	db	48	;'0'
   781  00FFAB  32                 	db	50	;'2'
   782  00FFAC  78                 	db	120	;'x'
   783  00FFAD  2F                 	db	47
   784  00FFAE  25                 	db	37
   785  00FFAF  30                 	db	48	;'0'
   786  00FFB0  32                 	db	50	;'2'
   787  00FFB1  78                 	db	120	;'x'
   788  00FFB2  2F                 	db	47
   789  00FFB3  25                 	db	37
   790  00FFB4  30                 	db	48	;'0'
   791  00FFB5  32                 	db	50	;'2'
   792  00FFB6  78                 	db	120	;'x'
   793  00FFB7  00                 	db	0
   794  00FFB8                     STR_6:
   795  00FFB8  25                 	db	37
   796  00FFB9  30                 	db	48	;'0'
   797  00FFBA  32                 	db	50	;'2'
   798  00FFBB  78                 	db	120	;'x'
   799  00FFBC  3A                 	db	58	;':'
   800  00FFBD  25                 	db	37
   801  00FFBE  30                 	db	48	;'0'
   802  00FFBF  32                 	db	50	;'2'
   803  00FFC0  78                 	db	120	;'x'
   804  00FFC1  3A                 	db	58	;':'
   805  00FFC2  25                 	db	37
   806  00FFC3  30                 	db	48	;'0'
   807  00FFC4  32                 	db	50	;'2'
   808  00FFC5  78                 	db	120	;'x'
   809  00FFC6  00                 	db	0
   810  00FFC7                     STR_8:
   811  00FFC7  53                 	db	83	;'S'
   812  00FFC8  69                 	db	105	;'i'
   813  00FFC9  7A                 	db	122	;'z'
   814  00FFCA  65                 	db	101	;'e'
   815  00FFCB  3A                 	db	58	;':'
   816  00FFCC  20                 	db	32
   817  00FFCD  25                 	db	37
   818  00FFCE  30                 	db	48	;'0'
   819  00FFCF  2E                 	db	46
   820  00FFD0  35                 	db	53	;'5'
   821  00FFD1  66                 	db	102	;'f'
   822  00FFD2  00                 	db	0
   823  00FFD3                     STR_2:
   824  00FFD3  50                 	db	80	;'P'
   825  00FFD4  72                 	db	114	;'r'
   826  00FFD5  65                 	db	101	;'e'
   827  00FFD6  73                 	db	115	;'s'
   828  00FFD7  73                 	db	115	;'s'
   829  00FFD8  20                 	db	32
   830  00FFD9  61                 	db	97	;'a'
   831  00FFDA  20                 	db	32
   832  00FFDB  6B                 	db	107	;'k'
   833  00FFDC  65                 	db	101	;'e'
   834  00FFDD  79                 	db	121	;'y'
   835  00FFDE  00                 	db	0
   836  00FFDF                     STR_1:
   837  00FFDF  42                 	db	66	;'B'
   838  00FFE0  4F                 	db	79	;'O'
   839  00FFE1  41                 	db	65	;'A'
   840  00FFE2  52                 	db	82	;'R'
   841  00FFE3  44                 	db	68	;'D'
   842  00FFE4  20                 	db	32
   843  00FFE5  54                 	db	84	;'T'
   844  00FFE6  45                 	db	69	;'E'
   845  00FFE7  53                 	db	83	;'S'
   846  00FFE8  54                 	db	84	;'T'
   847  00FFE9  00                 	db	0
   848  00FFEA                     STR_9:
   849  00FFEA  52                 	db	82	;'R'
   850  00FFEB  41                 	db	65	;'A'
   851  00FFEC  32                 	db	50	;'2'
   852  00FFED  3A                 	db	58	;':'
   853  00FFEE  20                 	db	32
   854  00FFEF  25                 	db	37
   855  00FFF0  2E                 	db	46
   856  00FFF1  33                 	db	51	;'3'
   857  00FFF2  78                 	db	120	;'x'
   858  00FFF3  00                 	db	0
   859  00FFF4                     STR_10:
   860  00FFF4  52                 	db	82	;'R'
   861  00FFF5  41                 	db	65	;'A'
   862  00FFF6  33                 	db	51	;'3'
   863  00FFF7  3A                 	db	58	;':'
   864  00FFF8  20                 	db	32
   865  00FFF9  25                 	db	37
   866  00FFFA  2E                 	db	46
   867  00FFFB  33                 	db	51	;'3'
   868  00FFFC  78                 	db	120	;'x'
   869  00FFFD  00                 	db	0
   870  0000                     
   871                           ; #config settings
   872  00FFFE  00                 	db	0	; dummy byte at the end
   873  0000                     
   874                           	psect	cinit
   875  00CD56                     __pcinit:
   876                           	opt stack 0
   877  00CD56                     start_initialization:
   878                           	opt stack 0
   879  00CD56                     __initialization:
   880                           	opt stack 0
   881                           
   882                           ; Clear objects allocated to BANK0 (62 bytes)
   883  00CD56  EE00  F080         	lfsr	0,__pbssBANK0
   884  00CD5A  0E3E               	movlw	62
   885  00CD5C                     clear_0:
   886  00CD5C  6AEE               	clrf	postinc0,c
   887  00CD5E  06E8               	decf	wreg,f,c
   888  00CD60  E1FD               	bnz	clear_0
   889                           
   890                           ; Clear objects allocated to COMRAM (1 bytes)
   891  00CD62  6A7C               	clrf	__pbssCOMRAM& (0+255),c
   892  00CD64                     end_of_initialization:
   893                           	opt stack 0
   894  00CD64                     __end_of__initialization:
   895                           	opt stack 0
   896  00CD64  0E00               	movlw	low (__Lmediumconst shr (0+16))
   897  00CD66  6EF8               	movwf	tblptru,c
   898  00CD68  0100               	movlb	0
   899  00CD6A  EF6F  F070         	goto	_main	;jump to C main() function
   900                           tblptru	equ	0xFF8
   901                           postinc0	equ	0xFEE
   902                           wreg	equ	0xFE8
   903                           
   904                           	psect	bssCOMRAM
   905  00007C                     __pbssCOMRAM:
   906                           	opt stack 0
   907  00007C                     _MADCTLbits:
   908                           	opt stack 0
   909  00007C                     	ds	1
   910                           tblptru	equ	0xFF8
   911                           postinc0	equ	0xFEE
   912                           wreg	equ	0xFE8
   913                           
   914                           	psect	bssBANK0
   915  000080                     __pbssBANK0:
   916                           	opt stack 0
   917  000080                     _SDCard:
   918                           	opt stack 0
   919  000080                     	ds	46
   920  0000AE                     initSD@F3023:
   921                           	opt stack 0
   922  0000AE                     	ds	16
   923                           tblptru	equ	0xFF8
   924                           postinc0	equ	0xFEE
   925                           wreg	equ	0xFE8
   926                           
   927                           	psect	cstackCOMRAM
   928  000001                     __pcstackCOMRAM:
   929                           	opt stack 0
   930  000001                     ??_testIO:
   931  000001                     ??_testUART:
   932  000001                     ??_spiTransfer:
   933  000001                     ??_isdigit:
   934  000001                     ??_I2C_Master_Wait:
   935  000001                     ?_readADC:
   936                           	opt stack 0
   937  000001                     ?___awmod:
   938                           	opt stack 0
   939  000001                     ?___ftpack:
   940                           	opt stack 0
   941  000001                     ?___ftneg:
   942                           	opt stack 0
   943  000001                     ?__tdiv_to_l_:
   944                           	opt stack 0
   945  000001                     ?__div_to_l_:
   946                           	opt stack 0
   947  000001                     ?___aldiv:
   948                           	opt stack 0
   949  000001                     ?___lldiv:
   950                           	opt stack 0
   951  000001                     ?___llmod:
   952                           	opt stack 0
   953  000001                     getKey@key:
   954                           	opt stack 0
   955  000001                     spiInit@divider:
   956                           	opt stack 0
   957  000001                     pulse_e@interruptState:
   958                           	opt stack 0
   959  000001                     ___awmod@dividend:
   960                           	opt stack 0
   961  000001                     __div_to_l_@f1:
   962                           	opt stack 0
   963  000001                     ___ftpack@arg:
   964                           	opt stack 0
   965  000001                     __tdiv_to_l_@f1:
   966                           	opt stack 0
   967  000001                     ___ftge@ff1:
   968                           	opt stack 0
   969  000001                     ___ftneg@f1:
   970                           	opt stack 0
   971  000001                     ___aldiv@dividend:
   972                           	opt stack 0
   973  000001                     ___lldiv@dividend:
   974                           	opt stack 0
   975  000001                     ___llmod@dividend:
   976                           	opt stack 0
   977                           
   978                           ; 4 bytes @ 0x0
   979  000001                     	ds	1
   980  000002                     I2C_Master_Read@ackBit:
   981                           	opt stack 0
   982  000002                     spiTransfer@byteToTransfer:
   983                           	opt stack 0
   984  000002                     send_nibble@data:
   985                           	opt stack 0
   986  000002                     _isdigit$1838:
   987                           	opt stack 0
   988  000002                     I2C_Master_Write@byteToWrite:
   989                           	opt stack 0
   990  000002                     testUART@msg:
   991                           	opt stack 0
   992                           
   993                           ; 13 bytes @ 0x1
   994  000002                     	ds	1
   995  000003                     ??_readADC:
   996  000003                     testIO@temp:
   997                           	opt stack 0
   998  000003                     I2C_Master_Read@receivedByte:
   999                           	opt stack 0
  1000  000003                     spiSend@val:
  1001                           	opt stack 0
  1002  000003                     send_byte@data:
  1003                           	opt stack 0
  1004  000003                     isdigit@c:
  1005                           	opt stack 0
  1006  000003                     ___awmod@divisor:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x2
  1010  000003                     	ds	1
  1011  000004                     testIO@i:
  1012                           	opt stack 0
  1013  000004                     glcdTransfer@cmd:
  1014                           	opt stack 0
  1015  000004                     lcdInst@data:
  1016                           	opt stack 0
  1017  000004                     putch@data:
  1018                           	opt stack 0
  1019  000004                     ___ftpack@exp:
  1020                           	opt stack 0
  1021  000004                     __div_to_l_@f2:
  1022                           	opt stack 0
  1023  000004                     __tdiv_to_l_@f2:
  1024                           	opt stack 0
  1025  000004                     ___ftge@ff2:
  1026                           	opt stack 0
  1027  000004                     SD_Command@arg:
  1028                           	opt stack 0
  1029                           
  1030                           ; 4 bytes @ 0x3
  1031  000004                     	ds	1
  1032  000005                     ??_initLCD:
  1033  000005                     ??_glcdTransfer:
  1034  000005                     readADC@channel:
  1035                           	opt stack 0
  1036  000005                     ___awmod@counter:
  1037                           	opt stack 0
  1038  000005                     ___ftpack@sign:
  1039                           	opt stack 0
  1040  000005                     ___aldiv@divisor:
  1041                           	opt stack 0
  1042  000005                     ___lldiv@divisor:
  1043                           	opt stack 0
  1044  000005                     ___llmod@divisor:
  1045                           	opt stack 0
  1046                           
  1047                           ; 4 bytes @ 0x4
  1048  000005                     	ds	1
  1049  000006                     ??___ftpack:
  1050  000006                     glcdTransfer@byte:
  1051                           	opt stack 0
  1052  000006                     ___awmod@sign:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x5
  1056  000006                     	ds	1
  1057  000007                     ??__tdiv_to_l_:
  1058  000007                     ??_glcd_swreset:
  1059  000007                     ??_glcd_slpout:
  1060  000007                     ??___ftge:
  1061  000007                     ?___awdiv:
  1062                           	opt stack 0
  1063  000007                     glcdSetCOLMOD@numBitsPerPixel:
  1064                           	opt stack 0
  1065  000007                     ___awdiv@dividend:
  1066                           	opt stack 0
  1067  000007                     __div_to_l_@quot:
  1068                           	opt stack 0
  1069                           
  1070                           ; 4 bytes @ 0x6
  1071  000007                     	ds	1
  1072  000008                     SD_Command@n:
  1073                           	opt stack 0
  1074  000008                     glcdSetCOLMOD@rawData:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x7
  1078  000008                     	ds	1
  1079  000009                     ?___lltoft:
  1080                           	opt stack 0
  1081  000009                     ?___lwtoft:
  1082                           	opt stack 0
  1083  000009                     SD_Command@cmd:
  1084                           	opt stack 0
  1085  000009                     ___aldiv@counter:
  1086                           	opt stack 0
  1087  000009                     ___llmod@counter:
  1088                           	opt stack 0
  1089  000009                     ___awdiv@divisor:
  1090                           	opt stack 0
  1091  000009                     ___lwtoft@c:
  1092                           	opt stack 0
  1093  000009                     ___lldiv@quotient:
  1094                           	opt stack 0
  1095  000009                     ___lltoft@c:
  1096                           	opt stack 0
  1097                           
  1098                           ; 4 bytes @ 0x8
  1099  000009                     	ds	1
  1100  00000A                     SD_Command@response:
  1101                           	opt stack 0
  1102  00000A                     ___aldiv@sign:
  1103                           	opt stack 0
  1104  00000A                     __tdiv_to_l_@quot:
  1105                           	opt stack 0
  1106                           
  1107                           ; 4 bytes @ 0x9
  1108  00000A                     	ds	1
  1109  00000B                     ___awdiv@counter:
  1110                           	opt stack 0
  1111  00000B                     __div_to_l_@cntr:
  1112                           	opt stack 0
  1113  00000B                     SD_ACMD@arg:
  1114                           	opt stack 0
  1115  00000B                     ___aldiv@quotient:
  1116                           	opt stack 0
  1117                           
  1118                           ; 4 bytes @ 0xA
  1119  00000B                     	ds	1
  1120  00000C                     ?___ftdiv:
  1121                           	opt stack 0
  1122  00000C                     ___awdiv@sign:
  1123                           	opt stack 0
  1124  00000C                     __div_to_l_@exp1:
  1125                           	opt stack 0
  1126  00000C                     ___ftdiv@f1:
  1127                           	opt stack 0
  1128                           
  1129                           ; 3 bytes @ 0xB
  1130  00000C                     	ds	1
  1131  00000D                     ??___lltoft:
  1132  00000D                     ___lldiv@counter:
  1133                           	opt stack 0
  1134  00000D                     ___awdiv@quotient:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0xC
  1138  00000D                     	ds	1
  1139  00000E                     __tdiv_to_l_@cntr:
  1140                           	opt stack 0
  1141  00000E                     I2C_Master_Init@clockFreq:
  1142                           	opt stack 0
  1143                           
  1144                           ; 4 bytes @ 0xD
  1145  00000E                     	ds	1
  1146  00000F                     ?___wmul:
  1147                           	opt stack 0
  1148  00000F                     testUART@i:
  1149                           	opt stack 0
  1150  00000F                     SD_ACMD@cmd:
  1151                           	opt stack 0
  1152  00000F                     __tdiv_to_l_@exp1:
  1153                           	opt stack 0
  1154  00000F                     ___wmul@multiplier:
  1155                           	opt stack 0
  1156  00000F                     ___ftdiv@f2:
  1157                           	opt stack 0
  1158                           
  1159                           ; 3 bytes @ 0xE
  1160  00000F                     	ds	2
  1161  000011                     ___lltoft@exp:
  1162                           	opt stack 0
  1163  000011                     ___wmul@multiplicand:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x10
  1167  000011                     	ds	1
  1168  000012                     ??_I2C_Master_Init:
  1169  000012                     ??___ftdiv:
  1170                           
  1171                           ; 1 bytes @ 0x11
  1172  000012                     	ds	1
  1173  000013                     ___wmul@product:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x12
  1177  000013                     	ds	2
  1178  000015                     ?___ftmul:
  1179                           	opt stack 0
  1180  000015                     glcdDrawRectangle@XE:
  1181                           	opt stack 0
  1182  000015                     ___ftdiv@cntr:
  1183                           	opt stack 0
  1184  000015                     ___ftmul@f1:
  1185                           	opt stack 0
  1186                           
  1187                           ; 3 bytes @ 0x14
  1188  000015                     	ds	1
  1189  000016                     testRTCSet@i:
  1190                           	opt stack 0
  1191  000016                     glcdDrawRectangle@YS:
  1192                           	opt stack 0
  1193  000016                     ___ftdiv@f3:
  1194                           	opt stack 0
  1195                           
  1196                           ; 3 bytes @ 0x15
  1197  000016                     	ds	1
  1198  000017                     glcdDrawRectangle@YE:
  1199                           	opt stack 0
  1200                           
  1201                           ; 1 bytes @ 0x16
  1202  000017                     	ds	1
  1203  000018                     ___ftmul@f2:
  1204                           	opt stack 0
  1205  000018                     glcdDrawRectangle@color:
  1206                           	opt stack 0
  1207                           
  1208                           ; 4 bytes @ 0x17
  1209  000018                     	ds	1
  1210  000019                     ___ftdiv@exp:
  1211                           	opt stack 0
  1212                           
  1213                           ; 1 bytes @ 0x18
  1214  000019                     	ds	1
  1215  00001A                     ___ftdiv@sign:
  1216                           	opt stack 0
  1217                           
  1218                           ; 1 bytes @ 0x19
  1219  00001A                     	ds	1
  1220  00001B                     ??___ftmul:
  1221                           
  1222                           ; 1 bytes @ 0x1A
  1223  00001B                     	ds	1
  1224  00001C                     ??_glcdDrawRectangle:
  1225                           
  1226                           ; 1 bytes @ 0x1B
  1227  00001C                     	ds	2
  1228  00001E                     ___ftmul@exp:
  1229                           	opt stack 0
  1230                           
  1231                           ; 1 bytes @ 0x1D
  1232  00001E                     	ds	1
  1233  00001F                     ___ftmul@f3_as_product:
  1234                           	opt stack 0
  1235                           
  1236                           ; 3 bytes @ 0x1E
  1237  00001F                     	ds	1
  1238  000020                     glcdDrawRectangle@numLoops:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x1F
  1242  000020                     	ds	2
  1243  000022                     ___ftmul@cntr:
  1244                           	opt stack 0
  1245  000022                     glcdDrawRectangle@i:
  1246                           	opt stack 0
  1247                           
  1248                           ; 2 bytes @ 0x21
  1249  000022                     	ds	1
  1250  000023                     ___ftmul@sign:
  1251                           	opt stack 0
  1252                           
  1253                           ; 1 bytes @ 0x22
  1254  000023                     	ds	1
  1255  000024                     ?_fround:
  1256                           	opt stack 0
  1257  000024                     ?_scale:
  1258                           	opt stack 0
  1259  000024                     glcdDrawRectangle@colorData:
  1260                           	opt stack 0
  1261                           
  1262                           ; 3 bytes @ 0x23
  1263  000024                     	ds	3
  1264  000027                     glcdDrawRectangle@XS:
  1265                           	opt stack 0
  1266  000027                     _fround$2266:
  1267                           	opt stack 0
  1268  000027                     _scale$2267:
  1269                           	opt stack 0
  1270                           
  1271                           ; 3 bytes @ 0x26
  1272  000027                     	ds	1
  1273  000028                     ??_initGLCD:
  1274                           
  1275                           ; 1 bytes @ 0x27
  1276  000028                     	ds	1
  1277  000029                     
  1278                           ; 1 bytes @ 0x28
  1279  000029                     	ds	1
  1280  00002A                     scale@scl:
  1281                           	opt stack 0
  1282  00002A                     _fround$2265:
  1283                           	opt stack 0
  1284                           
  1285                           ; 3 bytes @ 0x29
  1286  00002A                     	ds	1
  1287  00002B                     ?___fttol:
  1288                           	opt stack 0
  1289  00002B                     ___fttol@f1:
  1290                           	opt stack 0
  1291                           
  1292                           ; 3 bytes @ 0x2A
  1293  00002B                     	ds	2
  1294  00002D                     fround@prec:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x2C
  1298  00002D                     	ds	1
  1299  00002E                     ?___ftadd:
  1300                           	opt stack 0
  1301  00002E                     ___ftadd@f1:
  1302                           	opt stack 0
  1303                           
  1304                           ; 3 bytes @ 0x2D
  1305  00002E                     	ds	1
  1306  00002F                     ??___fttol:
  1307                           
  1308                           ; 1 bytes @ 0x2E
  1309  00002F                     	ds	2
  1310  000031                     ___ftadd@f2:
  1311                           	opt stack 0
  1312                           
  1313                           ; 3 bytes @ 0x30
  1314  000031                     	ds	3
  1315  000034                     ??___ftadd:
  1316  000034                     ___fttol@sign1:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x33
  1320  000034                     	ds	1
  1321  000035                     ___fttol@lval:
  1322                           	opt stack 0
  1323                           
  1324                           ; 4 bytes @ 0x34
  1325  000035                     	ds	2
  1326  000037                     ___ftadd@sign:
  1327                           	opt stack 0
  1328                           
  1329                           ; 1 bytes @ 0x36
  1330  000037                     	ds	1
  1331  000038                     ___ftadd@exp2:
  1332                           	opt stack 0
  1333                           
  1334                           ; 1 bytes @ 0x37
  1335  000038                     	ds	1
  1336  000039                     ___ftadd@exp1:
  1337                           	opt stack 0
  1338  000039                     ___fttol@exp1:
  1339                           	opt stack 0
  1340                           
  1341                           ; 1 bytes @ 0x38
  1342  000039                     	ds	1
  1343  00003A                     ??_initSD:
  1344  00003A                     ?___ftsub:
  1345                           	opt stack 0
  1346  00003A                     ___ftsub@f1:
  1347                           	opt stack 0
  1348                           
  1349                           ; 3 bytes @ 0x39
  1350  00003A                     	ds	3
  1351  00003D                     ___ftsub@f2:
  1352                           	opt stack 0
  1353                           
  1354                           ; 3 bytes @ 0x3C
  1355  00003D                     	ds	3
  1356  000040                     ?_printf:
  1357                           	opt stack 0
  1358  000040                     printf@f:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x3F
  1362  000040                     	ds	1
  1363  000041                     initSD@argument:
  1364                           	opt stack 0
  1365                           
  1366                           ; 4 bytes @ 0x40
  1367  000041                     	ds	4
  1368  000045                     initSD@last_OSCCON:
  1369                           	opt stack 0
  1370                           
  1371                           ; 1 bytes @ 0x44
  1372  000045                     	ds	1
  1373  000046                     initSD@last_OSCTUNE:
  1374                           	opt stack 0
  1375                           
  1376                           ; 1 bytes @ 0x45
  1377  000046                     	ds	1
  1378  000047                     initSD@tempSize:
  1379                           	opt stack 0
  1380                           
  1381                           ; 4 bytes @ 0x46
  1382  000047                     	ds	1
  1383  000048                     ??_printf:
  1384                           
  1385                           ; 1 bytes @ 0x47
  1386  000048                     	ds	3
  1387  00004B                     initSD@arr_response:
  1388                           	opt stack 0
  1389                           
  1390                           ; 16 bytes @ 0x4A
  1391  00004B                     	ds	3
  1392  00004E                     _printf$2268:
  1393                           	opt stack 0
  1394                           
  1395                           ; 3 bytes @ 0x4D
  1396  00004E                     	ds	3
  1397  000051                     printf@idx:
  1398                           	opt stack 0
  1399                           
  1400                           ; 1 bytes @ 0x50
  1401  000051                     	ds	1
  1402  000052                     printf@ap:
  1403                           	opt stack 0
  1404                           
  1405                           ; 2 bytes @ 0x51
  1406  000052                     	ds	2
  1407  000054                     printf@val:
  1408                           	opt stack 0
  1409                           
  1410                           ; 4 bytes @ 0x53
  1411  000054                     	ds	4
  1412  000058                     printf@tmpval:
  1413                           	opt stack 0
  1414                           
  1415                           ; 4 bytes @ 0x57
  1416  000058                     	ds	3
  1417  00005B                     initSD@i:
  1418                           	opt stack 0
  1419                           
  1420                           ; 1 bytes @ 0x5A
  1421  00005B                     	ds	1
  1422  00005C                     initSD@i_1251:
  1423                           	opt stack 0
  1424  00005C                     printf@exp:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x5B
  1428  00005C                     	ds	1
  1429  00005D                     initSD@i_1248:
  1430                           	opt stack 0
  1431                           
  1432                           ; 1 bytes @ 0x5C
  1433  00005D                     	ds	1
  1434  00005E                     initSD@i_1249:
  1435                           	opt stack 0
  1436  00005E                     printf@flag:
  1437                           	opt stack 0
  1438                           
  1439                           ; 2 bytes @ 0x5D
  1440  00005E                     	ds	1
  1441  00005F                     initSD@i_1252:
  1442                           	opt stack 0
  1443                           
  1444                           ; 1 bytes @ 0x5E
  1445  00005F                     	ds	1
  1446  000060                     initSD@i_1255:
  1447                           	opt stack 0
  1448  000060                     printf@width:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0x5F
  1452  000060                     	ds	1
  1453  000061                     initSD@tempSize_1254:
  1454                           	opt stack 0
  1455                           
  1456                           ; 4 bytes @ 0x60
  1457  000061                     	ds	1
  1458  000062                     printf@fval:
  1459                           	opt stack 0
  1460                           
  1461                           ; 3 bytes @ 0x61
  1462  000062                     	ds	3
  1463  000065                     initSD@response:
  1464                           	opt stack 0
  1465  000065                     printf@prec:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x64
  1469  000065                     	ds	2
  1470  000067                     printf@c:
  1471                           	opt stack 0
  1472                           
  1473                           ; 1 bytes @ 0x66
  1474  000067                     	ds	1
  1475  000068                     ??_testRTCGet:
  1476  000068                     ??_testSDCard:
  1477  000068                     ??_testA2D:
  1478                           
  1479                           ; 1 bytes @ 0x67
  1480  000068                     	ds	1
  1481  000069                     testRTCGet@time:
  1482                           	opt stack 0
  1483                           
  1484                           ; 7 bytes @ 0x68
  1485  000069                     	ds	7
  1486  000070                     testRTCGet@i_629:
  1487                           	opt stack 0
  1488                           
  1489                           ; 2 bytes @ 0x6F
  1490  000070                     	ds	2
  1491  000072                     testRTCGet@i:
  1492                           	opt stack 0
  1493                           
  1494                           ; 1 bytes @ 0x71
  1495  000072                     	ds	1
  1496  000073                     ??_main:
  1497                           
  1498                           ; 1 bytes @ 0x72
  1499  000073                     	ds	4
  1500  000077                     main@baudRate:
  1501                           	opt stack 0
  1502                           
  1503                           ; 4 bytes @ 0x76
  1504  000077                     	ds	4
  1505  00007B                     main@state:
  1506                           	opt stack 0
  1507                           
  1508                           ; 1 bytes @ 0x7A
  1509  00007B                     	ds	1
  1510                           tblptru	equ	0xFF8
  1511                           postinc0	equ	0xFEE
  1512                           wreg	equ	0xFE8
  1513                           
  1514 ;;
  1515 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1516 ;;
  1517 ;; *************** function _main *****************
  1518 ;; Defined at:
  1519 ;;		line 68 in file "main.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;		None
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;  baudRate        4  118[COMRAM] long 
  1524 ;;  state           1  122[COMRAM] enum E3156
  1525 ;; Return value:  Size  Location     Type
  1526 ;;                  1    wreg      void 
  1527 ;; Registers used:
  1528 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1529 ;; Tracked objects:
  1530 ;;		On entry : 0/0
  1531 ;;		On exit  : 0/0
  1532 ;;		Unchanged: 0/0
  1533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1535 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1536 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1537 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1538 ;;Total ram usage:        9 bytes
  1539 ;; Hardware stack levels required when called:    7
  1540 ;; This function calls:
  1541 ;;		___aldiv
  1542 ;;		_getKey
  1543 ;;		_initLCD
  1544 ;;		_lcdInst
  1545 ;;		_printf
  1546 ;;		_testA2D
  1547 ;;		_testGLCD
  1548 ;;		_testIO
  1549 ;;		_testRTCGet
  1550 ;;		_testRTCSet
  1551 ;;		_testSDCard
  1552 ;;		_testUART
  1553 ;; This function is called by:
  1554 ;;		Startup code after reset
  1555 ;; This function uses a non-reentrant model
  1556 ;;
  1557                           
  1558                           	psect	text0
  1559  00E0DE                     __ptext0:
  1560                           	opt stack 0
  1561  00E0DE                     _main:
  1562                           	opt stack 24
  1563                           
  1564                           ;main.c: 74: LATA = 0x00;
  1565                           
  1566                           ;incstack = 0
  1567  00E0DE  0E00               	movlw	0
  1568  00E0E0  6E89               	movwf	3977,c	;volatile
  1569                           
  1570                           ;main.c: 75: LATB = 0x00;
  1571  00E0E2  0E00               	movlw	0
  1572  00E0E4  6E8A               	movwf	3978,c	;volatile
  1573                           
  1574                           ;main.c: 76: LATC = 0x00;
  1575  00E0E6  0E00               	movlw	0
  1576  00E0E8  6E8B               	movwf	3979,c	;volatile
  1577                           
  1578                           ;main.c: 77: LATD = 0x00;
  1579  00E0EA  0E00               	movlw	0
  1580  00E0EC  6E8C               	movwf	3980,c	;volatile
  1581                           
  1582                           ;main.c: 78: LATE = 0x00;
  1583  00E0EE  0E00               	movlw	0
  1584  00E0F0  6E8D               	movwf	3981,c	;volatile
  1585                           
  1586                           ;main.c: 82: TRISA = 0b11111111;
  1587  00E0F2  6892               	setf	3986,c	;volatile
  1588                           
  1589                           ;main.c: 83: TRISB = 0b11110010;
  1590  00E0F4  0EF2               	movlw	242
  1591  00E0F6  6E93               	movwf	3987,c	;volatile
  1592                           
  1593                           ;main.c: 84: TRISC = 0b10000000;
  1594  00E0F8  0E80               	movlw	128
  1595  00E0FA  6E94               	movwf	3988,c	;volatile
  1596                           
  1597                           ;main.c: 88: TRISD = 0b00000001;
  1598  00E0FC  0E01               	movlw	1
  1599  00E0FE  6E95               	movwf	3989,c	;volatile
  1600                           
  1601                           ;main.c: 94: TRISE = 0b00000100;
  1602  00E100  0E04               	movlw	4
  1603  00E102  6E96               	movwf	3990,c	;volatile
  1604                           
  1605                           ;main.c: 101: ADCON0 = 0x00;
  1606  00E104  0E00               	movlw	0
  1607  00E106  6EC2               	movwf	4034,c	;volatile
  1608                           
  1609                           ;main.c: 102: ADCON1 = 0x0F;
  1610  00E108  0E0F               	movlw	15
  1611  00E10A  6EC1               	movwf	4033,c	;volatile
  1612                           
  1613                           ;main.c: 103: ADCON2bits.ADFM = 1;
  1614  00E10C  8EC0               	bsf	4032,7,c	;volatile
  1615                           
  1616                           ;main.c: 105: CVRCON = 0x00;
  1617  00E10E  0E00               	movlw	0
  1618  00E110  6EB5               	movwf	4021,c	;volatile
  1619                           
  1620                           ;main.c: 106: CMCONbits.CIS = 0;
  1621  00E112  96B4               	bcf	4020,3,c	;volatile
  1622                           
  1623                           ;main.c: 107: ADCON2 = 0b10110001;
  1624  00E114  0EB1               	movlw	177
  1625  00E116  6EC0               	movwf	4032,c	;volatile
  1626                           
  1627                           ;main.c: 110: long baudRate = 9600;
  1628  00E118  0E80               	movlw	128
  1629  00E11A  6E77               	movwf	main@baudRate,c
  1630  00E11C  0E25               	movlw	37
  1631  00E11E  6E78               	movwf	main@baudRate+1,c
  1632  00E120  0E00               	movlw	0
  1633  00E122  6E79               	movwf	main@baudRate+2,c
  1634  00E124  0E00               	movlw	0
  1635  00E126  6E7A               	movwf	main@baudRate+3,c
  1636                           
  1637                           ;main.c: 111: SPBRG = (unsigned char)((10000000 / (64 * baudRate)) - 1);
  1638  00E128  0E80               	movlw	128
  1639  00E12A  6E01               	movwf	___aldiv@dividend,c
  1640  00E12C  0E96               	movlw	150
  1641  00E12E  6E02               	movwf	___aldiv@dividend+1,c
  1642  00E130  0E98               	movlw	152
  1643  00E132  6E03               	movwf	___aldiv@dividend+2,c
  1644  00E134  0E00               	movlw	0
  1645  00E136  6E04               	movwf	___aldiv@dividend+3,c
  1646  00E138  C077  F073         	movff	main@baudRate,??_main
  1647  00E13C  C078  F074         	movff	main@baudRate+1,??_main+1
  1648  00E140  C079  F075         	movff	main@baudRate+2,??_main+2
  1649  00E144  C07A  F076         	movff	main@baudRate+3,??_main+3
  1650  00E148  0E06               	movlw	6
  1651  00E14A                     u5165:
  1652  00E14A  90D8               	bcf	status,0,c
  1653  00E14C  3673               	rlcf	??_main,f,c
  1654  00E14E  3674               	rlcf	??_main+1,f,c
  1655  00E150  3675               	rlcf	??_main+2,f,c
  1656  00E152  3676               	rlcf	??_main+3,f,c
  1657  00E154  2EE8               	decfsz	wreg,f,c
  1658  00E156  D7F9               	goto	u5165
  1659  00E158  C073  F005         	movff	??_main,___aldiv@divisor
  1660  00E15C  C074  F006         	movff	??_main+1,___aldiv@divisor+1
  1661  00E160  C075  F007         	movff	??_main+2,___aldiv@divisor+2
  1662  00E164  C076  F008         	movff	??_main+3,___aldiv@divisor+3
  1663  00E168  EC8B  F06B         	call	___aldiv	;wreg free
  1664  00E16C  0401               	decf	?___aldiv,w,c
  1665  00E16E  6EAF               	movwf	4015,c	;volatile
  1666                           
  1667                           ;main.c: 112: TXSTAbits.TX9 = 0;
  1668  00E170  9CAC               	bcf	4012,6,c	;volatile
  1669                           
  1670                           ;main.c: 113: TXSTAbits.SYNC = 0;
  1671  00E172  98AC               	bcf	4012,4,c	;volatile
  1672                           
  1673                           ;main.c: 114: TXSTAbits.TXEN = 1;
  1674  00E174  8AAC               	bsf	4012,5,c	;volatile
  1675                           
  1676                           ;main.c: 115: TRISCbits.TRISC6 = 0;
  1677  00E176  9C94               	bcf	3988,6,c	;volatile
  1678                           
  1679                           ;main.c: 116: RCSTAbits.SPEN = 1;
  1680  00E178  8EAB               	bsf	4011,7,c	;volatile
  1681                           
  1682                           ;main.c: 120: initLCD();
  1683  00E17A  EC0E  F069         	call	_initLCD	;wreg free
  1684                           
  1685                           ;main.c: 121: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1686  00E17E  0E01               	movlw	1
  1687  00E180  EC41  F066         	call	_lcdInst
  1688  00E184  0E11               	movlw	17
  1689  00E186  6E73               	movwf	??_main& (0+255),c
  1690  00E188  0E3A               	movlw	58
  1691  00E18A                     u5597:
  1692  00E18A  2EE8               	decfsz	wreg,f,c
  1693  00E18C  D7FE               	bra	u5597
  1694  00E18E  2E73               	decfsz	??_main& (0+255),f,c
  1695  00E190  D7FC               	bra	u5597
  1696  00E192  D000               	nop2	
  1697                           
  1698                           ;main.c: 122: printf("BOARD TEST");
  1699  00E194  0EDF               	movlw	low STR_1
  1700  00E196  6E40               	movwf	printf@f,c
  1701  00E198  0EFF               	movlw	high STR_1
  1702  00E19A  6E41               	movwf	printf@f+1,c
  1703  00E19C  EC72  F07A         	call	_printf	;wreg free
  1704                           
  1705                           ;main.c: 123: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1706  00E1A0  0E86               	movlw	low _LCD_LINE2_ADDR
  1707  00E1A2  6EF6               	movwf	tblptrl,c
  1708  00E1A4                     	if	1	;There is more than 1 active tblptr byte
  1709  00E1A4  0EFF               	movlw	high _LCD_LINE2_ADDR
  1710  00E1A6  6EF7               	movwf	tblptrh,c
  1711  00E1A8                     	endif
  1712  00E1A8                     	if	0	;There are less than 3 active tblptr bytes
  1713  00E1A8                     	endif
  1714  00E1A8  0008               	tblrd		*
  1715  00E1AA  50F5               	movf	tablat,w,c
  1716  00E1AC  0980               	iorlw	128
  1717  00E1AE  EC41  F066         	call	_lcdInst
  1718                           
  1719                           ;main.c: 124: printf("Press a key");
  1720  00E1B2  0ED3               	movlw	low STR_2
  1721  00E1B4  6E40               	movwf	printf@f,c
  1722  00E1B6  0EFF               	movlw	high STR_2
  1723  00E1B8  6E41               	movwf	printf@f+1,c
  1724  00E1BA  EC72  F07A         	call	_printf	;wreg free
  1725  00E1BE                     
  1726                           ;main.c: 129: state = key_map[getKey()];
  1727  00E1BE  EC5F  F066         	call	_getKey	;wreg free
  1728  00E1C2  6E73               	movwf	??_main& (0+255),c
  1729  00E1C4  5073               	movf	??_main,w,c
  1730  00E1C6  0D01               	mullw	1
  1731  00E1C8  0EF5               	movlw	low _key_map
  1732  00E1CA  24F3               	addwf	prodl,w,c
  1733  00E1CC  6EF6               	movwf	tblptrl,c
  1734  00E1CE  0EFE               	movlw	high _key_map
  1735  00E1D0  20F4               	addwfc	prodh,w,c
  1736  00E1D2  6EF7               	movwf	tblptrh,c
  1737  00E1D4                     	if	0	;There are less than 3 active tblptr bytes
  1738  00E1D4                     	endif
  1739  00E1D4  0008               	tblrd		*
  1740  00E1D6  CFF5 F07B          	movff	tablat,main@state
  1741                           
  1742                           ;main.c: 132: switch(state){
  1743  00E1DA  D015               	goto	l123
  1744  00E1DC                     
  1745                           ;main.c: 134: testRTCSet();
  1746  00E1DC  ECAA  F068         	call	_testRTCSet	;wreg free
  1747                           
  1748                           ;main.c: 135: break;
  1749  00E1E0  D028               	goto	l125
  1750  00E1E2                     
  1751                           ;main.c: 137: testRTCGet();
  1752  00E1E2  EC58  F06D         	call	_testRTCGet	;wreg free
  1753                           
  1754                           ;main.c: 138: break;
  1755  00E1E6  D025               	goto	l125
  1756  00E1E8                     
  1757                           ;main.c: 140: testGLCD();
  1758  00E1E8  EC43  F069         	call	_testGLCD	;wreg free
  1759                           
  1760                           ;main.c: 141: break;
  1761  00E1EC  D022               	goto	l125
  1762  00E1EE                     
  1763                           ;main.c: 143: testSDCard();
  1764  00E1EE  ECB0  F069         	call	_testSDCard	;wreg free
  1765                           
  1766                           ;main.c: 144: break;
  1767  00E1F2  D01F               	goto	l125
  1768  00E1F4                     
  1769                           ;main.c: 146: testIO();
  1770  00E1F4  EC14  F06F         	call	_testIO	;wreg free
  1771                           
  1772                           ;main.c: 147: break;
  1773  00E1F8  D01C               	goto	l125
  1774  00E1FA                     
  1775                           ;main.c: 149: testUART();
  1776  00E1FA  EC23  F068         	call	_testUART	;wreg free
  1777                           
  1778                           ;main.c: 150: break;
  1779  00E1FE  D019               	goto	l125
  1780  00E200                     
  1781                           ;main.c: 152: testA2D();
  1782  00E200  ECAA  F06A         	call	_testA2D	;wreg free
  1783                           
  1784                           ;main.c: 156: }
  1785                           
  1786                           ;main.c: 155: break;
  1787                           
  1788                           ;main.c: 154: default:
  1789                           
  1790                           ;main.c: 153: break;
  1791  00E204  D016               	goto	l125
  1792  00E206                     l123:
  1793  00E206  507B               	movf	main@state,w,c
  1794                           
  1795                           ; Switch size 1, requested type "space"
  1796                           ; Number of cases is 7, Range of values is 0 to 6
  1797                           ; switch strategies available:
  1798                           ; Name         Instructions Cycles
  1799                           ; simple_byte           22    12 (average)
  1800                           ;	Chosen strategy is simple_byte
  1801  00E208  0A00               	xorlw	0	; case 0
  1802  00E20A  B4D8               	btfsc	status,2,c
  1803  00E20C  D7E7               	goto	l124
  1804  00E20E  0A01               	xorlw	1	; case 1
  1805  00E210  B4D8               	btfsc	status,2,c
  1806  00E212  D7E7               	goto	l126
  1807  00E214  0A03               	xorlw	3	; case 2
  1808  00E216  B4D8               	btfsc	status,2,c
  1809  00E218  D7E7               	goto	l127
  1810  00E21A  0A01               	xorlw	1	; case 3
  1811  00E21C  B4D8               	btfsc	status,2,c
  1812  00E21E  D7E7               	goto	l128
  1813  00E220  0A07               	xorlw	7	; case 4
  1814  00E222  B4D8               	btfsc	status,2,c
  1815  00E224  D7E7               	goto	l129
  1816  00E226  0A01               	xorlw	1	; case 5
  1817  00E228  B4D8               	btfsc	status,2,c
  1818  00E22A  D7E7               	goto	l130
  1819  00E22C  0A03               	xorlw	3	; case 6
  1820  00E22E  B4D8               	btfsc	status,2,c
  1821  00E230  D7E7               	goto	l131
  1822  00E232                     l125:
  1823                           
  1824                           ;main.c: 158: if(state != NUM_STATES){
  1825  00E232  0E07               	movlw	7
  1826  00E234  187B               	xorwf	main@state,w,c
  1827  00E236  B4D8               	btfsc	status,2,c
  1828  00E238  D7C2               	goto	l122
  1829                           
  1830                           ;main.c: 160: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1831  00E23A  0E01               	movlw	1
  1832  00E23C  EC41  F066         	call	_lcdInst
  1833  00E240  0E11               	movlw	17
  1834  00E242  6E73               	movwf	??_main& (0+255),c
  1835  00E244  0E3A               	movlw	58
  1836  00E246                     u5607:
  1837  00E246  2EE8               	decfsz	wreg,f,c
  1838  00E248  D7FE               	bra	u5607
  1839  00E24A  2E73               	decfsz	??_main& (0+255),f,c
  1840  00E24C  D7FC               	bra	u5607
  1841  00E24E  D000               	nop2	
  1842                           
  1843                           ;main.c: 161: printf("BOARD TEST");
  1844  00E250  0EDF               	movlw	low STR_1
  1845  00E252  6E40               	movwf	printf@f,c
  1846  00E254  0EFF               	movlw	high STR_1
  1847  00E256  6E41               	movwf	printf@f+1,c
  1848  00E258  EC72  F07A         	call	_printf	;wreg free
  1849                           
  1850                           ;main.c: 162: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1851  00E25C  0E86               	movlw	low _LCD_LINE2_ADDR
  1852  00E25E  6EF6               	movwf	tblptrl,c
  1853  00E260                     	if	1	;There is more than 1 active tblptr byte
  1854  00E260  0EFF               	movlw	high _LCD_LINE2_ADDR
  1855  00E262  6EF7               	movwf	tblptrh,c
  1856  00E264                     	endif
  1857  00E264                     	if	0	;There are less than 3 active tblptr bytes
  1858  00E264                     	endif
  1859  00E264  0008               	tblrd		*
  1860  00E266  50F5               	movf	tablat,w,c
  1861  00E268  0980               	iorlw	128
  1862  00E26A  EC41  F066         	call	_lcdInst
  1863                           
  1864                           ;main.c: 163: printf("Press a key");
  1865  00E26E  0ED3               	movlw	low STR_2
  1866  00E270  6E40               	movwf	printf@f,c
  1867  00E272  0EFF               	movlw	high STR_2
  1868  00E274  6E41               	movwf	printf@f+1,c
  1869  00E276  EC72  F07A         	call	_printf	;wreg free
  1870  00E27A  D7A1               	goto	l122
  1871  00E27C                     __end_of_main:
  1872                           	opt stack 0
  1873                           tblptru	equ	0xFF8
  1874                           tblptrh	equ	0xFF7
  1875                           tblptrl	equ	0xFF6
  1876                           tablat	equ	0xFF5
  1877                           prodh	equ	0xFF4
  1878                           prodl	equ	0xFF3
  1879                           postinc0	equ	0xFEE
  1880                           wreg	equ	0xFE8
  1881                           status	equ	0xFD8
  1882                           
  1883 ;; *************** function _testUART *****************
  1884 ;; Defined at:
  1885 ;;		line 360 in file "main.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;		None
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;  i               1   14[COMRAM] unsigned char 
  1890 ;;  msg            13    1[COMRAM] const unsigned char [13]
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  1    wreg      void 
  1893 ;; Registers used:
  1894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;Total ram usage:       15 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; This function calls:
  1907 ;;		Nothing
  1908 ;; This function is called by:
  1909 ;;		_main
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           	psect	text1
  1914  00D046                     __ptext1:
  1915                           	opt stack 0
  1916  00D046                     _testUART:
  1917                           	opt stack 30
  1918                           
  1919                           ;main.c: 361: const char msg[] = "Hello world!";
  1920                           
  1921                           ;incstack = 0
  1922  00D046  0E05               	movlw	low testUART@F3214
  1923  00D048  6EF6               	movwf	tblptrl,c
  1924  00D04A                     	if	1	;There is more than 1 active tblptr byte
  1925  00D04A  0EFF               	movlw	high testUART@F3214
  1926  00D04C  6EF7               	movwf	tblptrh,c
  1927  00D04E                     	endif
  1928  00D04E                     	if	0	;There are less than 3 active tblptr bytes
  1929  00D04E                     	endif
  1930  00D04E  EE20  F002         	lfsr	2,testUART@msg
  1931  00D052  0E0C               	movlw	12
  1932  00D054                     u2330:
  1933  00D054  0009               	tblrd		*+
  1934  00D056  CFF5 FFDE          	movff	tablat,postinc2
  1935  00D05A  06E8               	decf	wreg,f,c
  1936  00D05C  E2FB               	bc	u2330
  1937                           
  1938                           ;main.c: 364: for(unsigned char i = 0; i < sizeof(msg); i++){
  1939  00D05E  0E00               	movlw	0
  1940  00D060  6E0F               	movwf	testUART@i,c
  1941  00D062                     l3262:
  1942  00D062  0E0C               	movlw	12
  1943  00D064  640F               	cpfsgt	testUART@i,c
  1944  00D066  D001               	goto	l190
  1945  00D068  0012               	return	
  1946  00D06A                     l190:
  1947  00D06A                     l3266:
  1948  00D06A  B2AC               	btfsc	4012,1,c	;volatile
  1949  00D06C  D002               	goto	u2350
  1950  00D06E  0E01               	movlw	1
  1951  00D070  D001               	goto	u2352
  1952  00D072                     u2350:
  1953  00D072  0E00               	movlw	0
  1954  00D074                     u2352:
  1955  00D074  6E01               	movwf	??_testUART& (0+255),c
  1956  00D076  B89E               	btfsc	3998,4,c	;volatile
  1957  00D078  D002               	goto	u2360
  1958  00D07A  0E01               	movlw	1
  1959  00D07C  D001               	goto	u2362
  1960  00D07E                     u2360:
  1961  00D07E  0E00               	movlw	0
  1962  00D080                     u2362:
  1963  00D080  1001               	iorwf	??_testUART,w,c
  1964  00D082  E1F3               	bnz	l3266
  1965                           
  1966                           ;main.c: 367: }
  1967                           ;main.c: 369: TXREG = msg[i];
  1968  00D084  500F               	movf	testUART@i,w,c
  1969  00D086  0D01               	mullw	1
  1970  00D088  0E02               	movlw	low testUART@msg
  1971  00D08A  24F3               	addwf	prodl,w,c
  1972  00D08C  6ED9               	movwf	fsr2l,c
  1973  00D08E  0E00               	movlw	high testUART@msg
  1974  00D090  20F4               	addwfc	prodh,w,c
  1975  00D092  6EDA               	movwf	fsr2h,c
  1976  00D094  50DF               	movf	indf2,w,c
  1977  00D096  6EAD               	movwf	4013,c	;volatile
  1978  00D098  2A0F               	incf	testUART@i,f,c
  1979  00D09A  D7E3               	goto	l3262
  1980  00D09C                     __end_of_testUART:
  1981                           	opt stack 0
  1982                           tblptru	equ	0xFF8
  1983                           tblptrh	equ	0xFF7
  1984                           tblptrl	equ	0xFF6
  1985                           tablat	equ	0xFF5
  1986                           prodh	equ	0xFF4
  1987                           prodl	equ	0xFF3
  1988                           postinc0	equ	0xFEE
  1989                           wreg	equ	0xFE8
  1990                           indf2	equ	0xFDF
  1991                           postinc2	equ	0xFDE
  1992                           fsr2h	equ	0xFDA
  1993                           fsr2l	equ	0xFD9
  1994                           status	equ	0xFD8
  1995                           
  1996 ;; *************** function _testSDCard *****************
  1997 ;; Defined at:
  1998 ;;		line 253 in file "main.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;		None
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;		None
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  1    wreg      void 
  2005 ;; Registers used:
  2006 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2014 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2015 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2016 ;;Total ram usage:        2 bytes
  2017 ;; Hardware stack levels used:    1
  2018 ;; Hardware stack levels required when called:    5
  2019 ;; This function calls:
  2020 ;;		_initSD
  2021 ;;		_lcdInst
  2022 ;;		_printf
  2023 ;; This function is called by:
  2024 ;;		_main
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           	psect	text2
  2029  00D360                     __ptext2:
  2030                           	opt stack 0
  2031  00D360                     _testSDCard:
  2032                           	opt stack 25
  2033                           
  2034                           ;main.c: 254: initSD();
  2035                           
  2036                           ;incstack = 0
  2037  00D360  EC6F  F076         	call	_initSD	;wreg free
  2038                           
  2039                           ;main.c: 255: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  2040  00D364  0E01               	movlw	1
  2041  00D366  EC41  F066         	call	_lcdInst
  2042  00D36A  0E11               	movlw	17
  2043  00D36C  6E68               	movwf	??_testSDCard& (0+255),c
  2044  00D36E  0E3A               	movlw	58
  2045  00D370                     u5617:
  2046  00D370  2EE8               	decfsz	wreg,f,c
  2047  00D372  D7FE               	bra	u5617
  2048  00D374  2E68               	decfsz	??_testSDCard& (0+255),f,c
  2049  00D376  D7FC               	bra	u5617
  2050  00D378  D000               	nop2	
  2051                           
  2052                           ;main.c: 256: printf("SD Card success!");
  2053  00D37A  0E98               	movlw	low STR_7
  2054  00D37C  6E40               	movwf	printf@f,c
  2055  00D37E  0EFF               	movlw	high STR_7
  2056  00D380  6E41               	movwf	printf@f+1,c
  2057  00D382  EC72  F07A         	call	_printf	;wreg free
  2058                           
  2059                           ;main.c: 257: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  2060  00D386  0E86               	movlw	low _LCD_LINE2_ADDR
  2061  00D388  6EF6               	movwf	tblptrl,c
  2062  00D38A                     	if	1	;There is more than 1 active tblptr byte
  2063  00D38A  0EFF               	movlw	high _LCD_LINE2_ADDR
  2064  00D38C  6EF7               	movwf	tblptrh,c
  2065  00D38E                     	endif
  2066  00D38E                     	if	0	;There are less than 3 active tblptr bytes
  2067  00D38E                     	endif
  2068  00D38E  0008               	tblrd		*
  2069  00D390  50F5               	movf	tablat,w,c
  2070  00D392  0980               	iorlw	128
  2071  00D394  EC41  F066         	call	_lcdInst
  2072                           
  2073                           ;main.c: 258: printf("Size: %0.5f", SDCard.size);
  2074  00D398  0EC7               	movlw	low STR_8
  2075  00D39A  6E40               	movwf	printf@f,c
  2076  00D39C  0EFF               	movlw	high STR_8
  2077  00D39E  6E41               	movwf	printf@f+1,c
  2078  00D3A0  C098  F042         	movff	_SDCard+24,?_printf+2
  2079  00D3A4  C099  F043         	movff	_SDCard+25,?_printf+3
  2080  00D3A8  C09A  F044         	movff	_SDCard+26,?_printf+4
  2081  00D3AC  EC72  F07A         	call	_printf	;wreg free
  2082                           
  2083                           ;main.c: 259: _delay((unsigned long)((500)*(10000000/4000.0)));
  2084  00D3B0  0E07               	movlw	7
  2085  00D3B2  6E69               	movwf	(??_testSDCard+1)& (0+255),c
  2086  00D3B4  0E58               	movlw	88
  2087  00D3B6  6E68               	movwf	??_testSDCard& (0+255),c
  2088  00D3B8  0E5A               	movlw	90
  2089  00D3BA                     u5627:
  2090  00D3BA  2EE8               	decfsz	wreg,f,c
  2091  00D3BC  D7FE               	bra	u5627
  2092  00D3BE  2E68               	decfsz	??_testSDCard& (0+255),f,c
  2093  00D3C0  D7FC               	bra	u5627
  2094  00D3C2  2E69               	decfsz	(??_testSDCard+1)& (0+255),f,c
  2095  00D3C4  D7FA               	bra	u5627
  2096  00D3C6                     
  2097                           ;main.c: 262: continue;
  2098  00D3C6  A281               	btfss	3969,1,c	;volatile
  2099  00D3C8  D7FE               	goto	l164
  2100  00D3CA                     u5050:
  2101                           
  2102                           ;main.c: 268: continue;
  2103                           
  2104                           ;main.c: 263: }
  2105                           ;main.c: 267: while(PORTBbits.RB1 == 1){
  2106  00D3CA  A281               	btfss	3969,1,c	;volatile
  2107  00D3CC  0012               	return	
  2108  00D3CE  D7FD               	goto	u5050
  2109  00D3D0                     __end_of_testSDCard:
  2110                           	opt stack 0
  2111                           tblptru	equ	0xFF8
  2112                           tblptrh	equ	0xFF7
  2113                           tblptrl	equ	0xFF6
  2114                           tablat	equ	0xFF5
  2115                           prodh	equ	0xFF4
  2116                           prodl	equ	0xFF3
  2117                           postinc0	equ	0xFEE
  2118                           wreg	equ	0xFE8
  2119                           indf2	equ	0xFDF
  2120                           postinc2	equ	0xFDE
  2121                           fsr2h	equ	0xFDA
  2122                           fsr2l	equ	0xFD9
  2123                           status	equ	0xFD8
  2124                           
  2125 ;; *************** function _initSD *****************
  2126 ;; Defined at:
  2127 ;;		line 374 in file "SD_PIC.c"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;		None
  2130 ;; Auto vars:     Size  Location     Type
  2131 ;;  i               1   93[COMRAM] unsigned char 
  2132 ;;  i               1   91[COMRAM] unsigned char 
  2133 ;;  i               1   92[COMRAM] unsigned char 
  2134 ;;  i               1   95[COMRAM] unsigned char 
  2135 ;;  tempSize        4   96[COMRAM] unsigned long 
  2136 ;;  tempSize        4   70[COMRAM] unsigned long 
  2137 ;;  i               1   94[COMRAM] unsigned char 
  2138 ;;  i               1   90[COMRAM] unsigned char 
  2139 ;;  arr_response   16   74[COMRAM] unsigned char [16]
  2140 ;;  argument        4   64[COMRAM] unsigned long 
  2141 ;;  response        1  100[COMRAM] unsigned char 
  2142 ;;  last_OSCTUNE    1   69[COMRAM] const unsigned char 
  2143 ;;  last_OSCCON     1   68[COMRAM] const unsigned char 
  2144 ;; Return value:  Size  Location     Type
  2145 ;;                  1    wreg      void 
  2146 ;; Registers used:
  2147 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2148 ;; Tracked objects:
  2149 ;;		On entry : 0/0
  2150 ;;		On exit  : 0/0
  2151 ;;		Unchanged: 0/0
  2152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2154 ;;      Locals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2155 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2156 ;;      Totals:        44       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2157 ;;Total ram usage:       44 bytes
  2158 ;; Hardware stack levels used:    1
  2159 ;; Hardware stack levels required when called:    4
  2160 ;; This function calls:
  2161 ;;		_SD_ACMD
  2162 ;;		_SD_Command
  2163 ;;		___ftdiv
  2164 ;;		___ftmul
  2165 ;;		___fttol
  2166 ;;		___lltoft
  2167 ;;		___lwtoft
  2168 ;;		_spiInit
  2169 ;;		_spiReceive
  2170 ;;		_spiSend
  2171 ;; This function is called by:
  2172 ;;		_testSDCard
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text3
  2177  00ECDE                     __ptext3:
  2178                           	opt stack 0
  2179  00ECDE                     _initSD:
  2180                           	opt stack 25
  2181                           
  2182                           ;SD_PIC.c: 375: const unsigned char last_OSCCON = OSCCON;
  2183                           
  2184                           ;incstack = 0
  2185  00ECDE  CFD3 F045          	movff	4051,initSD@last_OSCCON	;volatile
  2186                           
  2187                           ;SD_PIC.c: 376: const unsigned char last_OSCTUNE = OSCTUNE;
  2188  00ECE2  CF9B F046          	movff	3995,initSD@last_OSCTUNE	;volatile
  2189                           
  2190                           ;SD_PIC.c: 377: unsigned char response;
  2191                           ;SD_PIC.c: 378: unsigned char arr_response[16] = {0};
  2192  00ECE6  EE20  F0AE         	lfsr	2,initSD@F3023
  2193  00ECEA  EE10  F04B         	lfsr	1,initSD@arr_response
  2194  00ECEE  0E0F               	movlw	15
  2195  00ECF0                     u4601:
  2196  00ECF0  CFDB FFE3          	movff	plusw2,plusw1
  2197  00ECF4  06E8               	decf	wreg,f,c
  2198  00ECF6  E2FC               	bc	u4601
  2199                           
  2200                           ;SD_PIC.c: 382: OSCTUNEbits.TUN = 0b000000;
  2201  00ECF8  909B               	bcf	3995,0,c	;volatile
  2202  00ECFA  929B               	bcf	3995,1,c	;volatile
  2203  00ECFC  949B               	bcf	3995,2,c	;volatile
  2204  00ECFE  969B               	bcf	3995,3,c	;volatile
  2205  00ED00  989B               	bcf	3995,4,c	;volatile
  2206                           
  2207                           ;SD_PIC.c: 383: OSCCONbits.IRCF = 0b110;
  2208  00ED02  50D3               	movf	4051,w,c	;volatile
  2209  00ED04  0B8F               	andlw	-113
  2210  00ED06  0960               	iorlw	96
  2211  00ED08  6ED3               	movwf	4051,c	;volatile
  2212                           
  2213                           ;SD_PIC.c: 384: OSCCONbits.SCS = 0b11;
  2214  00ED0A  0E03               	movlw	3
  2215  00ED0C  12D3               	iorwf	4051,f,c	;volatile
  2216                           
  2217                           ;SD_PIC.c: 387: while(!OSCCONbits.IOFS){
  2218  00ED0E  D004               	goto	l639
  2219  00ED10                     
  2220                           ;SD_PIC.c: 388: _delay((unsigned long)((20)*(10000000/4000000.0)));
  2221  00ED10  0E10               	movlw	16
  2222  00ED12                     u5637:
  2223  00ED12  2EE8               	decfsz	wreg,f,c
  2224  00ED14  D7FE               	bra	u5637
  2225  00ED16  D000               	nop2	
  2226  00ED18                     l639:
  2227  00ED18  A4D3               	btfss	4051,2,c	;volatile
  2228  00ED1A  D7FA               	goto	l640
  2229                           
  2230                           ;SD_PIC.c: 389: }
  2231                           ;SD_PIC.c: 391: spiInit(16);
  2232  00ED1C  0E10               	movlw	16
  2233  00ED1E  ECA2  F067         	call	_spiInit
  2234                           
  2235                           ;SD_PIC.c: 395: _delay((unsigned long)((20)*(10000000/4000.0)));
  2236  00ED22  0E41               	movlw	65
  2237  00ED24  6E3A               	movwf	??_initSD& (0+255),c
  2238  00ED26  0EEE               	movlw	238
  2239  00ED28                     u5647:
  2240  00ED28  2EE8               	decfsz	wreg,f,c
  2241  00ED2A  D7FE               	bra	u5647
  2242  00ED2C  2E3A               	decfsz	??_initSD& (0+255),f,c
  2243  00ED2E  D7FC               	bra	u5647
  2244  00ED30  D000               	nop2	
  2245                           
  2246                           ;SD_PIC.c: 398: LATEbits.LATE2 = 1;
  2247  00ED32  848D               	bsf	3981,2,c	;volatile
  2248                           
  2249                           ;SD_PIC.c: 399: TRISEbits.TRISE2 = 0;
  2250  00ED34  9496               	bcf	3990,2,c	;volatile
  2251                           
  2252                           ;SD_PIC.c: 402: for(unsigned char i = 0; i < 10; i++){
  2253  00ED36  0E00               	movlw	0
  2254  00ED38  6E5B               	movwf	initSD@i,c
  2255  00ED3A                     l4902:
  2256  00ED3A  0E09               	movlw	9
  2257  00ED3C  645B               	cpfsgt	initSD@i,c
  2258  00ED3E  D001               	goto	l642
  2259  00ED40  D005               	goto	u4630
  2260  00ED42                     l642:
  2261                           
  2262                           ;SD_PIC.c: 403: spiSend(0xFF);
  2263  00ED42  0EFF               	movlw	255
  2264  00ED44  EC37  F066         	call	_spiSend
  2265  00ED48  2A5B               	incf	initSD@i,f,c
  2266  00ED4A  D7F7               	goto	l4902
  2267  00ED4C                     u4630:
  2268                           
  2269                           ;SD_PIC.c: 404: }
  2270                           ;SD_PIC.c: 406: LATEbits.LATE2 = 0;
  2271  00ED4C  948D               	bcf	3981,2,c	;volatile
  2272  00ED4E                     
  2273                           ;SD_PIC.c: 412: continue;
  2274  00ED4E  0E00               	movlw	0
  2275  00ED50  6E04               	movwf	SD_Command@arg,c
  2276  00ED52  0E00               	movlw	0
  2277  00ED54  6E05               	movwf	SD_Command@arg+1,c
  2278  00ED56  0E00               	movlw	0
  2279  00ED58  6E06               	movwf	SD_Command@arg+2,c
  2280  00ED5A  0E00               	movlw	0
  2281  00ED5C  6E07               	movwf	SD_Command@arg+3,c
  2282  00ED5E  0E61               	movlw	low _CMD0
  2283  00ED60  6EF6               	movwf	tblptrl,c
  2284  00ED62                     	if	1	;There is more than 1 active tblptr byte
  2285  00ED62  0EFF               	movlw	high _CMD0
  2286  00ED64  6EF7               	movwf	tblptrh,c
  2287  00ED66                     	endif
  2288  00ED66                     	if	0	;There are less than 3 active tblptr bytes
  2289  00ED66                     	endif
  2290  00ED66  0008               	tblrd		*
  2291  00ED68  50F5               	movf	tablat,w,c
  2292  00ED6A  ECE8  F069         	call	_SD_Command
  2293  00ED6E  6E3A               	movwf	??_initSD& (0+255),c
  2294  00ED70  0E4A               	movlw	low _R1_IDLE_STATE
  2295  00ED72  6EF6               	movwf	tblptrl,c
  2296  00ED74                     	if	1	;There is more than 1 active tblptr byte
  2297  00ED74  0EFF               	movlw	high _R1_IDLE_STATE
  2298  00ED76  6EF7               	movwf	tblptrh,c
  2299  00ED78                     	endif
  2300  00ED78                     	if	0	;There are less than 3 active tblptr bytes
  2301  00ED78                     	endif
  2302  00ED78  0008               	tblrd		*
  2303  00ED7A  50F5               	movf	tablat,w,c
  2304  00ED7C  183A               	xorwf	??_initSD,w,c
  2305  00ED7E  A4D8               	btfss	status,2,c
  2306  00ED80  D7E6               	goto	l645
  2307  00ED82                     u4640:
  2308                           
  2309                           ;SD_PIC.c: 421: response = SD_Command(CMD8, 0x01AA);
  2310                           
  2311                           ;SD_PIC.c: 413: }
  2312                           ;SD_PIC.c: 420: while(1){
  2313  00ED82  0EAA               	movlw	170
  2314  00ED84  6E04               	movwf	SD_Command@arg,c
  2315  00ED86  0E01               	movlw	1
  2316  00ED88  6E05               	movwf	SD_Command@arg+1,c
  2317  00ED8A  0E00               	movlw	0
  2318  00ED8C  6E06               	movwf	SD_Command@arg+2,c
  2319  00ED8E  0E00               	movlw	0
  2320  00ED90  6E07               	movwf	SD_Command@arg+3,c
  2321  00ED92  0E5E               	movlw	low _CMD8
  2322  00ED94  6EF6               	movwf	tblptrl,c
  2323  00ED96                     	if	1	;There is more than 1 active tblptr byte
  2324  00ED96  0EFF               	movlw	high _CMD8
  2325  00ED98  6EF7               	movwf	tblptrh,c
  2326  00ED9A                     	endif
  2327  00ED9A                     	if	0	;There are less than 3 active tblptr bytes
  2328  00ED9A                     	endif
  2329  00ED9A  0008               	tblrd		*
  2330  00ED9C  50F5               	movf	tablat,w,c
  2331  00ED9E  ECE8  F069         	call	_SD_Command
  2332  00EDA2  6E65               	movwf	initSD@response,c
  2333                           
  2334                           ;SD_PIC.c: 424: LATEbits.LATE2 = 0;
  2335  00EDA4  948D               	bcf	3981,2,c	;volatile
  2336                           
  2337                           ;SD_PIC.c: 425: for(unsigned char i = 0; i < 4; i++){
  2338  00EDA6  0E00               	movlw	0
  2339  00EDA8  6E5D               	movwf	initSD@i_1248,c
  2340  00EDAA                     l4920:
  2341  00EDAA  0E03               	movlw	3
  2342  00EDAC  645D               	cpfsgt	initSD@i_1248,c
  2343  00EDAE  D001               	goto	l648
  2344  00EDB0  D00D               	goto	u4660
  2345  00EDB2                     l648:
  2346                           
  2347                           ;SD_PIC.c: 426: arr_response[i] = spiReceive();
  2348  00EDB2  505D               	movf	initSD@i_1248,w,c
  2349  00EDB4  0D01               	mullw	1
  2350  00EDB6  0E4B               	movlw	low initSD@arr_response
  2351  00EDB8  24F3               	addwf	prodl,w,c
  2352  00EDBA  6ED9               	movwf	fsr2l,c
  2353  00EDBC  0E00               	movlw	high initSD@arr_response
  2354  00EDBE  20F4               	addwfc	prodh,w,c
  2355  00EDC0  6EDA               	movwf	fsr2h,c
  2356  00EDC2  EC33  F066         	call	_spiReceive	;wreg free
  2357  00EDC6  6EDF               	movwf	indf2,c
  2358  00EDC8  2A5D               	incf	initSD@i_1248,f,c
  2359  00EDCA  D7EF               	goto	l4920
  2360  00EDCC                     u4660:
  2361                           
  2362                           ;SD_PIC.c: 427: }
  2363                           ;SD_PIC.c: 428: LATEbits.LATE2 = 1;
  2364  00EDCC  848D               	bsf	3981,2,c	;volatile
  2365                           
  2366                           ;SD_PIC.c: 430: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  2367  00EDCE  0E49               	movlw	low _R1_ILLEGAL_COMMAND
  2368  00EDD0  6EF6               	movwf	tblptrl,c
  2369  00EDD2                     	if	1	;There is more than 1 active tblptr byte
  2370  00EDD2  0EFF               	movlw	high _R1_ILLEGAL_COMMAND
  2371  00EDD4  6EF7               	movwf	tblptrh,c
  2372  00EDD6                     	endif
  2373  00EDD6                     	if	0	;There are less than 3 active tblptr bytes
  2374  00EDD6                     	endif
  2375  00EDD6  0008               	tblrd		*
  2376  00EDD8  CFF5 F03A          	movff	tablat,??_initSD
  2377  00EDDC  5065               	movf	initSD@response,w,c
  2378  00EDDE  143A               	andwf	??_initSD,w,c
  2379  00EDE0  6E3B               	movwf	(??_initSD+1)& (0+255),c
  2380  00EDE2  0E49               	movlw	low _R1_ILLEGAL_COMMAND
  2381  00EDE4  6EF6               	movwf	tblptrl,c
  2382  00EDE6                     	if	1	;There is more than 1 active tblptr byte
  2383  00EDE6  0EFF               	movlw	high _R1_ILLEGAL_COMMAND
  2384  00EDE8  6EF7               	movwf	tblptrh,c
  2385  00EDEA                     	endif
  2386  00EDEA                     	if	0	;There are less than 3 active tblptr bytes
  2387  00EDEA                     	endif
  2388  00EDEA  0008               	tblrd		*
  2389  00EDEC  50F5               	movf	tablat,w,c
  2390  00EDEE  183B               	xorwf	??_initSD+1,w,c
  2391  00EDF0  A4D8               	btfss	status,2,c
  2392  00EDF2  D02C               	goto	l650
  2393                           
  2394                           ;SD_PIC.c: 433: SDCard.SDversion = 1;
  2395  00EDF4  0E01               	movlw	1
  2396  00EDF6  0100               	movlb	0	; () banked
  2397  00EDF8  6F80               	movwf	_SDCard& (0+255),b
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;SD_PIC.c: 436: SD_Command(CMD58, 0);
  2401  00EDFA  0E00               	movlw	0
  2402  00EDFC  6E04               	movwf	SD_Command@arg,c
  2403  00EDFE  0E00               	movlw	0
  2404  00EE00  6E05               	movwf	SD_Command@arg+1,c
  2405  00EE02  0E00               	movlw	0
  2406  00EE04  6E06               	movwf	SD_Command@arg+2,c
  2407  00EE06  0E00               	movlw	0
  2408  00EE08  6E07               	movwf	SD_Command@arg+3,c
  2409  00EE0A  0E4F               	movlw	low _CMD58
  2410  00EE0C  6EF6               	movwf	tblptrl,c
  2411  00EE0E                     	if	1	;There is more than 1 active tblptr byte
  2412  00EE0E  0EFF               	movlw	high _CMD58
  2413  00EE10  6EF7               	movwf	tblptrh,c
  2414  00EE12                     	endif
  2415  00EE12                     	if	0	;There are less than 3 active tblptr bytes
  2416  00EE12                     	endif
  2417  00EE12  0008               	tblrd		*
  2418  00EE14  50F5               	movf	tablat,w,c
  2419  00EE16  ECE8  F069         	call	_SD_Command
  2420                           
  2421                           ;SD_PIC.c: 437: LATEbits.LATE2 = 0;
  2422  00EE1A  948D               	bcf	3981,2,c	;volatile
  2423                           
  2424                           ;SD_PIC.c: 438: for(unsigned char i = 0; i < 4; i++){
  2425  00EE1C  0E00               	movlw	0
  2426  00EE1E  6E5E               	movwf	initSD@i_1249,c
  2427  00EE20                     l4940:
  2428  00EE20  0E03               	movlw	3
  2429  00EE22  645E               	cpfsgt	initSD@i_1249,c
  2430  00EE24  D001               	goto	l651
  2431  00EE26  D00D               	goto	u4690
  2432  00EE28                     l651:
  2433                           
  2434                           ;SD_PIC.c: 439: arr_response[i] = spiReceive();
  2435  00EE28  505E               	movf	initSD@i_1249,w,c
  2436  00EE2A  0D01               	mullw	1
  2437  00EE2C  0E4B               	movlw	low initSD@arr_response
  2438  00EE2E  24F3               	addwf	prodl,w,c
  2439  00EE30  6ED9               	movwf	fsr2l,c
  2440  00EE32  0E00               	movlw	high initSD@arr_response
  2441  00EE34  20F4               	addwfc	prodh,w,c
  2442  00EE36  6EDA               	movwf	fsr2h,c
  2443  00EE38  EC33  F066         	call	_spiReceive	;wreg free
  2444  00EE3C  6EDF               	movwf	indf2,c
  2445  00EE3E  2A5E               	incf	initSD@i_1249,f,c
  2446  00EE40  D7EF               	goto	l4940
  2447  00EE42                     u4690:
  2448                           
  2449                           ;SD_PIC.c: 440: }
  2450                           ;SD_PIC.c: 441: LATEbits.LATE2 = 1;
  2451  00EE42  848D               	bsf	3981,2,c	;volatile
  2452                           
  2453                           ;SD_PIC.c: 443: if(arr_response[2] != 0x01){
  2454  00EE44  044D               	decf	initSD@arr_response+2,w,c
  2455  00EE46  A4D8               	btfss	status,2,c
  2456  00EE48  0012               	return	
  2457  00EE4A  D012               	goto	l655
  2458  00EE4C                     l650:
  2459                           
  2460                           ;SD_PIC.c: 449: else if(response == R1_IDLE_STATE){
  2461  00EE4C  0E4A               	movlw	low _R1_IDLE_STATE
  2462  00EE4E  6EF6               	movwf	tblptrl,c
  2463  00EE50                     	if	1	;There is more than 1 active tblptr byte
  2464  00EE50  0EFF               	movlw	high _R1_IDLE_STATE
  2465  00EE52  6EF7               	movwf	tblptrh,c
  2466  00EE54                     	endif
  2467  00EE54                     	if	0	;There are less than 3 active tblptr bytes
  2468  00EE54                     	endif
  2469  00EE54  0008               	tblrd		*
  2470  00EE56  50F5               	movf	tablat,w,c
  2471  00EE58  6265               	cpfseq	initSD@response,c
  2472  00EE5A  D793               	goto	u4640
  2473                           
  2474                           ;SD_PIC.c: 450: if((arr_response[2] == 0x01) && (arr_response[3] == 0xAA)){
  2475  00EE5C  044D               	decf	initSD@arr_response+2,w,c
  2476  00EE5E  A4D8               	btfss	status,2,c
  2477  00EE60  0012               	return	
  2478  00EE62  0EAA               	movlw	170
  2479  00EE64  184E               	xorwf	initSD@arr_response+3,w,c
  2480  00EE66  A4D8               	btfss	status,2,c
  2481  00EE68  0012               	return	
  2482                           
  2483                           ;SD_PIC.c: 453: SDCard.SDversion = 2;
  2484  00EE6A  0E02               	movlw	2
  2485  00EE6C  0100               	movlb	0	; () banked
  2486  00EE6E  6F80               	movwf	_SDCard& (0+255),b
  2487  00EE70                     l655:
  2488                           
  2489                           ;SD_PIC.c: 459: }
  2490                           ;SD_PIC.c: 460: }
  2491                           ;SD_PIC.c: 461: }
  2492                           ;SD_PIC.c: 469: unsigned long argument = (SDCard.SDversion == 1) ? 0 : 0x40000000;
  2493                           
  2494                           ; BSR set to: 0
  2495  00EE70  0100               	movlb	0	; () banked
  2496  00EE72  0580               	decf	_SDCard& (0+255),w,b
  2497  00EE74  B4D8               	btfsc	status,2,c
  2498  00EE76  D008               	goto	l662
  2499                           
  2500                           ; BSR set to: 0
  2501  00EE78  0E00               	movlw	0
  2502  00EE7A  6E41               	movwf	initSD@argument,c
  2503  00EE7C  0E00               	movlw	0
  2504  00EE7E  6E42               	movwf	initSD@argument+1,c
  2505  00EE80  0E00               	movlw	0
  2506  00EE82  6E43               	movwf	initSD@argument+2,c
  2507  00EE84  0E40               	movlw	64
  2508  00EE86  D007               	goto	L2
  2509  00EE88                     l662:
  2510                           
  2511                           ; BSR set to: 0
  2512                           
  2513                           ; BSR set to: 0
  2514  00EE88  0E00               	movlw	0
  2515  00EE8A  6E41               	movwf	initSD@argument,c
  2516  00EE8C  0E00               	movlw	0
  2517  00EE8E  6E42               	movwf	initSD@argument+1,c
  2518  00EE90  0E00               	movlw	0
  2519  00EE92  6E43               	movwf	initSD@argument+2,c
  2520  00EE94  0E00               	movlw	0
  2521  00EE96                     L2:
  2522  00EE96  6E44               	movwf	initSD@argument+3,c
  2523  00EE98                     
  2524                           ;SD_PIC.c: 472: response = SD_ACMD(ACMD41, argument);
  2525                           
  2526                           ; BSR set to: 0
  2527                           
  2528                           ;SD_PIC.c: 471: do{
  2529                           
  2530                           ; BSR set to: 0
  2531  00EE98  C041  F00B         	movff	initSD@argument,SD_ACMD@arg
  2532  00EE9C  C042  F00C         	movff	initSD@argument+1,SD_ACMD@arg+1
  2533  00EEA0  C043  F00D         	movff	initSD@argument+2,SD_ACMD@arg+2
  2534  00EEA4  C044  F00E         	movff	initSD@argument+3,SD_ACMD@arg+3
  2535  00EEA8  0E4C               	movlw	low _ACMD41
  2536  00EEAA  6EF6               	movwf	tblptrl,c
  2537  00EEAC                     	if	1	;There is more than 1 active tblptr byte
  2538  00EEAC  0EFF               	movlw	high _ACMD41
  2539  00EEAE  6EF7               	movwf	tblptrh,c
  2540  00EEB0                     	endif
  2541  00EEB0                     	if	0	;There are less than 3 active tblptr bytes
  2542  00EEB0                     	endif
  2543  00EEB0  0008               	tblrd		*
  2544  00EEB2  50F5               	movf	tablat,w,c
  2545  00EEB4  ECBE  F067         	call	_SD_ACMD
  2546  00EEB8  6E65               	movwf	initSD@response,c
  2547                           
  2548                           ;SD_PIC.c: 473: }while(
  2549                           ;SD_PIC.c: 474: (response != R1_READY_STATE) &&
  2550                           ;SD_PIC.c: 475: ((response & R1_ILLEGAL_COMMAND) != R1_ILLEGAL_COMMAND)
  2551                           ;SD_PIC.c: 476: );
  2552  00EEBA  0E4B               	movlw	low _R1_READY_STATE
  2553  00EEBC  6EF6               	movwf	tblptrl,c
  2554  00EEBE                     	if	1	;There is more than 1 active tblptr byte
  2555  00EEBE  0EFF               	movlw	high _R1_READY_STATE
  2556  00EEC0  6EF7               	movwf	tblptrh,c
  2557  00EEC2                     	endif
  2558  00EEC2                     	if	0	;There are less than 3 active tblptr bytes
  2559  00EEC2                     	endif
  2560  00EEC2  0008               	tblrd		*
  2561  00EEC4  50F5               	movf	tablat,w,c
  2562  00EEC6  1865               	xorwf	initSD@response,w,c
  2563  00EEC8  B4D8               	btfsc	status,2,c
  2564  00EECA  D013               	goto	u4760
  2565  00EECC  0E49               	movlw	low _R1_ILLEGAL_COMMAND
  2566  00EECE  6EF6               	movwf	tblptrl,c
  2567  00EED0                     	if	1	;There is more than 1 active tblptr byte
  2568  00EED0  0EFF               	movlw	high _R1_ILLEGAL_COMMAND
  2569  00EED2  6EF7               	movwf	tblptrh,c
  2570  00EED4                     	endif
  2571  00EED4                     	if	0	;There are less than 3 active tblptr bytes
  2572  00EED4                     	endif
  2573  00EED4  0008               	tblrd		*
  2574  00EED6  CFF5 F03A          	movff	tablat,??_initSD
  2575  00EEDA  5065               	movf	initSD@response,w,c
  2576  00EEDC  143A               	andwf	??_initSD,w,c
  2577  00EEDE  6E3B               	movwf	(??_initSD+1)& (0+255),c
  2578  00EEE0  0E49               	movlw	low _R1_ILLEGAL_COMMAND
  2579  00EEE2  6EF6               	movwf	tblptrl,c
  2580  00EEE4                     	if	1	;There is more than 1 active tblptr byte
  2581  00EEE4  0EFF               	movlw	high _R1_ILLEGAL_COMMAND
  2582  00EEE6  6EF7               	movwf	tblptrh,c
  2583  00EEE8                     	endif
  2584  00EEE8                     	if	0	;There are less than 3 active tblptr bytes
  2585  00EEE8                     	endif
  2586  00EEE8  0008               	tblrd		*
  2587  00EEEA  50F5               	movf	tablat,w,c
  2588  00EEEC  183B               	xorwf	??_initSD+1,w,c
  2589  00EEEE  A4D8               	btfss	status,2,c
  2590  00EEF0  D7D3               	goto	l664
  2591  00EEF2                     u4760:
  2592                           
  2593                           ;SD_PIC.c: 480: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  2594  00EEF2  0E49               	movlw	low _R1_ILLEGAL_COMMAND
  2595  00EEF4  6EF6               	movwf	tblptrl,c
  2596  00EEF6                     	if	1	;There is more than 1 active tblptr byte
  2597  00EEF6  0EFF               	movlw	high _R1_ILLEGAL_COMMAND
  2598  00EEF8  6EF7               	movwf	tblptrh,c
  2599  00EEFA                     	endif
  2600  00EEFA                     	if	0	;There are less than 3 active tblptr bytes
  2601  00EEFA                     	endif
  2602  00EEFA  0008               	tblrd		*
  2603  00EEFC  CFF5 F03A          	movff	tablat,??_initSD
  2604  00EF00  5065               	movf	initSD@response,w,c
  2605  00EF02  143A               	andwf	??_initSD,w,c
  2606  00EF04  6E3B               	movwf	(??_initSD+1)& (0+255),c
  2607  00EF06  0E49               	movlw	low _R1_ILLEGAL_COMMAND
  2608  00EF08  6EF6               	movwf	tblptrl,c
  2609  00EF0A                     	if	1	;There is more than 1 active tblptr byte
  2610  00EF0A  0EFF               	movlw	high _R1_ILLEGAL_COMMAND
  2611  00EF0C  6EF7               	movwf	tblptrh,c
  2612  00EF0E                     	endif
  2613  00EF0E                     	if	0	;There are less than 3 active tblptr bytes
  2614  00EF0E                     	endif
  2615  00EF0E  0008               	tblrd		*
  2616  00EF10  50F5               	movf	tablat,w,c
  2617  00EF12  183B               	xorwf	??_initSD+1,w,c
  2618  00EF14  A4D8               	btfss	status,2,c
  2619  00EF16  D01C               	goto	l671
  2620                           
  2621                           ;SD_PIC.c: 481: if(SDCard.SDversion == 1){
  2622  00EF18  0100               	movlb	0	; () banked
  2623  00EF1A  0580               	decf	_SDCard& (0+255),w,b
  2624  00EF1C  A4D8               	btfss	status,2,c
  2625  00EF1E  D014               	goto	l670
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;SD_PIC.c: 483: SDCard.Type = TYPE_MMC;
  2629  00EF20  0E02               	movlw	2
  2630  00EF22  0100               	movlb	0	; () banked
  2631  00EF24  6F81               	movwf	(_SDCard+1)& (0+255),b
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;SD_PIC.c: 484: SD_Command(CMD1, 0);
  2635  00EF26  0E00               	movlw	0
  2636  00EF28  6E04               	movwf	SD_Command@arg,c
  2637  00EF2A  0E00               	movlw	0
  2638  00EF2C  6E05               	movwf	SD_Command@arg+1,c
  2639  00EF2E  0E00               	movlw	0
  2640  00EF30  6E06               	movwf	SD_Command@arg+2,c
  2641  00EF32  0E00               	movlw	0
  2642  00EF34  6E07               	movwf	SD_Command@arg+3,c
  2643  00EF36  0E5F               	movlw	low _CMD1
  2644  00EF38  6EF6               	movwf	tblptrl,c
  2645  00EF3A                     	if	1	;There is more than 1 active tblptr byte
  2646  00EF3A  0EFF               	movlw	high _CMD1
  2647  00EF3C  6EF7               	movwf	tblptrh,c
  2648  00EF3E                     	endif
  2649  00EF3E                     	if	0	;There are less than 3 active tblptr bytes
  2650  00EF3E                     	endif
  2651  00EF3E  0008               	tblrd		*
  2652  00EF40  50F5               	movf	tablat,w,c
  2653  00EF42  ECE8  F069         	call	_SD_Command
  2654                           
  2655                           ;SD_PIC.c: 485: }
  2656  00EF46  D004               	goto	l671
  2657  00EF48                     l670:
  2658                           
  2659                           ;SD_PIC.c: 486: else{
  2660                           ;SD_PIC.c: 488: SDCard.init = 0;
  2661  00EF48  0E00               	movlw	0
  2662  00EF4A  0100               	movlb	0	; () banked
  2663  00EF4C  6F9B               	movwf	(_SDCard+27)& (0+255),b
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;SD_PIC.c: 489: return;
  2667  00EF4E  0012               	return	
  2668  00EF50                     l671:
  2669                           
  2670                           ;SD_PIC.c: 490: }
  2671                           ;SD_PIC.c: 491: }
  2672                           ;SD_PIC.c: 493: if(SDCard.Type != TYPE_MMC){
  2673                           
  2674                           ; BSR set to: 0
  2675                           
  2676                           ; BSR set to: 0
  2677  00EF50  0E02               	movlw	2
  2678  00EF52  0100               	movlb	0	; () banked
  2679  00EF54  1981               	xorwf	(_SDCard+1)& (0+255),w,b
  2680  00EF56  B4D8               	btfsc	status,2,c
  2681  00EF58  D027               	goto	l672
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;SD_PIC.c: 496: SD_Command(CMD58, 0);
  2685  00EF5A  0E00               	movlw	0
  2686  00EF5C  6E04               	movwf	SD_Command@arg,c
  2687  00EF5E  0E00               	movlw	0
  2688  00EF60  6E05               	movwf	SD_Command@arg+1,c
  2689  00EF62  0E00               	movlw	0
  2690  00EF64  6E06               	movwf	SD_Command@arg+2,c
  2691  00EF66  0E00               	movlw	0
  2692  00EF68  6E07               	movwf	SD_Command@arg+3,c
  2693  00EF6A  0E4F               	movlw	low _CMD58
  2694  00EF6C  6EF6               	movwf	tblptrl,c
  2695  00EF6E                     	if	1	;There is more than 1 active tblptr byte
  2696  00EF6E  0EFF               	movlw	high _CMD58
  2697  00EF70  6EF7               	movwf	tblptrh,c
  2698  00EF72                     	endif
  2699  00EF72                     	if	0	;There are less than 3 active tblptr bytes
  2700  00EF72                     	endif
  2701  00EF72  0008               	tblrd		*
  2702  00EF74  50F5               	movf	tablat,w,c
  2703  00EF76  ECE8  F069         	call	_SD_Command
  2704                           
  2705                           ;SD_PIC.c: 499: LATEbits.LATE2 = 0;
  2706  00EF7A  948D               	bcf	3981,2,c	;volatile
  2707                           
  2708                           ;SD_PIC.c: 500: if((spiReceive() & 0xC0) == 0xC0){
  2709  00EF7C  EC33  F066         	call	_spiReceive	;wreg free
  2710  00EF80  0BC0               	andlw	192
  2711  00EF82  0AC0               	xorlw	192
  2712  00EF84  A4D8               	btfss	status,2,c
  2713  00EF86  D002               	goto	l673
  2714                           
  2715                           ;SD_PIC.c: 501: SDCard.Type = TYPE_SDHC_SDXC;
  2716  00EF88  0E01               	movlw	1
  2717  00EF8A  D001               	goto	L1
  2718  00EF8C                     l673:
  2719                           
  2720                           ;SD_PIC.c: 503: else{
  2721                           ;SD_PIC.c: 504: SDCard.Type = TYPE_SDSC;
  2722                           
  2723                           ; BSR set to: 0
  2724  00EF8C  0E00               	movlw	0
  2725  00EF8E                     L1:
  2726  00EF8E  0100               	movlb	0	; () banked
  2727  00EF90  6F81               	movwf	(_SDCard+1)& (0+255),b
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;SD_PIC.c: 505: }
  2731                           ;SD_PIC.c: 509: for(unsigned char i = 0; i < 3; i++){
  2732  00EF92  0E00               	movlw	0
  2733  00EF94  6E5C               	movwf	initSD@i_1251,c
  2734  00EF96                     l5002:
  2735                           
  2736                           ; BSR set to: 0
  2737  00EF96  0E02               	movlw	2
  2738  00EF98  645C               	cpfsgt	initSD@i_1251,c
  2739  00EF9A  D001               	goto	l675
  2740  00EF9C  D004               	goto	u4820
  2741  00EF9E                     l675:
  2742                           
  2743                           ;SD_PIC.c: 510: spiReceive();
  2744                           
  2745                           ; BSR set to: 0
  2746  00EF9E  EC33  F066         	call	_spiReceive	;wreg free
  2747  00EFA2  2A5C               	incf	initSD@i_1251,f,c
  2748  00EFA4  D7F8               	goto	l5002
  2749  00EFA6                     u4820:
  2750                           
  2751                           ;SD_PIC.c: 511: }
  2752                           ;SD_PIC.c: 512: LATEbits.LATE2 = 1;
  2753  00EFA6  848D               	bsf	3981,2,c	;volatile
  2754  00EFA8                     l672:
  2755                           
  2756                           ;SD_PIC.c: 513: }
  2757                           ;SD_PIC.c: 516: while(SD_Command(CMD16, 512) != R1_READY_STATE){ continue; }
  2758  00EFA8  0E00               	movlw	0
  2759  00EFAA  6E04               	movwf	SD_Command@arg,c
  2760  00EFAC  0E02               	movlw	2
  2761  00EFAE  6E05               	movwf	SD_Command@arg+1,c
  2762  00EFB0  0E00               	movlw	0
  2763  00EFB2  6E06               	movwf	SD_Command@arg+2,c
  2764  00EFB4  0E00               	movlw	0
  2765  00EFB6  6E07               	movwf	SD_Command@arg+3,c
  2766  00EFB8  0E58               	movlw	low _CMD16
  2767  00EFBA  6EF6               	movwf	tblptrl,c
  2768  00EFBC                     	if	1	;There is more than 1 active tblptr byte
  2769  00EFBC  0EFF               	movlw	high _CMD16
  2770  00EFBE  6EF7               	movwf	tblptrh,c
  2771  00EFC0                     	endif
  2772  00EFC0                     	if	0	;There are less than 3 active tblptr bytes
  2773  00EFC0                     	endif
  2774  00EFC0  0008               	tblrd		*
  2775  00EFC2  50F5               	movf	tablat,w,c
  2776  00EFC4  ECE8  F069         	call	_SD_Command
  2777  00EFC8  6E3A               	movwf	??_initSD& (0+255),c
  2778  00EFCA  0E4B               	movlw	low _R1_READY_STATE
  2779  00EFCC  6EF6               	movwf	tblptrl,c
  2780  00EFCE                     	if	1	;There is more than 1 active tblptr byte
  2781  00EFCE  0EFF               	movlw	high _R1_READY_STATE
  2782  00EFD0  6EF7               	movwf	tblptrh,c
  2783  00EFD2                     	endif
  2784  00EFD2                     	if	0	;There are less than 3 active tblptr bytes
  2785  00EFD2                     	endif
  2786  00EFD2  0008               	tblrd		*
  2787  00EFD4  50F5               	movf	tablat,w,c
  2788  00EFD6  183A               	xorwf	??_initSD,w,c
  2789  00EFD8  A4D8               	btfss	status,2,c
  2790  00EFDA  D7E6               	goto	l672
  2791                           
  2792                           ;SD_PIC.c: 517: SDCard.blockSize = 512;
  2793  00EFDC  0E02               	movlw	2
  2794  00EFDE  0100               	movlb	0	; () banked
  2795  00EFE0  6F93               	movwf	(_SDCard+19)& (0+255),b
  2796  00EFE2  0E00               	movlw	0
  2797  00EFE4  6F92               	movwf	(_SDCard+18)& (0+255),b
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;SD_PIC.c: 520: SD_Command(CMD9, 0);
  2801  00EFE6  0E00               	movlw	0
  2802  00EFE8  6E04               	movwf	SD_Command@arg,c
  2803  00EFEA  0E00               	movlw	0
  2804  00EFEC  6E05               	movwf	SD_Command@arg+1,c
  2805  00EFEE  0E00               	movlw	0
  2806  00EFF0  6E06               	movwf	SD_Command@arg+2,c
  2807  00EFF2  0E00               	movlw	0
  2808  00EFF4  6E07               	movwf	SD_Command@arg+3,c
  2809  00EFF6  0E5C               	movlw	low _CMD9
  2810  00EFF8  6EF6               	movwf	tblptrl,c
  2811  00EFFA                     	if	1	;There is more than 1 active tblptr byte
  2812  00EFFA  0EFF               	movlw	high _CMD9
  2813  00EFFC  6EF7               	movwf	tblptrh,c
  2814  00EFFE                     	endif
  2815  00EFFE                     	if	0	;There are less than 3 active tblptr bytes
  2816  00EFFE                     	endif
  2817  00EFFE  0008               	tblrd		*
  2818  00F000  50F5               	movf	tablat,w,c
  2819  00F002  ECE8  F069         	call	_SD_Command
  2820                           
  2821                           ;SD_PIC.c: 521: LATEbits.LATE2 = 0;
  2822  00F006  948D               	bcf	3981,2,c	;volatile
  2823  00F008  EC33  F066         	call	_spiReceive	;wreg free
  2824  00F00C  6E3A               	movwf	??_initSD& (0+255),c
  2825  00F00E  0E48               	movlw	low _START_BLOCK
  2826  00F010  6EF6               	movwf	tblptrl,c
  2827  00F012                     	if	1	;There is more than 1 active tblptr byte
  2828  00F012  0EFF               	movlw	high _START_BLOCK
  2829  00F014  6EF7               	movwf	tblptrh,c
  2830  00F016                     	endif
  2831  00F016                     	if	0	;There are less than 3 active tblptr bytes
  2832  00F016                     	endif
  2833  00F016  0008               	tblrd		*
  2834  00F018  50F5               	movf	tablat,w,c
  2835  00F01A  183A               	xorwf	??_initSD,w,c
  2836  00F01C  A4D8               	btfss	status,2,c
  2837  00F01E  D7F4               	goto	l681
  2838                           
  2839                           ;SD_PIC.c: 523: for(unsigned char i = 0; i < 16; i++){
  2840  00F020  0E00               	movlw	0
  2841  00F022  6E5F               	movwf	initSD@i_1252,c
  2842  00F024                     l5024:
  2843  00F024  0E0F               	movlw	15
  2844  00F026  645F               	cpfsgt	initSD@i_1252,c
  2845  00F028  D001               	goto	l683
  2846  00F02A  D00D               	goto	u4860
  2847  00F02C                     l683:
  2848                           
  2849                           ;SD_PIC.c: 524: arr_response[i] = spiReceive();
  2850  00F02C  505F               	movf	initSD@i_1252,w,c
  2851  00F02E  0D01               	mullw	1
  2852  00F030  0E4B               	movlw	low initSD@arr_response
  2853  00F032  24F3               	addwf	prodl,w,c
  2854  00F034  6ED9               	movwf	fsr2l,c
  2855  00F036  0E00               	movlw	high initSD@arr_response
  2856  00F038  20F4               	addwfc	prodh,w,c
  2857  00F03A  6EDA               	movwf	fsr2h,c
  2858  00F03C  EC33  F066         	call	_spiReceive	;wreg free
  2859  00F040  6EDF               	movwf	indf2,c
  2860  00F042  2A5F               	incf	initSD@i_1252,f,c
  2861  00F044  D7EF               	goto	l5024
  2862  00F046                     u4860:
  2863                           
  2864                           ;SD_PIC.c: 525: }
  2865                           ;SD_PIC.c: 526: spiReceive();
  2866  00F046  EC33  F066         	call	_spiReceive	;wreg free
  2867                           
  2868                           ;SD_PIC.c: 527: spiReceive();
  2869  00F04A  EC33  F066         	call	_spiReceive	;wreg free
  2870                           
  2871                           ;SD_PIC.c: 528: LATEbits.LATE2 = 1;
  2872  00F04E  848D               	bsf	3981,2,c	;volatile
  2873                           
  2874                           ;SD_PIC.c: 530: if(SDCard.SDversion == 2){
  2875  00F050  0E02               	movlw	2
  2876  00F052  0100               	movlb	0	; () banked
  2877  00F054  1980               	xorwf	_SDCard& (0+255),w,b
  2878  00F056  A4D8               	btfss	status,2,c
  2879  00F058  D06C               	goto	l685
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;SD_PIC.c: 535: unsigned long tempSize = arr_response[9] + 1UL;
  2883  00F05A  0E01               	movlw	1
  2884  00F05C  2454               	addwf	initSD@arr_response+9,w,c
  2885  00F05E  6E47               	movwf	initSD@tempSize,c
  2886  00F060  6A48               	clrf	initSD@tempSize+1,c
  2887  00F062  0E00               	movlw	0
  2888  00F064  2248               	addwfc	initSD@tempSize+1,f,c
  2889  00F066  6A49               	clrf	initSD@tempSize+2,c
  2890  00F068  0E00               	movlw	0
  2891  00F06A  2249               	addwfc	initSD@tempSize+2,f,c
  2892  00F06C  6A4A               	clrf	initSD@tempSize+3,c
  2893  00F06E  0E00               	movlw	0
  2894  00F070  224A               	addwfc	initSD@tempSize+3,f,c
  2895                           
  2896                           ;SD_PIC.c: 536: tempSize |= (unsigned long)(arr_response[8] << 8);
  2897  00F072  5053               	movf	initSD@arr_response+8,w,c
  2898  00F074  6E3B               	movwf	(??_initSD+1)& (0+255),c
  2899  00F076  6A3A               	clrf	??_initSD& (0+255),c
  2900  00F078  C03A  F03C         	movff	??_initSD,??_initSD+2
  2901  00F07C  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  2902  00F080  0E00               	movlw	0
  2903  00F082  BE3D               	btfsc	(??_initSD+3)& (0+255),7,c
  2904  00F084  0EFF               	movlw	255
  2905  00F086  6E3E               	movwf	(??_initSD+4)& (0+255),c
  2906  00F088  6E3F               	movwf	(??_initSD+5)& (0+255),c
  2907  00F08A  503C               	movf	??_initSD+2,w,c
  2908  00F08C  1247               	iorwf	initSD@tempSize,f,c
  2909  00F08E  503D               	movf	??_initSD+3,w,c
  2910  00F090  1248               	iorwf	initSD@tempSize+1,f,c
  2911  00F092  503E               	movf	??_initSD+4,w,c
  2912  00F094  1249               	iorwf	initSD@tempSize+2,f,c
  2913  00F096  503F               	movf	??_initSD+5,w,c
  2914  00F098  124A               	iorwf	initSD@tempSize+3,f,c
  2915                           
  2916                           ;SD_PIC.c: 537: tempSize |= (unsigned long)(arr_response[7] & 0x3F) << 16;
  2917  00F09A  C052  F03A         	movff	initSD@arr_response+7,??_initSD
  2918  00F09E  0E3F               	movlw	63
  2919  00F0A0  163A               	andwf	??_initSD,f,c
  2920  00F0A2  C03A  F03B         	movff	??_initSD,??_initSD+1
  2921  00F0A6  6A3C               	clrf	(??_initSD+2)& (0+255),c
  2922  00F0A8  6A3D               	clrf	(??_initSD+3)& (0+255),c
  2923  00F0AA  6A3E               	clrf	(??_initSD+4)& (0+255),c
  2924  00F0AC  C03C  F03E         	movff	??_initSD+2,??_initSD+4
  2925  00F0B0  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  2926  00F0B4  6A3C               	clrf	??_initSD+2,c
  2927  00F0B6  6A3B               	clrf	??_initSD+1,c
  2928  00F0B8  503B               	movf	??_initSD+1,w,c
  2929  00F0BA  1247               	iorwf	initSD@tempSize,f,c
  2930  00F0BC  503C               	movf	??_initSD+2,w,c
  2931  00F0BE  1248               	iorwf	initSD@tempSize+1,f,c
  2932  00F0C0  503D               	movf	??_initSD+3,w,c
  2933  00F0C2  1249               	iorwf	initSD@tempSize+2,f,c
  2934  00F0C4  503E               	movf	??_initSD+4,w,c
  2935  00F0C6  124A               	iorwf	initSD@tempSize+3,f,c
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;SD_PIC.c: 538: SDCard.size = tempSize * 0.524288;
  2939  00F0C8  C047  F009         	movff	initSD@tempSize,___lltoft@c
  2940  00F0CC  C048  F00A         	movff	initSD@tempSize+1,___lltoft@c+1
  2941  00F0D0  C049  F00B         	movff	initSD@tempSize+2,___lltoft@c+2
  2942  00F0D4  C04A  F00C         	movff	initSD@tempSize+3,___lltoft@c+3
  2943  00F0D8  EC4E  F068         	call	___lltoft	;wreg free
  2944  00F0DC  C009  F015         	movff	?___lltoft,___ftmul@f1
  2945  00F0E0  C00A  F016         	movff	?___lltoft+1,___ftmul@f1+1
  2946  00F0E4  C00B  F017         	movff	?___lltoft+2,___ftmul@f1+2
  2947  00F0E8  0E38               	movlw	56
  2948  00F0EA  6E18               	movwf	___ftmul@f2,c
  2949  00F0EC  0E06               	movlw	6
  2950  00F0EE  6E19               	movwf	___ftmul@f2+1,c
  2951  00F0F0  0E3F               	movlw	63
  2952  00F0F2  6E1A               	movwf	___ftmul@f2+2,c
  2953  00F0F4  ECDE  F06C         	call	___ftmul	;wreg free
  2954  00F0F8  C015  F098         	movff	?___ftmul,_SDCard+24
  2955  00F0FC  C016  F099         	movff	?___ftmul+1,_SDCard+25
  2956  00F100  C017  F09A         	movff	?___ftmul+2,_SDCard+26
  2957                           
  2958                           ;SD_PIC.c: 539: SDCard.numBlocks = (unsigned long)(SDCard.size * 2048);
  2959  00F104  0E00               	movlw	0
  2960  00F106  6E18               	movwf	___ftmul@f2,c
  2961  00F108  0E00               	movlw	0
  2962  00F10A  6E19               	movwf	___ftmul@f2+1,c
  2963  00F10C  0E45               	movlw	69
  2964  00F10E  6E1A               	movwf	___ftmul@f2+2,c
  2965  00F110  C098  F015         	movff	_SDCard+24,___ftmul@f1
  2966  00F114  C099  F016         	movff	_SDCard+25,___ftmul@f1+1
  2967  00F118  C09A  F017         	movff	_SDCard+26,___ftmul@f1+2
  2968  00F11C  ECDE  F06C         	call	___ftmul	;wreg free
  2969  00F120  C015  F02B         	movff	?___ftmul,___fttol@f1
  2970  00F124  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2971  00F128  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2972  00F12C  EC64  F06C         	call	___fttol	;wreg free
  2973  00F130  D0BE               	goto	L3
  2974  00F132                     l685:
  2975                           
  2976                           ;SD_PIC.c: 541: else{
  2977                           ;SD_PIC.c: 548: unsigned long tempSize = (unsigned long)(arr_response[6] & 0x03) << 4;
  2978  00F132  C051  F03A         	movff	initSD@arr_response+6,??_initSD
  2979  00F136  0E03               	movlw	3
  2980  00F138  163A               	andwf	??_initSD,f,c
  2981  00F13A  C03A  F03B         	movff	??_initSD,??_initSD+1
  2982  00F13E  6A3C               	clrf	(??_initSD+2)& (0+255),c
  2983  00F140  6A3D               	clrf	(??_initSD+3)& (0+255),c
  2984  00F142  6A3E               	clrf	(??_initSD+4)& (0+255),c
  2985  00F144  0E04               	movlw	4
  2986  00F146                     u4885:
  2987  00F146  90D8               	bcf	status,0,c
  2988  00F148  363B               	rlcf	??_initSD+1,f,c
  2989  00F14A  363C               	rlcf	??_initSD+2,f,c
  2990  00F14C  363D               	rlcf	??_initSD+3,f,c
  2991  00F14E  363E               	rlcf	??_initSD+4,f,c
  2992  00F150  2EE8               	decfsz	wreg,f,c
  2993  00F152  D7F9               	goto	u4885
  2994  00F154  C03B  F061         	movff	??_initSD+1,initSD@tempSize_1254
  2995  00F158  C03C  F062         	movff	??_initSD+2,initSD@tempSize_1254+1
  2996  00F15C  C03D  F063         	movff	??_initSD+3,initSD@tempSize_1254+2
  2997  00F160  C03E  F064         	movff	??_initSD+4,initSD@tempSize_1254+3
  2998                           
  2999                           ;SD_PIC.c: 549: tempSize |= (unsigned long)(arr_response[7] << 2);
  3000  00F164  5052               	movf	initSD@arr_response+7,w,c
  3001  00F166  6E3A               	movwf	??_initSD& (0+255),c
  3002  00F168  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3003  00F16A  90D8               	bcf	status,0,c
  3004  00F16C  363A               	rlcf	??_initSD,f,c
  3005  00F16E  363B               	rlcf	??_initSD+1,f,c
  3006  00F170  90D8               	bcf	status,0,c
  3007  00F172  363A               	rlcf	??_initSD,f,c
  3008  00F174  363B               	rlcf	??_initSD+1,f,c
  3009  00F176  C03A  F03C         	movff	??_initSD,??_initSD+2
  3010  00F17A  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  3011  00F17E  0E00               	movlw	0
  3012  00F180  BE3D               	btfsc	(??_initSD+3)& (0+255),7,c
  3013  00F182  0EFF               	movlw	255
  3014  00F184  6E3E               	movwf	(??_initSD+4)& (0+255),c
  3015  00F186  6E3F               	movwf	(??_initSD+5)& (0+255),c
  3016  00F188  503C               	movf	??_initSD+2,w,c
  3017  00F18A  1261               	iorwf	initSD@tempSize_1254,f,c
  3018  00F18C  503D               	movf	??_initSD+3,w,c
  3019  00F18E  1262               	iorwf	initSD@tempSize_1254+1,f,c
  3020  00F190  503E               	movf	??_initSD+4,w,c
  3021  00F192  1263               	iorwf	initSD@tempSize_1254+2,f,c
  3022  00F194  503F               	movf	??_initSD+5,w,c
  3023  00F196  1264               	iorwf	initSD@tempSize_1254+3,f,c
  3024                           
  3025                           ;SD_PIC.c: 550: tempSize |= (unsigned long)((arr_response[8] & 0xC0) >> 2) + 1;
  3026  00F198  C053  F03A         	movff	initSD@arr_response+8,??_initSD
  3027  00F19C  90D8               	bcf	status,0,c
  3028  00F19E  323A               	rrcf	??_initSD,f,c
  3029  00F1A0  90D8               	bcf	status,0,c
  3030  00F1A2  323A               	rrcf	??_initSD,f,c
  3031  00F1A4  0E30               	movlw	48
  3032  00F1A6  163A               	andwf	??_initSD,f,c
  3033  00F1A8  0E01               	movlw	1
  3034  00F1AA  243A               	addwf	??_initSD,w,c
  3035  00F1AC  6E3B               	movwf	(??_initSD+1)& (0+255),c
  3036  00F1AE  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3037  00F1B0  0E00               	movlw	0
  3038  00F1B2  223C               	addwfc	(??_initSD+2)& (0+255),f,c
  3039  00F1B4  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3040  00F1B6  0E00               	movlw	0
  3041  00F1B8  223D               	addwfc	(??_initSD+3)& (0+255),f,c
  3042  00F1BA  6A3E               	clrf	(??_initSD+4)& (0+255),c
  3043  00F1BC  0E00               	movlw	0
  3044  00F1BE  223E               	addwfc	(??_initSD+4)& (0+255),f,c
  3045  00F1C0  503B               	movf	??_initSD+1,w,c
  3046  00F1C2  1261               	iorwf	initSD@tempSize_1254,f,c
  3047  00F1C4  503C               	movf	??_initSD+2,w,c
  3048  00F1C6  1262               	iorwf	initSD@tempSize_1254+1,f,c
  3049  00F1C8  503D               	movf	??_initSD+3,w,c
  3050  00F1CA  1263               	iorwf	initSD@tempSize_1254+2,f,c
  3051  00F1CC  503E               	movf	??_initSD+4,w,c
  3052  00F1CE  1264               	iorwf	initSD@tempSize_1254+3,f,c
  3053                           
  3054                           ;SD_PIC.c: 551: tempSize = tempSize << (((unsigned long)
  3055                           ;SD_PIC.c: 552: ((arr_response[9] & 0x03) << 1) |
  3056                           ;SD_PIC.c: 553: (unsigned long)((arr_response[10] & 0x80) >> 7)) + 2);
  3057  00F1D0  C054  F03A         	movff	initSD@arr_response+9,??_initSD
  3058  00F1D4  0E03               	movlw	3
  3059  00F1D6  163A               	andwf	??_initSD,f,c
  3060  00F1D8  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3061  00F1DA  AE55               	btfss	initSD@arr_response+10,7,c
  3062  00F1DC  D001               	bra	u4895
  3063  00F1DE  2A3B               	incf	(??_initSD+1)& (0+255),f,c
  3064  00F1E0                     u4895:
  3065  00F1E0  303B               	rrcf	??_initSD+1,w,c
  3066  00F1E2  343A               	rlcf	??_initSD,w,c
  3067  00F1E4  6E3C               	movwf	(??_initSD+2)& (0+255),c
  3068  00F1E6  0E02               	movlw	2
  3069  00F1E8  263C               	addwf	??_initSD+2,f,c
  3070  00F1EA  C061  F03D         	movff	initSD@tempSize_1254,??_initSD+3
  3071  00F1EE  C062  F03E         	movff	initSD@tempSize_1254+1,??_initSD+4
  3072  00F1F2  C063  F03F         	movff	initSD@tempSize_1254+2,??_initSD+5
  3073  00F1F6  C064  F040         	movff	initSD@tempSize_1254+3,??_initSD+6
  3074  00F1FA  2A3C               	incf	??_initSD+2,f,c
  3075  00F1FC  D005               	goto	u4900
  3076  00F1FE                     u4905:
  3077  00F1FE  90D8               	bcf	status,0,c
  3078  00F200  363D               	rlcf	??_initSD+3,f,c
  3079  00F202  363E               	rlcf	??_initSD+4,f,c
  3080  00F204  363F               	rlcf	??_initSD+5,f,c
  3081  00F206  3640               	rlcf	??_initSD+6,f,c
  3082  00F208                     u4900:
  3083  00F208  2E3C               	decfsz	??_initSD+2,f,c
  3084  00F20A  D7F9               	goto	u4905
  3085  00F20C  C03D  F061         	movff	??_initSD+3,initSD@tempSize_1254
  3086  00F210  C03E  F062         	movff	??_initSD+4,initSD@tempSize_1254+1
  3087  00F214  C03F  F063         	movff	??_initSD+5,initSD@tempSize_1254+2
  3088  00F218  C040  F064         	movff	??_initSD+6,initSD@tempSize_1254+3
  3089                           
  3090                           ;SD_PIC.c: 554: tempSize = tempSize << (unsigned long)(arr_response[5] & 0x0F);
  3091  00F21C  C050  F03A         	movff	initSD@arr_response+5,??_initSD
  3092  00F220  0E0F               	movlw	15
  3093  00F222  163A               	andwf	??_initSD,f,c
  3094  00F224  C061  F03B         	movff	initSD@tempSize_1254,??_initSD+1
  3095  00F228  C062  F03C         	movff	initSD@tempSize_1254+1,??_initSD+2
  3096  00F22C  C063  F03D         	movff	initSD@tempSize_1254+2,??_initSD+3
  3097  00F230  C064  F03E         	movff	initSD@tempSize_1254+3,??_initSD+4
  3098  00F234  2A3A               	incf	??_initSD,f,c
  3099  00F236  D005               	goto	u4910
  3100  00F238                     u4915:
  3101  00F238  90D8               	bcf	status,0,c
  3102  00F23A  363B               	rlcf	??_initSD+1,f,c
  3103  00F23C  363C               	rlcf	??_initSD+2,f,c
  3104  00F23E  363D               	rlcf	??_initSD+3,f,c
  3105  00F240  363E               	rlcf	??_initSD+4,f,c
  3106  00F242                     u4910:
  3107  00F242  2E3A               	decfsz	??_initSD,f,c
  3108  00F244  D7F9               	goto	u4915
  3109  00F246  C03B  F061         	movff	??_initSD+1,initSD@tempSize_1254
  3110  00F24A  C03C  F062         	movff	??_initSD+2,initSD@tempSize_1254+1
  3111  00F24E  C03D  F063         	movff	??_initSD+3,initSD@tempSize_1254+2
  3112  00F252  C03E  F064         	movff	??_initSD+4,initSD@tempSize_1254+3
  3113                           
  3114                           ;SD_PIC.c: 555: SDCard.size = (unsigned long)tempSize;
  3115  00F256  C061  F009         	movff	initSD@tempSize_1254,___lltoft@c
  3116  00F25A  C062  F00A         	movff	initSD@tempSize_1254+1,___lltoft@c+1
  3117  00F25E  C063  F00B         	movff	initSD@tempSize_1254+2,___lltoft@c+2
  3118  00F262  C064  F00C         	movff	initSD@tempSize_1254+3,___lltoft@c+3
  3119  00F266  EC4E  F068         	call	___lltoft	;wreg free
  3120  00F26A  C009  F098         	movff	?___lltoft,_SDCard+24
  3121  00F26E  C00A  F099         	movff	?___lltoft+1,_SDCard+25
  3122  00F272  C00B  F09A         	movff	?___lltoft+2,_SDCard+26
  3123                           
  3124                           ;SD_PIC.c: 556: SDCard.numBlocks = (unsigned long)(SDCard.size / SDCard.blockSize);
  3125  00F276  C092  F009         	movff	_SDCard+18,___lwtoft@c
  3126  00F27A  C093  F00A         	movff	_SDCard+19,___lwtoft@c+1
  3127  00F27E  EC0C  F067         	call	___lwtoft	;wreg free
  3128  00F282  C009  F00F         	movff	?___lwtoft,___ftdiv@f2
  3129  00F286  C00A  F010         	movff	?___lwtoft+1,___ftdiv@f2+1
  3130  00F28A  C00B  F011         	movff	?___lwtoft+2,___ftdiv@f2+2
  3131  00F28E  C098  F00C         	movff	_SDCard+24,___ftdiv@f1
  3132  00F292  C099  F00D         	movff	_SDCard+25,___ftdiv@f1+1
  3133  00F296  C09A  F00E         	movff	_SDCard+26,___ftdiv@f1+2
  3134  00F29A  ECF1  F06B         	call	___ftdiv	;wreg free
  3135  00F29E  C00C  F02B         	movff	?___ftdiv,___fttol@f1
  3136  00F2A2  C00D  F02C         	movff	?___ftdiv+1,___fttol@f1+1
  3137  00F2A6  C00E  F02D         	movff	?___ftdiv+2,___fttol@f1+2
  3138  00F2AA  EC64  F06C         	call	___fttol	;wreg free
  3139  00F2AE                     L3:
  3140  00F2AE  C02B  F094         	movff	?___fttol,_SDCard+20
  3141  00F2B2  C02C  F095         	movff	?___fttol+1,_SDCard+21
  3142  00F2B6  C02D  F096         	movff	?___fttol+2,_SDCard+22
  3143  00F2BA  C02E  F097         	movff	?___fttol+3,_SDCard+23
  3144                           
  3145                           ;SD_PIC.c: 557: }
  3146                           ;SD_PIC.c: 560: SD_Command(CMD10, 0);
  3147  00F2BE  0E00               	movlw	0
  3148  00F2C0  6E04               	movwf	SD_Command@arg,c
  3149  00F2C2  0E00               	movlw	0
  3150  00F2C4  6E05               	movwf	SD_Command@arg+1,c
  3151  00F2C6  0E00               	movlw	0
  3152  00F2C8  6E06               	movwf	SD_Command@arg+2,c
  3153  00F2CA  0E00               	movlw	0
  3154  00F2CC  6E07               	movwf	SD_Command@arg+3,c
  3155  00F2CE  0E5B               	movlw	low _CMD10
  3156  00F2D0  6EF6               	movwf	tblptrl,c
  3157  00F2D2                     	if	1	;There is more than 1 active tblptr byte
  3158  00F2D2  0EFF               	movlw	high _CMD10
  3159  00F2D4  6EF7               	movwf	tblptrh,c
  3160  00F2D6                     	endif
  3161  00F2D6                     	if	0	;There are less than 3 active tblptr bytes
  3162  00F2D6                     	endif
  3163  00F2D6  0008               	tblrd		*
  3164  00F2D8  50F5               	movf	tablat,w,c
  3165  00F2DA  ECE8  F069         	call	_SD_Command
  3166                           
  3167                           ;SD_PIC.c: 562: LATEbits.LATE2 = 0;
  3168  00F2DE  948D               	bcf	3981,2,c	;volatile
  3169  00F2E0                     
  3170                           ;SD_PIC.c: 566: response = spiReceive();
  3171  00F2E0  EC33  F066         	call	_spiReceive	;wreg free
  3172  00F2E4  6E65               	movwf	initSD@response,c
  3173                           
  3174                           ;SD_PIC.c: 567: }while(response != START_BLOCK);
  3175  00F2E6  0E48               	movlw	low _START_BLOCK
  3176  00F2E8  6EF6               	movwf	tblptrl,c
  3177  00F2EA                     	if	1	;There is more than 1 active tblptr byte
  3178  00F2EA  0EFF               	movlw	high _START_BLOCK
  3179  00F2EC  6EF7               	movwf	tblptrh,c
  3180  00F2EE                     	endif
  3181  00F2EE                     	if	0	;There are less than 3 active tblptr bytes
  3182  00F2EE                     	endif
  3183  00F2EE  0008               	tblrd		*
  3184  00F2F0  50F5               	movf	tablat,w,c
  3185  00F2F2  6265               	cpfseq	initSD@response,c
  3186  00F2F4  D7F5               	goto	l687
  3187                           
  3188                           ;SD_PIC.c: 569: for(unsigned char i = 0; i < 16; i++){
  3189  00F2F6  0E00               	movlw	0
  3190  00F2F8  6E60               	movwf	initSD@i_1255,c
  3191  00F2FA                     l5062:
  3192  00F2FA  0E0F               	movlw	15
  3193  00F2FC  6460               	cpfsgt	initSD@i_1255,c
  3194  00F2FE  D001               	goto	l689
  3195  00F300  D00D               	goto	u4940
  3196  00F302                     l689:
  3197                           
  3198                           ;SD_PIC.c: 570: arr_response[i] = spiReceive();
  3199  00F302  5060               	movf	initSD@i_1255,w,c
  3200  00F304  0D01               	mullw	1
  3201  00F306  0E4B               	movlw	low initSD@arr_response
  3202  00F308  24F3               	addwf	prodl,w,c
  3203  00F30A  6ED9               	movwf	fsr2l,c
  3204  00F30C  0E00               	movlw	high initSD@arr_response
  3205  00F30E  20F4               	addwfc	prodh,w,c
  3206  00F310  6EDA               	movwf	fsr2h,c
  3207  00F312  EC33  F066         	call	_spiReceive	;wreg free
  3208  00F316  6EDF               	movwf	indf2,c
  3209  00F318  2A60               	incf	initSD@i_1255,f,c
  3210  00F31A  D7EF               	goto	l5062
  3211  00F31C                     u4940:
  3212                           
  3213                           ;SD_PIC.c: 571: }
  3214                           ;SD_PIC.c: 572: spiReceive();
  3215  00F31C  EC33  F066         	call	_spiReceive	;wreg free
  3216                           
  3217                           ;SD_PIC.c: 573: spiReceive();
  3218  00F320  EC33  F066         	call	_spiReceive	;wreg free
  3219                           
  3220                           ;SD_PIC.c: 574: LATEbits.LATE2 = 1;
  3221  00F324  848D               	bsf	3981,2,c	;volatile
  3222                           
  3223                           ;SD_PIC.c: 576: SDCard.MID = arr_response[0];
  3224  00F326  C04B  F082         	movff	initSD@arr_response,_SDCard+2
  3225                           
  3226                           ;SD_PIC.c: 577: SDCard.OID = (unsigned short)(arr_response[1] << 8U) | arr_response[2];
  3227  00F32A  504C               	movf	initSD@arr_response+1,w,c
  3228  00F32C  6E3A               	movwf	??_initSD& (0+255),c
  3229  00F32E  504D               	movf	initSD@arr_response+2,w,c
  3230  00F330  0100               	movlb	0	; () banked
  3231  00F332  6F83               	movwf	(_SDCard+3)& (0+255),b
  3232  00F334  C03A  F084         	movff	??_initSD,_SDCard+4
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;SD_PIC.c: 578: SDCard.PHMH = arr_response[3];
  3236  00F338  C04E  F089         	movff	initSD@arr_response+3,_SDCard+9
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;SD_PIC.c: 582: SDCard.PHML = (unsigned long)arr_response[4] << 24U;
  3240  00F33C  C04F  F03A         	movff	initSD@arr_response+4,??_initSD
  3241  00F340  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3242  00F342  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3243  00F344  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3244  00F346  C03A  F03D         	movff	??_initSD,??_initSD+3
  3245  00F34A  6A3C               	clrf	??_initSD+2,c
  3246  00F34C  6A3B               	clrf	??_initSD+1,c
  3247  00F34E  6A3A               	clrf	??_initSD,c
  3248  00F350  C03A  F085         	movff	??_initSD,_SDCard+5
  3249  00F354  C03B  F086         	movff	??_initSD+1,_SDCard+6
  3250  00F358  C03C  F087         	movff	??_initSD+2,_SDCard+7
  3251  00F35C  C03D  F088         	movff	??_initSD+3,_SDCard+8
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;SD_PIC.c: 583: SDCard.PHML |= (unsigned long)arr_response[5] << 16U;
  3255  00F360  C050  F03A         	movff	initSD@arr_response+5,??_initSD
  3256  00F364  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3257  00F366  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3258  00F368  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3259  00F36A  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  3260  00F36E  C03A  F03C         	movff	??_initSD,??_initSD+2
  3261  00F372  6A3B               	clrf	??_initSD+1,c
  3262  00F374  6A3A               	clrf	??_initSD,c
  3263  00F376  503A               	movf	??_initSD,w,c
  3264  00F378  0100               	movlb	0	; () banked
  3265  00F37A  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  3266  00F37C  503B               	movf	??_initSD+1,w,c
  3267  00F37E  0100               	movlb	0	; () banked
  3268  00F380  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  3269  00F382  503C               	movf	??_initSD+2,w,c
  3270  00F384  0100               	movlb	0	; () banked
  3271  00F386  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  3272  00F388  503D               	movf	??_initSD+3,w,c
  3273  00F38A  0100               	movlb	0	; () banked
  3274  00F38C  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;SD_PIC.c: 584: SDCard.PHML |= (unsigned long)arr_response[6] << 8U;
  3278  00F38E  C051  F03A         	movff	initSD@arr_response+6,??_initSD
  3279  00F392  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3280  00F394  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3281  00F396  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3282  00F398  C03C  F03D         	movff	??_initSD+2,??_initSD+3
  3283  00F39C  C03B  F03C         	movff	??_initSD+1,??_initSD+2
  3284  00F3A0  C03A  F03B         	movff	??_initSD,??_initSD+1
  3285  00F3A4  6A3A               	clrf	??_initSD,c
  3286  00F3A6  503A               	movf	??_initSD,w,c
  3287  00F3A8  0100               	movlb	0	; () banked
  3288  00F3AA  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  3289  00F3AC  503B               	movf	??_initSD+1,w,c
  3290  00F3AE  0100               	movlb	0	; () banked
  3291  00F3B0  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  3292  00F3B2  503C               	movf	??_initSD+2,w,c
  3293  00F3B4  0100               	movlb	0	; () banked
  3294  00F3B6  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  3295  00F3B8  503D               	movf	??_initSD+3,w,c
  3296  00F3BA  0100               	movlb	0	; () banked
  3297  00F3BC  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;SD_PIC.c: 585: SDCard.PHML |= (unsigned long)arr_response[7];
  3301  00F3BE  5052               	movf	initSD@arr_response+7,w,c
  3302  00F3C0  0100               	movlb	0	; () banked
  3303  00F3C2  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;SD_PIC.c: 587: SDCard.PRV = arr_response[8];
  3307  00F3C4  C053  F08A         	movff	initSD@arr_response+8,_SDCard+10
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;SD_PIC.c: 591: SDCard.PSN = (unsigned long)arr_response[9] << 24U;
  3311  00F3C8  C054  F03A         	movff	initSD@arr_response+9,??_initSD
  3312  00F3CC  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3313  00F3CE  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3314  00F3D0  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3315  00F3D2  C03A  F03D         	movff	??_initSD,??_initSD+3
  3316  00F3D6  6A3C               	clrf	??_initSD+2,c
  3317  00F3D8  6A3B               	clrf	??_initSD+1,c
  3318  00F3DA  6A3A               	clrf	??_initSD,c
  3319  00F3DC  C03A  F08B         	movff	??_initSD,_SDCard+11
  3320  00F3E0  C03B  F08C         	movff	??_initSD+1,_SDCard+12
  3321  00F3E4  C03C  F08D         	movff	??_initSD+2,_SDCard+13
  3322  00F3E8  C03D  F08E         	movff	??_initSD+3,_SDCard+14
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;SD_PIC.c: 592: SDCard.PSN |= (unsigned long)arr_response[10] << 16U;
  3326  00F3EC  C055  F03A         	movff	initSD@arr_response+10,??_initSD
  3327  00F3F0  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3328  00F3F2  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3329  00F3F4  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3330  00F3F6  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  3331  00F3FA  C03A  F03C         	movff	??_initSD,??_initSD+2
  3332  00F3FE  6A3B               	clrf	??_initSD+1,c
  3333  00F400  6A3A               	clrf	??_initSD,c
  3334  00F402  503A               	movf	??_initSD,w,c
  3335  00F404  0100               	movlb	0	; () banked
  3336  00F406  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  3337  00F408  503B               	movf	??_initSD+1,w,c
  3338  00F40A  0100               	movlb	0	; () banked
  3339  00F40C  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  3340  00F40E  503C               	movf	??_initSD+2,w,c
  3341  00F410  0100               	movlb	0	; () banked
  3342  00F412  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  3343  00F414  503D               	movf	??_initSD+3,w,c
  3344  00F416  0100               	movlb	0	; () banked
  3345  00F418  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;SD_PIC.c: 593: SDCard.PSN |= (unsigned long)arr_response[11] << 8U;
  3349  00F41A  C056  F03A         	movff	initSD@arr_response+11,??_initSD
  3350  00F41E  6A3B               	clrf	(??_initSD+1)& (0+255),c
  3351  00F420  6A3C               	clrf	(??_initSD+2)& (0+255),c
  3352  00F422  6A3D               	clrf	(??_initSD+3)& (0+255),c
  3353  00F424  C03C  F03D         	movff	??_initSD+2,??_initSD+3
  3354  00F428  C03B  F03C         	movff	??_initSD+1,??_initSD+2
  3355  00F42C  C03A  F03B         	movff	??_initSD,??_initSD+1
  3356  00F430  6A3A               	clrf	??_initSD,c
  3357  00F432  503A               	movf	??_initSD,w,c
  3358  00F434  0100               	movlb	0	; () banked
  3359  00F436  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  3360  00F438  503B               	movf	??_initSD+1,w,c
  3361  00F43A  0100               	movlb	0	; () banked
  3362  00F43C  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  3363  00F43E  503C               	movf	??_initSD+2,w,c
  3364  00F440  0100               	movlb	0	; () banked
  3365  00F442  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  3366  00F444  503D               	movf	??_initSD+3,w,c
  3367  00F446  0100               	movlb	0	; () banked
  3368  00F448  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;SD_PIC.c: 594: SDCard.PSN |= (unsigned long)arr_response[12];
  3372  00F44A  5057               	movf	initSD@arr_response+12,w,c
  3373  00F44C  0100               	movlb	0	; () banked
  3374  00F44E  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;SD_PIC.c: 596: SDCard.MDT = (unsigned short)(((arr_response[13] & 0x0F) << 8U)) |
  3378                           ;SD_PIC.c: 597: (arr_response[14]);
  3379  00F450  5058               	movf	initSD@arr_response+13,w,c
  3380  00F452  0B0F               	andlw	15
  3381  00F454  6E3A               	movwf	??_initSD& (0+255),c
  3382  00F456  5059               	movf	initSD@arr_response+14,w,c
  3383  00F458  0100               	movlb	0	; () banked
  3384  00F45A  6F8F               	movwf	(_SDCard+15)& (0+255),b
  3385  00F45C  C03A  F090         	movff	??_initSD,_SDCard+16
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;SD_PIC.c: 598: SDCard.CRC = arr_response[15] & 0xFE;
  3389  00F460  505A               	movf	initSD@arr_response+15,w,c
  3390  00F462  0BFE               	andlw	254
  3391  00F464  0100               	movlb	0	; () banked
  3392  00F466  6F91               	movwf	(_SDCard+17)& (0+255),b
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;SD_PIC.c: 601: { LATEbits.LATE2 = 1; SSPCON1bits.SSPEN = 0;};
  3396  00F468  848D               	bsf	3981,2,c	;volatile
  3397                           
  3398                           ; BSR set to: 0
  3399  00F46A  9AC6               	bcf	4038,5,c	;volatile
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;SD_PIC.c: 602: OSCCON = last_OSCCON;
  3403  00F46C  C045  FFD3         	movff	initSD@last_OSCCON,4051	;volatile
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;SD_PIC.c: 603: OSCTUNE = last_OSCTUNE;
  3407  00F470  C046  FF9B         	movff	initSD@last_OSCTUNE,3995	;volatile
  3408                           
  3409                           ;SD_PIC.c: 606: while(!OSCCONbits.IOFS){ _delay((unsigned long)((20)*(10000000/4000000.0
      +                          ))); }
  3410  00F474  D004               	goto	l691
  3411  00F476                     
  3412                           ; BSR set to: 0
  3413  00F476  0E10               	movlw	16
  3414  00F478                     u5657:
  3415  00F478  2EE8               	decfsz	wreg,f,c
  3416  00F47A  D7FE               	bra	u5657
  3417  00F47C  D000               	nop2	
  3418  00F47E                     l691:
  3419  00F47E  A4D3               	btfss	4051,2,c	;volatile
  3420  00F480  D7FA               	goto	l692
  3421                           
  3422                           ;SD_PIC.c: 609: spiInit(16);
  3423  00F482  0E10               	movlw	16
  3424  00F484  ECA2  F067         	call	_spiInit
  3425                           
  3426                           ;SD_PIC.c: 612: SDCard.write.MBW_flag_first = 1;
  3427  00F488  0E01               	movlw	1
  3428  00F48A  0100               	movlb	0	; () banked
  3429  00F48C  6FA4               	movwf	(_SDCard+36)& (0+255),b
  3430                           
  3431                           ; BSR set to: 0
  3432                           ;SD_PIC.c: 613: SDCard.write.MBW_startBlock = 0;
  3433  00F48E  0E00               	movlw	0
  3434  00F490  0100               	movlb	0	; () banked
  3435  00F492  6FA0               	movwf	(_SDCard+32)& (0+255),b
  3436  00F494  0E00               	movlw	0
  3437  00F496  6FA1               	movwf	(_SDCard+33)& (0+255),b
  3438  00F498  0E00               	movlw	0
  3439  00F49A  6FA2               	movwf	(_SDCard+34)& (0+255),b
  3440  00F49C  0E00               	movlw	0
  3441  00F49E  6FA3               	movwf	(_SDCard+35)& (0+255),b
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;SD_PIC.c: 614: SDCard.write.lastBlockWritten = 0;
  3445  00F4A0  0E00               	movlw	0
  3446  00F4A2  0100               	movlb	0	; () banked
  3447  00F4A4  6F9C               	movwf	(_SDCard+28)& (0+255),b
  3448  00F4A6  0E00               	movlw	0
  3449  00F4A8  6F9D               	movwf	(_SDCard+29)& (0+255),b
  3450  00F4AA  0E00               	movlw	0
  3451  00F4AC  6F9E               	movwf	(_SDCard+30)& (0+255),b
  3452  00F4AE  0E00               	movlw	0
  3453  00F4B0  6F9F               	movwf	(_SDCard+31)& (0+255),b
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;SD_PIC.c: 615: SDCard.read.MBR_flag_first = 1;
  3457  00F4B2  0E01               	movlw	1
  3458  00F4B4  0100               	movlb	0	; () banked
  3459  00F4B6  6FAD               	movwf	(_SDCard+45)& (0+255),b
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;SD_PIC.c: 616: SDCard.read.MBR_startBlock = 0;
  3463  00F4B8  0E00               	movlw	0
  3464  00F4BA  0100               	movlb	0	; () banked
  3465  00F4BC  6FA9               	movwf	(_SDCard+41)& (0+255),b
  3466  00F4BE  0E00               	movlw	0
  3467  00F4C0  6FAA               	movwf	(_SDCard+42)& (0+255),b
  3468  00F4C2  0E00               	movlw	0
  3469  00F4C4  6FAB               	movwf	(_SDCard+43)& (0+255),b
  3470  00F4C6  0E00               	movlw	0
  3471  00F4C8  6FAC               	movwf	(_SDCard+44)& (0+255),b
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;SD_PIC.c: 617: SDCard.read.lastBlockRead = 0;
  3475  00F4CA  0E00               	movlw	0
  3476  00F4CC  0100               	movlb	0	; () banked
  3477  00F4CE  6FA5               	movwf	(_SDCard+37)& (0+255),b
  3478  00F4D0  0E00               	movlw	0
  3479  00F4D2  6FA6               	movwf	(_SDCard+38)& (0+255),b
  3480  00F4D4  0E00               	movlw	0
  3481  00F4D6  6FA7               	movwf	(_SDCard+39)& (0+255),b
  3482  00F4D8  0E00               	movlw	0
  3483  00F4DA  6FA8               	movwf	(_SDCard+40)& (0+255),b
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;SD_PIC.c: 620: SDCard.init = 1;
  3487  00F4DC  0E01               	movlw	1
  3488  00F4DE  0100               	movlb	0	; () banked
  3489  00F4E0  6F9B               	movwf	(_SDCard+27)& (0+255),b
  3490  00F4E2  0012               	return		;funcret
  3491  00F4E4                     __end_of_initSD:
  3492                           	opt stack 0
  3493                           tblptru	equ	0xFF8
  3494                           tblptrh	equ	0xFF7
  3495                           tblptrl	equ	0xFF6
  3496                           tablat	equ	0xFF5
  3497                           prodh	equ	0xFF4
  3498                           prodl	equ	0xFF3
  3499                           postinc0	equ	0xFEE
  3500                           wreg	equ	0xFE8
  3501                           plusw1	equ	0xFE3
  3502                           indf2	equ	0xFDF
  3503                           postinc2	equ	0xFDE
  3504                           plusw2	equ	0xFDB
  3505                           fsr2h	equ	0xFDA
  3506                           fsr2l	equ	0xFD9
  3507                           status	equ	0xFD8
  3508                           
  3509 ;; *************** function ___lwtoft *****************
  3510 ;; Defined at:
  3511 ;;		line 28 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwtoft.c"
  3512 ;; Parameters:    Size  Location     Type
  3513 ;;  c               2    8[COMRAM] unsigned int 
  3514 ;; Auto vars:     Size  Location     Type
  3515 ;;		None
  3516 ;; Return value:  Size  Location     Type
  3517 ;;                  3    8[COMRAM] float 
  3518 ;; Registers used:
  3519 ;;		wreg, status,2, status,0, cstack
  3520 ;; Tracked objects:
  3521 ;;		On entry : 0/0
  3522 ;;		On exit  : 0/0
  3523 ;;		Unchanged: 0/0
  3524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3525 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;Total ram usage:        3 bytes
  3530 ;; Hardware stack levels used:    1
  3531 ;; Hardware stack levels required when called:    1
  3532 ;; This function calls:
  3533 ;;		___ftpack
  3534 ;; This function is called by:
  3535 ;;		_initSD
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           
  3539                           	psect	text4
  3540  00CE18                     __ptext4:
  3541                           	opt stack 0
  3542  00CE18                     ___lwtoft:
  3543                           	opt stack 27
  3544                           
  3545                           ;incstack = 0
  3546  00CE18  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  3547  00CE1C  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  3548  00CE20  6A03               	clrf	___ftpack@arg+2,c
  3549  00CE22  0E8E               	movlw	142
  3550  00CE24  6E04               	movwf	___ftpack@exp,c
  3551  00CE26  0E00               	movlw	0
  3552  00CE28  6E05               	movwf	___ftpack@sign,c
  3553  00CE2A  EC34  F06B         	call	___ftpack	;wreg free
  3554  00CE2E  C001  F009         	movff	?___ftpack,?___lwtoft
  3555  00CE32  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  3556  00CE36  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  3557  00CE3A  0012               	return	
  3558  00CE3C                     __end_of___lwtoft:
  3559                           	opt stack 0
  3560                           tblptru	equ	0xFF8
  3561                           tblptrh	equ	0xFF7
  3562                           tblptrl	equ	0xFF6
  3563                           tablat	equ	0xFF5
  3564                           prodh	equ	0xFF4
  3565                           prodl	equ	0xFF3
  3566                           postinc0	equ	0xFEE
  3567                           wreg	equ	0xFE8
  3568                           plusw1	equ	0xFE3
  3569                           indf2	equ	0xFDF
  3570                           postinc2	equ	0xFDE
  3571                           plusw2	equ	0xFDB
  3572                           fsr2h	equ	0xFDA
  3573                           fsr2l	equ	0xFD9
  3574                           status	equ	0xFD8
  3575                           
  3576 ;; *************** function ___ftdiv *****************
  3577 ;; Defined at:
  3578 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdiv.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;  f1              3   11[COMRAM] float 
  3581 ;;  f2              3   14[COMRAM] float 
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;  f3              3   21[COMRAM] float 
  3584 ;;  sign            1   25[COMRAM] unsigned char 
  3585 ;;  exp             1   24[COMRAM] unsigned char 
  3586 ;;  cntr            1   20[COMRAM] unsigned char 
  3587 ;; Return value:  Size  Location     Type
  3588 ;;                  3   11[COMRAM] float 
  3589 ;; Registers used:
  3590 ;;		wreg, status,2, status,0, cstack
  3591 ;; Tracked objects:
  3592 ;;		On entry : 0/0
  3593 ;;		On exit  : 0/0
  3594 ;;		Unchanged: 0/0
  3595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3596 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3598 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3599 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3600 ;;Total ram usage:       15 bytes
  3601 ;; Hardware stack levels used:    1
  3602 ;; Hardware stack levels required when called:    1
  3603 ;; This function calls:
  3604 ;;		___ftpack
  3605 ;; This function is called by:
  3606 ;;		_initSD
  3607 ;; This function uses a non-reentrant model
  3608 ;;
  3609                           
  3610                           	psect	text5
  3611  00D7E2                     __ptext5:
  3612                           	opt stack 0
  3613  00D7E2                     ___ftdiv:
  3614                           	opt stack 27
  3615                           
  3616                           ;incstack = 0
  3617  00D7E2  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  3618  00D7E6  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  3619  00D7E8  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  3620  00D7EA  340D               	rlcf	___ftdiv@f1+1,w,c
  3621  00D7EC  3612               	rlcf	??___ftdiv& (0+255),f,c
  3622  00D7EE  E301               	bnc	u3781
  3623  00D7F0  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  3624  00D7F2                     u3781:
  3625  00D7F2  5012               	movf	??___ftdiv,w,c
  3626  00D7F4  6E19               	movwf	___ftdiv@exp,c
  3627  00D7F6  5019               	movf	___ftdiv@exp,w,c
  3628  00D7F8  A4D8               	btfss	status,2,c
  3629  00D7FA  D007               	goto	l1211
  3630  00D7FC  0E00               	movlw	0
  3631  00D7FE  6E0C               	movwf	?___ftdiv,c
  3632  00D800  0E00               	movlw	0
  3633  00D802  6E0D               	movwf	?___ftdiv+1,c
  3634  00D804  0E00               	movlw	0
  3635  00D806  6E0E               	movwf	?___ftdiv+2,c
  3636  00D808  0012               	return	
  3637  00D80A                     l1211:
  3638  00D80A  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  3639  00D80E  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  3640  00D810  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  3641  00D812  3410               	rlcf	___ftdiv@f2+1,w,c
  3642  00D814  3612               	rlcf	??___ftdiv& (0+255),f,c
  3643  00D816  E301               	bnc	u3801
  3644  00D818  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  3645  00D81A                     u3801:
  3646  00D81A  5012               	movf	??___ftdiv,w,c
  3647  00D81C  6E1A               	movwf	___ftdiv@sign,c
  3648  00D81E  501A               	movf	___ftdiv@sign,w,c
  3649  00D820  A4D8               	btfss	status,2,c
  3650  00D822  D007               	goto	l1213
  3651  00D824  0E00               	movlw	0
  3652  00D826  6E0C               	movwf	?___ftdiv,c
  3653  00D828  0E00               	movlw	0
  3654  00D82A  6E0D               	movwf	?___ftdiv+1,c
  3655  00D82C  0E00               	movlw	0
  3656  00D82E  6E0E               	movwf	?___ftdiv+2,c
  3657  00D830  0012               	return	
  3658  00D832                     l1213:
  3659  00D832  0E00               	movlw	0
  3660  00D834  6E16               	movwf	___ftdiv@f3,c
  3661  00D836  0E00               	movlw	0
  3662  00D838  6E17               	movwf	___ftdiv@f3+1,c
  3663  00D83A  0E00               	movlw	0
  3664  00D83C  6E18               	movwf	___ftdiv@f3+2,c
  3665  00D83E  501A               	movf	___ftdiv@sign,w,c
  3666  00D840  0F89               	addlw	137
  3667  00D842  5E19               	subwf	___ftdiv@exp,f,c
  3668  00D844  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
  3669  00D848  5011               	movf	___ftdiv@f2+2,w,c
  3670  00D84A  1A1A               	xorwf	___ftdiv@sign,f,c
  3671  00D84C  0E80               	movlw	128
  3672  00D84E  161A               	andwf	___ftdiv@sign,f,c
  3673  00D850  8E0D               	bsf	___ftdiv@f1+1,7,c
  3674  00D852  0EFF               	movlw	255
  3675  00D854  160C               	andwf	___ftdiv@f1,f,c
  3676  00D856  0EFF               	movlw	255
  3677  00D858  160D               	andwf	___ftdiv@f1+1,f,c
  3678  00D85A  0E00               	movlw	0
  3679  00D85C  160E               	andwf	___ftdiv@f1+2,f,c
  3680  00D85E  8E10               	bsf	___ftdiv@f2+1,7,c
  3681  00D860  0EFF               	movlw	255
  3682  00D862  160F               	andwf	___ftdiv@f2,f,c
  3683  00D864  0EFF               	movlw	255
  3684  00D866  1610               	andwf	___ftdiv@f2+1,f,c
  3685  00D868  0E00               	movlw	0
  3686  00D86A  1611               	andwf	___ftdiv@f2+2,f,c
  3687  00D86C  0E18               	movlw	24
  3688  00D86E  6E15               	movwf	___ftdiv@cntr,c
  3689  00D870  90D8               	bcf	status,0,c
  3690  00D872  3616               	rlcf	___ftdiv@f3,f,c
  3691  00D874  3617               	rlcf	___ftdiv@f3+1,f,c
  3692  00D876  3618               	rlcf	___ftdiv@f3+2,f,c
  3693  00D878  500F               	movf	___ftdiv@f2,w,c
  3694  00D87A  5C0C               	subwf	___ftdiv@f1,w,c
  3695  00D87C  5010               	movf	___ftdiv@f2+1,w,c
  3696  00D87E  580D               	subwfb	___ftdiv@f1+1,w,c
  3697  00D880  5011               	movf	___ftdiv@f2+2,w,c
  3698  00D882  580E               	subwfb	___ftdiv@f1+2,w,c
  3699  00D884  A0D8               	btfss	status,0,c
  3700  00D886  D007               	goto	l1215
  3701  00D888  500F               	movf	___ftdiv@f2,w,c
  3702  00D88A  5E0C               	subwf	___ftdiv@f1,f,c
  3703  00D88C  5010               	movf	___ftdiv@f2+1,w,c
  3704  00D88E  5A0D               	subwfb	___ftdiv@f1+1,f,c
  3705  00D890  5011               	movf	___ftdiv@f2+2,w,c
  3706  00D892  5A0E               	subwfb	___ftdiv@f1+2,f,c
  3707  00D894  8016               	bsf	___ftdiv@f3,0,c
  3708  00D896                     l1215:
  3709  00D896  90D8               	bcf	status,0,c
  3710  00D898  360C               	rlcf	___ftdiv@f1,f,c
  3711  00D89A  360D               	rlcf	___ftdiv@f1+1,f,c
  3712  00D89C  360E               	rlcf	___ftdiv@f1+2,f,c
  3713  00D89E  2E15               	decfsz	___ftdiv@cntr,f,c
  3714  00D8A0  D7E7               	goto	l1214
  3715  00D8A2  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
  3716  00D8A6  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3717  00D8AA  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3718  00D8AE  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
  3719  00D8B2  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
  3720  00D8B6  EC34  F06B         	call	___ftpack	;wreg free
  3721  00D8BA  C001  F00C         	movff	?___ftpack,?___ftdiv
  3722  00D8BE  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
  3723  00D8C2  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
  3724  00D8C6  0012               	return	
  3725  00D8C8                     __end_of___ftdiv:
  3726                           	opt stack 0
  3727                           tblptru	equ	0xFF8
  3728                           tblptrh	equ	0xFF7
  3729                           tblptrl	equ	0xFF6
  3730                           tablat	equ	0xFF5
  3731                           prodh	equ	0xFF4
  3732                           prodl	equ	0xFF3
  3733                           postinc0	equ	0xFEE
  3734                           wreg	equ	0xFE8
  3735                           plusw1	equ	0xFE3
  3736                           indf2	equ	0xFDF
  3737                           postinc2	equ	0xFDE
  3738                           plusw2	equ	0xFDB
  3739                           fsr2h	equ	0xFDA
  3740                           fsr2l	equ	0xFD9
  3741                           status	equ	0xFD8
  3742                           
  3743 ;; *************** function _SD_ACMD *****************
  3744 ;; Defined at:
  3745 ;;		line 97 in file "SD_PIC.c"
  3746 ;; Parameters:    Size  Location     Type
  3747 ;;  cmd             1    wreg     unsigned char 
  3748 ;;  arg             4   10[COMRAM] unsigned long 
  3749 ;; Auto vars:     Size  Location     Type
  3750 ;;  cmd             1   14[COMRAM] unsigned char 
  3751 ;; Return value:  Size  Location     Type
  3752 ;;                  1    wreg      unsigned char 
  3753 ;; Registers used:
  3754 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3755 ;; Tracked objects:
  3756 ;;		On entry : 0/0
  3757 ;;		On exit  : 0/0
  3758 ;;		Unchanged: 0/0
  3759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3760 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3761 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3763 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;Total ram usage:        5 bytes
  3765 ;; Hardware stack levels used:    1
  3766 ;; Hardware stack levels required when called:    3
  3767 ;; This function calls:
  3768 ;;		_SD_Command
  3769 ;; This function is called by:
  3770 ;;		_initSD
  3771 ;;		_SD_MBW_Start
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           	psect	text6
  3776  00CF7C                     __ptext6:
  3777                           	opt stack 0
  3778  00CF7C                     _SD_ACMD:
  3779                           	opt stack 25
  3780                           
  3781                           ;incstack = 0
  3782                           ;SD_ACMD@cmd stored from wreg
  3783  00CF7C  6E0F               	movwf	SD_ACMD@cmd,c
  3784                           
  3785                           ;SD_PIC.c: 100: SD_Command(CMD55, 0);
  3786  00CF7E  0E00               	movlw	0
  3787  00CF80  6E04               	movwf	SD_Command@arg,c
  3788  00CF82  0E00               	movlw	0
  3789  00CF84  6E05               	movwf	SD_Command@arg+1,c
  3790  00CF86  0E00               	movlw	0
  3791  00CF88  6E06               	movwf	SD_Command@arg+2,c
  3792  00CF8A  0E00               	movlw	0
  3793  00CF8C  6E07               	movwf	SD_Command@arg+3,c
  3794  00CF8E  0E50               	movlw	low _CMD55
  3795  00CF90  6EF6               	movwf	tblptrl,c
  3796  00CF92                     	if	1	;There is more than 1 active tblptr byte
  3797  00CF92  0EFF               	movlw	high _CMD55
  3798  00CF94  6EF7               	movwf	tblptrh,c
  3799  00CF96                     	endif
  3800  00CF96                     	if	0	;There are less than 3 active tblptr bytes
  3801  00CF96                     	endif
  3802  00CF96  0008               	tblrd		*
  3803  00CF98  50F5               	movf	tablat,w,c
  3804  00CF9A  ECE8  F069         	call	_SD_Command
  3805                           
  3806                           ;SD_PIC.c: 101: return SD_Command(cmd, arg);
  3807  00CF9E  C00B  F004         	movff	SD_ACMD@arg,SD_Command@arg
  3808  00CFA2  C00C  F005         	movff	SD_ACMD@arg+1,SD_Command@arg+1
  3809  00CFA6  C00D  F006         	movff	SD_ACMD@arg+2,SD_Command@arg+2
  3810  00CFAA  C00E  F007         	movff	SD_ACMD@arg+3,SD_Command@arg+3
  3811  00CFAE  500F               	movf	SD_ACMD@cmd,w,c
  3812  00CFB0  ECE8  F069         	call	_SD_Command
  3813  00CFB4  0012               	return	
  3814  00CFB6                     __end_of_SD_ACMD:
  3815                           	opt stack 0
  3816                           tblptru	equ	0xFF8
  3817                           tblptrh	equ	0xFF7
  3818                           tblptrl	equ	0xFF6
  3819                           tablat	equ	0xFF5
  3820                           prodh	equ	0xFF4
  3821                           prodl	equ	0xFF3
  3822                           postinc0	equ	0xFEE
  3823                           wreg	equ	0xFE8
  3824                           plusw1	equ	0xFE3
  3825                           indf2	equ	0xFDF
  3826                           postinc2	equ	0xFDE
  3827                           plusw2	equ	0xFDB
  3828                           fsr2h	equ	0xFDA
  3829                           fsr2l	equ	0xFD9
  3830                           status	equ	0xFD8
  3831                           
  3832 ;; *************** function _SD_Command *****************
  3833 ;; Defined at:
  3834 ;;		line 55 in file "SD_PIC.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  cmd             1    wreg     unsigned char 
  3837 ;;  arg             4    3[COMRAM] unsigned long 
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;  cmd             1    8[COMRAM] unsigned char 
  3840 ;;  response        1    9[COMRAM] unsigned char 
  3841 ;;  n               1    7[COMRAM] unsigned char 
  3842 ;; Return value:  Size  Location     Type
  3843 ;;                  1    wreg      unsigned char 
  3844 ;; Registers used:
  3845 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3846 ;; Tracked objects:
  3847 ;;		On entry : 0/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3851 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;Total ram usage:        7 bytes
  3856 ;; Hardware stack levels used:    1
  3857 ;; Hardware stack levels required when called:    2
  3858 ;; This function calls:
  3859 ;;		_spiReceive
  3860 ;;		_spiSend
  3861 ;; This function is called by:
  3862 ;;		_SD_ACMD
  3863 ;;		_initSD
  3864 ;;		_SD_SingleBlockWrite
  3865 ;;		_SD_MBW_Start
  3866 ;;		_SD_MBW_Send
  3867 ;;		_SD_SingleBlockRead
  3868 ;;		_SD_MBR_Start
  3869 ;;		_SD_MBR_Stop
  3870 ;;		_SD_EraseBlocks
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           	psect	text7
  3875  00D3D0                     __ptext7:
  3876                           	opt stack 0
  3877  00D3D0                     _SD_Command:
  3878                           	opt stack 26
  3879                           
  3880                           ;incstack = 0
  3881                           ;SD_Command@cmd stored from wreg
  3882  00D3D0  6E09               	movwf	SD_Command@cmd,c
  3883                           
  3884                           ;SD_PIC.c: 56: LATEbits.LATE2 = 0;
  3885  00D3D2  948D               	bcf	3981,2,c	;volatile
  3886  00D3D4                     
  3887                           ;SD_PIC.c: 62: continue;
  3888  00D3D4  EC33  F066         	call	_spiReceive	;wreg free
  3889  00D3D8  0AFF               	xorlw	255
  3890  00D3DA  A4D8               	btfss	status,2,c
  3891  00D3DC  D7FB               	goto	l533
  3892                           
  3893                           ;SD_PIC.c: 63: }
  3894                           ;SD_PIC.c: 66: spiSend(cmd | 0x40U);
  3895  00D3DE  5009               	movf	SD_Command@cmd,w,c
  3896  00D3E0  0940               	iorlw	64
  3897  00D3E2  EC37  F066         	call	_spiSend
  3898                           
  3899                           ;SD_PIC.c: 69: spiSend(arg >> 24);
  3900  00D3E6  5007               	movf	SD_Command@arg+3,w,c
  3901  00D3E8  EC37  F066         	call	_spiSend
  3902                           
  3903                           ;SD_PIC.c: 70: spiSend((arg >> 16) & 0xFF);
  3904  00D3EC  5006               	movf	SD_Command@arg+2,w,c
  3905  00D3EE  EC37  F066         	call	_spiSend
  3906                           
  3907                           ;SD_PIC.c: 71: spiSend((arg >> 8) & 0xFF);
  3908  00D3F2  5005               	movf	SD_Command@arg+1,w,c
  3909  00D3F4  EC37  F066         	call	_spiSend
  3910                           
  3911                           ;SD_PIC.c: 72: spiSend(arg & 0xFF);
  3912  00D3F8  5004               	movf	SD_Command@arg,w,c
  3913  00D3FA  EC37  F066         	call	_spiSend
  3914                           
  3915                           ;SD_PIC.c: 77: if(cmd == CMD8){
  3916  00D3FE  0E5E               	movlw	low _CMD8
  3917  00D400  6EF6               	movwf	tblptrl,c
  3918  00D402                     	if	1	;There is more than 1 active tblptr byte
  3919  00D402  0EFF               	movlw	high _CMD8
  3920  00D404  6EF7               	movwf	tblptrh,c
  3921  00D406                     	endif
  3922  00D406                     	if	0	;There are less than 3 active tblptr bytes
  3923  00D406                     	endif
  3924  00D406  0008               	tblrd		*
  3925  00D408  50F5               	movf	tablat,w,c
  3926  00D40A  6209               	cpfseq	SD_Command@cmd,c
  3927  00D40C  D009               	goto	l535
  3928                           
  3929                           ;SD_PIC.c: 78: spiSend(CMD8CRC);
  3930  00D40E  0E5D               	movlw	low _CMD8CRC
  3931  00D410  6EF6               	movwf	tblptrl,c
  3932  00D412                     	if	1	;There is more than 1 active tblptr byte
  3933  00D412  0EFF               	movlw	high _CMD8CRC
  3934  00D414  6EF7               	movwf	tblptrh,c
  3935  00D416                     	endif
  3936  00D416                     	if	0	;There are less than 3 active tblptr bytes
  3937  00D416                     	endif
  3938  00D416  0008               	tblrd		*
  3939  00D418  50F5               	movf	tablat,w,c
  3940  00D41A  EC37  F066         	call	_spiSend
  3941                           
  3942                           ;SD_PIC.c: 79: }
  3943  00D41E  D008               	goto	l536
  3944  00D420                     l535:
  3945                           
  3946                           ;SD_PIC.c: 80: else{
  3947                           ;SD_PIC.c: 81: spiSend(CMD0CRC);
  3948  00D420  0E60               	movlw	low _CMD0CRC
  3949  00D422  6EF6               	movwf	tblptrl,c
  3950  00D424                     	if	1	;There is more than 1 active tblptr byte
  3951  00D424  0EFF               	movlw	high _CMD0CRC
  3952  00D426  6EF7               	movwf	tblptrh,c
  3953  00D428                     	endif
  3954  00D428                     	if	0	;There are less than 3 active tblptr bytes
  3955  00D428                     	endif
  3956  00D428  0008               	tblrd		*
  3957  00D42A  50F5               	movf	tablat,w,c
  3958  00D42C  EC37  F066         	call	_spiSend
  3959  00D430                     l536:
  3960                           
  3961                           ;SD_PIC.c: 82: }
  3962                           ;SD_PIC.c: 85: unsigned char n = 0;
  3963  00D430  0E00               	movlw	0
  3964  00D432  6E08               	movwf	SD_Command@n,c
  3965  00D434                     
  3966                           ;SD_PIC.c: 88: response = spiReceive();
  3967  00D434  EC33  F066         	call	_spiReceive	;wreg free
  3968  00D438  6E0A               	movwf	SD_Command@response,c
  3969                           
  3970                           ;SD_PIC.c: 89: n++;
  3971  00D43A  2A08               	incf	SD_Command@n,f,c
  3972                           
  3973                           ;SD_PIC.c: 90: }while((n < 8) && (response == 0xFF));
  3974  00D43C  0E08               	movlw	8
  3975  00D43E  6008               	cpfslt	SD_Command@n,c
  3976  00D440  D003               	goto	u3060
  3977  00D442  280A               	incf	SD_Command@response,w,c
  3978  00D444  B4D8               	btfsc	status,2,c
  3979  00D446  D7F6               	goto	l537
  3980  00D448                     u3060:
  3981                           
  3982                           ;SD_PIC.c: 92: LATEbits.LATE2 = 1;
  3983  00D448  848D               	bsf	3981,2,c	;volatile
  3984                           
  3985                           ;SD_PIC.c: 94: return response;
  3986  00D44A  500A               	movf	SD_Command@response,w,c
  3987  00D44C  0012               	return	
  3988  00D44E                     __end_of_SD_Command:
  3989                           	opt stack 0
  3990                           tblptru	equ	0xFF8
  3991                           tblptrh	equ	0xFF7
  3992                           tblptrl	equ	0xFF6
  3993                           tablat	equ	0xFF5
  3994                           prodh	equ	0xFF4
  3995                           prodl	equ	0xFF3
  3996                           postinc0	equ	0xFEE
  3997                           wreg	equ	0xFE8
  3998                           plusw1	equ	0xFE3
  3999                           indf2	equ	0xFDF
  4000                           postinc2	equ	0xFDE
  4001                           plusw2	equ	0xFDB
  4002                           fsr2h	equ	0xFDA
  4003                           fsr2l	equ	0xFD9
  4004                           status	equ	0xFD8
  4005                           
  4006 ;; *************** function _spiReceive *****************
  4007 ;; Defined at:
  4008 ;;		line 33 in file "SPI_PIC.c"
  4009 ;; Parameters:    Size  Location     Type
  4010 ;;		None
  4011 ;; Auto vars:     Size  Location     Type
  4012 ;;		None
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  1    wreg      unsigned char 
  4015 ;; Registers used:
  4016 ;;		wreg, status,2, cstack
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4026 ;;Total ram usage:        0 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; Hardware stack levels required when called:    1
  4029 ;; This function calls:
  4030 ;;		_spiTransfer
  4031 ;; This function is called by:
  4032 ;;		_SD_Command
  4033 ;;		_initSD
  4034 ;;		_SD_SingleBlockWrite
  4035 ;;		_SD_MBW_Send
  4036 ;;		_SD_MBW_Stop
  4037 ;;		_SD_SingleBlockRead
  4038 ;;		_SD_MBR_Receive
  4039 ;; This function uses a non-reentrant model
  4040 ;;
  4041                           
  4042                           	psect	text8
  4043  00CC66                     __ptext8:
  4044                           	opt stack 0
  4045  00CC66                     _spiReceive:
  4046                           	opt stack 27
  4047                           
  4048                           ;SPI_PIC.c: 34: return spiTransfer(0xFF);
  4049                           
  4050                           ;incstack = 0
  4051  00CC66  0EFF               	movlw	255
  4052  00CC68  ECE8  F066         	call	_spiTransfer
  4053  00CC6C  0012               	return	
  4054  00CC6E                     __end_of_spiReceive:
  4055                           	opt stack 0
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           prodh	equ	0xFF4
  4061                           prodl	equ	0xFF3
  4062                           postinc0	equ	0xFEE
  4063                           wreg	equ	0xFE8
  4064                           plusw1	equ	0xFE3
  4065                           indf2	equ	0xFDF
  4066                           postinc2	equ	0xFDE
  4067                           plusw2	equ	0xFDB
  4068                           fsr2h	equ	0xFDA
  4069                           fsr2l	equ	0xFD9
  4070                           status	equ	0xFD8
  4071                           
  4072 ;; *************** function _testRTCSet *****************
  4073 ;; Defined at:
  4074 ;;		line 169 in file "main.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;		None
  4077 ;; Auto vars:     Size  Location     Type
  4078 ;;  i               1   21[COMRAM] unsigned char 
  4079 ;; Return value:  Size  Location     Type
  4080 ;;                  1    wreg      void 
  4081 ;; Registers used:
  4082 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4083 ;; Tracked objects:
  4084 ;;		On entry : 0/0
  4085 ;;		On exit  : 0/0
  4086 ;;		Unchanged: 0/0
  4087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4092 ;;Total ram usage:        1 bytes
  4093 ;; Hardware stack levels used:    1
  4094 ;; Hardware stack levels required when called:    2
  4095 ;; This function calls:
  4096 ;;		_I2C_Master_Init
  4097 ;;		_I2C_Master_Start
  4098 ;;		_I2C_Master_Stop
  4099 ;;		_I2C_Master_Write
  4100 ;; This function is called by:
  4101 ;;		_main
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text9
  4106  00D154                     __ptext9:
  4107                           	opt stack 0
  4108  00D154                     _testRTCSet:
  4109                           	opt stack 28
  4110                           
  4111                           ;main.c: 172: static const char happynewyear[7] = {
  4112                           ;main.c: 173: 0x45,
  4113                           ;main.c: 174: 0x59,
  4114                           ;main.c: 175: 0x23,
  4115                           ;main.c: 176: 0x00,
  4116                           ;main.c: 177: 0x31,
  4117                           ;main.c: 178: 0x12,
  4118                           ;main.c: 179: 0x18
  4119                           ;main.c: 180: };
  4120                           ;main.c: 182: I2C_Master_Init(100000);
  4121                           
  4122                           ;incstack = 0
  4123  00D154  0EA0               	movlw	160
  4124  00D156  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  4125  00D158  0E86               	movlw	134
  4126  00D15A  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  4127  00D15C  0E01               	movlw	1
  4128  00D15E  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  4129  00D160  0E00               	movlw	0
  4130  00D162  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  4131  00D164  EC7C  F068         	call	_I2C_Master_Init	;wreg free
  4132                           
  4133                           ;main.c: 183: I2C_Master_Start();
  4134  00D168  EC2B  F066         	call	_I2C_Master_Start	;wreg free
  4135                           
  4136                           ;main.c: 184: I2C_Master_Write(0b11010000);
  4137  00D16C  0E00               	movlw	0
  4138  00D16E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  4139  00D170  0ED0               	movlw	208
  4140  00D172  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  4141  00D174  EC3C  F066         	call	_I2C_Master_Write	;wreg free
  4142                           
  4143                           ;main.c: 185: I2C_Master_Write(0x00);
  4144  00D178  0E00               	movlw	0
  4145  00D17A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  4146  00D17C  0E00               	movlw	0
  4147  00D17E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  4148  00D180  EC3C  F066         	call	_I2C_Master_Write	;wreg free
  4149                           
  4150                           ;main.c: 187: for(unsigned char i = 0; i < 7; i++){
  4151  00D184  0E00               	movlw	0
  4152  00D186  6E16               	movwf	testRTCSet@i,c
  4153  00D188                     l5166:
  4154  00D188  0E06               	movlw	6
  4155  00D18A  6416               	cpfsgt	testRTCSet@i,c
  4156  00D18C  D001               	goto	l141
  4157  00D18E  D010               	goto	u4980
  4158  00D190                     l141:
  4159                           
  4160                           ;main.c: 188: I2C_Master_Write(happynewyear[i]);
  4161  00D190  5016               	movf	testRTCSet@i,w,c
  4162  00D192  0D01               	mullw	1
  4163  00D194  0E12               	movlw	low testRTCSet@happynewyear
  4164  00D196  24F3               	addwf	prodl,w,c
  4165  00D198  6EF6               	movwf	tblptrl,c
  4166  00D19A  0EFF               	movlw	high testRTCSet@happynewyear
  4167  00D19C  20F4               	addwfc	prodh,w,c
  4168  00D19E  6EF7               	movwf	tblptrh,c
  4169  00D1A0                     	if	0	;There are less than 3 active tblptr bytes
  4170  00D1A0                     	endif
  4171  00D1A0  0008               	tblrd		*
  4172  00D1A2  50F5               	movf	tablat,w,c
  4173  00D1A4  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  4174  00D1A6  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  4175  00D1A8  EC3C  F066         	call	_I2C_Master_Write	;wreg free
  4176  00D1AC  2A16               	incf	testRTCSet@i,f,c
  4177  00D1AE  D7EC               	goto	l5166
  4178  00D1B0                     u4980:
  4179                           
  4180                           ;main.c: 189: }
  4181                           ;main.c: 191: I2C_Master_Stop();
  4182  00D1B0  EC2F  F066         	call	_I2C_Master_Stop	;wreg free
  4183  00D1B4  0012               	return		;funcret
  4184  00D1B6                     __end_of_testRTCSet:
  4185                           	opt stack 0
  4186                           tblptru	equ	0xFF8
  4187                           tblptrh	equ	0xFF7
  4188                           tblptrl	equ	0xFF6
  4189                           tablat	equ	0xFF5
  4190                           prodh	equ	0xFF4
  4191                           prodl	equ	0xFF3
  4192                           postinc0	equ	0xFEE
  4193                           wreg	equ	0xFE8
  4194                           plusw1	equ	0xFE3
  4195                           indf2	equ	0xFDF
  4196                           postinc2	equ	0xFDE
  4197                           plusw2	equ	0xFDB
  4198                           fsr2h	equ	0xFDA
  4199                           fsr2l	equ	0xFD9
  4200                           status	equ	0xFD8
  4201                           
  4202 ;; *************** function _testRTCGet *****************
  4203 ;; Defined at:
  4204 ;;		line 200 in file "main.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;		None
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;  i               2  111[COMRAM] int 
  4209 ;;  i               1  113[COMRAM] unsigned char 
  4210 ;;  time            7  104[COMRAM] unsigned char [7]
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  1    wreg      void 
  4213 ;; Registers used:
  4214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;Total ram usage:       11 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:    5
  4227 ;; This function calls:
  4228 ;;		_I2C_Master_Init
  4229 ;;		_I2C_Master_Read
  4230 ;;		_I2C_Master_Start
  4231 ;;		_I2C_Master_Stop
  4232 ;;		_I2C_Master_Write
  4233 ;;		_lcdInst
  4234 ;;		_printf
  4235 ;; This function is called by:
  4236 ;;		_main
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           	psect	text10
  4241  00DAB0                     __ptext10:
  4242                           	opt stack 0
  4243  00DAB0                     _testRTCGet:
  4244                           	opt stack 25
  4245                           
  4246                           ;main.c: 201: I2C_Master_Init(100000);
  4247                           
  4248                           ;incstack = 0
  4249  00DAB0  0EA0               	movlw	160
  4250  00DAB2  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  4251  00DAB4  0E86               	movlw	134
  4252  00DAB6  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  4253  00DAB8  0E01               	movlw	1
  4254  00DABA  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  4255  00DABC  0E00               	movlw	0
  4256  00DABE  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  4257  00DAC0  EC7C  F068         	call	_I2C_Master_Init	;wreg free
  4258  00DAC4                     l146:
  4259                           
  4260                           ;main.c: 205: I2C_Master_Start();
  4261  00DAC4  EC2B  F066         	call	_I2C_Master_Start	;wreg free
  4262                           
  4263                           ;main.c: 206: I2C_Master_Write(0b11010000);
  4264  00DAC8  0E00               	movlw	0
  4265  00DACA  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  4266  00DACC  0ED0               	movlw	208
  4267  00DACE  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  4268  00DAD0  EC3C  F066         	call	_I2C_Master_Write	;wreg free
  4269                           
  4270                           ;main.c: 207: I2C_Master_Write(0x00);
  4271  00DAD4  0E00               	movlw	0
  4272  00DAD6  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  4273  00DAD8  0E00               	movlw	0
  4274  00DADA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  4275  00DADC  EC3C  F066         	call	_I2C_Master_Write	;wreg free
  4276                           
  4277                           ;main.c: 208: I2C_Master_Stop();
  4278  00DAE0  EC2F  F066         	call	_I2C_Master_Stop	;wreg free
  4279                           
  4280                           ;main.c: 211: I2C_Master_Start();
  4281  00DAE4  EC2B  F066         	call	_I2C_Master_Start	;wreg free
  4282                           
  4283                           ;main.c: 212: I2C_Master_Write(0b11010001);
  4284  00DAE8  0E00               	movlw	0
  4285  00DAEA  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  4286  00DAEC  0ED1               	movlw	209
  4287  00DAEE  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  4288  00DAF0  EC3C  F066         	call	_I2C_Master_Write	;wreg free
  4289                           
  4290                           ;main.c: 213: for(unsigned char i = 0; i < 6; i++){
  4291  00DAF4  0E00               	movlw	0
  4292  00DAF6  6E72               	movwf	testRTCGet@i,c
  4293  00DAF8                     l5182:
  4294  00DAF8  0E05               	movlw	5
  4295  00DAFA  6472               	cpfsgt	testRTCGet@i,c
  4296  00DAFC  D001               	goto	l147
  4297  00DAFE  D00E               	goto	u5000
  4298  00DB00                     l147:
  4299                           
  4300                           ;main.c: 214: time[i] = I2C_Master_Read(0);
  4301  00DB00  5072               	movf	testRTCGet@i,w,c
  4302  00DB02  0D01               	mullw	1
  4303  00DB04  0E69               	movlw	low testRTCGet@time
  4304  00DB06  24F3               	addwf	prodl,w,c
  4305  00DB08  6ED9               	movwf	fsr2l,c
  4306  00DB0A  0E00               	movlw	high testRTCGet@time
  4307  00DB0C  20F4               	addwfc	prodh,w,c
  4308  00DB0E  6EDA               	movwf	fsr2h,c
  4309  00DB10  0E00               	movlw	0
  4310  00DB12  ECFA  F066         	call	_I2C_Master_Read
  4311  00DB16  6EDF               	movwf	indf2,c
  4312  00DB18  2A72               	incf	testRTCGet@i,f,c
  4313  00DB1A  D7EE               	goto	l5182
  4314  00DB1C                     u5000:
  4315                           
  4316                           ;main.c: 215: }
  4317                           ;main.c: 216: time[6] = I2C_Master_Read(1);
  4318  00DB1C  0E01               	movlw	1
  4319  00DB1E  ECFA  F066         	call	_I2C_Master_Read
  4320  00DB22  6E6F               	movwf	testRTCGet@time+6,c
  4321                           
  4322                           ;main.c: 217: I2C_Master_Stop();
  4323  00DB24  EC2F  F066         	call	_I2C_Master_Stop	;wreg free
  4324                           
  4325                           ;main.c: 220: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  4326  00DB28  0E01               	movlw	1
  4327  00DB2A  EC41  F066         	call	_lcdInst
  4328  00DB2E  0E11               	movlw	17
  4329  00DB30  6E68               	movwf	??_testRTCGet& (0+255),c
  4330  00DB32  0E3A               	movlw	58
  4331  00DB34                     u5667:
  4332  00DB34  2EE8               	decfsz	wreg,f,c
  4333  00DB36  D7FE               	bra	u5667
  4334  00DB38  2E68               	decfsz	??_testRTCGet& (0+255),f,c
  4335  00DB3A  D7FC               	bra	u5667
  4336  00DB3C  D000               	nop2	
  4337                           
  4338                           ;main.c: 221: printf("%02x/%02x/%02x", time[6],time[5],time[4]);
  4339  00DB3E  0EA9               	movlw	low STR_5
  4340  00DB40  6E40               	movwf	printf@f,c
  4341  00DB42  0EFF               	movlw	high STR_5
  4342  00DB44  6E41               	movwf	printf@f+1,c
  4343  00DB46  C06F  F042         	movff	testRTCGet@time+6,?_printf+2
  4344  00DB4A  6A43               	clrf	?_printf+3,c
  4345  00DB4C  C06E  F044         	movff	testRTCGet@time+5,?_printf+4
  4346  00DB50  6A45               	clrf	?_printf+5,c
  4347  00DB52  C06D  F046         	movff	testRTCGet@time+4,?_printf+6
  4348  00DB56  6A47               	clrf	?_printf+7,c
  4349  00DB58  EC72  F07A         	call	_printf	;wreg free
  4350                           
  4351                           ;main.c: 222: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  4352  00DB5C  0E86               	movlw	low _LCD_LINE2_ADDR
  4353  00DB5E  6EF6               	movwf	tblptrl,c
  4354  00DB60                     	if	1	;There is more than 1 active tblptr byte
  4355  00DB60  0EFF               	movlw	high _LCD_LINE2_ADDR
  4356  00DB62  6EF7               	movwf	tblptrh,c
  4357  00DB64                     	endif
  4358  00DB64                     	if	0	;There are less than 3 active tblptr bytes
  4359  00DB64                     	endif
  4360  00DB64  0008               	tblrd		*
  4361  00DB66  50F5               	movf	tablat,w,c
  4362  00DB68  0980               	iorlw	128
  4363  00DB6A  EC41  F066         	call	_lcdInst
  4364                           
  4365                           ;main.c: 223: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  4366  00DB6E  0EB8               	movlw	low STR_6
  4367  00DB70  6E40               	movwf	printf@f,c
  4368  00DB72  0EFF               	movlw	high STR_6
  4369  00DB74  6E41               	movwf	printf@f+1,c
  4370  00DB76  C06B  F042         	movff	testRTCGet@time+2,?_printf+2
  4371  00DB7A  6A43               	clrf	?_printf+3,c
  4372  00DB7C  C06A  F044         	movff	testRTCGet@time+1,?_printf+4
  4373  00DB80  6A45               	clrf	?_printf+5,c
  4374  00DB82  C069  F046         	movff	testRTCGet@time,?_printf+6
  4375  00DB86  6A47               	clrf	?_printf+7,c
  4376  00DB88  EC72  F07A         	call	_printf	;wreg free
  4377                           
  4378                           ;main.c: 226: for(int i = 0; i < 100; i++){
  4379  00DB8C  0E00               	movlw	0
  4380  00DB8E  6E71               	movwf	testRTCGet@i_629+1,c
  4381  00DB90  0E00               	movlw	0
  4382  00DB92  6E70               	movwf	testRTCGet@i_629,c
  4383  00DB94  BE71               	btfsc	testRTCGet@i_629+1,7,c
  4384  00DB96  D006               	goto	l149
  4385  00DB98  5071               	movf	testRTCGet@i_629+1,w,c
  4386  00DB9A  E194               	bnz	l146
  4387  00DB9C  0E64               	movlw	100
  4388  00DB9E  5C70               	subwf	testRTCGet@i_629,w,c
  4389  00DBA0  B0D8               	btfsc	status,0,c
  4390  00DBA2  D790               	goto	l146
  4391  00DBA4                     l149:
  4392                           
  4393                           ;main.c: 227: _delay((unsigned long)((10)*(10000000/4000.0)));
  4394  00DBA4  0E21               	movlw	33
  4395  00DBA6  6E68               	movwf	??_testRTCGet& (0+255),c
  4396  00DBA8  0E76               	movlw	118
  4397  00DBAA                     u5677:
  4398  00DBAA  2EE8               	decfsz	wreg,f,c
  4399  00DBAC  D7FE               	bra	u5677
  4400  00DBAE  2E68               	decfsz	??_testRTCGet& (0+255),f,c
  4401  00DBB0  D7FC               	bra	u5677
  4402  00DBB2  D000               	nop2	
  4403                           
  4404                           ;main.c: 228: if(PORTBbits.RB1 == 1){
  4405  00DBB4  A281               	btfss	3969,1,c	;volatile
  4406  00DBB6  D003               	goto	l151
  4407  00DBB8                     u5020:
  4408                           
  4409                           ;main.c: 232: continue;
  4410                           
  4411                           ;main.c: 231: while(PORTBbits.RB1 == 1){
  4412  00DBB8  A281               	btfss	3969,1,c	;volatile
  4413  00DBBA  0012               	return	
  4414  00DBBC  D7FD               	goto	u5020
  4415  00DBBE                     l151:
  4416  00DBBE  4A70               	infsnz	testRTCGet@i_629,f,c
  4417  00DBC0  2A71               	incf	testRTCGet@i_629+1,f,c
  4418  00DBC2  BE71               	btfsc	testRTCGet@i_629+1,7,c
  4419  00DBC4  D7EF               	goto	l149
  4420  00DBC6  5071               	movf	testRTCGet@i_629+1,w,c
  4421  00DBC8  E101               	bnz	u5040
  4422  00DBCA  D7E8               	goto	L4
  4423  00DBCC                     u5040:
  4424  00DBCC  D77B               	goto	l146
  4425  00DBCE                     __end_of_testRTCGet:
  4426                           	opt stack 0
  4427                           tblptru	equ	0xFF8
  4428                           tblptrh	equ	0xFF7
  4429                           tblptrl	equ	0xFF6
  4430                           tablat	equ	0xFF5
  4431                           prodh	equ	0xFF4
  4432                           prodl	equ	0xFF3
  4433                           postinc0	equ	0xFEE
  4434                           wreg	equ	0xFE8
  4435                           plusw1	equ	0xFE3
  4436                           indf2	equ	0xFDF
  4437                           postinc2	equ	0xFDE
  4438                           plusw2	equ	0xFDB
  4439                           fsr2h	equ	0xFDA
  4440                           fsr2l	equ	0xFD9
  4441                           status	equ	0xFD8
  4442                           
  4443 ;; *************** function _I2C_Master_Write *****************
  4444 ;; Defined at:
  4445 ;;		line 70 in file "I2C.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;		None
  4450 ;; Return value:  Size  Location     Type
  4451 ;;                  1    wreg      void 
  4452 ;; Registers used:
  4453 ;;		wreg, status,2, status,0, cstack
  4454 ;; Tracked objects:
  4455 ;;		On entry : 0/0
  4456 ;;		On exit  : 0/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4459 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;Total ram usage:        2 bytes
  4464 ;; Hardware stack levels used:    1
  4465 ;; Hardware stack levels required when called:    1
  4466 ;; This function calls:
  4467 ;;		_I2C_Master_Wait
  4468 ;; This function is called by:
  4469 ;;		_testRTCSet
  4470 ;;		_testRTCGet
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474                           	psect	text11
  4475  00CC78                     __ptext11:
  4476                           	opt stack 0
  4477  00CC78                     _I2C_Master_Write:
  4478                           	opt stack 28
  4479                           
  4480                           ;I2C.c: 71: I2C_Master_Wait();
  4481                           
  4482                           ;incstack = 0
  4483  00CC78  EC56  F066         	call	_I2C_Master_Wait	;wreg free
  4484                           
  4485                           ;I2C.c: 74: SSPBUF = byteToWrite;
  4486  00CC7C  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  4487  00CC80  0012               	return		;funcret
  4488  00CC82                     __end_of_I2C_Master_Write:
  4489                           	opt stack 0
  4490                           tblptru	equ	0xFF8
  4491                           tblptrh	equ	0xFF7
  4492                           tblptrl	equ	0xFF6
  4493                           tablat	equ	0xFF5
  4494                           prodh	equ	0xFF4
  4495                           prodl	equ	0xFF3
  4496                           postinc0	equ	0xFEE
  4497                           wreg	equ	0xFE8
  4498                           plusw1	equ	0xFE3
  4499                           indf2	equ	0xFDF
  4500                           postinc2	equ	0xFDE
  4501                           plusw2	equ	0xFDB
  4502                           fsr2h	equ	0xFDA
  4503                           fsr2l	equ	0xFD9
  4504                           status	equ	0xFD8
  4505                           
  4506 ;; *************** function _I2C_Master_Stop *****************
  4507 ;; Defined at:
  4508 ;;		line 65 in file "I2C.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;		None
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;		None
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  1    wreg      void 
  4515 ;; Registers used:
  4516 ;;		wreg, status,2, status,0, cstack
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;Total ram usage:        0 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    1
  4529 ;; This function calls:
  4530 ;;		_I2C_Master_Wait
  4531 ;; This function is called by:
  4532 ;;		_testRTCSet
  4533 ;;		_testRTCGet
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           	psect	text12
  4538  00CC5E                     __ptext12:
  4539                           	opt stack 0
  4540  00CC5E                     _I2C_Master_Stop:
  4541                           	opt stack 28
  4542                           
  4543                           ;I2C.c: 66: I2C_Master_Wait();
  4544                           
  4545                           ;incstack = 0
  4546  00CC5E  EC56  F066         	call	_I2C_Master_Wait	;wreg free
  4547                           
  4548                           ;I2C.c: 67: SSPCON2bits.PEN = 1;
  4549  00CC62  84C5               	bsf	4037,2,c	;volatile
  4550  00CC64  0012               	return		;funcret
  4551  00CC66                     __end_of_I2C_Master_Stop:
  4552                           	opt stack 0
  4553                           tblptru	equ	0xFF8
  4554                           tblptrh	equ	0xFF7
  4555                           tblptrl	equ	0xFF6
  4556                           tablat	equ	0xFF5
  4557                           prodh	equ	0xFF4
  4558                           prodl	equ	0xFF3
  4559                           postinc0	equ	0xFEE
  4560                           wreg	equ	0xFE8
  4561                           plusw1	equ	0xFE3
  4562                           indf2	equ	0xFDF
  4563                           postinc2	equ	0xFDE
  4564                           plusw2	equ	0xFDB
  4565                           fsr2h	equ	0xFDA
  4566                           fsr2l	equ	0xFD9
  4567                           status	equ	0xFD8
  4568                           
  4569 ;; *************** function _I2C_Master_Start *****************
  4570 ;; Defined at:
  4571 ;;		line 55 in file "I2C.c"
  4572 ;; Parameters:    Size  Location     Type
  4573 ;;		None
  4574 ;; Auto vars:     Size  Location     Type
  4575 ;;		None
  4576 ;; Return value:  Size  Location     Type
  4577 ;;                  1    wreg      void 
  4578 ;; Registers used:
  4579 ;;		wreg, status,2, status,0, cstack
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/0
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;Total ram usage:        0 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; Hardware stack levels required when called:    1
  4592 ;; This function calls:
  4593 ;;		_I2C_Master_Wait
  4594 ;; This function is called by:
  4595 ;;		_testRTCSet
  4596 ;;		_testRTCGet
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           	psect	text13
  4601  00CC56                     __ptext13:
  4602                           	opt stack 0
  4603  00CC56                     _I2C_Master_Start:
  4604                           	opt stack 28
  4605                           
  4606                           ;I2C.c: 56: I2C_Master_Wait();
  4607                           
  4608                           ;incstack = 0
  4609  00CC56  EC56  F066         	call	_I2C_Master_Wait	;wreg free
  4610                           
  4611                           ;I2C.c: 57: SSPCON2bits.SEN = 1;
  4612  00CC5A  80C5               	bsf	4037,0,c	;volatile
  4613  00CC5C  0012               	return		;funcret
  4614  00CC5E                     __end_of_I2C_Master_Start:
  4615                           	opt stack 0
  4616                           tblptru	equ	0xFF8
  4617                           tblptrh	equ	0xFF7
  4618                           tblptrl	equ	0xFF6
  4619                           tablat	equ	0xFF5
  4620                           prodh	equ	0xFF4
  4621                           prodl	equ	0xFF3
  4622                           postinc0	equ	0xFEE
  4623                           wreg	equ	0xFE8
  4624                           plusw1	equ	0xFE3
  4625                           indf2	equ	0xFDF
  4626                           postinc2	equ	0xFDE
  4627                           plusw2	equ	0xFDB
  4628                           fsr2h	equ	0xFDA
  4629                           fsr2l	equ	0xFD9
  4630                           status	equ	0xFD8
  4631                           
  4632 ;; *************** function _I2C_Master_Read *****************
  4633 ;; Defined at:
  4634 ;;		line 77 in file "I2C.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;  ackBit          1    wreg     unsigned char 
  4637 ;; Auto vars:     Size  Location     Type
  4638 ;;  ackBit          1    1[COMRAM] unsigned char 
  4639 ;;  receivedByte    1    2[COMRAM] unsigned char 
  4640 ;; Return value:  Size  Location     Type
  4641 ;;                  1    wreg      unsigned char 
  4642 ;; Registers used:
  4643 ;;		wreg, status,2, status,0, cstack
  4644 ;; Tracked objects:
  4645 ;;		On entry : 0/0
  4646 ;;		On exit  : 0/0
  4647 ;;		Unchanged: 0/0
  4648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4650 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4652 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4653 ;;Total ram usage:        2 bytes
  4654 ;; Hardware stack levels used:    1
  4655 ;; Hardware stack levels required when called:    1
  4656 ;; This function calls:
  4657 ;;		_I2C_Master_Wait
  4658 ;; This function is called by:
  4659 ;;		_testRTCGet
  4660 ;; This function uses a non-reentrant model
  4661 ;;
  4662                           
  4663                           	psect	text14
  4664  00CDF4                     __ptext14:
  4665                           	opt stack 0
  4666  00CDF4                     _I2C_Master_Read:
  4667                           	opt stack 28
  4668                           
  4669                           ;incstack = 0
  4670                           ;I2C_Master_Read@ackBit stored from wreg
  4671  00CDF4  6E02               	movwf	I2C_Master_Read@ackBit,c
  4672                           
  4673                           ;I2C.c: 78: I2C_Master_Wait();
  4674  00CDF6  EC56  F066         	call	_I2C_Master_Wait	;wreg free
  4675                           
  4676                           ;I2C.c: 79: SSPCON2bits.RCEN = 1;
  4677  00CDFA  86C5               	bsf	4037,3,c	;volatile
  4678                           
  4679                           ;I2C.c: 81: I2C_Master_Wait();
  4680  00CDFC  EC56  F066         	call	_I2C_Master_Wait	;wreg free
  4681                           
  4682                           ;I2C.c: 84: unsigned char receivedByte = SSPBUF;
  4683  00CE00  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  4684                           
  4685                           ;I2C.c: 86: I2C_Master_Wait();
  4686  00CE04  EC56  F066         	call	_I2C_Master_Wait	;wreg free
  4687                           
  4688                           ;I2C.c: 87: SSPCON2bits.ACKDT = ackBit;
  4689  00CE08  B002               	btfsc	I2C_Master_Read@ackBit,0,c
  4690  00CE0A  D002               	bra	u1735
  4691  00CE0C  9AC5               	bcf	4037,5,c	;volatile
  4692  00CE0E  D001               	bra	u1736
  4693  00CE10                     u1735:
  4694  00CE10  8AC5               	bsf	4037,5,c	;volatile
  4695  00CE12                     u1736:
  4696                           
  4697                           ;I2C.c: 88: SSPCON2bits.ACKEN = 1;
  4698  00CE12  88C5               	bsf	4037,4,c	;volatile
  4699                           
  4700                           ;I2C.c: 90: return receivedByte;
  4701  00CE14  5003               	movf	I2C_Master_Read@receivedByte,w,c
  4702  00CE16  0012               	return	
  4703  00CE18                     __end_of_I2C_Master_Read:
  4704                           	opt stack 0
  4705                           tblptru	equ	0xFF8
  4706                           tblptrh	equ	0xFF7
  4707                           tblptrl	equ	0xFF6
  4708                           tablat	equ	0xFF5
  4709                           prodh	equ	0xFF4
  4710                           prodl	equ	0xFF3
  4711                           postinc0	equ	0xFEE
  4712                           wreg	equ	0xFE8
  4713                           plusw1	equ	0xFE3
  4714                           indf2	equ	0xFDF
  4715                           postinc2	equ	0xFDE
  4716                           plusw2	equ	0xFDB
  4717                           fsr2h	equ	0xFDA
  4718                           fsr2l	equ	0xFD9
  4719                           status	equ	0xFD8
  4720                           
  4721 ;; *************** function _I2C_Master_Wait *****************
  4722 ;; Defined at:
  4723 ;;		line 21 in file "I2C.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;		None
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  1    wreg      void 
  4730 ;; Registers used:
  4731 ;;		wreg, status,2, status,0
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4741 ;;Total ram usage:        1 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; This function calls:
  4744 ;;		Nothing
  4745 ;; This function is called by:
  4746 ;;		_I2C_Master_Start
  4747 ;;		_I2C_Master_Stop
  4748 ;;		_I2C_Master_Write
  4749 ;;		_I2C_Master_Read
  4750 ;;		_I2C_Master_RepeatedStart
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           	psect	text15
  4755  00CCAC                     __ptext15:
  4756                           	opt stack 0
  4757  00CCAC                     _I2C_Master_Wait:
  4758                           	opt stack 28
  4759                           
  4760                           ;I2C.c: 27: continue;
  4761                           
  4762                           ;I2C.c: 26: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F)){
  4763                           
  4764                           ;incstack = 0
  4765  00CCAC  B4C7               	btfsc	4039,2,c	;volatile
  4766  00CCAE  D7FE               	goto	_I2C_Master_Wait
  4767  00CCB0  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  4768  00CCB4  0E1F               	movlw	31
  4769  00CCB6  1601               	andwf	??_I2C_Master_Wait,f,c
  4770  00CCB8  B4D8               	btfsc	status,2,c
  4771  00CCBA  0012               	return	
  4772  00CCBC  D7F7               	goto	_I2C_Master_Wait
  4773  00CCBE                     __end_of_I2C_Master_Wait:
  4774                           	opt stack 0
  4775                           tblptru	equ	0xFF8
  4776                           tblptrh	equ	0xFF7
  4777                           tblptrl	equ	0xFF6
  4778                           tablat	equ	0xFF5
  4779                           prodh	equ	0xFF4
  4780                           prodl	equ	0xFF3
  4781                           postinc0	equ	0xFEE
  4782                           wreg	equ	0xFE8
  4783                           plusw1	equ	0xFE3
  4784                           indf2	equ	0xFDF
  4785                           postinc2	equ	0xFDE
  4786                           plusw2	equ	0xFDB
  4787                           fsr2h	equ	0xFDA
  4788                           fsr2l	equ	0xFD9
  4789                           status	equ	0xFD8
  4790                           
  4791 ;; *************** function _I2C_Master_Init *****************
  4792 ;; Defined at:
  4793 ;;		line 32 in file "I2C.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;		None
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  1    wreg      void 
  4800 ;; Registers used:
  4801 ;;		wreg, status,2, status,0, cstack
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4807 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4809 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4810 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4811 ;;Total ram usage:        8 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    1
  4814 ;; This function calls:
  4815 ;;		___lldiv
  4816 ;; This function is called by:
  4817 ;;		_testRTCSet
  4818 ;;		_testRTCGet
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           	psect	text16
  4823  00D0F8                     __ptext16:
  4824                           	opt stack 0
  4825  00D0F8                     _I2C_Master_Init:
  4826                           	opt stack 28
  4827                           
  4828                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  4829                           
  4830                           ;incstack = 0
  4831  00D0F8  9AC6               	bcf	4038,5,c	;volatile
  4832                           
  4833                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  4834  00D0FA  8694               	bsf	3988,3,c	;volatile
  4835                           
  4836                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  4837  00D0FC  8894               	bsf	3988,4,c	;volatile
  4838                           
  4839                           ;I2C.c: 43: SSPADD = (10000000 / (4 * clockFreq)) - 1;
  4840  00D0FE  0E80               	movlw	128
  4841  00D100  6E01               	movwf	___lldiv@dividend,c
  4842  00D102  0E96               	movlw	150
  4843  00D104  6E02               	movwf	___lldiv@dividend+1,c
  4844  00D106  0E98               	movlw	152
  4845  00D108  6E03               	movwf	___lldiv@dividend+2,c
  4846  00D10A  0E00               	movlw	0
  4847  00D10C  6E04               	movwf	___lldiv@dividend+3,c
  4848  00D10E  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  4849  00D112  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  4850  00D116  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  4851  00D11A  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  4852  00D11E  0E02               	movlw	2
  4853  00D120                     u4595:
  4854  00D120  90D8               	bcf	status,0,c
  4855  00D122  3612               	rlcf	??_I2C_Master_Init,f,c
  4856  00D124  3613               	rlcf	??_I2C_Master_Init+1,f,c
  4857  00D126  3614               	rlcf	??_I2C_Master_Init+2,f,c
  4858  00D128  3615               	rlcf	??_I2C_Master_Init+3,f,c
  4859  00D12A  2EE8               	decfsz	wreg,f,c
  4860  00D12C  D7F9               	goto	u4595
  4861  00D12E  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  4862  00D132  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4863  00D136  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4864  00D13A  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4865  00D13E  EC27  F06A         	call	___lldiv	;wreg free
  4866  00D142  0401               	decf	?___lldiv,w,c
  4867  00D144  6EC8               	movwf	4040,c	;volatile
  4868                           
  4869                           ;I2C.c: 46: SSPSTAT = 0b10000000;
  4870  00D146  0E80               	movlw	128
  4871  00D148  6EC7               	movwf	4039,c	;volatile
  4872                           
  4873                           ;I2C.c: 49: SSPCON1 = 0b00101000;
  4874  00D14A  0E28               	movlw	40
  4875  00D14C  6EC6               	movwf	4038,c	;volatile
  4876                           
  4877                           ;I2C.c: 52: SSPCON2 = 0b00000000;
  4878  00D14E  0E00               	movlw	0
  4879  00D150  6EC5               	movwf	4037,c	;volatile
  4880  00D152  0012               	return		;funcret
  4881  00D154                     __end_of_I2C_Master_Init:
  4882                           	opt stack 0
  4883                           tblptru	equ	0xFF8
  4884                           tblptrh	equ	0xFF7
  4885                           tblptrl	equ	0xFF6
  4886                           tablat	equ	0xFF5
  4887                           prodh	equ	0xFF4
  4888                           prodl	equ	0xFF3
  4889                           postinc0	equ	0xFEE
  4890                           wreg	equ	0xFE8
  4891                           plusw1	equ	0xFE3
  4892                           indf2	equ	0xFDF
  4893                           postinc2	equ	0xFDE
  4894                           plusw2	equ	0xFDB
  4895                           fsr2h	equ	0xFDA
  4896                           fsr2l	equ	0xFD9
  4897                           status	equ	0xFD8
  4898                           
  4899 ;; *************** function _testIO *****************
  4900 ;; Defined at:
  4901 ;;		line 280 in file "main.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;		None
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;  i               1    3[COMRAM] unsigned char 
  4906 ;;  temp            1    2[COMRAM] unsigned char 
  4907 ;; Return value:  Size  Location     Type
  4908 ;;                  1    wreg      void 
  4909 ;; Registers used:
  4910 ;;		wreg, status,2, status,0
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4917 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4918 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4919 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;Total ram usage:        4 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; This function calls:
  4923 ;;		Nothing
  4924 ;; This function is called by:
  4925 ;;		_main
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929                           	psect	text17
  4930  00DE28                     __ptext17:
  4931                           	opt stack 0
  4932  00DE28                     _testIO:
  4933                           	opt stack 30
  4934                           
  4935                           ;main.c: 287: TXSTAbits.TXEN = 0;
  4936                           
  4937                           ;incstack = 0
  4938  00DE28  9AAC               	bcf	4012,5,c	;volatile
  4939                           
  4940                           ;main.c: 288: RCSTAbits.SPEN = 0;
  4941  00DE2A  9EAB               	bcf	4011,7,c	;volatile
  4942                           
  4943                           ;main.c: 294: SSPCON1bits.SSPEN = 0;
  4944  00DE2C  9AC6               	bcf	4038,5,c	;volatile
  4945                           
  4946                           ;main.c: 297: LATA = 0x00;
  4947  00DE2E  0E00               	movlw	0
  4948  00DE30  6E89               	movwf	3977,c	;volatile
  4949                           
  4950                           ;main.c: 298: LATB = 0x00;
  4951  00DE32  0E00               	movlw	0
  4952  00DE34  6E8A               	movwf	3978,c	;volatile
  4953                           
  4954                           ;main.c: 299: LATC = 0x00;
  4955  00DE36  0E00               	movlw	0
  4956  00DE38  6E8B               	movwf	3979,c	;volatile
  4957                           
  4958                           ;main.c: 300: LATD = 0x00;
  4959  00DE3A  0E00               	movlw	0
  4960  00DE3C  6E8C               	movwf	3980,c	;volatile
  4961                           
  4962                           ;main.c: 301: LATE = 0x00;
  4963  00DE3E  0E00               	movlw	0
  4964  00DE40  6E8D               	movwf	3981,c	;volatile
  4965                           
  4966                           ;main.c: 302: TRISA = 0x00;
  4967  00DE42  0E00               	movlw	0
  4968  00DE44  6E92               	movwf	3986,c	;volatile
  4969                           
  4970                           ;main.c: 303: TRISB = 0x00;
  4971  00DE46  0E00               	movlw	0
  4972  00DE48  6E93               	movwf	3987,c	;volatile
  4973                           
  4974                           ;main.c: 304: TRISC = 0x00;
  4975  00DE4A  0E00               	movlw	0
  4976  00DE4C  6E94               	movwf	3988,c	;volatile
  4977                           
  4978                           ;main.c: 305: TRISD = 0x00;
  4979  00DE4E  0E00               	movlw	0
  4980  00DE50  6E95               	movwf	3989,c	;volatile
  4981                           
  4982                           ;main.c: 306: TRISE = 0x00;
  4983  00DE52  0E00               	movlw	0
  4984  00DE54  6E96               	movwf	3990,c	;volatile
  4985                           
  4986                           ;main.c: 307: unsigned char i = 0;
  4987  00DE56  0E00               	movlw	0
  4988  00DE58  6E04               	movwf	testIO@i,c
  4989                           
  4990                           ;main.c: 308: unsigned char temp = 0x00;
  4991  00DE5A  0E00               	movlw	0
  4992  00DE5C  6E03               	movwf	testIO@temp,c
  4993  00DE5E                     l172:
  4994                           
  4995                           ;main.c: 310: temp = 1 << 7;
  4996  00DE5E  0E80               	movlw	128
  4997  00DE60  6E03               	movwf	testIO@temp,c
  4998                           
  4999                           ;main.c: 313: for (i = 0; i < 8; i++){
  5000  00DE62  0E00               	movlw	0
  5001  00DE64  6E04               	movwf	testIO@i,c
  5002  00DE66                     l3198:
  5003  00DE66  0E07               	movlw	7
  5004  00DE68  6404               	cpfsgt	testIO@i,c
  5005  00DE6A  D001               	goto	l173
  5006  00DE6C  D011               	goto	u2240
  5007  00DE6E                     l173:
  5008                           
  5009                           ;main.c: 314: LATA = temp;
  5010  00DE6E  C003  FF89         	movff	testIO@temp,3977	;volatile
  5011                           
  5012                           ;main.c: 315: temp >>= 1;
  5013  00DE72  90D8               	bcf	status,0,c
  5014  00DE74  3203               	rrcf	testIO@temp,f,c
  5015                           
  5016                           ;main.c: 316: _delay((unsigned long)((500)*(10000000/4000.0)));
  5017  00DE76  0E07               	movlw	7
  5018  00DE78  6E02               	movwf	(??_testIO+1)& (0+255),c
  5019  00DE7A  0E58               	movlw	88
  5020  00DE7C  6E01               	movwf	??_testIO& (0+255),c
  5021  00DE7E  0E5A               	movlw	90
  5022  00DE80                     u5687:
  5023  00DE80  2EE8               	decfsz	wreg,f,c
  5024  00DE82  D7FE               	bra	u5687
  5025  00DE84  2E01               	decfsz	??_testIO& (0+255),f,c
  5026  00DE86  D7FC               	bra	u5687
  5027  00DE88  2E02               	decfsz	(??_testIO+1)& (0+255),f,c
  5028  00DE8A  D7FA               	bra	u5687
  5029  00DE8C  2A04               	incf	testIO@i,f,c
  5030  00DE8E  D7EB               	goto	l3198
  5031  00DE90                     u2240:
  5032                           
  5033                           ;main.c: 317: }
  5034                           ;main.c: 318: LATA = 0x00;
  5035  00DE90  0E00               	movlw	0
  5036  00DE92  6E89               	movwf	3977,c	;volatile
  5037                           
  5038                           ;main.c: 321: temp = 1 << 7;
  5039  00DE94  0E80               	movlw	128
  5040  00DE96  6E03               	movwf	testIO@temp,c
  5041                           
  5042                           ;main.c: 322: for (i = 0; i < 8; i++){
  5043  00DE98  0E00               	movlw	0
  5044  00DE9A  6E04               	movwf	testIO@i,c
  5045  00DE9C                     l3210:
  5046  00DE9C  0E07               	movlw	7
  5047  00DE9E  6404               	cpfsgt	testIO@i,c
  5048  00DEA0  D001               	goto	l175
  5049  00DEA2  D011               	goto	u2260
  5050  00DEA4                     l175:
  5051                           
  5052                           ;main.c: 323: LATB = temp;
  5053  00DEA4  C003  FF8A         	movff	testIO@temp,3978	;volatile
  5054                           
  5055                           ;main.c: 324: temp >>= 1;
  5056  00DEA8  90D8               	bcf	status,0,c
  5057  00DEAA  3203               	rrcf	testIO@temp,f,c
  5058                           
  5059                           ;main.c: 325: _delay((unsigned long)((500)*(10000000/4000.0)));
  5060  00DEAC  0E07               	movlw	7
  5061  00DEAE  6E02               	movwf	(??_testIO+1)& (0+255),c
  5062  00DEB0  0E58               	movlw	88
  5063  00DEB2  6E01               	movwf	??_testIO& (0+255),c
  5064  00DEB4  0E5A               	movlw	90
  5065  00DEB6                     u5697:
  5066  00DEB6  2EE8               	decfsz	wreg,f,c
  5067  00DEB8  D7FE               	bra	u5697
  5068  00DEBA  2E01               	decfsz	??_testIO& (0+255),f,c
  5069  00DEBC  D7FC               	bra	u5697
  5070  00DEBE  2E02               	decfsz	(??_testIO+1)& (0+255),f,c
  5071  00DEC0  D7FA               	bra	u5697
  5072  00DEC2  2A04               	incf	testIO@i,f,c
  5073  00DEC4  D7EB               	goto	l3210
  5074  00DEC6                     u2260:
  5075                           
  5076                           ;main.c: 326: }
  5077                           ;main.c: 327: LATB = 0x00;
  5078  00DEC6  0E00               	movlw	0
  5079  00DEC8  6E8A               	movwf	3978,c	;volatile
  5080                           
  5081                           ;main.c: 329: temp = 1 << 7;
  5082  00DECA  0E80               	movlw	128
  5083  00DECC  6E03               	movwf	testIO@temp,c
  5084                           
  5085                           ;main.c: 330: for (i = 0; i < 8; i++){
  5086  00DECE  0E00               	movlw	0
  5087  00DED0  6E04               	movwf	testIO@i,c
  5088  00DED2                     l3222:
  5089  00DED2  0E07               	movlw	7
  5090  00DED4  6404               	cpfsgt	testIO@i,c
  5091  00DED6  D001               	goto	l177
  5092  00DED8  D011               	goto	u2280
  5093  00DEDA                     l177:
  5094                           
  5095                           ;main.c: 331: LATC = temp;
  5096  00DEDA  C003  FF8B         	movff	testIO@temp,3979	;volatile
  5097                           
  5098                           ;main.c: 332: temp >>= 1;
  5099  00DEDE  90D8               	bcf	status,0,c
  5100  00DEE0  3203               	rrcf	testIO@temp,f,c
  5101                           
  5102                           ;main.c: 333: _delay((unsigned long)((500)*(10000000/4000.0)));
  5103  00DEE2  0E07               	movlw	7
  5104  00DEE4  6E02               	movwf	(??_testIO+1)& (0+255),c
  5105  00DEE6  0E58               	movlw	88
  5106  00DEE8  6E01               	movwf	??_testIO& (0+255),c
  5107  00DEEA  0E5A               	movlw	90
  5108  00DEEC                     u5707:
  5109  00DEEC  2EE8               	decfsz	wreg,f,c
  5110  00DEEE  D7FE               	bra	u5707
  5111  00DEF0  2E01               	decfsz	??_testIO& (0+255),f,c
  5112  00DEF2  D7FC               	bra	u5707
  5113  00DEF4  2E02               	decfsz	(??_testIO+1)& (0+255),f,c
  5114  00DEF6  D7FA               	bra	u5707
  5115  00DEF8  2A04               	incf	testIO@i,f,c
  5116  00DEFA  D7EB               	goto	l3222
  5117  00DEFC                     u2280:
  5118                           
  5119                           ;main.c: 334: }
  5120                           ;main.c: 335: LATC = 0x00;
  5121  00DEFC  0E00               	movlw	0
  5122  00DEFE  6E8B               	movwf	3979,c	;volatile
  5123                           
  5124                           ;main.c: 337: temp = 1 << 7;
  5125  00DF00  0E80               	movlw	128
  5126  00DF02  6E03               	movwf	testIO@temp,c
  5127                           
  5128                           ;main.c: 338: for (i = 0; i < 8; i++){
  5129  00DF04  0E00               	movlw	0
  5130  00DF06  6E04               	movwf	testIO@i,c
  5131  00DF08                     l3234:
  5132  00DF08  0E07               	movlw	7
  5133  00DF0A  6404               	cpfsgt	testIO@i,c
  5134  00DF0C  D001               	goto	l179
  5135  00DF0E  D011               	goto	u2300
  5136  00DF10                     l179:
  5137                           
  5138                           ;main.c: 339: LATD = temp;
  5139  00DF10  C003  FF8C         	movff	testIO@temp,3980	;volatile
  5140                           
  5141                           ;main.c: 340: temp >>= 1;
  5142  00DF14  90D8               	bcf	status,0,c
  5143  00DF16  3203               	rrcf	testIO@temp,f,c
  5144                           
  5145                           ;main.c: 341: _delay((unsigned long)((500)*(10000000/4000.0)));
  5146  00DF18  0E07               	movlw	7
  5147  00DF1A  6E02               	movwf	(??_testIO+1)& (0+255),c
  5148  00DF1C  0E58               	movlw	88
  5149  00DF1E  6E01               	movwf	??_testIO& (0+255),c
  5150  00DF20  0E5A               	movlw	90
  5151  00DF22                     u5717:
  5152  00DF22  2EE8               	decfsz	wreg,f,c
  5153  00DF24  D7FE               	bra	u5717
  5154  00DF26  2E01               	decfsz	??_testIO& (0+255),f,c
  5155  00DF28  D7FC               	bra	u5717
  5156  00DF2A  2E02               	decfsz	(??_testIO+1)& (0+255),f,c
  5157  00DF2C  D7FA               	bra	u5717
  5158  00DF2E  2A04               	incf	testIO@i,f,c
  5159  00DF30  D7EB               	goto	l3234
  5160  00DF32                     u2300:
  5161                           
  5162                           ;main.c: 342: }
  5163                           ;main.c: 343: LATD = 0x00;
  5164  00DF32  0E00               	movlw	0
  5165  00DF34  6E8C               	movwf	3980,c	;volatile
  5166                           
  5167                           ;main.c: 346: temp = 1 << 2;
  5168  00DF36  0E04               	movlw	4
  5169  00DF38  6E03               	movwf	testIO@temp,c
  5170                           
  5171                           ;main.c: 347: for (i = 0; i < 3; i++){
  5172  00DF3A  0E00               	movlw	0
  5173  00DF3C  6E04               	movwf	testIO@i,c
  5174  00DF3E                     l3246:
  5175  00DF3E  0E02               	movlw	2
  5176  00DF40  6404               	cpfsgt	testIO@i,c
  5177  00DF42  D001               	goto	l181
  5178  00DF44  D011               	goto	u2320
  5179  00DF46                     l181:
  5180                           
  5181                           ;main.c: 348: LATE = temp;
  5182  00DF46  C003  FF8D         	movff	testIO@temp,3981	;volatile
  5183                           
  5184                           ;main.c: 349: temp >>= 1;
  5185  00DF4A  90D8               	bcf	status,0,c
  5186  00DF4C  3203               	rrcf	testIO@temp,f,c
  5187                           
  5188                           ;main.c: 350: _delay((unsigned long)((500)*(10000000/4000.0)));
  5189  00DF4E  0E07               	movlw	7
  5190  00DF50  6E02               	movwf	(??_testIO+1)& (0+255),c
  5191  00DF52  0E58               	movlw	88
  5192  00DF54  6E01               	movwf	??_testIO& (0+255),c
  5193  00DF56  0E5A               	movlw	90
  5194  00DF58                     u5727:
  5195  00DF58  2EE8               	decfsz	wreg,f,c
  5196  00DF5A  D7FE               	bra	u5727
  5197  00DF5C  2E01               	decfsz	??_testIO& (0+255),f,c
  5198  00DF5E  D7FC               	bra	u5727
  5199  00DF60  2E02               	decfsz	(??_testIO+1)& (0+255),f,c
  5200  00DF62  D7FA               	bra	u5727
  5201  00DF64  2A04               	incf	testIO@i,f,c
  5202  00DF66  D7EB               	goto	l3246
  5203  00DF68                     u2320:
  5204                           
  5205                           ;main.c: 351: }
  5206                           ;main.c: 352: LATE = 0x00;
  5207  00DF68  0E00               	movlw	0
  5208  00DF6A  6E8D               	movwf	3981,c	;volatile
  5209  00DF6C  D778               	goto	l172
  5210  00DF6E                     __end_of_testIO:
  5211                           	opt stack 0
  5212                           tblptru	equ	0xFF8
  5213                           tblptrh	equ	0xFF7
  5214                           tblptrl	equ	0xFF6
  5215                           tablat	equ	0xFF5
  5216                           prodh	equ	0xFF4
  5217                           prodl	equ	0xFF3
  5218                           postinc0	equ	0xFEE
  5219                           wreg	equ	0xFE8
  5220                           plusw1	equ	0xFE3
  5221                           indf2	equ	0xFDF
  5222                           postinc2	equ	0xFDE
  5223                           plusw2	equ	0xFDB
  5224                           fsr2h	equ	0xFDA
  5225                           fsr2l	equ	0xFD9
  5226                           status	equ	0xFD8
  5227                           
  5228 ;; *************** function _testGLCD *****************
  5229 ;; Defined at:
  5230 ;;		line 241 in file "main.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;		None
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;		None
  5235 ;; Return value:  Size  Location     Type
  5236 ;;                  1    wreg      void 
  5237 ;; Registers used:
  5238 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5248 ;;Total ram usage:        0 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    6
  5251 ;; This function calls:
  5252 ;;		_glcdDrawRectangle
  5253 ;;		_initGLCD
  5254 ;; This function is called by:
  5255 ;;		_main
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           	psect	text18
  5260  00D286                     __ptext18:
  5261                           	opt stack 0
  5262  00D286                     _testGLCD:
  5263                           	opt stack 24
  5264                           
  5265                           ;main.c: 242: initGLCD();
  5266                           
  5267                           ;incstack = 0
  5268  00D286  EC3D  F073         	call	_initGLCD	;wreg free
  5269                           
  5270                           ;main.c: 243: glcdDrawRectangle(0, 64, 0, 128, RED);
  5271  00D28A  0E40               	movlw	64
  5272  00D28C  6E15               	movwf	glcdDrawRectangle@XE,c
  5273  00D28E  0E00               	movlw	0
  5274  00D290  6E16               	movwf	glcdDrawRectangle@YS,c
  5275  00D292  0E80               	movlw	128
  5276  00D294  6E17               	movwf	glcdDrawRectangle@YE,c
  5277  00D296  0E3D               	movlw	low _RED
  5278  00D298  6EF6               	movwf	tblptrl,c
  5279  00D29A                     	if	1	;There is more than 1 active tblptr byte
  5280  00D29A  0EFF               	movlw	high _RED
  5281  00D29C  6EF7               	movwf	tblptrh,c
  5282  00D29E                     	endif
  5283  00D29E                     	if	0	;There are less than 3 active tblptr bytes
  5284  00D29E                     	endif
  5285  00D29E  0009               	tblrd		*+
  5286  00D2A0  CFF5 F018          	movff	tablat,glcdDrawRectangle@color
  5287  00D2A4  0009               	tblrd		*+
  5288  00D2A6  CFF5 F019          	movff	tablat,glcdDrawRectangle@color+1
  5289  00D2AA  0009               	tblrd		*+
  5290  00D2AC  CFF5 F01A          	movff	tablat,glcdDrawRectangle@color+2
  5291  00D2B0  000A               	tblrd		*-
  5292  00D2B2  CFF5 F01B          	movff	tablat,glcdDrawRectangle@color+3
  5293  00D2B6  0E00               	movlw	0
  5294  00D2B8  ECB7  F06F         	call	_glcdDrawRectangle
  5295                           
  5296                           ;main.c: 244: glcdDrawRectangle(64, 128, 0, 128, VIOLET);
  5297  00D2BC  0E80               	movlw	128
  5298  00D2BE  6E15               	movwf	glcdDrawRectangle@XE,c
  5299  00D2C0  0E00               	movlw	0
  5300  00D2C2  6E16               	movwf	glcdDrawRectangle@YS,c
  5301  00D2C4  0E80               	movlw	128
  5302  00D2C6  6E17               	movwf	glcdDrawRectangle@YE,c
  5303  00D2C8  0E39               	movlw	low _VIOLET
  5304  00D2CA  6EF6               	movwf	tblptrl,c
  5305  00D2CC                     	if	1	;There is more than 1 active tblptr byte
  5306  00D2CC  0EFF               	movlw	high _VIOLET
  5307  00D2CE  6EF7               	movwf	tblptrh,c
  5308  00D2D0                     	endif
  5309  00D2D0                     	if	0	;There are less than 3 active tblptr bytes
  5310  00D2D0                     	endif
  5311  00D2D0  0009               	tblrd		*+
  5312  00D2D2  CFF5 F018          	movff	tablat,glcdDrawRectangle@color
  5313  00D2D6  0009               	tblrd		*+
  5314  00D2D8  CFF5 F019          	movff	tablat,glcdDrawRectangle@color+1
  5315  00D2DC  0009               	tblrd		*+
  5316  00D2DE  CFF5 F01A          	movff	tablat,glcdDrawRectangle@color+2
  5317  00D2E2  000A               	tblrd		*-
  5318  00D2E4  CFF5 F01B          	movff	tablat,glcdDrawRectangle@color+3
  5319  00D2E8  0E40               	movlw	64
  5320  00D2EA  ECB7  F06F         	call	_glcdDrawRectangle
  5321  00D2EE  0012               	return		;funcret
  5322  00D2F0                     __end_of_testGLCD:
  5323                           	opt stack 0
  5324                           tblptru	equ	0xFF8
  5325                           tblptrh	equ	0xFF7
  5326                           tblptrl	equ	0xFF6
  5327                           tablat	equ	0xFF5
  5328                           prodh	equ	0xFF4
  5329                           prodl	equ	0xFF3
  5330                           postinc0	equ	0xFEE
  5331                           wreg	equ	0xFE8
  5332                           plusw1	equ	0xFE3
  5333                           indf2	equ	0xFDF
  5334                           postinc2	equ	0xFDE
  5335                           plusw2	equ	0xFDB
  5336                           fsr2h	equ	0xFDA
  5337                           fsr2l	equ	0xFD9
  5338                           status	equ	0xFD8
  5339                           
  5340 ;; *************** function _initGLCD *****************
  5341 ;; Defined at:
  5342 ;;		line 358 in file "GLCD_PIC.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;		None
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;		None
  5347 ;; Return value:  Size  Location     Type
  5348 ;;                  1    wreg      void 
  5349 ;; Registers used:
  5350 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5351 ;; Tracked objects:
  5352 ;;		On entry : 0/0
  5353 ;;		On exit  : 0/0
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5358 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5359 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5360 ;;Total ram usage:        1 bytes
  5361 ;; Hardware stack levels used:    1
  5362 ;; Hardware stack levels required when called:    5
  5363 ;; This function calls:
  5364 ;;		_glcdDrawRectangle
  5365 ;;		_glcdSetCOLMOD
  5366 ;;		_glcdTransfer
  5367 ;;		_glcd_dispon
  5368 ;;		_glcd_idmoff
  5369 ;;		_glcd_invoff
  5370 ;;		_glcd_noron
  5371 ;;		_glcd_setmadctl
  5372 ;;		_glcd_slpout
  5373 ;;		_glcd_swreset
  5374 ;;		_spiInit
  5375 ;; This function is called by:
  5376 ;;		_testGLCD
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           	psect	text19
  5381  00E67A                     __ptext19:
  5382                           	opt stack 0
  5383  00E67A                     _initGLCD:
  5384                           	opt stack 24
  5385                           
  5386                           ;GLCD_PIC.c: 360: LATDbits.LATD0 = 1;
  5387                           
  5388                           ;incstack = 0
  5389  00E67A  808C               	bsf	3980,0,c	;volatile
  5390                           
  5391                           ;GLCD_PIC.c: 361: LATDbits.LATD1 = 1;
  5392  00E67C  828C               	bsf	3980,1,c	;volatile
  5393                           
  5394                           ;GLCD_PIC.c: 362: TRISDbits.TRISD0 = 0;
  5395  00E67E  9095               	bcf	3989,0,c	;volatile
  5396                           
  5397                           ;GLCD_PIC.c: 363: TRISDbits.TRISD1 = 0;
  5398  00E680  9295               	bcf	3989,1,c	;volatile
  5399                           
  5400                           ;GLCD_PIC.c: 366: spiInit(4);
  5401  00E682  0E04               	movlw	4
  5402  00E684  ECA2  F067         	call	_spiInit
  5403                           
  5404                           ;GLCD_PIC.c: 370: _delay((unsigned long)((20)*(10000000/4000.0)));
  5405  00E688  0E41               	movlw	65
  5406  00E68A  6E28               	movwf	??_initGLCD& (0+255),c
  5407  00E68C  0EEE               	movlw	238
  5408  00E68E                     u5737:
  5409  00E68E  2EE8               	decfsz	wreg,f,c
  5410  00E690  D7FE               	bra	u5737
  5411  00E692  2E28               	decfsz	??_initGLCD& (0+255),f,c
  5412  00E694  D7FC               	bra	u5737
  5413  00E696  D000               	nop2	
  5414                           
  5415                           ;GLCD_PIC.c: 373: glcd_swreset();
  5416  00E698  EC71  F067         	call	_glcd_swreset	;wreg free
  5417                           
  5418                           ;GLCD_PIC.c: 375: glcd_slpout();
  5419  00E69C  EC5A  F067         	call	_glcd_slpout	;wreg free
  5420                           
  5421                           ;GLCD_PIC.c: 378: glcdTransfer(INST_FRMCTR1, CMD);
  5422  00E6A0  0E01               	movlw	1
  5423  00E6A2  6E04               	movwf	glcdTransfer@cmd,c
  5424  00E6A4  0E6C               	movlw	low _INST_FRMCTR1
  5425  00E6A6  6EF6               	movwf	tblptrl,c
  5426  00E6A8                     	if	1	;There is more than 1 active tblptr byte
  5427  00E6A8  0EFF               	movlw	high _INST_FRMCTR1
  5428  00E6AA  6EF7               	movwf	tblptrh,c
  5429  00E6AC                     	endif
  5430  00E6AC                     	if	0	;There are less than 3 active tblptr bytes
  5431  00E6AC                     	endif
  5432  00E6AC  0008               	tblrd		*
  5433  00E6AE  50F5               	movf	tablat,w,c
  5434  00E6B0  EC31  F067         	call	_glcdTransfer
  5435                           
  5436                           ;GLCD_PIC.c: 379: glcdTransfer(0x00, MEMWRITE);
  5437  00E6B4  0E00               	movlw	0
  5438  00E6B6  6E04               	movwf	glcdTransfer@cmd,c
  5439  00E6B8  0E00               	movlw	0
  5440  00E6BA  EC31  F067         	call	_glcdTransfer
  5441                           
  5442                           ;GLCD_PIC.c: 380: glcdTransfer(0x06, MEMWRITE);
  5443  00E6BE  0E00               	movlw	0
  5444  00E6C0  6E04               	movwf	glcdTransfer@cmd,c
  5445  00E6C2  0E06               	movlw	6
  5446  00E6C4  EC31  F067         	call	_glcdTransfer
  5447                           
  5448                           ;GLCD_PIC.c: 381: glcdTransfer(0x03, MEMWRITE);
  5449  00E6C8  0E00               	movlw	0
  5450  00E6CA  6E04               	movwf	glcdTransfer@cmd,c
  5451  00E6CC  0E03               	movlw	3
  5452  00E6CE  EC31  F067         	call	_glcdTransfer
  5453                           
  5454                           ;GLCD_PIC.c: 383: glcdTransfer(INST_FRMCTR2, CMD);
  5455  00E6D2  0E01               	movlw	1
  5456  00E6D4  6E04               	movwf	glcdTransfer@cmd,c
  5457  00E6D6  0E6B               	movlw	low _INST_FRMCTR2
  5458  00E6D8  6EF6               	movwf	tblptrl,c
  5459  00E6DA                     	if	1	;There is more than 1 active tblptr byte
  5460  00E6DA  0EFF               	movlw	high _INST_FRMCTR2
  5461  00E6DC  6EF7               	movwf	tblptrh,c
  5462  00E6DE                     	endif
  5463  00E6DE                     	if	0	;There are less than 3 active tblptr bytes
  5464  00E6DE                     	endif
  5465  00E6DE  0008               	tblrd		*
  5466  00E6E0  50F5               	movf	tablat,w,c
  5467  00E6E2  EC31  F067         	call	_glcdTransfer
  5468                           
  5469                           ;GLCD_PIC.c: 384: glcdTransfer(0x01, MEMWRITE);
  5470  00E6E6  0E00               	movlw	0
  5471  00E6E8  6E04               	movwf	glcdTransfer@cmd,c
  5472  00E6EA  0E01               	movlw	1
  5473  00E6EC  EC31  F067         	call	_glcdTransfer
  5474                           
  5475                           ;GLCD_PIC.c: 385: glcdTransfer(0x2C, MEMWRITE);
  5476  00E6F0  0E00               	movlw	0
  5477  00E6F2  6E04               	movwf	glcdTransfer@cmd,c
  5478  00E6F4  0E2C               	movlw	44
  5479  00E6F6  EC31  F067         	call	_glcdTransfer
  5480                           
  5481                           ;GLCD_PIC.c: 386: glcdTransfer(0x2D, MEMWRITE);
  5482  00E6FA  0E00               	movlw	0
  5483  00E6FC  6E04               	movwf	glcdTransfer@cmd,c
  5484  00E6FE  0E2D               	movlw	45
  5485  00E700  EC31  F067         	call	_glcdTransfer
  5486                           
  5487                           ;GLCD_PIC.c: 388: glcdTransfer(INST_FRMCTR3, CMD);
  5488  00E704  0E01               	movlw	1
  5489  00E706  6E04               	movwf	glcdTransfer@cmd,c
  5490  00E708  0E6A               	movlw	low _INST_FRMCTR3
  5491  00E70A  6EF6               	movwf	tblptrl,c
  5492  00E70C                     	if	1	;There is more than 1 active tblptr byte
  5493  00E70C  0EFF               	movlw	high _INST_FRMCTR3
  5494  00E70E  6EF7               	movwf	tblptrh,c
  5495  00E710                     	endif
  5496  00E710                     	if	0	;There are less than 3 active tblptr bytes
  5497  00E710                     	endif
  5498  00E710  0008               	tblrd		*
  5499  00E712  50F5               	movf	tablat,w,c
  5500  00E714  EC31  F067         	call	_glcdTransfer
  5501                           
  5502                           ;GLCD_PIC.c: 389: glcdTransfer(0x01, MEMWRITE);
  5503  00E718  0E00               	movlw	0
  5504  00E71A  6E04               	movwf	glcdTransfer@cmd,c
  5505  00E71C  0E01               	movlw	1
  5506  00E71E  EC31  F067         	call	_glcdTransfer
  5507                           
  5508                           ;GLCD_PIC.c: 390: glcdTransfer(0x2C, MEMWRITE);
  5509  00E722  0E00               	movlw	0
  5510  00E724  6E04               	movwf	glcdTransfer@cmd,c
  5511  00E726  0E2C               	movlw	44
  5512  00E728  EC31  F067         	call	_glcdTransfer
  5513                           
  5514                           ;GLCD_PIC.c: 391: glcdTransfer(0x2D, MEMWRITE);
  5515  00E72C  0E00               	movlw	0
  5516  00E72E  6E04               	movwf	glcdTransfer@cmd,c
  5517  00E730  0E2D               	movlw	45
  5518  00E732  EC31  F067         	call	_glcdTransfer
  5519                           
  5520                           ;GLCD_PIC.c: 393: glcdTransfer(INST_INVCTR, CMD);
  5521  00E736  0E01               	movlw	1
  5522  00E738  6E04               	movwf	glcdTransfer@cmd,c
  5523  00E73A  0E69               	movlw	low _INST_INVCTR
  5524  00E73C  6EF6               	movwf	tblptrl,c
  5525  00E73E                     	if	1	;There is more than 1 active tblptr byte
  5526  00E73E  0EFF               	movlw	high _INST_INVCTR
  5527  00E740  6EF7               	movwf	tblptrh,c
  5528  00E742                     	endif
  5529  00E742                     	if	0	;There are less than 3 active tblptr bytes
  5530  00E742                     	endif
  5531  00E742  0008               	tblrd		*
  5532  00E744  50F5               	movf	tablat,w,c
  5533  00E746  EC31  F067         	call	_glcdTransfer
  5534                           
  5535                           ;GLCD_PIC.c: 394: glcdTransfer(0x00, MEMWRITE);
  5536  00E74A  0E00               	movlw	0
  5537  00E74C  6E04               	movwf	glcdTransfer@cmd,c
  5538  00E74E  0E00               	movlw	0
  5539  00E750  EC31  F067         	call	_glcdTransfer
  5540                           
  5541                           ;GLCD_PIC.c: 397: glcdTransfer(INST_PWCTR1, CMD);
  5542  00E754  0E01               	movlw	1
  5543  00E756  6E04               	movwf	glcdTransfer@cmd,c
  5544  00E758  0E68               	movlw	low _INST_PWCTR1
  5545  00E75A  6EF6               	movwf	tblptrl,c
  5546  00E75C                     	if	1	;There is more than 1 active tblptr byte
  5547  00E75C  0EFF               	movlw	high _INST_PWCTR1
  5548  00E75E  6EF7               	movwf	tblptrh,c
  5549  00E760                     	endif
  5550  00E760                     	if	0	;There are less than 3 active tblptr bytes
  5551  00E760                     	endif
  5552  00E760  0008               	tblrd		*
  5553  00E762  50F5               	movf	tablat,w,c
  5554  00E764  EC31  F067         	call	_glcdTransfer
  5555                           
  5556                           ;GLCD_PIC.c: 398: glcdTransfer(0xA2, MEMWRITE);
  5557  00E768  0E00               	movlw	0
  5558  00E76A  6E04               	movwf	glcdTransfer@cmd,c
  5559  00E76C  0EA2               	movlw	162
  5560  00E76E  EC31  F067         	call	_glcdTransfer
  5561                           
  5562                           ;GLCD_PIC.c: 399: glcdTransfer(0x02, MEMWRITE);
  5563  00E772  0E00               	movlw	0
  5564  00E774  6E04               	movwf	glcdTransfer@cmd,c
  5565  00E776  0E02               	movlw	2
  5566  00E778  EC31  F067         	call	_glcdTransfer
  5567                           
  5568                           ;GLCD_PIC.c: 400: glcdTransfer(0x84, MEMWRITE);
  5569  00E77C  0E00               	movlw	0
  5570  00E77E  6E04               	movwf	glcdTransfer@cmd,c
  5571  00E780  0E84               	movlw	132
  5572  00E782  EC31  F067         	call	_glcdTransfer
  5573                           
  5574                           ;GLCD_PIC.c: 402: glcdTransfer(INST_PWCTR2, CMD);
  5575  00E786  0E01               	movlw	1
  5576  00E788  6E04               	movwf	glcdTransfer@cmd,c
  5577  00E78A  0E67               	movlw	low _INST_PWCTR2
  5578  00E78C  6EF6               	movwf	tblptrl,c
  5579  00E78E                     	if	1	;There is more than 1 active tblptr byte
  5580  00E78E  0EFF               	movlw	high _INST_PWCTR2
  5581  00E790  6EF7               	movwf	tblptrh,c
  5582  00E792                     	endif
  5583  00E792                     	if	0	;There are less than 3 active tblptr bytes
  5584  00E792                     	endif
  5585  00E792  0008               	tblrd		*
  5586  00E794  50F5               	movf	tablat,w,c
  5587  00E796  EC31  F067         	call	_glcdTransfer
  5588                           
  5589                           ;GLCD_PIC.c: 403: glcdTransfer(0xC5, MEMWRITE);
  5590  00E79A  0E00               	movlw	0
  5591  00E79C  6E04               	movwf	glcdTransfer@cmd,c
  5592  00E79E  0EC5               	movlw	197
  5593  00E7A0  EC31  F067         	call	_glcdTransfer
  5594                           
  5595                           ;GLCD_PIC.c: 405: glcdTransfer(INST_PWCTR3, CMD);
  5596  00E7A4  0E01               	movlw	1
  5597  00E7A6  6E04               	movwf	glcdTransfer@cmd,c
  5598  00E7A8  0E66               	movlw	low _INST_PWCTR3
  5599  00E7AA  6EF6               	movwf	tblptrl,c
  5600  00E7AC                     	if	1	;There is more than 1 active tblptr byte
  5601  00E7AC  0EFF               	movlw	high _INST_PWCTR3
  5602  00E7AE  6EF7               	movwf	tblptrh,c
  5603  00E7B0                     	endif
  5604  00E7B0                     	if	0	;There are less than 3 active tblptr bytes
  5605  00E7B0                     	endif
  5606  00E7B0  0008               	tblrd		*
  5607  00E7B2  50F5               	movf	tablat,w,c
  5608  00E7B4  EC31  F067         	call	_glcdTransfer
  5609                           
  5610                           ;GLCD_PIC.c: 406: glcdTransfer(0x0A, MEMWRITE);
  5611  00E7B8  0E00               	movlw	0
  5612  00E7BA  6E04               	movwf	glcdTransfer@cmd,c
  5613  00E7BC  0E0A               	movlw	10
  5614  00E7BE  EC31  F067         	call	_glcdTransfer
  5615                           
  5616                           ;GLCD_PIC.c: 407: glcdTransfer(0x00, MEMWRITE);
  5617  00E7C2  0E00               	movlw	0
  5618  00E7C4  6E04               	movwf	glcdTransfer@cmd,c
  5619  00E7C6  0E00               	movlw	0
  5620  00E7C8  EC31  F067         	call	_glcdTransfer
  5621                           
  5622                           ;GLCD_PIC.c: 409: glcdTransfer(INST_PWCTR4, CMD);
  5623  00E7CC  0E01               	movlw	1
  5624  00E7CE  6E04               	movwf	glcdTransfer@cmd,c
  5625  00E7D0  0E65               	movlw	low _INST_PWCTR4
  5626  00E7D2  6EF6               	movwf	tblptrl,c
  5627  00E7D4                     	if	1	;There is more than 1 active tblptr byte
  5628  00E7D4  0EFF               	movlw	high _INST_PWCTR4
  5629  00E7D6  6EF7               	movwf	tblptrh,c
  5630  00E7D8                     	endif
  5631  00E7D8                     	if	0	;There are less than 3 active tblptr bytes
  5632  00E7D8                     	endif
  5633  00E7D8  0008               	tblrd		*
  5634  00E7DA  50F5               	movf	tablat,w,c
  5635  00E7DC  EC31  F067         	call	_glcdTransfer
  5636                           
  5637                           ;GLCD_PIC.c: 410: glcdTransfer(0x8A, MEMWRITE);
  5638  00E7E0  0E00               	movlw	0
  5639  00E7E2  6E04               	movwf	glcdTransfer@cmd,c
  5640  00E7E4  0E8A               	movlw	138
  5641  00E7E6  EC31  F067         	call	_glcdTransfer
  5642                           
  5643                           ;GLCD_PIC.c: 411: glcdTransfer(0x2A, MEMWRITE);
  5644  00E7EA  0E00               	movlw	0
  5645  00E7EC  6E04               	movwf	glcdTransfer@cmd,c
  5646  00E7EE  0E2A               	movlw	42
  5647  00E7F0  EC31  F067         	call	_glcdTransfer
  5648                           
  5649                           ;GLCD_PIC.c: 413: glcdTransfer(INST_PWCTR5, CMD);
  5650  00E7F4  0E01               	movlw	1
  5651  00E7F6  6E04               	movwf	glcdTransfer@cmd,c
  5652  00E7F8  0E64               	movlw	low _INST_PWCTR5
  5653  00E7FA  6EF6               	movwf	tblptrl,c
  5654  00E7FC                     	if	1	;There is more than 1 active tblptr byte
  5655  00E7FC  0EFF               	movlw	high _INST_PWCTR5
  5656  00E7FE  6EF7               	movwf	tblptrh,c
  5657  00E800                     	endif
  5658  00E800                     	if	0	;There are less than 3 active tblptr bytes
  5659  00E800                     	endif
  5660  00E800  0008               	tblrd		*
  5661  00E802  50F5               	movf	tablat,w,c
  5662  00E804  EC31  F067         	call	_glcdTransfer
  5663                           
  5664                           ;GLCD_PIC.c: 414: glcdTransfer(0x8A, MEMWRITE);
  5665  00E808  0E00               	movlw	0
  5666  00E80A  6E04               	movwf	glcdTransfer@cmd,c
  5667  00E80C  0E8A               	movlw	138
  5668  00E80E  EC31  F067         	call	_glcdTransfer
  5669                           
  5670                           ;GLCD_PIC.c: 415: glcdTransfer(0x2A, MEMWRITE);
  5671  00E812  0E00               	movlw	0
  5672  00E814  6E04               	movwf	glcdTransfer@cmd,c
  5673  00E816  0E2A               	movlw	42
  5674  00E818  EC31  F067         	call	_glcdTransfer
  5675                           
  5676                           ;GLCD_PIC.c: 418: glcdTransfer(INST_VMCTR1, CMD);
  5677  00E81C  0E01               	movlw	1
  5678  00E81E  6E04               	movwf	glcdTransfer@cmd,c
  5679  00E820  0E63               	movlw	low _INST_VMCTR1
  5680  00E822  6EF6               	movwf	tblptrl,c
  5681  00E824                     	if	1	;There is more than 1 active tblptr byte
  5682  00E824  0EFF               	movlw	high _INST_VMCTR1
  5683  00E826  6EF7               	movwf	tblptrh,c
  5684  00E828                     	endif
  5685  00E828                     	if	0	;There are less than 3 active tblptr bytes
  5686  00E828                     	endif
  5687  00E828  0008               	tblrd		*
  5688  00E82A  50F5               	movf	tablat,w,c
  5689  00E82C  EC31  F067         	call	_glcdTransfer
  5690                           
  5691                           ;GLCD_PIC.c: 419: glcdTransfer(0x3C, MEMWRITE);
  5692  00E830  0E00               	movlw	0
  5693  00E832  6E04               	movwf	glcdTransfer@cmd,c
  5694  00E834  0E3C               	movlw	60
  5695  00E836  EC31  F067         	call	_glcdTransfer
  5696                           
  5697                           ;GLCD_PIC.c: 421: glcd_invoff();
  5698  00E83A  EC95  F066         	call	_glcd_invoff	;wreg free
  5699                           
  5700                           ;GLCD_PIC.c: 429: glcdSetCOLMOD(18);
  5701  00E83E  0E12               	movlw	18
  5702  00E840  ECFB  F067         	call	_glcdSetCOLMOD
  5703                           
  5704                           ;GLCD_PIC.c: 432: glcdTransfer(INST_GAMSET, CMD);
  5705  00E844  0E01               	movlw	1
  5706  00E846  6E04               	movwf	glcdTransfer@cmd,c
  5707  00E848  0E79               	movlw	low _INST_GAMSET
  5708  00E84A  6EF6               	movwf	tblptrl,c
  5709  00E84C                     	if	1	;There is more than 1 active tblptr byte
  5710  00E84C  0EFF               	movlw	high _INST_GAMSET
  5711  00E84E  6EF7               	movwf	tblptrh,c
  5712  00E850                     	endif
  5713  00E850                     	if	0	;There are less than 3 active tblptr bytes
  5714  00E850                     	endif
  5715  00E850  0008               	tblrd		*
  5716  00E852  50F5               	movf	tablat,w,c
  5717  00E854  EC31  F067         	call	_glcdTransfer
  5718                           
  5719                           ;GLCD_PIC.c: 433: glcdTransfer(0x01, MEMWRITE);
  5720  00E858  0E00               	movlw	0
  5721  00E85A  6E04               	movwf	glcdTransfer@cmd,c
  5722  00E85C  0E01               	movlw	1
  5723  00E85E  EC31  F067         	call	_glcdTransfer
  5724                           
  5725                           ;GLCD_PIC.c: 435: glcd_idmoff();
  5726  00E862  EC8A  F066         	call	_glcd_idmoff	;wreg free
  5727                           
  5728                           ;GLCD_PIC.c: 437: glcd_noron();
  5729  00E866  ECA0  F066         	call	_glcd_noron	;wreg free
  5730                           
  5731                           ;GLCD_PIC.c: 440: MADCTLbits.MX = 1;
  5732  00E86A  8C7C               	bsf	_MADCTLbits,6,c
  5733                           
  5734                           ;GLCD_PIC.c: 441: MADCTLbits.MY = 1;
  5735  00E86C  8E7C               	bsf	_MADCTLbits,7,c
  5736                           
  5737                           ;GLCD_PIC.c: 442: MADCTLbits.MV = 1;
  5738  00E86E  8A7C               	bsf	_MADCTLbits,5,c
  5739                           
  5740                           ;GLCD_PIC.c: 443: MADCTLbits.ML = 0;
  5741  00E870  987C               	bcf	_MADCTLbits,4,c
  5742                           
  5743                           ;GLCD_PIC.c: 444: MADCTLbits.RGB = 0;
  5744  00E872  967C               	bcf	_MADCTLbits,3,c
  5745                           
  5746                           ;GLCD_PIC.c: 445: MADCTLbits.MH = 0;
  5747  00E874  947C               	bcf	_MADCTLbits,2,c
  5748                           
  5749                           ;GLCD_PIC.c: 446: glcd_setmadctl();
  5750  00E876  ECC6  F066         	call	_glcd_setmadctl	;wreg free
  5751                           
  5752                           ;GLCD_PIC.c: 450: glcdDrawRectangle(0, GLCD_SIZE_HORZ, 0, GLCD_SIZE_VERT, BLACK);
  5753  00E87A  0E83               	movlw	low _GLCD_SIZE_HORZ
  5754  00E87C  6EF6               	movwf	tblptrl,c
  5755  00E87E                     	if	1	;There is more than 1 active tblptr byte
  5756  00E87E  0EFF               	movlw	high _GLCD_SIZE_HORZ
  5757  00E880  6EF7               	movwf	tblptrh,c
  5758  00E882                     	endif
  5759  00E882                     	if	0	;There are less than 3 active tblptr bytes
  5760  00E882                     	endif
  5761  00E882  0008               	tblrd		*
  5762  00E884  CFF5 F015          	movff	tablat,glcdDrawRectangle@XE
  5763  00E888  0E00               	movlw	0
  5764  00E88A  6E16               	movwf	glcdDrawRectangle@YS,c
  5765  00E88C  0E82               	movlw	low _GLCD_SIZE_VERT
  5766  00E88E  6EF6               	movwf	tblptrl,c
  5767  00E890                     	if	1	;There is more than 1 active tblptr byte
  5768  00E890  0EFF               	movlw	high _GLCD_SIZE_VERT
  5769  00E892  6EF7               	movwf	tblptrh,c
  5770  00E894                     	endif
  5771  00E894                     	if	0	;There are less than 3 active tblptr bytes
  5772  00E894                     	endif
  5773  00E894  0008               	tblrd		*
  5774  00E896  CFF5 F017          	movff	tablat,glcdDrawRectangle@YE
  5775  00E89A  0E35               	movlw	low _BLACK
  5776  00E89C  6EF6               	movwf	tblptrl,c
  5777  00E89E                     	if	1	;There is more than 1 active tblptr byte
  5778  00E89E  0EFF               	movlw	high _BLACK
  5779  00E8A0  6EF7               	movwf	tblptrh,c
  5780  00E8A2                     	endif
  5781  00E8A2                     	if	0	;There are less than 3 active tblptr bytes
  5782  00E8A2                     	endif
  5783  00E8A2  0009               	tblrd		*+
  5784  00E8A4  CFF5 F018          	movff	tablat,glcdDrawRectangle@color
  5785  00E8A8  0009               	tblrd		*+
  5786  00E8AA  CFF5 F019          	movff	tablat,glcdDrawRectangle@color+1
  5787  00E8AE  0009               	tblrd		*+
  5788  00E8B0  CFF5 F01A          	movff	tablat,glcdDrawRectangle@color+2
  5789  00E8B4  000A               	tblrd		*-
  5790  00E8B6  CFF5 F01B          	movff	tablat,glcdDrawRectangle@color+3
  5791  00E8BA  0E00               	movlw	0
  5792  00E8BC  ECB7  F06F         	call	_glcdDrawRectangle
  5793                           
  5794                           ;GLCD_PIC.c: 452: glcd_dispon();
  5795  00E8C0  EC7F  F066         	call	_glcd_dispon	;wreg free
  5796                           
  5797                           ;GLCD_PIC.c: 453: _delay((unsigned long)((10)*(10000000/4000.0)));
  5798  00E8C4  0E21               	movlw	33
  5799  00E8C6  6E28               	movwf	??_initGLCD& (0+255),c
  5800  00E8C8  0E76               	movlw	118
  5801  00E8CA                     u5747:
  5802  00E8CA  2EE8               	decfsz	wreg,f,c
  5803  00E8CC  D7FE               	bra	u5747
  5804  00E8CE  2E28               	decfsz	??_initGLCD& (0+255),f,c
  5805  00E8D0  D7FC               	bra	u5747
  5806  00E8D2  D000               	nop2	
  5807  00E8D4  0012               	return		;funcret
  5808  00E8D6                     __end_of_initGLCD:
  5809                           	opt stack 0
  5810                           tblptru	equ	0xFF8
  5811                           tblptrh	equ	0xFF7
  5812                           tblptrl	equ	0xFF6
  5813                           tablat	equ	0xFF5
  5814                           prodh	equ	0xFF4
  5815                           prodl	equ	0xFF3
  5816                           postinc0	equ	0xFEE
  5817                           wreg	equ	0xFE8
  5818                           plusw1	equ	0xFE3
  5819                           indf2	equ	0xFDF
  5820                           postinc2	equ	0xFDE
  5821                           plusw2	equ	0xFDB
  5822                           fsr2h	equ	0xFDA
  5823                           fsr2l	equ	0xFD9
  5824                           status	equ	0xFD8
  5825                           
  5826 ;; *************** function _spiInit *****************
  5827 ;; Defined at:
  5828 ;;		line 37 in file "SPI_PIC.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;  divider         1    wreg     unsigned char 
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;  divider         1    0[COMRAM] unsigned char 
  5833 ;; Return value:  Size  Location     Type
  5834 ;;                  1    wreg      void 
  5835 ;; Registers used:
  5836 ;;		wreg, status,2, status,0
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5845 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5846 ;;Total ram usage:        1 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; This function calls:
  5849 ;;		Nothing
  5850 ;; This function is called by:
  5851 ;;		_initGLCD
  5852 ;;		_initSD
  5853 ;; This function uses a non-reentrant model
  5854 ;;
  5855                           
  5856                           	psect	text20
  5857  00CF44                     __ptext20:
  5858                           	opt stack 0
  5859  00CF44                     _spiInit:
  5860                           	opt stack 28
  5861                           
  5862                           ;incstack = 0
  5863                           ;spiInit@divider stored from wreg
  5864  00CF44  6E01               	movwf	spiInit@divider,c
  5865                           
  5866                           ;SPI_PIC.c: 38: SSPCON1bits.SSPEN = 0;
  5867  00CF46  9AC6               	bcf	4038,5,c	;volatile
  5868                           
  5869                           ;SPI_PIC.c: 39: SSPSTAT = 0x00;
  5870  00CF48  0E00               	movlw	0
  5871  00CF4A  6EC7               	movwf	4039,c	;volatile
  5872                           
  5873                           ;SPI_PIC.c: 44: switch(divider){
  5874  00CF4C  D007               	goto	l722
  5875  00CF4E                     
  5876                           ;SPI_PIC.c: 46: SSPCON1 = 0b00010000;
  5877  00CF4E  0E10               	movlw	16
  5878  00CF50  D003               	goto	L7
  5879  00CF52                     
  5880                           ;SPI_PIC.c: 52: SSPCON1 = 0b00010010;
  5881  00CF52  0E12               	movlw	18
  5882  00CF54  D001               	goto	L7
  5883  00CF56                     l727:
  5884                           
  5885                           ;SPI_PIC.c: 55: SSPCON1 = 0b00010001;
  5886  00CF56  0E11               	movlw	17
  5887  00CF58                     L7:
  5888  00CF58  6EC6               	movwf	4038,c	;volatile
  5889                           
  5890                           ;SPI_PIC.c: 56: }
  5891  00CF5A  D00B               	goto	l724
  5892  00CF5C                     l722:
  5893  00CF5C  5001               	movf	spiInit@divider,w,c
  5894                           
  5895                           ; Switch size 1, requested type "space"
  5896                           ; Number of cases is 3, Range of values is 4 to 64
  5897                           ; switch strategies available:
  5898                           ; Name         Instructions Cycles
  5899                           ; simple_byte           10     6 (average)
  5900                           ;	Chosen strategy is simple_byte
  5901  00CF5E  0A04               	xorlw	4	; case 4
  5902  00CF60  B4D8               	btfsc	status,2,c
  5903  00CF62  D7F5               	goto	l723
  5904  00CF64  0A14               	xorlw	20	; case 16
  5905  00CF66  B4D8               	btfsc	status,2,c
  5906  00CF68  D7F6               	goto	l727
  5907  00CF6A  0A50               	xorlw	80	; case 64
  5908  00CF6C  B4D8               	btfsc	status,2,c
  5909  00CF6E  D7F1               	goto	l726
  5910  00CF70  D7F2               	goto	l727
  5911  00CF72                     l724:
  5912                           
  5913                           ;SPI_PIC.c: 59: TRISCbits.TRISC5 = 0;
  5914  00CF72  9A94               	bcf	3988,5,c	;volatile
  5915                           
  5916                           ;SPI_PIC.c: 60: TRISCbits.TRISC4 = 1;
  5917  00CF74  8894               	bsf	3988,4,c	;volatile
  5918                           
  5919                           ;SPI_PIC.c: 61: TRISCbits.TRISC3 = 0;
  5920  00CF76  9694               	bcf	3988,3,c	;volatile
  5921                           
  5922                           ;SPI_PIC.c: 63: SSPCON1bits.SSPEN = 1;
  5923  00CF78  8AC6               	bsf	4038,5,c	;volatile
  5924  00CF7A  0012               	return		;funcret
  5925  00CF7C                     __end_of_spiInit:
  5926                           	opt stack 0
  5927                           tblptru	equ	0xFF8
  5928                           tblptrh	equ	0xFF7
  5929                           tblptrl	equ	0xFF6
  5930                           tablat	equ	0xFF5
  5931                           prodh	equ	0xFF4
  5932                           prodl	equ	0xFF3
  5933                           postinc0	equ	0xFEE
  5934                           wreg	equ	0xFE8
  5935                           plusw1	equ	0xFE3
  5936                           indf2	equ	0xFDF
  5937                           postinc2	equ	0xFDE
  5938                           plusw2	equ	0xFDB
  5939                           fsr2h	equ	0xFDA
  5940                           fsr2l	equ	0xFD9
  5941                           status	equ	0xFD8
  5942                           
  5943 ;; *************** function _glcd_swreset *****************
  5944 ;; Defined at:
  5945 ;;		line 109 in file "GLCD_PIC.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;		None
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;		None
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  1    wreg      void 
  5952 ;; Registers used:
  5953 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5954 ;; Tracked objects:
  5955 ;;		On entry : 0/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5961 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5962 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;Total ram usage:        2 bytes
  5964 ;; Hardware stack levels used:    1
  5965 ;; Hardware stack levels required when called:    3
  5966 ;; This function calls:
  5967 ;;		_glcdTransfer
  5968 ;; This function is called by:
  5969 ;;		_initGLCD
  5970 ;; This function uses a non-reentrant model
  5971 ;;
  5972                           
  5973                           	psect	text21
  5974  00CEE2                     __ptext21:
  5975                           	opt stack 0
  5976  00CEE2                     _glcd_swreset:
  5977                           	opt stack 25
  5978                           
  5979                           ;GLCD_PIC.c: 110: glcdTransfer(INST_SWRESET, CMD);
  5980                           
  5981                           ;incstack = 0
  5982  00CEE2  0E01               	movlw	1
  5983  00CEE4  6E04               	movwf	glcdTransfer@cmd,c
  5984  00CEE6  0E80               	movlw	low _INST_SWRESET
  5985  00CEE8  6EF6               	movwf	tblptrl,c
  5986  00CEEA                     	if	1	;There is more than 1 active tblptr byte
  5987  00CEEA  0EFF               	movlw	high _INST_SWRESET
  5988  00CEEC  6EF7               	movwf	tblptrh,c
  5989  00CEEE                     	endif
  5990  00CEEE                     	if	0	;There are less than 3 active tblptr bytes
  5991  00CEEE                     	endif
  5992  00CEEE  0008               	tblrd		*
  5993  00CEF0  50F5               	movf	tablat,w,c
  5994  00CEF2  EC31  F067         	call	_glcdTransfer
  5995                           
  5996                           ;GLCD_PIC.c: 111: _delay((unsigned long)((130)*(10000000/4000.0)));
  5997  00CEF6  0E02               	movlw	2
  5998  00CEF8  6E08               	movwf	(??_glcd_swreset+1)& (0+255),c
  5999  00CEFA  0EA7               	movlw	167
  6000  00CEFC  6E07               	movwf	??_glcd_swreset& (0+255),c
  6001  00CEFE  0E10               	movlw	16
  6002  00CF00                     u5757:
  6003  00CF00  2EE8               	decfsz	wreg,f,c
  6004  00CF02  D7FE               	bra	u5757
  6005  00CF04  2E07               	decfsz	??_glcd_swreset& (0+255),f,c
  6006  00CF06  D7FC               	bra	u5757
  6007  00CF08  2E08               	decfsz	(??_glcd_swreset+1)& (0+255),f,c
  6008  00CF0A  D7FA               	bra	u5757
  6009  00CF0C  D000               	nop2	
  6010  00CF0E  0012               	return		;funcret
  6011  00CF10                     __end_of_glcd_swreset:
  6012                           	opt stack 0
  6013                           tblptru	equ	0xFF8
  6014                           tblptrh	equ	0xFF7
  6015                           tblptrl	equ	0xFF6
  6016                           tablat	equ	0xFF5
  6017                           prodh	equ	0xFF4
  6018                           prodl	equ	0xFF3
  6019                           postinc0	equ	0xFEE
  6020                           wreg	equ	0xFE8
  6021                           plusw1	equ	0xFE3
  6022                           indf2	equ	0xFDF
  6023                           postinc2	equ	0xFDE
  6024                           plusw2	equ	0xFDB
  6025                           fsr2h	equ	0xFDA
  6026                           fsr2l	equ	0xFD9
  6027                           status	equ	0xFD8
  6028                           
  6029 ;; *************** function _glcd_slpout *****************
  6030 ;; Defined at:
  6031 ;;		line 120 in file "GLCD_PIC.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;		None
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;		None
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  1    wreg      void 
  6038 ;; Registers used:
  6039 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6047 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6048 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;Total ram usage:        2 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:    3
  6052 ;; This function calls:
  6053 ;;		_glcdTransfer
  6054 ;; This function is called by:
  6055 ;;		_initGLCD
  6056 ;; This function uses a non-reentrant model
  6057 ;;
  6058                           
  6059                           	psect	text22
  6060  00CEB4                     __ptext22:
  6061                           	opt stack 0
  6062  00CEB4                     _glcd_slpout:
  6063                           	opt stack 25
  6064                           
  6065                           ;GLCD_PIC.c: 121: glcdTransfer(INST_SLPOUT, CMD);
  6066                           
  6067                           ;incstack = 0
  6068  00CEB4  0E01               	movlw	1
  6069  00CEB6  6E04               	movwf	glcdTransfer@cmd,c
  6070  00CEB8  0E7E               	movlw	low _INST_SLPOUT
  6071  00CEBA  6EF6               	movwf	tblptrl,c
  6072  00CEBC                     	if	1	;There is more than 1 active tblptr byte
  6073  00CEBC  0EFF               	movlw	high _INST_SLPOUT
  6074  00CEBE  6EF7               	movwf	tblptrh,c
  6075  00CEC0                     	endif
  6076  00CEC0                     	if	0	;There are less than 3 active tblptr bytes
  6077  00CEC0                     	endif
  6078  00CEC0  0008               	tblrd		*
  6079  00CEC2  50F5               	movf	tablat,w,c
  6080  00CEC4  EC31  F067         	call	_glcdTransfer
  6081                           
  6082                           ;GLCD_PIC.c: 124: _delay((unsigned long)((130)*(10000000/4000.0)));
  6083  00CEC8  0E02               	movlw	2
  6084  00CECA  6E08               	movwf	(??_glcd_slpout+1)& (0+255),c
  6085  00CECC  0EA7               	movlw	167
  6086  00CECE  6E07               	movwf	??_glcd_slpout& (0+255),c
  6087  00CED0  0E10               	movlw	16
  6088  00CED2                     u5767:
  6089  00CED2  2EE8               	decfsz	wreg,f,c
  6090  00CED4  D7FE               	bra	u5767
  6091  00CED6  2E07               	decfsz	??_glcd_slpout& (0+255),f,c
  6092  00CED8  D7FC               	bra	u5767
  6093  00CEDA  2E08               	decfsz	(??_glcd_slpout+1)& (0+255),f,c
  6094  00CEDC  D7FA               	bra	u5767
  6095  00CEDE  D000               	nop2	
  6096  00CEE0  0012               	return		;funcret
  6097  00CEE2                     __end_of_glcd_slpout:
  6098                           	opt stack 0
  6099                           tblptru	equ	0xFF8
  6100                           tblptrh	equ	0xFF7
  6101                           tblptrl	equ	0xFF6
  6102                           tablat	equ	0xFF5
  6103                           prodh	equ	0xFF4
  6104                           prodl	equ	0xFF3
  6105                           postinc0	equ	0xFEE
  6106                           wreg	equ	0xFE8
  6107                           plusw1	equ	0xFE3
  6108                           indf2	equ	0xFDF
  6109                           postinc2	equ	0xFDE
  6110                           plusw2	equ	0xFDB
  6111                           fsr2h	equ	0xFDA
  6112                           fsr2l	equ	0xFD9
  6113                           status	equ	0xFD8
  6114                           
  6115 ;; *************** function _glcd_setmadctl *****************
  6116 ;; Defined at:
  6117 ;;		line 127 in file "GLCD_PIC.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;		None
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  1    wreg      void 
  6124 ;; Registers used:
  6125 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6135 ;;Total ram usage:        0 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; Hardware stack levels required when called:    3
  6138 ;; This function calls:
  6139 ;;		_glcdTransfer
  6140 ;; This function is called by:
  6141 ;;		_initGLCD
  6142 ;;		_glcdSetOrigin
  6143 ;; This function uses a non-reentrant model
  6144 ;;
  6145                           
  6146                           	psect	text23
  6147  00CD8C                     __ptext23:
  6148                           	opt stack 0
  6149  00CD8C                     _glcd_setmadctl:
  6150                           	opt stack 25
  6151                           
  6152                           ;GLCD_PIC.c: 128: glcdTransfer(INST_MADCTL, CMD);
  6153                           
  6154                           ;incstack = 0
  6155  00CD8C  0E01               	movlw	1
  6156  00CD8E  6E04               	movwf	glcdTransfer@cmd,c
  6157  00CD90  0E70               	movlw	low _INST_MADCTL
  6158  00CD92  6EF6               	movwf	tblptrl,c
  6159  00CD94                     	if	1	;There is more than 1 active tblptr byte
  6160  00CD94  0EFF               	movlw	high _INST_MADCTL
  6161  00CD96  6EF7               	movwf	tblptrh,c
  6162  00CD98                     	endif
  6163  00CD98                     	if	0	;There are less than 3 active tblptr bytes
  6164  00CD98                     	endif
  6165  00CD98  0008               	tblrd		*
  6166  00CD9A  50F5               	movf	tablat,w,c
  6167  00CD9C  EC31  F067         	call	_glcdTransfer
  6168                           
  6169                           ;GLCD_PIC.c: 129: glcdTransfer(MADCTLbits.reg, MEMWRITE);
  6170  00CDA0  0E00               	movlw	0
  6171  00CDA2  6E04               	movwf	glcdTransfer@cmd,c
  6172  00CDA4  507C               	movf	_MADCTLbits,w,c
  6173  00CDA6  EC31  F067         	call	_glcdTransfer
  6174  00CDAA  0012               	return		;funcret
  6175  00CDAC                     __end_of_glcd_setmadctl:
  6176                           	opt stack 0
  6177                           tblptru	equ	0xFF8
  6178                           tblptrh	equ	0xFF7
  6179                           tblptrl	equ	0xFF6
  6180                           tablat	equ	0xFF5
  6181                           prodh	equ	0xFF4
  6182                           prodl	equ	0xFF3
  6183                           postinc0	equ	0xFEE
  6184                           wreg	equ	0xFE8
  6185                           plusw1	equ	0xFE3
  6186                           indf2	equ	0xFDF
  6187                           postinc2	equ	0xFDE
  6188                           plusw2	equ	0xFDB
  6189                           fsr2h	equ	0xFDA
  6190                           fsr2l	equ	0xFD9
  6191                           status	equ	0xFD8
  6192                           
  6193 ;; *************** function _glcd_noron *****************
  6194 ;; Defined at:
  6195 ;;		line 136 in file "GLCD_PIC.c"
  6196 ;; Parameters:    Size  Location     Type
  6197 ;;		None
  6198 ;; Auto vars:     Size  Location     Type
  6199 ;;		None
  6200 ;; Return value:  Size  Location     Type
  6201 ;;                  1    wreg      void 
  6202 ;; Registers used:
  6203 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6204 ;; Tracked objects:
  6205 ;;		On entry : 0/0
  6206 ;;		On exit  : 0/0
  6207 ;;		Unchanged: 0/0
  6208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;Total ram usage:        0 bytes
  6214 ;; Hardware stack levels used:    1
  6215 ;; Hardware stack levels required when called:    3
  6216 ;; This function calls:
  6217 ;;		_glcdTransfer
  6218 ;; This function is called by:
  6219 ;;		_initGLCD
  6220 ;; This function uses a non-reentrant model
  6221 ;;
  6222                           
  6223                           	psect	text24
  6224  00CD40                     __ptext24:
  6225                           	opt stack 0
  6226  00CD40                     _glcd_noron:
  6227                           	opt stack 25
  6228                           
  6229                           ;GLCD_PIC.c: 137: glcdTransfer(INST_NORON, CMD);
  6230                           
  6231                           ;incstack = 0
  6232  00CD40  0E01               	movlw	1
  6233  00CD42  6E04               	movwf	glcdTransfer@cmd,c
  6234  00CD44  0E7C               	movlw	low _INST_NORON
  6235  00CD46  6EF6               	movwf	tblptrl,c
  6236  00CD48                     	if	1	;There is more than 1 active tblptr byte
  6237  00CD48  0EFF               	movlw	high _INST_NORON
  6238  00CD4A  6EF7               	movwf	tblptrh,c
  6239  00CD4C                     	endif
  6240  00CD4C                     	if	0	;There are less than 3 active tblptr bytes
  6241  00CD4C                     	endif
  6242  00CD4C  0008               	tblrd		*
  6243  00CD4E  50F5               	movf	tablat,w,c
  6244  00CD50  EC31  F067         	call	_glcdTransfer
  6245  00CD54  0012               	return		;funcret
  6246  00CD56                     __end_of_glcd_noron:
  6247                           	opt stack 0
  6248                           tblptru	equ	0xFF8
  6249                           tblptrh	equ	0xFF7
  6250                           tblptrl	equ	0xFF6
  6251                           tablat	equ	0xFF5
  6252                           prodh	equ	0xFF4
  6253                           prodl	equ	0xFF3
  6254                           postinc0	equ	0xFEE
  6255                           wreg	equ	0xFE8
  6256                           plusw1	equ	0xFE3
  6257                           indf2	equ	0xFDF
  6258                           postinc2	equ	0xFDE
  6259                           plusw2	equ	0xFDB
  6260                           fsr2h	equ	0xFDA
  6261                           fsr2l	equ	0xFD9
  6262                           status	equ	0xFD8
  6263                           
  6264 ;; *************** function _glcd_invoff *****************
  6265 ;; Defined at:
  6266 ;;		line 140 in file "GLCD_PIC.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;		None
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;		None
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  1    wreg      void 
  6273 ;; Registers used:
  6274 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6284 ;;Total ram usage:        0 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:    3
  6287 ;; This function calls:
  6288 ;;		_glcdTransfer
  6289 ;; This function is called by:
  6290 ;;		_initGLCD
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text25
  6295  00CD2A                     __ptext25:
  6296                           	opt stack 0
  6297  00CD2A                     _glcd_invoff:
  6298                           	opt stack 25
  6299                           
  6300                           ;GLCD_PIC.c: 141: glcdTransfer(INST_INVOFF, CMD);
  6301                           
  6302                           ;incstack = 0
  6303  00CD2A  0E01               	movlw	1
  6304  00CD2C  6E04               	movwf	glcdTransfer@cmd,c
  6305  00CD2E  0E7B               	movlw	low _INST_INVOFF
  6306  00CD30  6EF6               	movwf	tblptrl,c
  6307  00CD32                     	if	1	;There is more than 1 active tblptr byte
  6308  00CD32  0EFF               	movlw	high _INST_INVOFF
  6309  00CD34  6EF7               	movwf	tblptrh,c
  6310  00CD36                     	endif
  6311  00CD36                     	if	0	;There are less than 3 active tblptr bytes
  6312  00CD36                     	endif
  6313  00CD36  0008               	tblrd		*
  6314  00CD38  50F5               	movf	tablat,w,c
  6315  00CD3A  EC31  F067         	call	_glcdTransfer
  6316  00CD3E  0012               	return		;funcret
  6317  00CD40                     __end_of_glcd_invoff:
  6318                           	opt stack 0
  6319                           tblptru	equ	0xFF8
  6320                           tblptrh	equ	0xFF7
  6321                           tblptrl	equ	0xFF6
  6322                           tablat	equ	0xFF5
  6323                           prodh	equ	0xFF4
  6324                           prodl	equ	0xFF3
  6325                           postinc0	equ	0xFEE
  6326                           wreg	equ	0xFE8
  6327                           plusw1	equ	0xFE3
  6328                           indf2	equ	0xFDF
  6329                           postinc2	equ	0xFDE
  6330                           plusw2	equ	0xFDB
  6331                           fsr2h	equ	0xFDA
  6332                           fsr2l	equ	0xFD9
  6333                           status	equ	0xFD8
  6334                           
  6335 ;; *************** function _glcd_idmoff *****************
  6336 ;; Defined at:
  6337 ;;		line 164 in file "GLCD_PIC.c"
  6338 ;; Parameters:    Size  Location     Type
  6339 ;;		None
  6340 ;; Auto vars:     Size  Location     Type
  6341 ;;		None
  6342 ;; Return value:  Size  Location     Type
  6343 ;;                  1    wreg      void 
  6344 ;; Registers used:
  6345 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6346 ;; Tracked objects:
  6347 ;;		On entry : 0/0
  6348 ;;		On exit  : 0/0
  6349 ;;		Unchanged: 0/0
  6350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6355 ;;Total ram usage:        0 bytes
  6356 ;; Hardware stack levels used:    1
  6357 ;; Hardware stack levels required when called:    3
  6358 ;; This function calls:
  6359 ;;		_glcdTransfer
  6360 ;; This function is called by:
  6361 ;;		_initGLCD
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           	psect	text26
  6366  00CD14                     __ptext26:
  6367                           	opt stack 0
  6368  00CD14                     _glcd_idmoff:
  6369                           	opt stack 25
  6370                           
  6371                           ;GLCD_PIC.c: 165: glcdTransfer(INST_IDMOFF, CMD);
  6372                           
  6373                           ;incstack = 0
  6374  00CD14  0E01               	movlw	1
  6375  00CD16  6E04               	movwf	glcdTransfer@cmd,c
  6376  00CD18  0E6F               	movlw	low _INST_IDMOFF
  6377  00CD1A  6EF6               	movwf	tblptrl,c
  6378  00CD1C                     	if	1	;There is more than 1 active tblptr byte
  6379  00CD1C  0EFF               	movlw	high _INST_IDMOFF
  6380  00CD1E  6EF7               	movwf	tblptrh,c
  6381  00CD20                     	endif
  6382  00CD20                     	if	0	;There are less than 3 active tblptr bytes
  6383  00CD20                     	endif
  6384  00CD20  0008               	tblrd		*
  6385  00CD22  50F5               	movf	tablat,w,c
  6386  00CD24  EC31  F067         	call	_glcdTransfer
  6387  00CD28  0012               	return		;funcret
  6388  00CD2A                     __end_of_glcd_idmoff:
  6389                           	opt stack 0
  6390                           tblptru	equ	0xFF8
  6391                           tblptrh	equ	0xFF7
  6392                           tblptrl	equ	0xFF6
  6393                           tablat	equ	0xFF5
  6394                           prodh	equ	0xFF4
  6395                           prodl	equ	0xFF3
  6396                           postinc0	equ	0xFEE
  6397                           wreg	equ	0xFE8
  6398                           plusw1	equ	0xFE3
  6399                           indf2	equ	0xFDF
  6400                           postinc2	equ	0xFDE
  6401                           plusw2	equ	0xFDB
  6402                           fsr2h	equ	0xFDA
  6403                           fsr2l	equ	0xFD9
  6404                           status	equ	0xFD8
  6405                           
  6406 ;; *************** function _glcd_dispon *****************
  6407 ;; Defined at:
  6408 ;;		line 152 in file "GLCD_PIC.c"
  6409 ;; Parameters:    Size  Location     Type
  6410 ;;		None
  6411 ;; Auto vars:     Size  Location     Type
  6412 ;;		None
  6413 ;; Return value:  Size  Location     Type
  6414 ;;                  1    wreg      void 
  6415 ;; Registers used:
  6416 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6417 ;; Tracked objects:
  6418 ;;		On entry : 0/0
  6419 ;;		On exit  : 0/0
  6420 ;;		Unchanged: 0/0
  6421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6426 ;;Total ram usage:        0 bytes
  6427 ;; Hardware stack levels used:    1
  6428 ;; Hardware stack levels required when called:    3
  6429 ;; This function calls:
  6430 ;;		_glcdTransfer
  6431 ;; This function is called by:
  6432 ;;		_initGLCD
  6433 ;; This function uses a non-reentrant model
  6434 ;;
  6435                           
  6436                           	psect	text27
  6437  00CCFE                     __ptext27:
  6438                           	opt stack 0
  6439  00CCFE                     _glcd_dispon:
  6440                           	opt stack 25
  6441                           
  6442                           ;GLCD_PIC.c: 153: glcdTransfer(INST_DISPON, CMD);
  6443                           
  6444                           ;incstack = 0
  6445  00CCFE  0E01               	movlw	1
  6446  00CD00  6E04               	movwf	glcdTransfer@cmd,c
  6447  00CD02  0E77               	movlw	low _INST_DISPON
  6448  00CD04  6EF6               	movwf	tblptrl,c
  6449  00CD06                     	if	1	;There is more than 1 active tblptr byte
  6450  00CD06  0EFF               	movlw	high _INST_DISPON
  6451  00CD08  6EF7               	movwf	tblptrh,c
  6452  00CD0A                     	endif
  6453  00CD0A                     	if	0	;There are less than 3 active tblptr bytes
  6454  00CD0A                     	endif
  6455  00CD0A  0008               	tblrd		*
  6456  00CD0C  50F5               	movf	tablat,w,c
  6457  00CD0E  EC31  F067         	call	_glcdTransfer
  6458  00CD12  0012               	return		;funcret
  6459  00CD14                     __end_of_glcd_dispon:
  6460                           	opt stack 0
  6461                           tblptru	equ	0xFF8
  6462                           tblptrh	equ	0xFF7
  6463                           tblptrl	equ	0xFF6
  6464                           tablat	equ	0xFF5
  6465                           prodh	equ	0xFF4
  6466                           prodl	equ	0xFF3
  6467                           postinc0	equ	0xFEE
  6468                           wreg	equ	0xFE8
  6469                           plusw1	equ	0xFE3
  6470                           indf2	equ	0xFDF
  6471                           postinc2	equ	0xFDE
  6472                           plusw2	equ	0xFDB
  6473                           fsr2h	equ	0xFDA
  6474                           fsr2l	equ	0xFD9
  6475                           status	equ	0xFD8
  6476                           
  6477 ;; *************** function _glcdSetCOLMOD *****************
  6478 ;; Defined at:
  6479 ;;		line 305 in file "GLCD_PIC.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;  numBitsPerPi    1    wreg     unsigned char 
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;  numBitsPerPi    1    6[COMRAM] unsigned char 
  6484 ;;  rawData         2    7[COMRAM] unsigned short 
  6485 ;; Return value:  Size  Location     Type
  6486 ;;                  1    wreg      void 
  6487 ;; Registers used:
  6488 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6498 ;;Total ram usage:        3 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:    3
  6501 ;; This function calls:
  6502 ;;		_glcdTransfer
  6503 ;; This function is called by:
  6504 ;;		_initGLCD
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508                           	psect	text28
  6509  00CFF6                     __ptext28:
  6510                           	opt stack 0
  6511  00CFF6                     _glcdSetCOLMOD:
  6512                           	opt stack 25
  6513                           
  6514                           ;incstack = 0
  6515                           ;glcdSetCOLMOD@numBitsPerPixel stored from wreg
  6516  00CFF6  6E07               	movwf	glcdSetCOLMOD@numBitsPerPixel,c
  6517                           
  6518                           ;GLCD_PIC.c: 306: unsigned short rawData;
  6519                           ;GLCD_PIC.c: 307: switch(numBitsPerPixel){
  6520  00CFF8  D00D               	goto	l382
  6521  00CFFA                     
  6522                           ;GLCD_PIC.c: 309: rawData = 0b00000011;
  6523  00CFFA  0E00               	movlw	0
  6524  00CFFC  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  6525  00CFFE  0E03               	movlw	3
  6526  00D000  D003               	goto	L9
  6527  00D002                     
  6528                           ;GLCD_PIC.c: 312: rawData = 0b00000101;
  6529  00D002  0E00               	movlw	0
  6530  00D004  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  6531  00D006  0E05               	movlw	5
  6532  00D008                     L9:
  6533  00D008  6E08               	movwf	glcdSetCOLMOD@rawData,c
  6534                           
  6535                           ;GLCD_PIC.c: 316: break;
  6536  00D00A  D00D               	goto	l384
  6537  00D00C                     
  6538                           ;GLCD_PIC.c: 318: rawData = 0b00000110;
  6539  00D00C  0E00               	movlw	0
  6540  00D00E  6E09               	movwf	glcdSetCOLMOD@rawData+1,c
  6541  00D010  0E06               	movlw	6
  6542  00D012  D7FA               	goto	L9
  6543  00D014                     l382:
  6544  00D014  5007               	movf	glcdSetCOLMOD@numBitsPerPixel,w,c
  6545                           
  6546                           ; Switch size 1, requested type "space"
  6547                           ; Number of cases is 3, Range of values is 12 to 18
  6548                           ; switch strategies available:
  6549                           ; Name         Instructions Cycles
  6550                           ; simple_byte           10     6 (average)
  6551                           ;	Chosen strategy is simple_byte
  6552  00D016  0A0C               	xorlw	12	; case 12
  6553  00D018  B4D8               	btfsc	status,2,c
  6554  00D01A  D7EF               	goto	l383
  6555  00D01C  0A1C               	xorlw	28	; case 16
  6556  00D01E  B4D8               	btfsc	status,2,c
  6557  00D020  D7F0               	goto	l385
  6558  00D022  0A02               	xorlw	2	; case 18
  6559  00D024  D7F3               	goto	l387
  6560  00D026                     l384:
  6561                           
  6562                           ;GLCD_PIC.c: 321: glcdTransfer(INST_COLMOD, CMD);
  6563  00D026  0E01               	movlw	1
  6564  00D028  6E04               	movwf	glcdTransfer@cmd,c
  6565  00D02A  0E6D               	movlw	low _INST_COLMOD
  6566  00D02C  6EF6               	movwf	tblptrl,c
  6567  00D02E                     	if	1	;There is more than 1 active tblptr byte
  6568  00D02E  0EFF               	movlw	high _INST_COLMOD
  6569  00D030  6EF7               	movwf	tblptrh,c
  6570  00D032                     	endif
  6571  00D032                     	if	0	;There are less than 3 active tblptr bytes
  6572  00D032                     	endif
  6573  00D032  0008               	tblrd		*
  6574  00D034  50F5               	movf	tablat,w,c
  6575  00D036  EC31  F067         	call	_glcdTransfer
  6576                           
  6577                           ;GLCD_PIC.c: 322: glcdTransfer(rawData, MEMWRITE);
  6578  00D03A  0E00               	movlw	0
  6579  00D03C  6E04               	movwf	glcdTransfer@cmd,c
  6580  00D03E  5008               	movf	glcdSetCOLMOD@rawData,w,c
  6581  00D040  EC31  F067         	call	_glcdTransfer
  6582  00D044  0012               	return		;funcret
  6583  00D046                     __end_of_glcdSetCOLMOD:
  6584                           	opt stack 0
  6585                           tblptru	equ	0xFF8
  6586                           tblptrh	equ	0xFF7
  6587                           tblptrl	equ	0xFF6
  6588                           tablat	equ	0xFF5
  6589                           prodh	equ	0xFF4
  6590                           prodl	equ	0xFF3
  6591                           postinc0	equ	0xFEE
  6592                           wreg	equ	0xFE8
  6593                           plusw1	equ	0xFE3
  6594                           indf2	equ	0xFDF
  6595                           postinc2	equ	0xFDE
  6596                           plusw2	equ	0xFDB
  6597                           fsr2h	equ	0xFDA
  6598                           fsr2l	equ	0xFD9
  6599                           status	equ	0xFD8
  6600                           
  6601 ;; *************** function _glcdDrawRectangle *****************
  6602 ;; Defined at:
  6603 ;;		line 172 in file "GLCD_PIC.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;  XS              1    wreg     unsigned char 
  6606 ;;  XE              1   20[COMRAM] unsigned char 
  6607 ;;  YS              1   21[COMRAM] unsigned char 
  6608 ;;  YE              1   22[COMRAM] unsigned char 
  6609 ;;  color           4   23[COMRAM] unsigned long 
  6610 ;; Auto vars:     Size  Location     Type
  6611 ;;  XS              1   38[COMRAM] unsigned char 
  6612 ;;  i               2   33[COMRAM] unsigned short 
  6613 ;;  colorData       3   35[COMRAM] unsigned char [3]
  6614 ;;  numLoops        2   31[COMRAM] unsigned short 
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  1    wreg      void 
  6617 ;; Registers used:
  6618 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6624 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6626 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6627 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6628 ;;Total ram usage:       19 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    4
  6631 ;; This function calls:
  6632 ;;		___wmul
  6633 ;;		_glcdTransfer
  6634 ;;		_glcd_ramwr
  6635 ;;		_spiSend
  6636 ;; This function is called by:
  6637 ;;		_testGLCD
  6638 ;;		_initGLCD
  6639 ;;		_glcdDrawPixel
  6640 ;; This function uses a non-reentrant model
  6641 ;;
  6642                           
  6643                           	psect	text29
  6644  00DF6E                     __ptext29:
  6645                           	opt stack 0
  6646  00DF6E                     _glcdDrawRectangle:
  6647                           	opt stack 24
  6648                           
  6649                           ;incstack = 0
  6650                           ;glcdDrawRectangle@XS stored from wreg
  6651  00DF6E  6E27               	movwf	glcdDrawRectangle@XS,c
  6652                           
  6653                           ;GLCD_PIC.c: 187: if(MADCTLbits.MX == 1 && MADCTLbits.MV ==1){
  6654  00DF70  BC7C               	btfsc	_MADCTLbits,6,c
  6655  00DF72  AA7C               	btfss	_MADCTLbits,5,c
  6656  00DF74  D005               	goto	l363
  6657                           
  6658                           ;GLCD_PIC.c: 189: YS += 3;
  6659  00DF76  0E03               	movlw	3
  6660  00DF78  2616               	addwf	glcdDrawRectangle@YS,f,c
  6661                           
  6662                           ;GLCD_PIC.c: 190: YE += 3;
  6663  00DF7A  0E03               	movlw	3
  6664  00DF7C  2617               	addwf	glcdDrawRectangle@YE,f,c
  6665  00DF7E  D015               	goto	l3990
  6666  00DF80                     l363:
  6667                           
  6668                           ;GLCD_PIC.c: 194: else if(MADCTLbits.MY == 1){
  6669  00DF80  AE7C               	btfss	_MADCTLbits,7,c
  6670  00DF82  D008               	goto	l365
  6671                           
  6672                           ;GLCD_PIC.c: 196: YS += 2;
  6673  00DF84  0E02               	movlw	2
  6674  00DF86  2616               	addwf	glcdDrawRectangle@YS,f,c
  6675                           
  6676                           ;GLCD_PIC.c: 197: YE += 2;
  6677  00DF88  0E02               	movlw	2
  6678  00DF8A  2617               	addwf	glcdDrawRectangle@YE,f,c
  6679                           
  6680                           ;GLCD_PIC.c: 198: XS += 3;
  6681  00DF8C  0E03               	movlw	3
  6682  00DF8E  2627               	addwf	glcdDrawRectangle@XS,f,c
  6683                           
  6684                           ;GLCD_PIC.c: 199: XE += 3;
  6685  00DF90  0E03               	movlw	3
  6686  00DF92  D00E               	goto	L11
  6687  00DF94                     l365:
  6688                           
  6689                           ;GLCD_PIC.c: 201: else if(MADCTLbits.MX == 1){
  6690  00DF94  AC7C               	btfss	_MADCTLbits,6,c
  6691  00DF96  D007               	goto	l367
  6692                           
  6693                           ;GLCD_PIC.c: 203: YS += 2;
  6694  00DF98  0E02               	movlw	2
  6695  00DF9A  2616               	addwf	glcdDrawRectangle@YS,f,c
  6696                           
  6697                           ;GLCD_PIC.c: 204: YE += 2;
  6698  00DF9C  0E02               	movlw	2
  6699  00DF9E  2617               	addwf	glcdDrawRectangle@YE,f,c
  6700                           
  6701                           ;GLCD_PIC.c: 205: XS += 1;
  6702  00DFA0  2A27               	incf	glcdDrawRectangle@XS,f,c
  6703                           
  6704                           ;GLCD_PIC.c: 206: XE += 1;
  6705  00DFA2  2A15               	incf	glcdDrawRectangle@XE,f,c
  6706                           
  6707                           ;GLCD_PIC.c: 207: }
  6708  00DFA4  D006               	goto	l368
  6709  00DFA6                     l367:
  6710                           
  6711                           ;GLCD_PIC.c: 208: else{
  6712                           ;GLCD_PIC.c: 210: YS += 1;
  6713  00DFA6  2A16               	incf	glcdDrawRectangle@YS,f,c
  6714                           
  6715                           ;GLCD_PIC.c: 211: YE += 1;
  6716  00DFA8  2A17               	incf	glcdDrawRectangle@YE,f,c
  6717  00DFAA                     l3990:
  6718                           
  6719                           ;GLCD_PIC.c: 212: XS += 2;
  6720  00DFAA  0E02               	movlw	2
  6721  00DFAC  2627               	addwf	glcdDrawRectangle@XS,f,c
  6722                           
  6723                           ;GLCD_PIC.c: 213: XE += 2;
  6724  00DFAE  0E02               	movlw	2
  6725  00DFB0                     L11:
  6726  00DFB0  2615               	addwf	glcdDrawRectangle@XE,f,c
  6727  00DFB2                     l368:
  6728                           
  6729                           ;GLCD_PIC.c: 214: }
  6730                           ;GLCD_PIC.c: 232: glcdTransfer(INST_RASET, CMD);
  6731  00DFB2  0E01               	movlw	1
  6732  00DFB4  6E04               	movwf	glcdTransfer@cmd,c
  6733  00DFB6  0E75               	movlw	low _INST_RASET
  6734  00DFB8  6EF6               	movwf	tblptrl,c
  6735  00DFBA                     	if	1	;There is more than 1 active tblptr byte
  6736  00DFBA  0EFF               	movlw	high _INST_RASET
  6737  00DFBC  6EF7               	movwf	tblptrh,c
  6738  00DFBE                     	endif
  6739  00DFBE                     	if	0	;There are less than 3 active tblptr bytes
  6740  00DFBE                     	endif
  6741  00DFBE  0008               	tblrd		*
  6742  00DFC0  50F5               	movf	tablat,w,c
  6743  00DFC2  EC31  F067         	call	_glcdTransfer
  6744                           
  6745                           ;GLCD_PIC.c: 233: glcdTransfer(0x00, MEMWRITE);
  6746  00DFC6  0E00               	movlw	0
  6747  00DFC8  6E04               	movwf	glcdTransfer@cmd,c
  6748  00DFCA  0E00               	movlw	0
  6749  00DFCC  EC31  F067         	call	_glcdTransfer
  6750                           
  6751                           ;GLCD_PIC.c: 234: glcdTransfer(XS, MEMWRITE);
  6752  00DFD0  0E00               	movlw	0
  6753  00DFD2  6E04               	movwf	glcdTransfer@cmd,c
  6754  00DFD4  5027               	movf	glcdDrawRectangle@XS,w,c
  6755  00DFD6  EC31  F067         	call	_glcdTransfer
  6756                           
  6757                           ;GLCD_PIC.c: 235: glcdTransfer(0x00, MEMWRITE);
  6758  00DFDA  0E00               	movlw	0
  6759  00DFDC  6E04               	movwf	glcdTransfer@cmd,c
  6760  00DFDE  0E00               	movlw	0
  6761  00DFE0  EC31  F067         	call	_glcdTransfer
  6762                           
  6763                           ;GLCD_PIC.c: 236: glcdTransfer(XE - 1, MEMWRITE);
  6764  00DFE4  0E00               	movlw	0
  6765  00DFE6  6E04               	movwf	glcdTransfer@cmd,c
  6766  00DFE8  0415               	decf	glcdDrawRectangle@XE,w,c
  6767  00DFEA  EC31  F067         	call	_glcdTransfer
  6768                           
  6769                           ;GLCD_PIC.c: 240: glcdTransfer(INST_CASET, CMD);
  6770  00DFEE  0E01               	movlw	1
  6771  00DFF0  6E04               	movwf	glcdTransfer@cmd,c
  6772  00DFF2  0E76               	movlw	low _INST_CASET
  6773  00DFF4  6EF6               	movwf	tblptrl,c
  6774  00DFF6                     	if	1	;There is more than 1 active tblptr byte
  6775  00DFF6  0EFF               	movlw	high _INST_CASET
  6776  00DFF8  6EF7               	movwf	tblptrh,c
  6777  00DFFA                     	endif
  6778  00DFFA                     	if	0	;There are less than 3 active tblptr bytes
  6779  00DFFA                     	endif
  6780  00DFFA  0008               	tblrd		*
  6781  00DFFC  50F5               	movf	tablat,w,c
  6782  00DFFE  EC31  F067         	call	_glcdTransfer
  6783                           
  6784                           ;GLCD_PIC.c: 241: glcdTransfer(0x00, MEMWRITE);
  6785  00E002  0E00               	movlw	0
  6786  00E004  6E04               	movwf	glcdTransfer@cmd,c
  6787  00E006  0E00               	movlw	0
  6788  00E008  EC31  F067         	call	_glcdTransfer
  6789                           
  6790                           ;GLCD_PIC.c: 242: glcdTransfer(YS, MEMWRITE);
  6791  00E00C  0E00               	movlw	0
  6792  00E00E  6E04               	movwf	glcdTransfer@cmd,c
  6793  00E010  5016               	movf	glcdDrawRectangle@YS,w,c
  6794  00E012  EC31  F067         	call	_glcdTransfer
  6795                           
  6796                           ;GLCD_PIC.c: 243: glcdTransfer(0x00, MEMWRITE);
  6797  00E016  0E00               	movlw	0
  6798  00E018  6E04               	movwf	glcdTransfer@cmd,c
  6799  00E01A  0E00               	movlw	0
  6800  00E01C  EC31  F067         	call	_glcdTransfer
  6801                           
  6802                           ;GLCD_PIC.c: 244: glcdTransfer(YE - 1, MEMWRITE);
  6803  00E020  0E00               	movlw	0
  6804  00E022  6E04               	movwf	glcdTransfer@cmd,c
  6805  00E024  0417               	decf	glcdDrawRectangle@YE,w,c
  6806  00E026  EC31  F067         	call	_glcdTransfer
  6807                           
  6808                           ;GLCD_PIC.c: 246: glcd_ramwr();
  6809  00E02A  EC74  F066         	call	_glcd_ramwr	;wreg free
  6810                           
  6811                           ;GLCD_PIC.c: 250: if((XE == XS) && (YE == YS)){
  6812  00E02E  5027               	movf	glcdDrawRectangle@XS,w,c
  6813  00E030  1815               	xorwf	glcdDrawRectangle@XE,w,c
  6814  00E032  A4D8               	btfss	status,2,c
  6815  00E034  D014               	goto	l369
  6816  00E036  5016               	movf	glcdDrawRectangle@YS,w,c
  6817  00E038  1817               	xorwf	glcdDrawRectangle@YE,w,c
  6818  00E03A  A4D8               	btfss	status,2,c
  6819  00E03C  D010               	goto	l369
  6820                           
  6821                           ;GLCD_PIC.c: 258: glcdTransfer(color & 0xFF, MEMWRITE);
  6822  00E03E  0E00               	movlw	0
  6823  00E040  6E04               	movwf	glcdTransfer@cmd,c
  6824  00E042  5018               	movf	glcdDrawRectangle@color,w,c
  6825  00E044  EC31  F067         	call	_glcdTransfer
  6826                           
  6827                           ;GLCD_PIC.c: 259: glcdTransfer((color >> 8) & 0xFF, MEMWRITE);
  6828  00E048  0E00               	movlw	0
  6829  00E04A  6E04               	movwf	glcdTransfer@cmd,c
  6830  00E04C  5019               	movf	glcdDrawRectangle@color+1,w,c
  6831  00E04E  EC31  F067         	call	_glcdTransfer
  6832                           
  6833                           ;GLCD_PIC.c: 260: glcdTransfer((color >> 16) & 0xFF, MEMWRITE);
  6834  00E052  0E00               	movlw	0
  6835  00E054  6E04               	movwf	glcdTransfer@cmd,c
  6836  00E056  501A               	movf	glcdDrawRectangle@color+2,w,c
  6837  00E058  EC31  F067         	call	_glcdTransfer
  6838                           
  6839                           ;GLCD_PIC.c: 261: }
  6840  00E05C  0012               	return	
  6841  00E05E                     l369:
  6842                           
  6843                           ;GLCD_PIC.c: 262: else{
  6844                           ;GLCD_PIC.c: 275: unsigned short numLoops = (XE - XS) * (YE - YS);
  6845  00E05E  5027               	movf	glcdDrawRectangle@XS,w,c
  6846  00E060  6E1C               	movwf	??_glcdDrawRectangle& (0+255),c
  6847  00E062  6A1D               	clrf	(??_glcdDrawRectangle+1)& (0+255),c
  6848  00E064  1E1C               	comf	??_glcdDrawRectangle,f,c
  6849  00E066  1E1D               	comf	??_glcdDrawRectangle+1,f,c
  6850  00E068  4A1C               	infsnz	??_glcdDrawRectangle,f,c
  6851  00E06A  2A1D               	incf	??_glcdDrawRectangle+1,f,c
  6852  00E06C  5015               	movf	glcdDrawRectangle@XE,w,c
  6853  00E06E  241C               	addwf	??_glcdDrawRectangle,w,c
  6854  00E070  6E0F               	movwf	___wmul@multiplier,c
  6855  00E072  0E00               	movlw	0
  6856  00E074  201D               	addwfc	??_glcdDrawRectangle+1,w,c
  6857  00E076  6E10               	movwf	___wmul@multiplier+1,c
  6858  00E078  5016               	movf	glcdDrawRectangle@YS,w,c
  6859  00E07A  6E1E               	movwf	(??_glcdDrawRectangle+2)& (0+255),c
  6860  00E07C  6A1F               	clrf	(??_glcdDrawRectangle+3)& (0+255),c
  6861  00E07E  1E1E               	comf	??_glcdDrawRectangle+2,f,c
  6862  00E080  1E1F               	comf	??_glcdDrawRectangle+3,f,c
  6863  00E082  4A1E               	infsnz	??_glcdDrawRectangle+2,f,c
  6864  00E084  2A1F               	incf	??_glcdDrawRectangle+3,f,c
  6865  00E086  5017               	movf	glcdDrawRectangle@YE,w,c
  6866  00E088  241E               	addwf	??_glcdDrawRectangle+2,w,c
  6867  00E08A  6E11               	movwf	___wmul@multiplicand,c
  6868  00E08C  0E00               	movlw	0
  6869  00E08E  201F               	addwfc	??_glcdDrawRectangle+3,w,c
  6870  00E090  6E12               	movwf	___wmul@multiplicand+1,c
  6871  00E092  EC1E  F067         	call	___wmul	;wreg free
  6872  00E096  C00F  F020         	movff	?___wmul,glcdDrawRectangle@numLoops
  6873  00E09A  C010  F021         	movff	?___wmul+1,glcdDrawRectangle@numLoops+1
  6874                           
  6875                           ;GLCD_PIC.c: 276: unsigned char colorData[3];
  6876                           ;GLCD_PIC.c: 277: colorData[0] = color & 0xFF;
  6877  00E09E  C018  F024         	movff	glcdDrawRectangle@color,glcdDrawRectangle@colorData
  6878                           
  6879                           ;GLCD_PIC.c: 278: colorData[1] = (color >> 8) & 0xFF;
  6880  00E0A2  C019  F025         	movff	glcdDrawRectangle@color+1,glcdDrawRectangle@colorData+1
  6881                           
  6882                           ;GLCD_PIC.c: 279: colorData[2] = (color >> 16) & 0xFF;
  6883  00E0A6  C01A  F026         	movff	glcdDrawRectangle@color+2,glcdDrawRectangle@colorData+2
  6884                           
  6885                           ;GLCD_PIC.c: 281: LATDbits.LATD0 = 0;
  6886  00E0AA  908C               	bcf	3980,0,c	;volatile
  6887                           
  6888                           ;GLCD_PIC.c: 282: LATDbits.LATD1 = 1;
  6889  00E0AC  828C               	bsf	3980,1,c	;volatile
  6890                           
  6891                           ;GLCD_PIC.c: 283: for(unsigned short i = 0; i < numLoops; i++){
  6892  00E0AE  0E00               	movlw	0
  6893  00E0B0  6E23               	movwf	glcdDrawRectangle@i+1,c
  6894  00E0B2  0E00               	movlw	0
  6895  00E0B4  6E22               	movwf	glcdDrawRectangle@i,c
  6896  00E0B6  D00B               	goto	l371
  6897  00E0B8                     
  6898                           ;GLCD_PIC.c: 284: spiSend(colorData[0]);
  6899  00E0B8  5024               	movf	glcdDrawRectangle@colorData,w,c
  6900  00E0BA  EC37  F066         	call	_spiSend
  6901                           
  6902                           ;GLCD_PIC.c: 285: spiSend(colorData[1]);
  6903  00E0BE  5025               	movf	glcdDrawRectangle@colorData+1,w,c
  6904  00E0C0  EC37  F066         	call	_spiSend
  6905                           
  6906                           ;GLCD_PIC.c: 286: spiSend(colorData[2]);
  6907  00E0C4  5026               	movf	glcdDrawRectangle@colorData+2,w,c
  6908  00E0C6  EC37  F066         	call	_spiSend
  6909  00E0CA  4A22               	infsnz	glcdDrawRectangle@i,f,c
  6910  00E0CC  2A23               	incf	glcdDrawRectangle@i+1,f,c
  6911  00E0CE                     l371:
  6912  00E0CE  5020               	movf	glcdDrawRectangle@numLoops,w,c
  6913  00E0D0  5C22               	subwf	glcdDrawRectangle@i,w,c
  6914  00E0D2  5021               	movf	glcdDrawRectangle@numLoops+1,w,c
  6915  00E0D4  5823               	subwfb	glcdDrawRectangle@i+1,w,c
  6916  00E0D6  A0D8               	btfss	status,0,c
  6917  00E0D8  D7EF               	goto	l372
  6918                           
  6919                           ;GLCD_PIC.c: 287: }
  6920                           ;GLCD_PIC.c: 288: LATDbits.LATD0 = 1;
  6921  00E0DA  808C               	bsf	3980,0,c	;volatile
  6922  00E0DC  0012               	return	
  6923  00E0DE                     __end_of_glcdDrawRectangle:
  6924                           	opt stack 0
  6925                           tblptru	equ	0xFF8
  6926                           tblptrh	equ	0xFF7
  6927                           tblptrl	equ	0xFF6
  6928                           tablat	equ	0xFF5
  6929                           prodh	equ	0xFF4
  6930                           prodl	equ	0xFF3
  6931                           postinc0	equ	0xFEE
  6932                           wreg	equ	0xFE8
  6933                           plusw1	equ	0xFE3
  6934                           indf2	equ	0xFDF
  6935                           postinc2	equ	0xFDE
  6936                           plusw2	equ	0xFDB
  6937                           fsr2h	equ	0xFDA
  6938                           fsr2l	equ	0xFD9
  6939                           status	equ	0xFD8
  6940                           
  6941 ;; *************** function _glcd_ramwr *****************
  6942 ;; Defined at:
  6943 ;;		line 156 in file "GLCD_PIC.c"
  6944 ;; Parameters:    Size  Location     Type
  6945 ;;		None
  6946 ;; Auto vars:     Size  Location     Type
  6947 ;;		None
  6948 ;; Return value:  Size  Location     Type
  6949 ;;                  1    wreg      void 
  6950 ;; Registers used:
  6951 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6952 ;; Tracked objects:
  6953 ;;		On entry : 0/0
  6954 ;;		On exit  : 0/0
  6955 ;;		Unchanged: 0/0
  6956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6961 ;;Total ram usage:        0 bytes
  6962 ;; Hardware stack levels used:    1
  6963 ;; Hardware stack levels required when called:    3
  6964 ;; This function calls:
  6965 ;;		_glcdTransfer
  6966 ;; This function is called by:
  6967 ;;		_glcdDrawRectangle
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           	psect	text30
  6972  00CCE8                     __ptext30:
  6973                           	opt stack 0
  6974  00CCE8                     _glcd_ramwr:
  6975                           	opt stack 24
  6976                           
  6977                           ;GLCD_PIC.c: 157: glcdTransfer(INST_RAMWR, CMD);
  6978                           
  6979                           ;incstack = 0
  6980  00CCE8  0E01               	movlw	1
  6981  00CCEA  6E04               	movwf	glcdTransfer@cmd,c
  6982  00CCEC  0E74               	movlw	low _INST_RAMWR
  6983  00CCEE  6EF6               	movwf	tblptrl,c
  6984  00CCF0                     	if	1	;There is more than 1 active tblptr byte
  6985  00CCF0  0EFF               	movlw	high _INST_RAMWR
  6986  00CCF2  6EF7               	movwf	tblptrh,c
  6987  00CCF4                     	endif
  6988  00CCF4                     	if	0	;There are less than 3 active tblptr bytes
  6989  00CCF4                     	endif
  6990  00CCF4  0008               	tblrd		*
  6991  00CCF6  50F5               	movf	tablat,w,c
  6992  00CCF8  EC31  F067         	call	_glcdTransfer
  6993  00CCFC  0012               	return		;funcret
  6994  00CCFE                     __end_of_glcd_ramwr:
  6995                           	opt stack 0
  6996                           tblptru	equ	0xFF8
  6997                           tblptrh	equ	0xFF7
  6998                           tblptrl	equ	0xFF6
  6999                           tablat	equ	0xFF5
  7000                           prodh	equ	0xFF4
  7001                           prodl	equ	0xFF3
  7002                           postinc0	equ	0xFEE
  7003                           wreg	equ	0xFE8
  7004                           plusw1	equ	0xFE3
  7005                           indf2	equ	0xFDF
  7006                           postinc2	equ	0xFDE
  7007                           plusw2	equ	0xFDB
  7008                           fsr2h	equ	0xFDA
  7009                           fsr2l	equ	0xFD9
  7010                           status	equ	0xFD8
  7011                           
  7012 ;; *************** function _glcdTransfer *****************
  7013 ;; Defined at:
  7014 ;;		line 97 in file "GLCD_PIC.c"
  7015 ;; Parameters:    Size  Location     Type
  7016 ;;  byte            1    wreg     unsigned char 
  7017 ;;  cmd             1    3[COMRAM] enum E2909
  7018 ;; Auto vars:     Size  Location     Type
  7019 ;;  byte            1    5[COMRAM] unsigned char 
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  1    wreg      void 
  7022 ;; Registers used:
  7023 ;;		wreg, status,2, status,0, cstack
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7029 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7030 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7031 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7032 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7033 ;;Total ram usage:        3 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:    2
  7036 ;; This function calls:
  7037 ;;		_spiSend
  7038 ;; This function is called by:
  7039 ;;		_glcd_swreset
  7040 ;;		_glcd_slpout
  7041 ;;		_glcd_setmadctl
  7042 ;;		_glcd_noron
  7043 ;;		_glcd_invoff
  7044 ;;		_glcd_dispon
  7045 ;;		_glcd_ramwr
  7046 ;;		_glcd_idmoff
  7047 ;;		_glcdDrawRectangle
  7048 ;;		_glcdSetCOLMOD
  7049 ;;		_initGLCD
  7050 ;;		_glcd_slpin
  7051 ;;		_glcd_ptlon
  7052 ;;		_glcd_invon
  7053 ;;		_glcd_dispoff
  7054 ;;		_glcd_teoff
  7055 ;;		_glcd_idmon
  7056 ;; This function uses a non-reentrant model
  7057 ;;
  7058                           
  7059                           	psect	text31
  7060  00CE62                     __ptext31:
  7061                           	opt stack 0
  7062  00CE62                     _glcdTransfer:
  7063                           	opt stack 25
  7064                           
  7065                           ;incstack = 0
  7066                           ;glcdTransfer@byte stored from wreg
  7067  00CE62  6E06               	movwf	glcdTransfer@byte,c
  7068                           
  7069                           ;GLCD_PIC.c: 98: LATDbits.LATD1 = (cmd == CMD) ? 0 : 1;
  7070  00CE64  0404               	decf	glcdTransfer@cmd,w,c
  7071  00CE66  B4D8               	btfsc	status,2,c
  7072  00CE68  D003               	goto	u2930
  7073  00CE6A  6A05               	clrf	??_glcdTransfer& (0+255),c
  7074  00CE6C  2A05               	incf	??_glcdTransfer& (0+255),f,c
  7075  00CE6E  D001               	goto	u2948
  7076  00CE70                     u2930:
  7077  00CE70  6A05               	clrf	??_glcdTransfer& (0+255),c
  7078  00CE72                     u2948:
  7079  00CE72  4605               	rlncf	??_glcdTransfer,f,c
  7080  00CE74  508C               	movf	3980,w,c	;volatile
  7081  00CE76  1805               	xorwf	??_glcdTransfer,w,c
  7082  00CE78  0BFD               	andlw	-3
  7083  00CE7A  1805               	xorwf	??_glcdTransfer,w,c
  7084  00CE7C  6E8C               	movwf	3980,c	;volatile
  7085                           
  7086                           ;GLCD_PIC.c: 102: LATDbits.LATD0 = 0;
  7087  00CE7E  908C               	bcf	3980,0,c	;volatile
  7088                           
  7089                           ;GLCD_PIC.c: 104: spiSend(byte);
  7090  00CE80  5006               	movf	glcdTransfer@byte,w,c
  7091  00CE82  EC37  F066         	call	_spiSend
  7092                           
  7093                           ;GLCD_PIC.c: 106: LATDbits.LATD0 = 1;
  7094  00CE86  808C               	bsf	3980,0,c	;volatile
  7095  00CE88  0012               	return		;funcret
  7096  00CE8A                     __end_of_glcdTransfer:
  7097                           	opt stack 0
  7098                           tblptru	equ	0xFF8
  7099                           tblptrh	equ	0xFF7
  7100                           tblptrl	equ	0xFF6
  7101                           tablat	equ	0xFF5
  7102                           prodh	equ	0xFF4
  7103                           prodl	equ	0xFF3
  7104                           postinc0	equ	0xFEE
  7105                           wreg	equ	0xFE8
  7106                           plusw1	equ	0xFE3
  7107                           indf2	equ	0xFDF
  7108                           postinc2	equ	0xFDE
  7109                           plusw2	equ	0xFDB
  7110                           fsr2h	equ	0xFDA
  7111                           fsr2l	equ	0xFD9
  7112                           status	equ	0xFD8
  7113                           
  7114 ;; *************** function _spiSend *****************
  7115 ;; Defined at:
  7116 ;;		line 29 in file "SPI_PIC.c"
  7117 ;; Parameters:    Size  Location     Type
  7118 ;;  val             1    wreg     unsigned char 
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;  val             1    2[COMRAM] unsigned char 
  7121 ;; Return value:  Size  Location     Type
  7122 ;;                  1    wreg      void 
  7123 ;; Registers used:
  7124 ;;		wreg, status,2, cstack
  7125 ;; Tracked objects:
  7126 ;;		On entry : 0/0
  7127 ;;		On exit  : 0/0
  7128 ;;		Unchanged: 0/0
  7129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7131 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;Total ram usage:        1 bytes
  7135 ;; Hardware stack levels used:    1
  7136 ;; Hardware stack levels required when called:    1
  7137 ;; This function calls:
  7138 ;;		_spiTransfer
  7139 ;; This function is called by:
  7140 ;;		_glcdTransfer
  7141 ;;		_glcdDrawRectangle
  7142 ;;		_SD_Command
  7143 ;;		_initSD
  7144 ;;		_SD_SendDummyBytes
  7145 ;;		_SD_SingleBlockWrite
  7146 ;;		_SD_MBW_Send
  7147 ;;		_SD_MBW_Stop
  7148 ;;		_SD_SingleBlockRead
  7149 ;;		_SD_MBR_Receive
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           	psect	text32
  7154  00CC6E                     __ptext32:
  7155                           	opt stack 0
  7156  00CC6E                     _spiSend:
  7157                           	opt stack 27
  7158                           
  7159                           ;incstack = 0
  7160                           ;spiSend@val stored from wreg
  7161  00CC6E  6E03               	movwf	spiSend@val,c
  7162                           
  7163                           ;SPI_PIC.c: 30: spiTransfer(val);
  7164  00CC70  5003               	movf	spiSend@val,w,c
  7165  00CC72  ECE8  F066         	call	_spiTransfer
  7166  00CC76  0012               	return		;funcret
  7167  00CC78                     __end_of_spiSend:
  7168                           	opt stack 0
  7169                           tblptru	equ	0xFF8
  7170                           tblptrh	equ	0xFF7
  7171                           tblptrl	equ	0xFF6
  7172                           tablat	equ	0xFF5
  7173                           prodh	equ	0xFF4
  7174                           prodl	equ	0xFF3
  7175                           postinc0	equ	0xFEE
  7176                           wreg	equ	0xFE8
  7177                           plusw1	equ	0xFE3
  7178                           indf2	equ	0xFDF
  7179                           postinc2	equ	0xFDE
  7180                           plusw2	equ	0xFDB
  7181                           fsr2h	equ	0xFDA
  7182                           fsr2l	equ	0xFD9
  7183                           status	equ	0xFD8
  7184                           
  7185 ;; *************** function _spiTransfer *****************
  7186 ;; Defined at:
  7187 ;;		line 14 in file "SPI_PIC.c"
  7188 ;; Parameters:    Size  Location     Type
  7189 ;;  byteToTransf    1    wreg     unsigned char 
  7190 ;; Auto vars:     Size  Location     Type
  7191 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  7192 ;; Return value:  Size  Location     Type
  7193 ;;                  1    wreg      unsigned char 
  7194 ;; Registers used:
  7195 ;;		wreg, status,2
  7196 ;; Tracked objects:
  7197 ;;		On entry : 0/0
  7198 ;;		On exit  : 0/0
  7199 ;;		Unchanged: 0/0
  7200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7202 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7203 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7204 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7205 ;;Total ram usage:        2 bytes
  7206 ;; Hardware stack levels used:    1
  7207 ;; This function calls:
  7208 ;;		Nothing
  7209 ;; This function is called by:
  7210 ;;		_spiSend
  7211 ;;		_spiReceive
  7212 ;;		_SD_SingleBlockWrite
  7213 ;;		_SD_MBW_Send
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           	psect	text33
  7218  00CDD0                     __ptext33:
  7219                           	opt stack 0
  7220  00CDD0                     _spiTransfer:
  7221                           	opt stack 27
  7222                           
  7223                           ;incstack = 0
  7224                           ;spiTransfer@byteToTransfer stored from wreg
  7225  00CDD0  6E02               	movwf	spiTransfer@byteToTransfer,c
  7226                           
  7227                           ;SPI_PIC.c: 18: SSPBUF = byteToTransfer;
  7228  00CDD2  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  7229  00CDD6                     l3662:
  7230  00CDD6  B69E               	btfsc	3998,3,c	;volatile
  7231  00CDD8  D002               	goto	u2900
  7232  00CDDA  0E01               	movlw	1
  7233  00CDDC  D001               	goto	u2902
  7234  00CDDE                     u2900:
  7235  00CDDE  0E00               	movlw	0
  7236  00CDE0                     u2902:
  7237  00CDE0  6E01               	movwf	??_spiTransfer& (0+255),c
  7238  00CDE2  B0C7               	btfsc	4039,0,c	;volatile
  7239  00CDE4  D002               	goto	u2910
  7240  00CDE6  0E01               	movlw	1
  7241  00CDE8  D001               	goto	u2912
  7242  00CDEA                     u2910:
  7243  00CDEA  0E00               	movlw	0
  7244  00CDEC                     u2912:
  7245  00CDEC  1001               	iorwf	??_spiTransfer,w,c
  7246  00CDEE  E1F3               	bnz	l3662
  7247                           
  7248                           ;SPI_PIC.c: 24: }
  7249                           ;SPI_PIC.c: 26: return SSPBUF;
  7250  00CDF0  50C9               	movf	4041,w,c	;volatile
  7251  00CDF2  0012               	return	
  7252  00CDF4                     __end_of_spiTransfer:
  7253                           	opt stack 0
  7254                           tblptru	equ	0xFF8
  7255                           tblptrh	equ	0xFF7
  7256                           tblptrl	equ	0xFF6
  7257                           tablat	equ	0xFF5
  7258                           prodh	equ	0xFF4
  7259                           prodl	equ	0xFF3
  7260                           postinc0	equ	0xFEE
  7261                           wreg	equ	0xFE8
  7262                           plusw1	equ	0xFE3
  7263                           indf2	equ	0xFDF
  7264                           postinc2	equ	0xFDE
  7265                           plusw2	equ	0xFDB
  7266                           fsr2h	equ	0xFDA
  7267                           fsr2l	equ	0xFD9
  7268                           status	equ	0xFD8
  7269                           
  7270 ;; *************** function _testA2D *****************
  7271 ;; Defined at:
  7272 ;;		line 394 in file "main.c"
  7273 ;; Parameters:    Size  Location     Type
  7274 ;;		None
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;		None
  7277 ;; Return value:  Size  Location     Type
  7278 ;;                  1    wreg      void 
  7279 ;; Registers used:
  7280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7281 ;; Tracked objects:
  7282 ;;		On entry : 0/0
  7283 ;;		On exit  : 0/0
  7284 ;;		Unchanged: 0/0
  7285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7288 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7289 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7290 ;;Total ram usage:        2 bytes
  7291 ;; Hardware stack levels used:    1
  7292 ;; Hardware stack levels required when called:    5
  7293 ;; This function calls:
  7294 ;;		_lcdInst
  7295 ;;		_printf
  7296 ;;		_readADC
  7297 ;; This function is called by:
  7298 ;;		_main
  7299 ;; This function uses a non-reentrant model
  7300 ;;
  7301                           
  7302                           	psect	text34
  7303  00D554                     __ptext34:
  7304                           	opt stack 0
  7305  00D554                     _testA2D:
  7306                           	opt stack 25
  7307                           
  7308                           ;main.c: 395: ADCON1 = 0x0B;
  7309                           
  7310                           ;incstack = 0
  7311  00D554  0E0B               	movlw	11
  7312  00D556  6EC1               	movwf	4033,c	;volatile
  7313  00D558                     
  7314                           ;main.c: 397: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  7315  00D558  0E01               	movlw	1
  7316  00D55A  EC41  F066         	call	_lcdInst
  7317  00D55E  0E11               	movlw	17
  7318  00D560  6E68               	movwf	??_testA2D& (0+255),c
  7319  00D562  0E3A               	movlw	58
  7320  00D564                     u5777:
  7321  00D564  2EE8               	decfsz	wreg,f,c
  7322  00D566  D7FE               	bra	u5777
  7323  00D568  2E68               	decfsz	??_testA2D& (0+255),f,c
  7324  00D56A  D7FC               	bra	u5777
  7325  00D56C  D000               	nop2	
  7326                           
  7327                           ;main.c: 398: printf("RA2: %.3x", readADC(2));
  7328  00D56E  0EEA               	movlw	low STR_9
  7329  00D570  6E40               	movwf	printf@f,c
  7330  00D572  0EFF               	movlw	high STR_9
  7331  00D574  6E41               	movwf	printf@f+1,c
  7332  00D576  0E02               	movlw	2
  7333  00D578  EC88  F067         	call	_readADC
  7334  00D57C  C001  F042         	movff	?_readADC,?_printf+2
  7335  00D580  C002  F043         	movff	?_readADC+1,?_printf+3
  7336  00D584  EC72  F07A         	call	_printf	;wreg free
  7337                           
  7338                           ;main.c: 399: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  7339  00D588  0E86               	movlw	low _LCD_LINE2_ADDR
  7340  00D58A  6EF6               	movwf	tblptrl,c
  7341  00D58C                     	if	1	;There is more than 1 active tblptr byte
  7342  00D58C  0EFF               	movlw	high _LCD_LINE2_ADDR
  7343  00D58E  6EF7               	movwf	tblptrh,c
  7344  00D590                     	endif
  7345  00D590                     	if	0	;There are less than 3 active tblptr bytes
  7346  00D590                     	endif
  7347  00D590  0008               	tblrd		*
  7348  00D592  50F5               	movf	tablat,w,c
  7349  00D594  0980               	iorlw	128
  7350  00D596  EC41  F066         	call	_lcdInst
  7351                           
  7352                           ;main.c: 400: printf("RA3: %.3x", readADC(3));
  7353  00D59A  0EF4               	movlw	low STR_10
  7354  00D59C  6E40               	movwf	printf@f,c
  7355  00D59E  0EFF               	movlw	high STR_10
  7356  00D5A0  6E41               	movwf	printf@f+1,c
  7357  00D5A2  0E03               	movlw	3
  7358  00D5A4  EC88  F067         	call	_readADC
  7359  00D5A8  C001  F042         	movff	?_readADC,?_printf+2
  7360  00D5AC  C002  F043         	movff	?_readADC+1,?_printf+3
  7361  00D5B0  EC72  F07A         	call	_printf	;wreg free
  7362                           
  7363                           ;main.c: 401: _delay((unsigned long)((100)*(10000000/4000.0)));
  7364  00D5B4  0E02               	movlw	2
  7365  00D5B6  6E69               	movwf	(??_testA2D+1)& (0+255),c
  7366  00D5B8  0E45               	movlw	69
  7367  00D5BA  6E68               	movwf	??_testA2D& (0+255),c
  7368  00D5BC  0EAA               	movlw	170
  7369  00D5BE                     u5787:
  7370  00D5BE  2EE8               	decfsz	wreg,f,c
  7371  00D5C0  D7FE               	bra	u5787
  7372  00D5C2  2E68               	decfsz	??_testA2D& (0+255),f,c
  7373  00D5C4  D7FC               	bra	u5787
  7374  00D5C6  2E69               	decfsz	(??_testA2D+1)& (0+255),f,c
  7375  00D5C8  D7FA               	bra	u5787
  7376                           
  7377                           ;main.c: 404: if(PORTBbits.RB1 == 1){
  7378  00D5CA  A281               	btfss	3969,1,c	;volatile
  7379  00D5CC  D7C5               	goto	l204
  7380  00D5CE                     u5070:
  7381                           
  7382                           ;main.c: 408: continue;
  7383                           
  7384                           ;main.c: 407: while(PORTBbits.RB1 == 1){
  7385  00D5CE  B281               	btfsc	3969,1,c	;volatile
  7386  00D5D0  D7FE               	goto	u5070
  7387                           
  7388                           ;main.c: 409: }
  7389                           ;main.c: 410: ADCON1 = 0x0F;
  7390  00D5D2  0E0F               	movlw	15
  7391  00D5D4  6EC1               	movwf	4033,c	;volatile
  7392                           
  7393                           ;main.c: 411: return;
  7394  00D5D6  0012               	return	
  7395  00D5D8                     __end_of_testA2D:
  7396                           	opt stack 0
  7397                           tblptru	equ	0xFF8
  7398                           tblptrh	equ	0xFF7
  7399                           tblptrl	equ	0xFF6
  7400                           tablat	equ	0xFF5
  7401                           prodh	equ	0xFF4
  7402                           prodl	equ	0xFF3
  7403                           postinc0	equ	0xFEE
  7404                           wreg	equ	0xFE8
  7405                           plusw1	equ	0xFE3
  7406                           indf2	equ	0xFDF
  7407                           postinc2	equ	0xFDE
  7408                           plusw2	equ	0xFDB
  7409                           fsr2h	equ	0xFDA
  7410                           fsr2l	equ	0xFD9
  7411                           status	equ	0xFD8
  7412                           
  7413 ;; *************** function _readADC *****************
  7414 ;; Defined at:
  7415 ;;		line 378 in file "main.c"
  7416 ;; Parameters:    Size  Location     Type
  7417 ;;  channel         1    wreg     unsigned char 
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;  channel         1    4[COMRAM] unsigned char 
  7420 ;; Return value:  Size  Location     Type
  7421 ;;                  2    0[COMRAM] unsigned short 
  7422 ;; Registers used:
  7423 ;;		wreg, status,2, status,0
  7424 ;; Tracked objects:
  7425 ;;		On entry : 0/0
  7426 ;;		On exit  : 0/0
  7427 ;;		Unchanged: 0/0
  7428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7429 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7430 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7431 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7432 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7433 ;;Total ram usage:        5 bytes
  7434 ;; Hardware stack levels used:    1
  7435 ;; This function calls:
  7436 ;;		Nothing
  7437 ;; This function is called by:
  7438 ;;		_testA2D
  7439 ;; This function uses a non-reentrant model
  7440 ;;
  7441                           
  7442                           	psect	text35
  7443  00CF10                     __ptext35:
  7444                           	opt stack 0
  7445  00CF10                     _readADC:
  7446                           	opt stack 29
  7447                           
  7448                           ;incstack = 0
  7449                           ;readADC@channel stored from wreg
  7450  00CF10  6E05               	movwf	readADC@channel,c
  7451                           
  7452                           ;main.c: 379: ADCON0 = (channel & 0x0F) << 2;
  7453  00CF12  C005  F003         	movff	readADC@channel,??_readADC
  7454  00CF16  0E0F               	movlw	15
  7455  00CF18  1603               	andwf	??_readADC,f,c
  7456  00CF1A  90D8               	bcf	status,0,c
  7457  00CF1C  3603               	rlcf	??_readADC,f,c
  7458  00CF1E  90D8               	bcf	status,0,c
  7459  00CF20  3403               	rlcf	??_readADC,w,c
  7460  00CF22  6EC2               	movwf	4034,c	;volatile
  7461                           
  7462                           ;main.c: 380: ADON = 1;
  7463  00CF24  80C2               	bsf	4034,0,c	;volatile
  7464                           
  7465                           ;main.c: 381: ADCON0bits.GO = 1;
  7466  00CF26  82C2               	bsf	4034,1,c	;volatile
  7467  00CF28                     
  7468                           ;main.c: 383: continue;
  7469  00CF28  B2C2               	btfsc	4034,1,c	;volatile
  7470  00CF2A  D7FE               	goto	l199
  7471                           
  7472                           ;main.c: 384: }
  7473                           ;main.c: 385: return (ADRESH << 8) | ADRESL;
  7474  00CF2C  50C3               	movf	4035,w,c	;volatile
  7475  00CF2E  CFC4 F003          	movff	4036,??_readADC	;volatile
  7476  00CF32  6A04               	clrf	(??_readADC+1)& (0+255),c
  7477  00CF34  C003  F004         	movff	??_readADC,??_readADC+1
  7478  00CF38  6A03               	clrf	??_readADC,c
  7479  00CF3A  1003               	iorwf	??_readADC,w,c
  7480  00CF3C  6E01               	movwf	?_readADC,c
  7481  00CF3E  5004               	movf	??_readADC+1,w,c
  7482  00CF40  6E02               	movwf	?_readADC+1,c
  7483  00CF42  0012               	return	
  7484  00CF44                     __end_of_readADC:
  7485                           	opt stack 0
  7486                           tblptru	equ	0xFF8
  7487                           tblptrh	equ	0xFF7
  7488                           tblptrl	equ	0xFF6
  7489                           tablat	equ	0xFF5
  7490                           prodh	equ	0xFF4
  7491                           prodl	equ	0xFF3
  7492                           postinc0	equ	0xFEE
  7493                           wreg	equ	0xFE8
  7494                           plusw1	equ	0xFE3
  7495                           indf2	equ	0xFDF
  7496                           postinc2	equ	0xFDE
  7497                           plusw2	equ	0xFDB
  7498                           fsr2h	equ	0xFDA
  7499                           fsr2l	equ	0xFD9
  7500                           status	equ	0xFD8
  7501                           
  7502 ;; *************** function _printf *****************
  7503 ;; Defined at:
  7504 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;  f               2   63[COMRAM] PTR const unsigned char 
  7507 ;;		 -> STR_10(10), STR_9(10), STR_8(12), STR_7(17), 
  7508 ;;		 -> STR_6(15), STR_5(15), STR_4(12), STR_3(11), 
  7509 ;;		 -> STR_2(12), STR_1(11), 
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;  idx             1   80[COMRAM] unsigned char 
  7512 ;;  tmpval          4   87[COMRAM] struct .
  7513 ;;  val             4   83[COMRAM] unsigned long 
  7514 ;;  fval            3   97[COMRAM] unsigned long 
  7515 ;;  cp              3    0        PTR const unsigned char 
  7516 ;;  prec            2  100[COMRAM] int 
  7517 ;;  width           2   95[COMRAM] int 
  7518 ;;  flag            2   93[COMRAM] unsigned short 
  7519 ;;  exp             2   91[COMRAM] int 
  7520 ;;  ap              2   81[COMRAM] PTR void [1]
  7521 ;;		 -> ?_printf(2), 
  7522 ;;  len             2    0        unsigned int 
  7523 ;;  c               1  102[COMRAM] char 
  7524 ;;  d               1    0        unsigned char 
  7525 ;; Return value:  Size  Location     Type
  7526 ;;                  2   63[COMRAM] int 
  7527 ;; Registers used:
  7528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7529 ;; Tracked objects:
  7530 ;;		On entry : 0/0
  7531 ;;		On exit  : 0/0
  7532 ;;		Unchanged: 0/0
  7533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7534 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Locals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7537 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7538 ;;Total ram usage:       40 bytes
  7539 ;; Hardware stack levels used:    1
  7540 ;; Hardware stack levels required when called:    4
  7541 ;; This function calls:
  7542 ;;		___awdiv
  7543 ;;		___ftadd
  7544 ;;		___ftge
  7545 ;;		___ftmul
  7546 ;;		___ftneg
  7547 ;;		___ftsub
  7548 ;;		___fttol
  7549 ;;		___lldiv
  7550 ;;		___llmod
  7551 ;;		___lltoft
  7552 ;;		___wmul
  7553 ;;		__div_to_l_
  7554 ;;		__tdiv_to_l_
  7555 ;;		_fround
  7556 ;;		_isdigit
  7557 ;;		_putch
  7558 ;;		_scale
  7559 ;; This function is called by:
  7560 ;;		_main
  7561 ;;		_testRTCGet
  7562 ;;		_testSDCard
  7563 ;;		_testA2D
  7564 ;; This function uses a non-reentrant model
  7565 ;;
  7566                           
  7567                           	psect	text36
  7568  00F4E4                     __ptext36:
  7569                           	opt stack 0
  7570  00F4E4                     _printf:
  7571                           	opt stack 25
  7572                           
  7573                           ;doprnt.c: 466: va_list ap;
  7574                           ;doprnt.c: 499: signed char c;
  7575                           ;doprnt.c: 501: int width;
  7576                           ;doprnt.c: 504: int prec;
  7577                           ;doprnt.c: 508: unsigned short flag;
  7578                           ;doprnt.c: 515: char d;
  7579                           ;doprnt.c: 516: double fval;
  7580                           ;doprnt.c: 517: int exp;
  7581                           ;doprnt.c: 523: union {
  7582                           ;doprnt.c: 524: unsigned long vd;
  7583                           ;doprnt.c: 525: double integ;
  7584                           ;doprnt.c: 526: } tmpval;
  7585                           ;doprnt.c: 528: unsigned long val;
  7586                           ;doprnt.c: 529: unsigned len;
  7587                           ;doprnt.c: 530: const char * cp;
  7588                           ;doprnt.c: 533: *ap = __va_start();
  7589                           
  7590                           ;incstack = 0
  7591  00F4E4  0E42               	movlw	low (?_printf+2)
  7592  00F4E6  6E52               	movwf	printf@ap,c
  7593  00F4E8  0E00               	movlw	high (?_printf+2)
  7594  00F4EA  6E53               	movwf	printf@ap+1,c
  7595                           
  7596                           ;doprnt.c: 536: while(c = *f++) {
  7597  00F4EC  EF21  F07F         	goto	u4570
  7598  00F4F0                     
  7599                           ;doprnt.c: 538: if(c != '%')
  7600  00F4F0  0E25               	movlw	37
  7601  00F4F2  1867               	xorwf	printf@c,w,c
  7602  00F4F4  B4D8               	btfsc	status,2,c
  7603  00F4F6  D005               	goto	l817
  7604                           
  7605                           ;doprnt.c: 540: {
  7606                           ;doprnt.c: 541: (putch(c) );
  7607  00F4F8  5067               	movf	printf@c,w,c
  7608  00F4FA  EC47  F066         	call	_putch
  7609                           
  7610                           ;doprnt.c: 542: continue;
  7611  00F4FE  EF21  F07F         	goto	u4570
  7612  00F502                     l817:
  7613                           
  7614                           ;doprnt.c: 543: }
  7615                           ;doprnt.c: 546: width = 0;
  7616  00F502  0E00               	movlw	0
  7617  00F504  6E61               	movwf	printf@width+1,c
  7618  00F506  0E00               	movlw	0
  7619  00F508  6E60               	movwf	printf@width,c
  7620                           
  7621                           ;doprnt.c: 548: flag = 0;
  7622  00F50A  0E00               	movlw	0
  7623  00F50C  6E5F               	movwf	printf@flag+1,c
  7624  00F50E  0E00               	movlw	0
  7625  00F510  6E5E               	movwf	printf@flag,c
  7626                           
  7627                           ;doprnt.c: 551: switch(*f) {
  7628                           
  7629                           ;doprnt.c: 550: for(;;) {
  7630  00F512  D003               	goto	l819
  7631  00F514                     
  7632                           ;doprnt.c: 580: flag |= 0x04;
  7633  00F514  845E               	bsf	printf@flag,2,c
  7634                           
  7635                           ;doprnt.c: 581: f++;
  7636  00F516  4A40               	infsnz	printf@f,f,c
  7637  00F518  2A41               	incf	printf@f+1,f,c
  7638  00F51A                     l819:
  7639  00F51A  C040  FFF6         	movff	printf@f,tblptrl
  7640  00F51E  C041  FFF7         	movff	printf@f+1,tblptrh
  7641  00F522                     	if	0	;tblptru may be non-zero
  7642  00F522                     	endif
  7643  00F522                     	if	0	;tblptru may be non-zero
  7644  00F522                     	endif
  7645  00F522  0008               	tblrd		*
  7646  00F524  50F5               	movf	tablat,w,c
  7647                           
  7648                           ; Switch size 1, requested type "space"
  7649                           ; Number of cases is 1, Range of values is 48 to 48
  7650                           ; switch strategies available:
  7651                           ; Name         Instructions Cycles
  7652                           ; simple_byte            4     3 (average)
  7653                           ;	Chosen strategy is simple_byte
  7654  00F526  0A30               	xorlw	48	; case 48
  7655  00F528  B4D8               	btfsc	status,2,c
  7656  00F52A  D7F4               	goto	l820
  7657                           
  7658                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  7659                           
  7660                           ;doprnt.c: 586: }
  7661                           
  7662                           ;doprnt.c: 585: break;
  7663  00F52C  C040  FFF6         	movff	printf@f,tblptrl
  7664  00F530  C041  FFF7         	movff	printf@f+1,tblptrh
  7665  00F534                     	if	0	;tblptru may be non-zero
  7666  00F534                     	endif
  7667  00F534                     	if	0	;tblptru may be non-zero
  7668  00F534                     	endif
  7669  00F534  0008               	tblrd		*
  7670  00F536  50F5               	movf	tablat,w,c
  7671  00F538  ECB7  F066         	call	_isdigit
  7672  00F53C  A0D8               	btfss	status,0,c
  7673  00F53E  D032               	goto	u4050
  7674                           
  7675                           ;doprnt.c: 598: width = 0;
  7676  00F540  0E00               	movlw	0
  7677  00F542  6E61               	movwf	printf@width+1,c
  7678  00F544  0E00               	movlw	0
  7679  00F546  6E60               	movwf	printf@width,c
  7680  00F548                     
  7681                           ;doprnt.c: 600: width *= 10;
  7682  00F548  C060  F00F         	movff	printf@width,___wmul@multiplier
  7683  00F54C  C061  F010         	movff	printf@width+1,___wmul@multiplier+1
  7684  00F550  0E00               	movlw	0
  7685  00F552  6E12               	movwf	___wmul@multiplicand+1,c
  7686  00F554  0E0A               	movlw	10
  7687  00F556  6E11               	movwf	___wmul@multiplicand,c
  7688  00F558  EC1E  F067         	call	___wmul	;wreg free
  7689  00F55C  C00F  F060         	movff	?___wmul,printf@width
  7690  00F560  C010  F061         	movff	?___wmul+1,printf@width+1
  7691                           
  7692                           ;doprnt.c: 601: width += *f++ - '0';
  7693  00F564  0ED0               	movlw	208
  7694  00F566  6E48               	movwf	??_printf& (0+255),c
  7695  00F568  0EFF               	movlw	255
  7696  00F56A  6E49               	movwf	(??_printf+1)& (0+255),c
  7697  00F56C  C040  FFF6         	movff	printf@f,tblptrl
  7698  00F570  C041  FFF7         	movff	printf@f+1,tblptrh
  7699  00F574                     	if	0	;tblptru may be non-zero
  7700  00F574                     	endif
  7701  00F574                     	if	0	;tblptru may be non-zero
  7702  00F574                     	endif
  7703  00F574  0008               	tblrd		*
  7704  00F576  50F5               	movf	tablat,w,c
  7705  00F578  6E4A               	movwf	(??_printf+2)& (0+255),c
  7706  00F57A  6A4B               	clrf	(??_printf+3)& (0+255),c
  7707  00F57C  5048               	movf	??_printf,w,c
  7708  00F57E  264A               	addwf	??_printf+2,f,c
  7709  00F580  5049               	movf	??_printf+1,w,c
  7710  00F582  224B               	addwfc	??_printf+3,f,c
  7711  00F584  504A               	movf	??_printf+2,w,c
  7712  00F586  2660               	addwf	printf@width,f,c
  7713  00F588  504B               	movf	??_printf+3,w,c
  7714  00F58A  2261               	addwfc	printf@width+1,f,c
  7715  00F58C  4A40               	infsnz	printf@f,f,c
  7716  00F58E  2A41               	incf	printf@f+1,f,c
  7717                           
  7718                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  7719  00F590  C040  FFF6         	movff	printf@f,tblptrl
  7720  00F594  C041  FFF7         	movff	printf@f+1,tblptrh
  7721  00F598                     	if	0	;tblptru may be non-zero
  7722  00F598                     	endif
  7723  00F598                     	if	0	;tblptru may be non-zero
  7724  00F598                     	endif
  7725  00F598  0008               	tblrd		*
  7726  00F59A  50F5               	movf	tablat,w,c
  7727  00F59C  ECB7  F066         	call	_isdigit
  7728  00F5A0  B0D8               	btfsc	status,0,c
  7729  00F5A2  D7D2               	goto	l825
  7730  00F5A4                     u4050:
  7731                           
  7732                           ;doprnt.c: 608: }
  7733                           ;doprnt.c: 611: if(*f == '.') {
  7734  00F5A4  C040  FFF6         	movff	printf@f,tblptrl
  7735  00F5A8  C041  FFF7         	movff	printf@f+1,tblptrh
  7736  00F5AC                     	if	0	;tblptru may be non-zero
  7737  00F5AC                     	endif
  7738  00F5AC                     	if	0	;tblptru may be non-zero
  7739  00F5AC                     	endif
  7740  00F5AC  0008               	tblrd		*
  7741  00F5AE  50F5               	movf	tablat,w,c
  7742  00F5B0  0A2E               	xorlw	46
  7743  00F5B2  A4D8               	btfss	status,2,c
  7744  00F5B4  D02E               	goto	l827
  7745                           
  7746                           ;doprnt.c: 612: flag |= 0x4000;
  7747  00F5B6  8C5F               	bsf	printf@flag+1,6,c
  7748                           
  7749                           ;doprnt.c: 613: f++;
  7750  00F5B8  4A40               	infsnz	printf@f,f,c
  7751  00F5BA  2A41               	incf	printf@f+1,f,c
  7752                           
  7753                           ;doprnt.c: 620: {
  7754                           ;doprnt.c: 621: prec = 0;
  7755  00F5BC  0E00               	movlw	0
  7756  00F5BE  6E66               	movwf	printf@prec+1,c
  7757  00F5C0  0E00               	movlw	0
  7758  00F5C2  6E65               	movwf	printf@prec,c
  7759                           
  7760                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  7761  00F5C4  D01B               	goto	l828
  7762  00F5C6                     
  7763                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  7764  00F5C6  C065  F00F         	movff	printf@prec,___wmul@multiplier
  7765  00F5CA  C066  F010         	movff	printf@prec+1,___wmul@multiplier+1
  7766  00F5CE  0E00               	movlw	0
  7767  00F5D0  6E12               	movwf	___wmul@multiplicand+1,c
  7768  00F5D2  0E0A               	movlw	10
  7769  00F5D4  6E11               	movwf	___wmul@multiplicand,c
  7770  00F5D6  EC1E  F067         	call	___wmul	;wreg free
  7771  00F5DA  C040  FFF6         	movff	printf@f,tblptrl
  7772  00F5DE  C041  FFF7         	movff	printf@f+1,tblptrh
  7773  00F5E2                     	if	0	;tblptru may be non-zero
  7774  00F5E2                     	endif
  7775  00F5E2                     	if	0	;tblptru may be non-zero
  7776  00F5E2                     	endif
  7777  00F5E2  0008               	tblrd		*
  7778  00F5E4  50F5               	movf	tablat,w,c
  7779  00F5E6  260F               	addwf	?___wmul,f,c
  7780  00F5E8  0E00               	movlw	0
  7781  00F5EA  2210               	addwfc	?___wmul+1,f,c
  7782  00F5EC  0ED0               	movlw	208
  7783  00F5EE  240F               	addwf	?___wmul,w,c
  7784  00F5F0  6E65               	movwf	printf@prec,c
  7785  00F5F2  0EFF               	movlw	255
  7786  00F5F4  2010               	addwfc	?___wmul+1,w,c
  7787  00F5F6  6E66               	movwf	printf@prec+1,c
  7788  00F5F8  4A40               	infsnz	printf@f,f,c
  7789  00F5FA  2A41               	incf	printf@f+1,f,c
  7790  00F5FC                     l828:
  7791  00F5FC  C040  FFF6         	movff	printf@f,tblptrl
  7792  00F600  C041  FFF7         	movff	printf@f+1,tblptrh
  7793  00F604                     	if	0	;tblptru may be non-zero
  7794  00F604                     	endif
  7795  00F604                     	if	0	;tblptru may be non-zero
  7796  00F604                     	endif
  7797  00F604  0008               	tblrd		*
  7798  00F606  50F5               	movf	tablat,w,c
  7799  00F608  ECB7  F066         	call	_isdigit
  7800  00F60C  A0D8               	btfss	status,0,c
  7801  00F60E  D009               	goto	l832
  7802  00F610  D7DA               	goto	l829
  7803  00F612                     l827:
  7804                           
  7805                           ;doprnt.c: 626: prec = 0;
  7806  00F612  0E00               	movlw	0
  7807  00F614  6E66               	movwf	printf@prec+1,c
  7808  00F616  0E00               	movlw	0
  7809  00F618  6E65               	movwf	printf@prec,c
  7810                           
  7811                           ;doprnt.c: 628: flag |= 0x1000;
  7812  00F61A  885F               	bsf	printf@flag+1,4,c
  7813                           
  7814                           ;doprnt.c: 630: }
  7815                           ;doprnt.c: 635: switch(c = *f++) {
  7816  00F61C  D002               	goto	l832
  7817  00F61E                     
  7818                           ;doprnt.c: 663: flag |= 0x400;
  7819  00F61E  845F               	bsf	printf@flag+1,2,c
  7820                           
  7821                           ;doprnt.c: 723: break;
  7822                           
  7823                           ;doprnt.c: 718: case 'x':
  7824                           
  7825                           ;doprnt.c: 664: break;
  7826  00F620  D013               	goto	l836
  7827  00F622                     l832:
  7828  00F622  C040  FFF6         	movff	printf@f,tblptrl
  7829  00F626  C041  FFF7         	movff	printf@f+1,tblptrh
  7830  00F62A  4A40               	infsnz	printf@f,f,c
  7831  00F62C  2A41               	incf	printf@f+1,f,c
  7832  00F62E                     	if	0	;tblptru may be non-zero
  7833  00F62E                     	endif
  7834  00F62E                     	if	0	;tblptru may be non-zero
  7835  00F62E                     	endif
  7836  00F62E  0008               	tblrd		*
  7837  00F630  CFF5 F067          	movff	tablat,printf@c
  7838  00F634  5067               	movf	printf@c,w,c
  7839                           
  7840                           ; Switch size 1, requested type "space"
  7841                           ; Number of cases is 3, Range of values is 0 to 120
  7842                           ; switch strategies available:
  7843                           ; Name         Instructions Cycles
  7844                           ; simple_byte           10     6 (average)
  7845                           ;	Chosen strategy is simple_byte
  7846  00F636  0A00               	xorlw	0	; case 0
  7847  00F638  B4D8               	btfsc	status,2,c
  7848  00F63A  0012               	return	
  7849  00F63C  0A66               	xorlw	102	; case 102
  7850  00F63E  B4D8               	btfsc	status,2,c
  7851  00F640  D7EE               	goto	l835
  7852  00F642  0A1E               	xorlw	30	; case 120
  7853  00F644  A4D8               	btfss	status,2,c
  7854  00F646  D3FD               	goto	u4570
  7855  00F648                     l836:
  7856                           
  7857                           ;doprnt.c: 825: if(flag & (0x700)) {
  7858  00F648  0E07               	movlw	7
  7859  00F64A  145F               	andwf	printf@flag+1,w,c
  7860  00F64C  B4D8               	btfsc	status,2,c
  7861  00F64E  D2EE               	goto	l839
  7862                           
  7863                           ;doprnt.c: 827: if(flag & 0x1000)
  7864  00F650  A85F               	btfss	printf@flag+1,4,c
  7865  00F652  D004               	goto	l840
  7866                           
  7867                           ;doprnt.c: 829: prec = 6;
  7868  00F654  0E00               	movlw	0
  7869  00F656  6E66               	movwf	printf@prec+1,c
  7870  00F658  0E06               	movlw	6
  7871  00F65A  6E65               	movwf	printf@prec,c
  7872  00F65C                     l840:
  7873                           
  7874                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  7875  00F65C  C052  FFD9         	movff	printf@ap,fsr2l
  7876  00F660  C053  FFDA         	movff	printf@ap+1,fsr2h
  7877  00F664  CFDE F062          	movff	postinc2,printf@fval
  7878  00F668  CFDE F063          	movff	postinc2,printf@fval+1
  7879  00F66C  CFDD F064          	movff	postdec2,printf@fval+2
  7880  00F670  0E03               	movlw	3
  7881  00F672  2652               	addwf	printf@ap,f,c
  7882  00F674  0E00               	movlw	0
  7883  00F676  2253               	addwfc	printf@ap+1,f,c
  7884                           
  7885                           ;doprnt.c: 831: if(fval < 0.0) {
  7886  00F678  AE64               	btfss	printf@fval+2,7,c
  7887  00F67A  D010               	goto	l841
  7888                           
  7889                           ;doprnt.c: 832: fval = -fval;
  7890  00F67C  C062  F001         	movff	printf@fval,___ftneg@f1
  7891  00F680  C063  F002         	movff	printf@fval+1,___ftneg@f1+1
  7892  00F684  C064  F003         	movff	printf@fval+2,___ftneg@f1+2
  7893  00F688  ECD6  F066         	call	___ftneg	;wreg free
  7894  00F68C  C001  F062         	movff	?___ftneg,printf@fval
  7895  00F690  C002  F063         	movff	?___ftneg+1,printf@fval+1
  7896  00F694  C003  F064         	movff	?___ftneg+2,printf@fval+2
  7897                           
  7898                           ;doprnt.c: 833: flag |= 0x03;
  7899  00F698  0E03               	movlw	3
  7900  00F69A  125E               	iorwf	printf@flag,f,c
  7901  00F69C                     l841:
  7902                           
  7903                           ;doprnt.c: 834: }
  7904                           ;doprnt.c: 835: exp = 0;
  7905  00F69C  0E00               	movlw	0
  7906  00F69E  6E5D               	movwf	printf@exp+1,c
  7907  00F6A0  0E00               	movlw	0
  7908  00F6A2  6E5C               	movwf	printf@exp,c
  7909                           
  7910                           ;doprnt.c: 836: if( fval!=0) {
  7911  00F6A4  5062               	movf	printf@fval,w,c
  7912  00F6A6  1063               	iorwf	printf@fval+1,w,c
  7913  00F6A8  1064               	iorwf	printf@fval+2,w,c
  7914  00F6AA  B4D8               	btfsc	status,2,c
  7915  00F6AC  D083               	goto	l846
  7916                           
  7917                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  7918  00F6AE  0E82               	movlw	130
  7919  00F6B0  6E48               	movwf	??_printf& (0+255),c
  7920  00F6B2  0EFF               	movlw	255
  7921  00F6B4  6E49               	movwf	(??_printf+1)& (0+255),c
  7922  00F6B6  C062  F04A         	movff	printf@fval,??_printf+2
  7923  00F6BA  C063  F04B         	movff	printf@fval+1,??_printf+3
  7924  00F6BE  C064  F04C         	movff	printf@fval+2,??_printf+4
  7925  00F6C2  C065  F04D         	movff	printf@fval+3,??_printf+5
  7926  00F6C6  0E10               	movlw	16
  7927  00F6C8  D005               	goto	u4120
  7928  00F6CA                     u4125:
  7929  00F6CA  90D8               	bcf	status,0,c
  7930  00F6CC  324D               	rrcf	??_printf+5,f,c
  7931  00F6CE  324C               	rrcf	??_printf+4,f,c
  7932  00F6D0  324B               	rrcf	??_printf+3,f,c
  7933  00F6D2  324A               	rrcf	??_printf+2,f,c
  7934  00F6D4                     u4120:
  7935  00F6D4  2EE8               	decfsz	wreg,f,c
  7936  00F6D6  D7F9               	goto	u4125
  7937  00F6D8  504A               	movf	??_printf+2,w,c
  7938  00F6DA  2448               	addwf	??_printf,w,c
  7939  00F6DC  6E5C               	movwf	printf@exp,c
  7940  00F6DE  0E00               	movlw	0
  7941  00F6E0  2049               	addwfc	??_printf+1,w,c
  7942  00F6E2  6E5D               	movwf	printf@exp+1,c
  7943                           
  7944                           ;doprnt.c: 838: exp--;
  7945  00F6E4  065C               	decf	printf@exp,f,c
  7946  00F6E6  A0D8               	btfss	status,0,c
  7947  00F6E8  065D               	decf	printf@exp+1,f,c
  7948                           
  7949                           ;doprnt.c: 839: exp *= 3;
  7950  00F6EA  C05C  F00F         	movff	printf@exp,___wmul@multiplier
  7951  00F6EE  C05D  F010         	movff	printf@exp+1,___wmul@multiplier+1
  7952  00F6F2  0E00               	movlw	0
  7953  00F6F4  6E12               	movwf	___wmul@multiplicand+1,c
  7954  00F6F6  0E03               	movlw	3
  7955  00F6F8  6E11               	movwf	___wmul@multiplicand,c
  7956  00F6FA  EC1E  F067         	call	___wmul	;wreg free
  7957  00F6FE  C00F  F05C         	movff	?___wmul,printf@exp
  7958  00F702  C010  F05D         	movff	?___wmul+1,printf@exp+1
  7959                           
  7960                           ;doprnt.c: 840: exp /= 10;
  7961  00F706  C05C  F007         	movff	printf@exp,___awdiv@dividend
  7962  00F70A  C05D  F008         	movff	printf@exp+1,___awdiv@dividend+1
  7963  00F70E  0E00               	movlw	0
  7964  00F710  6E0A               	movwf	___awdiv@divisor+1,c
  7965  00F712  0E0A               	movlw	10
  7966  00F714  6E09               	movwf	___awdiv@divisor,c
  7967  00F716  EC68  F06A         	call	___awdiv	;wreg free
  7968  00F71A  C007  F05C         	movff	?___awdiv,printf@exp
  7969  00F71E  C008  F05D         	movff	?___awdiv+1,printf@exp+1
  7970                           
  7971                           ;doprnt.c: 841: if(exp < 0)
  7972  00F722  AE5D               	btfss	printf@exp+1,7,c
  7973  00F724  D003               	goto	l843
  7974                           
  7975                           ;doprnt.c: 842: exp--;
  7976  00F726  065C               	decf	printf@exp,f,c
  7977  00F728  A0D8               	btfss	status,0,c
  7978  00F72A  065D               	decf	printf@exp+1,f,c
  7979  00F72C                     l843:
  7980                           
  7981                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  7982  00F72C  505C               	movf	printf@exp,w,c
  7983  00F72E  0800               	sublw	0
  7984  00F730  EC6B  F074         	call	_scale
  7985  00F734  C024  F058         	movff	?_scale,printf@tmpval
  7986  00F738  C025  F059         	movff	?_scale+1,printf@tmpval+1
  7987  00F73C  C026  F05A         	movff	?_scale+2,printf@tmpval+2
  7988                           
  7989                           ;doprnt.c: 847: tmpval.integ *= fval;
  7990  00F740  C058  F015         	movff	printf@tmpval,___ftmul@f1
  7991  00F744  C059  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  7992  00F748  C05A  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  7993  00F74C  C062  F018         	movff	printf@fval,___ftmul@f2
  7994  00F750  C063  F019         	movff	printf@fval+1,___ftmul@f2+1
  7995  00F754  C064  F01A         	movff	printf@fval+2,___ftmul@f2+2
  7996  00F758  ECDE  F06C         	call	___ftmul	;wreg free
  7997  00F75C  C015  F058         	movff	?___ftmul,printf@tmpval
  7998  00F760  C016  F059         	movff	?___ftmul+1,printf@tmpval+1
  7999  00F764  C017  F05A         	movff	?___ftmul+2,printf@tmpval+2
  8000                           
  8001                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  8002  00F768  C058  F001         	movff	printf@tmpval,___ftge@ff1
  8003  00F76C  C059  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  8004  00F770  C05A  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  8005  00F774  0E00               	movlw	0
  8006  00F776  6E04               	movwf	___ftge@ff2,c
  8007  00F778  0E80               	movlw	128
  8008  00F77A  6E05               	movwf	___ftge@ff2+1,c
  8009  00F77C  0E3F               	movlw	63
  8010  00F77E  6E06               	movwf	___ftge@ff2+2,c
  8011  00F780  ECEC  F06A         	call	___ftge	;wreg free
  8012  00F784  B0D8               	btfsc	status,0,c
  8013  00F786  D004               	goto	l844
  8014                           
  8015                           ;doprnt.c: 849: exp--;
  8016  00F788  065C               	decf	printf@exp,f,c
  8017  00F78A  A0D8               	btfss	status,0,c
  8018  00F78C  065D               	decf	printf@exp+1,f,c
  8019  00F78E  D012               	goto	l846
  8020  00F790                     l844:
  8021                           
  8022                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  8023  00F790  C058  F001         	movff	printf@tmpval,___ftge@ff1
  8024  00F794  C059  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  8025  00F798  C05A  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  8026  00F79C  0E00               	movlw	0
  8027  00F79E  6E04               	movwf	___ftge@ff2,c
  8028  00F7A0  0E20               	movlw	32
  8029  00F7A2  6E05               	movwf	___ftge@ff2+1,c
  8030  00F7A4  0E41               	movlw	65
  8031  00F7A6  6E06               	movwf	___ftge@ff2+2,c
  8032  00F7A8  ECEC  F06A         	call	___ftge	;wreg free
  8033  00F7AC  A0D8               	btfss	status,0,c
  8034  00F7AE  D002               	goto	l846
  8035                           
  8036                           ;doprnt.c: 851: exp++;
  8037  00F7B0  4A5C               	infsnz	printf@exp,f,c
  8038  00F7B2  2A5D               	incf	printf@exp+1,f,c
  8039  00F7B4                     l846:
  8040                           
  8041                           ;doprnt.c: 852: }
  8042                           ;doprnt.c: 1112: if(prec <= 12)
  8043  00F7B4  BE66               	btfsc	printf@prec+1,7,c
  8044  00F7B6  D006               	goto	u4160
  8045  00F7B8  5066               	movf	printf@prec+1,w,c
  8046  00F7BA  E11B               	bnz	l4564
  8047  00F7BC  0E0D               	movlw	13
  8048  00F7BE  5C65               	subwf	printf@prec,w,c
  8049  00F7C0  B0D8               	btfsc	status,0,c
  8050  00F7C2  D017               	goto	l847
  8051  00F7C4                     u4160:
  8052                           
  8053                           ;doprnt.c: 1113: fval += fround(prec);
  8054  00F7C4  C062  F02E         	movff	printf@fval,___ftadd@f1
  8055  00F7C8  C063  F02F         	movff	printf@fval+1,___ftadd@f1+1
  8056  00F7CC  C064  F030         	movff	printf@fval+2,___ftadd@f1+2
  8057  00F7D0  5065               	movf	printf@prec,w,c
  8058  00F7D2  EC14  F072         	call	_fround
  8059  00F7D6  C024  F031         	movff	?_fround,___ftadd@f2
  8060  00F7DA  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  8061  00F7DE  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  8062  00F7E2  EC3E  F071         	call	___ftadd	;wreg free
  8063  00F7E6  C02E  F062         	movff	?___ftadd,printf@fval
  8064  00F7EA  C02F  F063         	movff	?___ftadd+1,printf@fval+1
  8065  00F7EE  C030  F064         	movff	?___ftadd+2,printf@fval+2
  8066  00F7F2                     l847:
  8067  00F7F2                     l4564:
  8068                           
  8069                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  8070  00F7F2  BE5D               	btfsc	printf@exp+1,7,c
  8071  00F7F4  D006               	goto	u4170
  8072  00F7F6  505D               	movf	printf@exp+1,w,c
  8073  00F7F8  E11E               	bnz	l4572
  8074  00F7FA  0E0A               	movlw	10
  8075  00F7FC  5C5C               	subwf	printf@exp,w,c
  8076  00F7FE  B0D8               	btfsc	status,0,c
  8077  00F800  D01A               	goto	u4200
  8078  00F802                     u4170:
  8079  00F802  5062               	movf	printf@fval,w,c
  8080  00F804  1063               	iorwf	printf@fval+1,w,c
  8081  00F806  1064               	iorwf	printf@fval+2,w,c
  8082  00F808  B4D8               	btfsc	status,2,c
  8083  00F80A  D051               	goto	l848
  8084  00F80C  C062  F02B         	movff	printf@fval,___fttol@f1
  8085  00F810  C063  F02C         	movff	printf@fval+1,___fttol@f1+1
  8086  00F814  C064  F02D         	movff	printf@fval+2,___fttol@f1+2
  8087  00F818  EC64  F06C         	call	___fttol	;wreg free
  8088  00F81C  502B               	movf	?___fttol,w,c
  8089  00F81E  102C               	iorwf	?___fttol+1,w,c
  8090  00F820  102D               	iorwf	?___fttol+2,w,c
  8091  00F822  102E               	iorwf	?___fttol+3,w,c
  8092  00F824  B4D8               	btfsc	status,2,c
  8093  00F826  BE5D               	btfsc	printf@exp+1,7,c
  8094  00F828  D042               	goto	l848
  8095  00F82A  505D               	movf	printf@exp+1,w,c
  8096  00F82C  E104               	bnz	l4572
  8097  00F82E  0E02               	movlw	2
  8098  00F830  5C5C               	subwf	printf@exp,w,c
  8099  00F832  A0D8               	btfss	status,0,c
  8100  00F834  D03C               	goto	l848
  8101  00F836                     u4200:
  8102  00F836                     l4572:
  8103                           
  8104                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  8105  00F836  C058  F001         	movff	printf@tmpval,___ftge@ff1
  8106  00F83A  C059  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  8107  00F83E  C05A  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  8108  00F842  0E70               	movlw	112
  8109  00F844  6E04               	movwf	___ftge@ff2,c
  8110  00F846  0E89               	movlw	137
  8111  00F848  6E05               	movwf	___ftge@ff2+1,c
  8112  00F84A  0E40               	movlw	64
  8113  00F84C  6E06               	movwf	___ftge@ff2+2,c
  8114  00F84E  ECEC  F06A         	call	___ftge	;wreg free
  8115  00F852  B0D8               	btfsc	status,0,c
  8116  00F854  D002               	goto	l851
  8117                           
  8118                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  8119  00F856  0EF7               	movlw	247
  8120  00F858  D001               	goto	L12
  8121  00F85A                     l851:
  8122                           
  8123                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  8124  00F85A  0EF8               	movlw	248
  8125  00F85C                     L12:
  8126  00F85C  265C               	addwf	printf@exp,f,c
  8127  00F85E  0EFF               	movlw	255
  8128  00F860  225D               	addwfc	printf@exp+1,f,c
  8129                           
  8130                           ;doprnt.c: 1124: }
  8131                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  8132  00F862  505C               	movf	printf@exp,w,c
  8133  00F864  EC6B  F074         	call	_scale
  8134  00F868  C024  F058         	movff	?_scale,printf@tmpval
  8135  00F86C  C025  F059         	movff	?_scale+1,printf@tmpval+1
  8136  00F870  C026  F05A         	movff	?_scale+2,printf@tmpval+2
  8137                           
  8138                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  8139  00F874  C062  F001         	movff	printf@fval,__tdiv_to_l_@f1
  8140  00F878  C063  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  8141  00F87C  C064  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  8142  00F880  C058  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  8143  00F884  C059  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  8144  00F888  C05A  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  8145  00F88C  EC7B  F06E         	call	__tdiv_to_l_	;wreg free
  8146  00F890  C001  F054         	movff	?__tdiv_to_l_,printf@val
  8147  00F894  C002  F055         	movff	?__tdiv_to_l_+1,printf@val+1
  8148  00F898  C003  F056         	movff	?__tdiv_to_l_+2,printf@val+2
  8149  00F89C  C004  F057         	movff	?__tdiv_to_l_+3,printf@val+3
  8150                           
  8151                           ;doprnt.c: 1129: fval = 0.0;
  8152  00F8A0  0E00               	movlw	0
  8153  00F8A2  6E62               	movwf	printf@fval,c
  8154  00F8A4  0E00               	movlw	0
  8155  00F8A6  6E63               	movwf	printf@fval+1,c
  8156  00F8A8  0E00               	movlw	0
  8157  00F8AA  6E64               	movwf	printf@fval+2,c
  8158                           
  8159                           ;doprnt.c: 1130: } else {
  8160  00F8AC  D032               	goto	l857
  8161  00F8AE                     l848:
  8162                           
  8163                           ;doprnt.c: 1131: val = (unsigned long)fval;
  8164  00F8AE  C062  F02B         	movff	printf@fval,___fttol@f1
  8165  00F8B2  C063  F02C         	movff	printf@fval+1,___fttol@f1+1
  8166  00F8B6  C064  F02D         	movff	printf@fval+2,___fttol@f1+2
  8167  00F8BA  EC64  F06C         	call	___fttol	;wreg free
  8168  00F8BE  C02B  F054         	movff	?___fttol,printf@val
  8169  00F8C2  C02C  F055         	movff	?___fttol+1,printf@val+1
  8170  00F8C6  C02D  F056         	movff	?___fttol+2,printf@val+2
  8171  00F8CA  C02E  F057         	movff	?___fttol+3,printf@val+3
  8172                           
  8173                           ;doprnt.c: 1132: fval -= (double)val;
  8174  00F8CE  C062  F03A         	movff	printf@fval,___ftsub@f1
  8175  00F8D2  C063  F03B         	movff	printf@fval+1,___ftsub@f1+1
  8176  00F8D6  C064  F03C         	movff	printf@fval+2,___ftsub@f1+2
  8177  00F8DA  C054  F009         	movff	printf@val,___lltoft@c
  8178  00F8DE  C055  F00A         	movff	printf@val+1,___lltoft@c+1
  8179  00F8E2  C056  F00B         	movff	printf@val+2,___lltoft@c+2
  8180  00F8E6  C057  F00C         	movff	printf@val+3,___lltoft@c+3
  8181  00F8EA  EC4E  F068         	call	___lltoft	;wreg free
  8182  00F8EE  C009  F03D         	movff	?___lltoft,___ftsub@f2
  8183  00F8F2  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  8184  00F8F6  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  8185  00F8FA  ECDB  F067         	call	___ftsub	;wreg free
  8186  00F8FE  C03A  F062         	movff	?___ftsub,printf@fval
  8187  00F902  C03B  F063         	movff	?___ftsub+1,printf@fval+1
  8188  00F906  C03C  F064         	movff	?___ftsub+2,printf@fval+2
  8189                           
  8190                           ;doprnt.c: 1133: exp = 0;
  8191  00F90A  0E00               	movlw	0
  8192  00F90C  6E5D               	movwf	printf@exp+1,c
  8193  00F90E  0E00               	movlw	0
  8194  00F910  6E5C               	movwf	printf@exp,c
  8195  00F912                     l857:
  8196                           
  8197                           ;doprnt.c: 1134: }
  8198                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  8199  00F912  0E01               	movlw	1
  8200  00F914  6E67               	movwf	printf@c,c
  8201  00F916                     l4592:
  8202  00F916  0E0A               	movlw	10
  8203  00F918  1867               	xorwf	printf@c,w,c
  8204  00F91A  B4D8               	btfsc	status,2,c
  8205  00F91C  D018               	goto	u4240
  8206                           
  8207                           ;doprnt.c: 1137: if(val < dpowers[c])
  8208  00F91E  5067               	movf	printf@c,w,c
  8209  00F920  0D04               	mullw	4
  8210  00F922  0E5F               	movlw	low _dpowers
  8211  00F924  24F3               	addwf	prodl,w,c
  8212  00F926  6EF6               	movwf	tblptrl,c
  8213  00F928  0EFE               	movlw	high _dpowers
  8214  00F92A  20F4               	addwfc	prodh,w,c
  8215  00F92C  6EF7               	movwf	tblptrh,c
  8216  00F92E                     	if	0	;There are less than 3 active tblptr bytes
  8217  00F92E                     	endif
  8218  00F92E  0009               	tblrd		*+
  8219  00F930  50F5               	movf	tablat,w,c
  8220  00F932  5C54               	subwf	printf@val,w,c
  8221  00F934  0009               	tblrd		*+
  8222  00F936  50F5               	movf	tablat,w,c
  8223  00F938  5855               	subwfb	printf@val+1,w,c
  8224  00F93A  0009               	tblrd		*+
  8225  00F93C  50F5               	movf	tablat,w,c
  8226  00F93E  5856               	subwfb	printf@val+2,w,c
  8227  00F940  0009               	tblrd		*+
  8228  00F942  50F5               	movf	tablat,w,c
  8229  00F944  5857               	subwfb	printf@val+3,w,c
  8230  00F946  A0D8               	btfss	status,0,c
  8231  00F948  D002               	goto	u4240
  8232                           
  8233                           ;doprnt.c: 1138: break;
  8234  00F94A  2A67               	incf	printf@c,f,c
  8235  00F94C  D7E4               	goto	l4592
  8236  00F94E                     u4240:
  8237                           
  8238                           ;doprnt.c: 1142: width -= prec + c + exp;
  8239  00F94E  C067  F048         	movff	printf@c,??_printf
  8240  00F952  6A49               	clrf	(??_printf+1)& (0+255),c
  8241  00F954  BE48               	btfsc	??_printf& (0+255),7,c
  8242  00F956  0649               	decf	(??_printf+1)& (0+255),f,c
  8243  00F958  5065               	movf	printf@prec,w,c
  8244  00F95A  2648               	addwf	??_printf,f,c
  8245  00F95C  5066               	movf	printf@prec+1,w,c
  8246  00F95E  2249               	addwfc	??_printf+1,f,c
  8247  00F960  505C               	movf	printf@exp,w,c
  8248  00F962  2648               	addwf	??_printf,f,c
  8249  00F964  505D               	movf	printf@exp+1,w,c
  8250  00F966  2249               	addwfc	??_printf+1,f,c
  8251  00F968  5048               	movf	??_printf,w,c
  8252  00F96A  5E60               	subwf	printf@width,f,c
  8253  00F96C  5049               	movf	??_printf+1,w,c
  8254  00F96E  5A61               	subwfb	printf@width+1,f,c
  8255                           
  8256                           ;doprnt.c: 1143: if(
  8257                           ;doprnt.c: 1147: prec)
  8258  00F970  5065               	movf	printf@prec,w,c
  8259  00F972  1066               	iorwf	printf@prec+1,w,c
  8260  00F974  B4D8               	btfsc	status,2,c
  8261  00F976  D003               	goto	l861
  8262                           
  8263                           ;doprnt.c: 1148: width--;
  8264  00F978  0660               	decf	printf@width,f,c
  8265  00F97A  A0D8               	btfss	status,0,c
  8266  00F97C  0661               	decf	printf@width+1,f,c
  8267  00F97E                     l861:
  8268                           
  8269                           ;doprnt.c: 1149: if(flag & 0x03)
  8270  00F97E  0E03               	movlw	3
  8271  00F980  145E               	andwf	printf@flag,w,c
  8272  00F982  6E48               	movwf	??_printf& (0+255),c
  8273  00F984  0E00               	movlw	0
  8274  00F986  145F               	andwf	printf@flag+1,w,c
  8275  00F988  6E49               	movwf	(??_printf+1)& (0+255),c
  8276  00F98A  5048               	movf	??_printf,w,c
  8277  00F98C  1049               	iorwf	??_printf+1,w,c
  8278  00F98E  B4D8               	btfsc	status,2,c
  8279  00F990  D003               	goto	l862
  8280                           
  8281                           ;doprnt.c: 1150: width--;
  8282  00F992  0660               	decf	printf@width,f,c
  8283  00F994  A0D8               	btfss	status,0,c
  8284  00F996  0661               	decf	printf@width+1,f,c
  8285  00F998                     l862:
  8286                           
  8287                           ;doprnt.c: 1153: if(flag & 0x04) {
  8288  00F998  A45E               	btfss	printf@flag,2,c
  8289  00F99A  D022               	goto	l869
  8290                           
  8291                           ;doprnt.c: 1157: if(flag & 0x03)
  8292  00F99C  0E03               	movlw	3
  8293  00F99E  145E               	andwf	printf@flag,w,c
  8294  00F9A0  6E48               	movwf	??_printf& (0+255),c
  8295  00F9A2  0E00               	movlw	0
  8296  00F9A4  145F               	andwf	printf@flag+1,w,c
  8297  00F9A6  6E49               	movwf	(??_printf+1)& (0+255),c
  8298  00F9A8  5048               	movf	??_printf,w,c
  8299  00F9AA  1049               	iorwf	??_printf+1,w,c
  8300  00F9AC  B4D8               	btfsc	status,2,c
  8301  00F9AE  D00A               	goto	l865
  8302                           
  8303                           ;doprnt.c: 1159: (putch('-') );
  8304  00F9B0  0E2D               	movlw	45
  8305  00F9B2  EC47  F066         	call	_putch
  8306                           
  8307                           ;doprnt.c: 1168: while(width > 0) {
  8308  00F9B6  D006               	goto	l865
  8309  00F9B8                     l4618:
  8310                           
  8311                           ;doprnt.c: 1169: (putch('0') );
  8312  00F9B8  0E30               	movlw	48
  8313  00F9BA  EC47  F066         	call	_putch
  8314                           
  8315                           ;doprnt.c: 1170: width--;
  8316  00F9BE  0660               	decf	printf@width,f,c
  8317  00F9C0  A0D8               	btfss	status,0,c
  8318  00F9C2  0661               	decf	printf@width+1,f,c
  8319  00F9C4                     l865:
  8320  00F9C4  BE61               	btfsc	printf@width+1,7,c
  8321  00F9C6  D065               	goto	l873
  8322  00F9C8  5061               	movf	printf@width+1,w,c
  8323  00F9CA  E1F6               	bnz	l4618
  8324  00F9CC  0460               	decf	printf@width,w,c
  8325  00F9CE  A0D8               	btfss	status,0,c
  8326  00F9D0  D060               	goto	l873
  8327  00F9D2  D7F2               	goto	l866
  8328  00F9D4                     l4624:
  8329                           
  8330                           ;doprnt.c: 1181: (putch(' ') );
  8331  00F9D4  0E20               	movlw	32
  8332  00F9D6  EC47  F066         	call	_putch
  8333                           
  8334                           ;doprnt.c: 1182: width--;
  8335  00F9DA  0660               	decf	printf@width,f,c
  8336  00F9DC  A0D8               	btfss	status,0,c
  8337  00F9DE  0661               	decf	printf@width+1,f,c
  8338  00F9E0                     l869:
  8339  00F9E0  BE61               	btfsc	printf@width+1,7,c
  8340  00F9E2  D005               	goto	u4300
  8341  00F9E4  5061               	movf	printf@width+1,w,c
  8342  00F9E6  E1F6               	bnz	l4624
  8343  00F9E8  0460               	decf	printf@width,w,c
  8344  00F9EA  B0D8               	btfsc	status,0,c
  8345  00F9EC  D7F3               	goto	l870
  8346  00F9EE                     u4300:
  8347                           
  8348                           ;doprnt.c: 1183: }
  8349                           ;doprnt.c: 1188: if(flag & 0x03)
  8350  00F9EE  0E03               	movlw	3
  8351  00F9F0  145E               	andwf	printf@flag,w,c
  8352  00F9F2  6E48               	movwf	??_printf& (0+255),c
  8353  00F9F4  0E00               	movlw	0
  8354  00F9F6  145F               	andwf	printf@flag+1,w,c
  8355  00F9F8  6E49               	movwf	(??_printf+1)& (0+255),c
  8356  00F9FA  5048               	movf	??_printf,w,c
  8357  00F9FC  1049               	iorwf	??_printf+1,w,c
  8358  00F9FE  B4D8               	btfsc	status,2,c
  8359  00FA00  D048               	goto	l873
  8360                           
  8361                           ;doprnt.c: 1190: (putch('-') );
  8362  00FA02  0E2D               	movlw	45
  8363  00FA04  EC47  F066         	call	_putch
  8364                           
  8365                           ;doprnt.c: 1195: }
  8366                           ;doprnt.c: 1196: while(c--) {
  8367  00FA08  D044               	goto	l873
  8368  00FA0A                     
  8369                           ;doprnt.c: 1200: {
  8370                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  8371  00FA0A  C054  F001         	movff	printf@val,___lldiv@dividend
  8372  00FA0E  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  8373  00FA12  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  8374  00FA16  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  8375  00FA1A  5067               	movf	printf@c,w,c
  8376  00FA1C  0D04               	mullw	4
  8377  00FA1E  0E5F               	movlw	low _dpowers
  8378  00FA20  24F3               	addwf	prodl,w,c
  8379  00FA22  6EF6               	movwf	tblptrl,c
  8380  00FA24  0EFE               	movlw	high _dpowers
  8381  00FA26  20F4               	addwfc	prodh,w,c
  8382  00FA28  6EF7               	movwf	tblptrh,c
  8383  00FA2A                     	if	0	;There are less than 3 active tblptr bytes
  8384  00FA2A                     	endif
  8385  00FA2A  0009               	tblrd		*+
  8386  00FA2C  CFF5 F005          	movff	tablat,___lldiv@divisor
  8387  00FA30  0009               	tblrd		*+
  8388  00FA32  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  8389  00FA36  0009               	tblrd		*+
  8390  00FA38  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  8391  00FA3C  000A               	tblrd		*-
  8392  00FA3E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  8393  00FA42  EC27  F06A         	call	___lldiv	;wreg free
  8394  00FA46  C001  F058         	movff	?___lldiv,printf@tmpval
  8395  00FA4A  C002  F059         	movff	?___lldiv+1,printf@tmpval+1
  8396  00FA4E  C003  F05A         	movff	?___lldiv+2,printf@tmpval+2
  8397  00FA52  C004  F05B         	movff	?___lldiv+3,printf@tmpval+3
  8398                           
  8399                           ;doprnt.c: 1202: tmpval.vd %= 10;
  8400  00FA56  C058  F001         	movff	printf@tmpval,___llmod@dividend
  8401  00FA5A  C059  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  8402  00FA5E  C05A  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  8403  00FA62  C05B  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  8404  00FA66  0E0A               	movlw	10
  8405  00FA68  6E05               	movwf	___llmod@divisor,c
  8406  00FA6A  0E00               	movlw	0
  8407  00FA6C  6E06               	movwf	___llmod@divisor+1,c
  8408  00FA6E  0E00               	movlw	0
  8409  00FA70  6E07               	movwf	___llmod@divisor+2,c
  8410  00FA72  0E00               	movlw	0
  8411  00FA74  6E08               	movwf	___llmod@divisor+3,c
  8412  00FA76  ECDB  F068         	call	___llmod	;wreg free
  8413  00FA7A  C001  F058         	movff	?___llmod,printf@tmpval
  8414  00FA7E  C002  F059         	movff	?___llmod+1,printf@tmpval+1
  8415  00FA82  C003  F05A         	movff	?___llmod+2,printf@tmpval+2
  8416  00FA86  C004  F05B         	movff	?___llmod+3,printf@tmpval+3
  8417                           
  8418                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  8419  00FA8A  5058               	movf	printf@tmpval,w,c
  8420  00FA8C  0F30               	addlw	48
  8421  00FA8E  EC47  F066         	call	_putch
  8422  00FA92                     l873:
  8423  00FA92  0667               	decf	printf@c,f,c
  8424  00FA94  2867               	incf	printf@c,w,c
  8425  00FA96  B4D8               	btfsc	status,2,c
  8426  00FA98  D007               	goto	l876
  8427  00FA9A  D7B7               	goto	l874
  8428  00FA9C                     l4642:
  8429                           
  8430                           ;doprnt.c: 1208: (putch('0') );
  8431  00FA9C  0E30               	movlw	48
  8432  00FA9E  EC47  F066         	call	_putch
  8433                           
  8434                           ;doprnt.c: 1209: exp--;
  8435  00FAA2  065C               	decf	printf@exp,f,c
  8436  00FAA4  A0D8               	btfss	status,0,c
  8437  00FAA6  065D               	decf	printf@exp+1,f,c
  8438  00FAA8                     l876:
  8439  00FAA8  BE5D               	btfsc	printf@exp+1,7,c
  8440  00FAAA  D005               	goto	u4330
  8441  00FAAC  505D               	movf	printf@exp+1,w,c
  8442  00FAAE  E1F6               	bnz	l4642
  8443  00FAB0  045C               	decf	printf@exp,w,c
  8444  00FAB2  B0D8               	btfsc	status,0,c
  8445  00FAB4  D7F3               	goto	l877
  8446  00FAB6                     u4330:
  8447                           
  8448                           ;doprnt.c: 1210: }
  8449                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  8450  00FAB6  BE66               	btfsc	printf@prec+1,7,c
  8451  00FAB8  D009               	goto	l879
  8452  00FABA  5066               	movf	printf@prec+1,w,c
  8453  00FABC  E104               	bnz	u4340
  8454  00FABE  0E09               	movlw	9
  8455  00FAC0  5C65               	subwf	printf@prec,w,c
  8456  00FAC2  A0D8               	btfss	status,0,c
  8457  00FAC4  D003               	goto	l879
  8458  00FAC6                     u4340:
  8459                           
  8460                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  8461  00FAC6  0E08               	movlw	8
  8462  00FAC8  6E67               	movwf	printf@c,c
  8463  00FACA  D002               	goto	l880
  8464  00FACC                     l879:
  8465                           
  8466                           ;doprnt.c: 1213: else
  8467                           ;doprnt.c: 1214: c = prec;
  8468  00FACC  C065  F067         	movff	printf@prec,printf@c
  8469  00FAD0                     l880:
  8470                           
  8471                           ;doprnt.c: 1215: prec -= c;
  8472  00FAD0  5067               	movf	printf@c,w,c
  8473  00FAD2  5E65               	subwf	printf@prec,f,c
  8474  00FAD4  0E00               	movlw	0
  8475  00FAD6  BE67               	btfsc	printf@c,7,c
  8476  00FAD8  0EFF               	movlw	255
  8477  00FADA  5A66               	subwfb	printf@prec+1,f,c
  8478                           
  8479                           ;doprnt.c: 1219: if(c)
  8480  00FADC  5067               	movf	printf@c,w,c
  8481  00FADE  B4D8               	btfsc	status,2,c
  8482  00FAE0  D003               	goto	l881
  8483                           
  8484                           ;doprnt.c: 1221: (putch('.') );
  8485  00FAE2  0E2E               	movlw	46
  8486  00FAE4  EC47  F066         	call	_putch
  8487  00FAE8                     l881:
  8488                           
  8489                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  8490  00FAE8  5067               	movf	printf@c,w,c
  8491  00FAEA  EC6B  F074         	call	_scale
  8492  00FAEE  C024  F04E         	movff	?_scale,_printf$2268
  8493  00FAF2  C025  F04F         	movff	?_scale+1,_printf$2268+1
  8494  00FAF6  C026  F050         	movff	?_scale+2,_printf$2268+2
  8495                           
  8496                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  8497  00FAFA  C062  F018         	movff	printf@fval,___ftmul@f2
  8498  00FAFE  C063  F019         	movff	printf@fval+1,___ftmul@f2+1
  8499  00FB02  C064  F01A         	movff	printf@fval+2,___ftmul@f2+2
  8500  00FB06  C04E  F015         	movff	_printf$2268,___ftmul@f1
  8501  00FB0A  C04F  F016         	movff	_printf$2268+1,___ftmul@f1+1
  8502  00FB0E  C050  F017         	movff	_printf$2268+2,___ftmul@f1+2
  8503  00FB12  ECDE  F06C         	call	___ftmul	;wreg free
  8504  00FB16  C015  F02B         	movff	?___ftmul,___fttol@f1
  8505  00FB1A  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  8506  00FB1E  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  8507  00FB22  EC64  F06C         	call	___fttol	;wreg free
  8508  00FB26  C02B  F054         	movff	?___fttol,printf@val
  8509  00FB2A  C02C  F055         	movff	?___fttol+1,printf@val+1
  8510  00FB2E  C02D  F056         	movff	?___fttol+2,printf@val+2
  8511  00FB32  C02E  F057         	movff	?___fttol+3,printf@val+3
  8512                           
  8513                           ;doprnt.c: 1228: while(c--) {
  8514  00FB36  D06A               	goto	l882
  8515  00FB38                     
  8516                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  8517  00FB38  C054  F001         	movff	printf@val,___lldiv@dividend
  8518  00FB3C  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  8519  00FB40  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  8520  00FB44  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  8521  00FB48  5067               	movf	printf@c,w,c
  8522  00FB4A  0D04               	mullw	4
  8523  00FB4C  0E5F               	movlw	low _dpowers
  8524  00FB4E  24F3               	addwf	prodl,w,c
  8525  00FB50  6EF6               	movwf	tblptrl,c
  8526  00FB52  0EFE               	movlw	high _dpowers
  8527  00FB54  20F4               	addwfc	prodh,w,c
  8528  00FB56  6EF7               	movwf	tblptrh,c
  8529  00FB58                     	if	0	;There are less than 3 active tblptr bytes
  8530  00FB58                     	endif
  8531  00FB58  0009               	tblrd		*+
  8532  00FB5A  CFF5 F005          	movff	tablat,___lldiv@divisor
  8533  00FB5E  0009               	tblrd		*+
  8534  00FB60  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  8535  00FB64  0009               	tblrd		*+
  8536  00FB66  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  8537  00FB6A  000A               	tblrd		*-
  8538  00FB6C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  8539  00FB70  EC27  F06A         	call	___lldiv	;wreg free
  8540  00FB74  C001  F058         	movff	?___lldiv,printf@tmpval
  8541  00FB78  C002  F059         	movff	?___lldiv+1,printf@tmpval+1
  8542  00FB7C  C003  F05A         	movff	?___lldiv+2,printf@tmpval+2
  8543  00FB80  C004  F05B         	movff	?___lldiv+3,printf@tmpval+3
  8544                           
  8545                           ;doprnt.c: 1230: tmpval.vd %= 10;
  8546  00FB84  C058  F001         	movff	printf@tmpval,___llmod@dividend
  8547  00FB88  C059  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  8548  00FB8C  C05A  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  8549  00FB90  C05B  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  8550  00FB94  0E0A               	movlw	10
  8551  00FB96  6E05               	movwf	___llmod@divisor,c
  8552  00FB98  0E00               	movlw	0
  8553  00FB9A  6E06               	movwf	___llmod@divisor+1,c
  8554  00FB9C  0E00               	movlw	0
  8555  00FB9E  6E07               	movwf	___llmod@divisor+2,c
  8556  00FBA0  0E00               	movlw	0
  8557  00FBA2  6E08               	movwf	___llmod@divisor+3,c
  8558  00FBA4  ECDB  F068         	call	___llmod	;wreg free
  8559  00FBA8  C001  F058         	movff	?___llmod,printf@tmpval
  8560  00FBAC  C002  F059         	movff	?___llmod+1,printf@tmpval+1
  8561  00FBB0  C003  F05A         	movff	?___llmod+2,printf@tmpval+2
  8562  00FBB4  C004  F05B         	movff	?___llmod+3,printf@tmpval+3
  8563                           
  8564                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  8565  00FBB8  5058               	movf	printf@tmpval,w,c
  8566  00FBBA  0F30               	addlw	48
  8567  00FBBC  EC47  F066         	call	_putch
  8568                           
  8569                           ;doprnt.c: 1232: val %= dpowers[c];
  8570  00FBC0  C054  F001         	movff	printf@val,___llmod@dividend
  8571  00FBC4  C055  F002         	movff	printf@val+1,___llmod@dividend+1
  8572  00FBC8  C056  F003         	movff	printf@val+2,___llmod@dividend+2
  8573  00FBCC  C057  F004         	movff	printf@val+3,___llmod@dividend+3
  8574  00FBD0  5067               	movf	printf@c,w,c
  8575  00FBD2  0D04               	mullw	4
  8576  00FBD4  0E5F               	movlw	low _dpowers
  8577  00FBD6  24F3               	addwf	prodl,w,c
  8578  00FBD8  6EF6               	movwf	tblptrl,c
  8579  00FBDA  0EFE               	movlw	high _dpowers
  8580  00FBDC  20F4               	addwfc	prodh,w,c
  8581  00FBDE  6EF7               	movwf	tblptrh,c
  8582  00FBE0                     	if	0	;There are less than 3 active tblptr bytes
  8583  00FBE0                     	endif
  8584  00FBE0  0009               	tblrd		*+
  8585  00FBE2  CFF5 F005          	movff	tablat,___llmod@divisor
  8586  00FBE6  0009               	tblrd		*+
  8587  00FBE8  CFF5 F006          	movff	tablat,___llmod@divisor+1
  8588  00FBEC  0009               	tblrd		*+
  8589  00FBEE  CFF5 F007          	movff	tablat,___llmod@divisor+2
  8590  00FBF2  000A               	tblrd		*-
  8591  00FBF4  CFF5 F008          	movff	tablat,___llmod@divisor+3
  8592  00FBF8  ECDB  F068         	call	___llmod	;wreg free
  8593  00FBFC  C001  F054         	movff	?___llmod,printf@val
  8594  00FC00  C002  F055         	movff	?___llmod+1,printf@val+1
  8595  00FC04  C003  F056         	movff	?___llmod+2,printf@val+2
  8596  00FC08  C004  F057         	movff	?___llmod+3,printf@val+3
  8597  00FC0C                     l882:
  8598  00FC0C  0667               	decf	printf@c,f,c
  8599  00FC0E  2867               	incf	printf@c,w,c
  8600  00FC10  B4D8               	btfsc	status,2,c
  8601  00FC12  D007               	goto	l885
  8602  00FC14  D791               	goto	l883
  8603  00FC16                     
  8604                           ;doprnt.c: 1236: (putch('0') );
  8605  00FC16  0E30               	movlw	48
  8606  00FC18  EC47  F066         	call	_putch
  8607                           
  8608                           ;doprnt.c: 1237: prec--;
  8609  00FC1C  0665               	decf	printf@prec,f,c
  8610  00FC1E  A0D8               	btfss	status,0,c
  8611  00FC20  0666               	decf	printf@prec+1,f,c
  8612  00FC22                     l885:
  8613  00FC22  5065               	movf	printf@prec,w,c
  8614  00FC24  1066               	iorwf	printf@prec+1,w,c
  8615  00FC26  B4D8               	btfsc	status,2,c
  8616  00FC28  D10C               	goto	u4570
  8617  00FC2A  D7F5               	goto	l886
  8618  00FC2C                     l839:
  8619                           
  8620                           ;doprnt.c: 1246: }
  8621                           ;doprnt.c: 1273: {
  8622                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8623  00FC2C  C052  FFD9         	movff	printf@ap,fsr2l
  8624  00FC30  C053  FFDA         	movff	printf@ap+1,fsr2h
  8625  00FC34  CFDE F048          	movff	postinc2,??_printf
  8626  00FC38  CFDD F049          	movff	postdec2,??_printf+1
  8627  00FC3C  C048  F054         	movff	??_printf,printf@val
  8628  00FC40  C049  F055         	movff	??_printf+1,printf@val+1
  8629  00FC44  6A56               	clrf	printf@val+2,c
  8630  00FC46  6A57               	clrf	printf@val+3,c
  8631  00FC48  0E02               	movlw	2
  8632  00FC4A  2652               	addwf	printf@ap,f,c
  8633  00FC4C  0E00               	movlw	0
  8634  00FC4E  2253               	addwfc	printf@ap+1,f,c
  8635                           
  8636                           ;doprnt.c: 1287: }
  8637                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  8638  00FC50  5065               	movf	printf@prec,w,c
  8639  00FC52  1066               	iorwf	printf@prec+1,w,c
  8640  00FC54  A4D8               	btfss	status,2,c
  8641  00FC56  D008               	goto	l888
  8642  00FC58  5054               	movf	printf@val,w,c
  8643  00FC5A  1055               	iorwf	printf@val+1,w,c
  8644  00FC5C  1056               	iorwf	printf@val+2,w,c
  8645  00FC5E  1057               	iorwf	printf@val+3,w,c
  8646  00FC60  A4D8               	btfss	status,2,c
  8647  00FC62  D002               	goto	l888
  8648                           
  8649                           ;doprnt.c: 1291: prec++;
  8650  00FC64  4A65               	infsnz	printf@prec,f,c
  8651  00FC66  2A66               	incf	printf@prec+1,f,c
  8652  00FC68                     l888:
  8653                           
  8654                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8655  00FC68  0E01               	movlw	1
  8656  00FC6A  6E67               	movwf	printf@c,c
  8657  00FC6C                     l4688:
  8658  00FC6C  0E08               	movlw	8
  8659  00FC6E  1867               	xorwf	printf@c,w,c
  8660  00FC70  B4D8               	btfsc	status,2,c
  8661  00FC72  D018               	goto	u4420
  8662                           
  8663                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8664  00FC74  5067               	movf	printf@c,w,c
  8665  00FC76  0D04               	mullw	4
  8666  00FC78  0ED5               	movlw	low _hexpowers
  8667  00FC7A  24F3               	addwf	prodl,w,c
  8668  00FC7C  6EF6               	movwf	tblptrl,c
  8669  00FC7E  0EFE               	movlw	high _hexpowers
  8670  00FC80  20F4               	addwfc	prodh,w,c
  8671  00FC82  6EF7               	movwf	tblptrh,c
  8672  00FC84                     	if	0	;There are less than 3 active tblptr bytes
  8673  00FC84                     	endif
  8674  00FC84  0009               	tblrd		*+
  8675  00FC86  50F5               	movf	tablat,w,c
  8676  00FC88  5C54               	subwf	printf@val,w,c
  8677  00FC8A  0009               	tblrd		*+
  8678  00FC8C  50F5               	movf	tablat,w,c
  8679  00FC8E  5855               	subwfb	printf@val+1,w,c
  8680  00FC90  0009               	tblrd		*+
  8681  00FC92  50F5               	movf	tablat,w,c
  8682  00FC94  5856               	subwfb	printf@val+2,w,c
  8683  00FC96  0009               	tblrd		*+
  8684  00FC98  50F5               	movf	tablat,w,c
  8685  00FC9A  5857               	subwfb	printf@val+3,w,c
  8686  00FC9C  A0D8               	btfss	status,0,c
  8687  00FC9E  D002               	goto	u4420
  8688                           
  8689                           ;doprnt.c: 1318: break;
  8690  00FCA0  2A67               	incf	printf@c,f,c
  8691  00FCA2  D7E4               	goto	l4688
  8692  00FCA4                     u4420:
  8693                           
  8694                           ;doprnt.c: 1339: if(c < prec)
  8695  00FCA4  0E80               	movlw	128
  8696  00FCA6  BE67               	btfsc	printf@c,7,c
  8697  00FCA8  0E7F               	movlw	127
  8698  00FCAA  6E48               	movwf	??_printf& (0+255),c
  8699  00FCAC  5065               	movf	printf@prec,w,c
  8700  00FCAE  5C67               	subwf	printf@c,w,c
  8701  00FCB0  5066               	movf	printf@prec+1,w,c
  8702  00FCB2  0A80               	xorlw	128
  8703  00FCB4  5848               	subwfb	??_printf& (0+255),w,c
  8704  00FCB6  B0D8               	btfsc	status,0,c
  8705  00FCB8  D003               	goto	l892
  8706                           
  8707                           ;doprnt.c: 1340: c = prec;
  8708  00FCBA  C065  F067         	movff	printf@prec,printf@c
  8709  00FCBE  D010               	goto	l894
  8710  00FCC0                     l892:
  8711                           
  8712                           ;doprnt.c: 1341: else if(prec < c)
  8713  00FCC0  5066               	movf	printf@prec+1,w,c
  8714  00FCC2  0A80               	xorlw	128
  8715  00FCC4  6E48               	movwf	??_printf& (0+255),c
  8716  00FCC6  5067               	movf	printf@c,w,c
  8717  00FCC8  5C65               	subwf	printf@prec,w,c
  8718  00FCCA  0E80               	movlw	128
  8719  00FCCC  BE67               	btfsc	printf@c,7,c
  8720  00FCCE  0E7F               	movlw	127
  8721  00FCD0  5848               	subwfb	??_printf& (0+255),w,c
  8722  00FCD2  B0D8               	btfsc	status,0,c
  8723  00FCD4  D005               	goto	l894
  8724                           
  8725                           ;doprnt.c: 1342: prec = c;
  8726  00FCD6  5067               	movf	printf@c,w,c
  8727  00FCD8  6E65               	movwf	printf@prec,c
  8728  00FCDA  6A66               	clrf	printf@prec+1,c
  8729  00FCDC  BE65               	btfsc	printf@prec,7,c
  8730  00FCDE  0666               	decf	printf@prec+1,f,c
  8731  00FCE0                     l894:
  8732                           
  8733                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8734  00FCE0  5060               	movf	printf@width,w,c
  8735  00FCE2  1061               	iorwf	printf@width+1,w,c
  8736  00FCE4  B4D8               	btfsc	status,2,c
  8737  00FCE6  D00D               	goto	l895
  8738  00FCE8  0E03               	movlw	3
  8739  00FCEA  145E               	andwf	printf@flag,w,c
  8740  00FCEC  6E48               	movwf	??_printf& (0+255),c
  8741  00FCEE  0E00               	movlw	0
  8742  00FCF0  145F               	andwf	printf@flag+1,w,c
  8743  00FCF2  6E49               	movwf	(??_printf+1)& (0+255),c
  8744  00FCF4  5048               	movf	??_printf,w,c
  8745  00FCF6  1049               	iorwf	??_printf+1,w,c
  8746  00FCF8  B4D8               	btfsc	status,2,c
  8747  00FCFA  D003               	goto	l895
  8748                           
  8749                           ;doprnt.c: 1346: width--;
  8750  00FCFC  0660               	decf	printf@width,f,c
  8751  00FCFE  A0D8               	btfss	status,0,c
  8752  00FD00  0661               	decf	printf@width+1,f,c
  8753  00FD02                     l895:
  8754                           
  8755                           ;doprnt.c: 1348: if(flag & 0x4000) {
  8756  00FD02  AC5F               	btfss	printf@flag+1,6,c
  8757  00FD04  D013               	goto	l898
  8758                           
  8759                           ;doprnt.c: 1349: if(width > prec)
  8760  00FD06  5060               	movf	printf@width,w,c
  8761  00FD08  5C65               	subwf	printf@prec,w,c
  8762  00FD0A  5066               	movf	printf@prec+1,w,c
  8763  00FD0C  0A80               	xorlw	128
  8764  00FD0E  6E48               	movwf	??_printf& (0+255),c
  8765  00FD10  5061               	movf	printf@width+1,w,c
  8766  00FD12  0A80               	xorlw	128
  8767  00FD14  5848               	subwfb	??_printf& (0+255),w,c
  8768  00FD16  B0D8               	btfsc	status,0,c
  8769  00FD18  D005               	goto	l897
  8770                           
  8771                           ;doprnt.c: 1350: width -= prec;
  8772  00FD1A  5065               	movf	printf@prec,w,c
  8773  00FD1C  5E60               	subwf	printf@width,f,c
  8774  00FD1E  5066               	movf	printf@prec+1,w,c
  8775  00FD20  5A61               	subwfb	printf@width+1,f,c
  8776  00FD22  D004               	goto	l898
  8777  00FD24                     l897:
  8778                           
  8779                           ;doprnt.c: 1351: else
  8780                           ;doprnt.c: 1352: width = 0;
  8781  00FD24  0E00               	movlw	0
  8782  00FD26  6E61               	movwf	printf@width+1,c
  8783  00FD28  0E00               	movlw	0
  8784  00FD2A  6E60               	movwf	printf@width,c
  8785  00FD2C                     l898:
  8786                           
  8787                           ;doprnt.c: 1353: }
  8788                           ;doprnt.c: 1381: if(width > c)
  8789  00FD2C  0E80               	movlw	128
  8790  00FD2E  BE67               	btfsc	printf@c,7,c
  8791  00FD30  0E7F               	movlw	127
  8792  00FD32  6E48               	movwf	??_printf& (0+255),c
  8793  00FD34  5060               	movf	printf@width,w,c
  8794  00FD36  5C67               	subwf	printf@c,w,c
  8795  00FD38  5061               	movf	printf@width+1,w,c
  8796  00FD3A  0A80               	xorlw	128
  8797  00FD3C  5848               	subwfb	??_printf& (0+255),w,c
  8798  00FD3E  B0D8               	btfsc	status,0,c
  8799  00FD40  D007               	goto	l899
  8800                           
  8801                           ;doprnt.c: 1382: width -= c;
  8802  00FD42  5067               	movf	printf@c,w,c
  8803  00FD44  5E60               	subwf	printf@width,f,c
  8804  00FD46  0E00               	movlw	0
  8805  00FD48  BE67               	btfsc	printf@c,7,c
  8806  00FD4A  0EFF               	movlw	255
  8807  00FD4C  5A61               	subwfb	printf@width+1,f,c
  8808  00FD4E  D004               	goto	l900
  8809  00FD50                     l899:
  8810                           
  8811                           ;doprnt.c: 1383: else
  8812                           ;doprnt.c: 1384: width = 0;
  8813  00FD50  0E00               	movlw	0
  8814  00FD52  6E61               	movwf	printf@width+1,c
  8815  00FD54  0E00               	movlw	0
  8816  00FD56  6E60               	movwf	printf@width,c
  8817  00FD58                     l900:
  8818                           
  8819                           ;doprnt.c: 1387: if(flag & 0x04) {
  8820  00FD58  A45E               	btfss	printf@flag,2,c
  8821  00FD5A  D018               	goto	l901
  8822                           
  8823                           ;doprnt.c: 1392: if(flag & 0x03)
  8824  00FD5C  0E03               	movlw	3
  8825  00FD5E  145E               	andwf	printf@flag,w,c
  8826  00FD60  6E48               	movwf	??_printf& (0+255),c
  8827  00FD62  0E00               	movlw	0
  8828  00FD64  145F               	andwf	printf@flag+1,w,c
  8829  00FD66  6E49               	movwf	(??_printf+1)& (0+255),c
  8830  00FD68  5048               	movf	??_printf,w,c
  8831  00FD6A  1049               	iorwf	??_printf+1,w,c
  8832  00FD6C  B4D8               	btfsc	status,2,c
  8833  00FD6E  D003               	goto	l902
  8834                           
  8835                           ;doprnt.c: 1393: (putch('-') );
  8836  00FD70  0E2D               	movlw	45
  8837  00FD72  EC47  F066         	call	_putch
  8838  00FD76                     l902:
  8839                           
  8840                           ;doprnt.c: 1415: if(width)
  8841  00FD76  5060               	movf	printf@width,w,c
  8842  00FD78  1061               	iorwf	printf@width+1,w,c
  8843  00FD7A  B4D8               	btfsc	status,2,c
  8844  00FD7C  D05A               	goto	l911
  8845                           
  8846                           ;doprnt.c: 1417: (putch('0') );
  8847                           
  8848                           ;doprnt.c: 1416: do
  8849  00FD7E  0E30               	movlw	48
  8850  00FD80  EC47  F066         	call	_putch
  8851                           
  8852                           ;doprnt.c: 1418: while(--width);
  8853  00FD84  0660               	decf	printf@width,f,c
  8854  00FD86  A0D8               	btfss	status,0,c
  8855  00FD88  0661               	decf	printf@width+1,f,c
  8856  00FD8A  D7F5               	goto	l902
  8857  00FD8C                     l901:
  8858                           
  8859                           ;doprnt.c: 1422: {
  8860                           ;doprnt.c: 1424: if(width
  8861                           ;doprnt.c: 1428: )
  8862  00FD8C  5060               	movf	printf@width,w,c
  8863  00FD8E  1061               	iorwf	printf@width+1,w,c
  8864  00FD90  B4D8               	btfsc	status,2,c
  8865  00FD92  D00A               	goto	u4550
  8866  00FD94                     u4540:
  8867                           
  8868                           ;doprnt.c: 1430: (putch(' ') );
  8869                           
  8870                           ;doprnt.c: 1429: do
  8871  00FD94  0E20               	movlw	32
  8872  00FD96  EC47  F066         	call	_putch
  8873                           
  8874                           ;doprnt.c: 1431: while(--width);
  8875  00FD9A  0660               	decf	printf@width,f,c
  8876  00FD9C  A0D8               	btfss	status,0,c
  8877  00FD9E  0661               	decf	printf@width+1,f,c
  8878  00FDA0  5060               	movf	printf@width,w,c
  8879  00FDA2  1061               	iorwf	printf@width+1,w,c
  8880  00FDA4  A4D8               	btfss	status,2,c
  8881  00FDA6  D7F6               	goto	u4540
  8882  00FDA8                     u4550:
  8883                           
  8884                           ;doprnt.c: 1438: if(flag & 0x03)
  8885  00FDA8  0E03               	movlw	3
  8886  00FDAA  145E               	andwf	printf@flag,w,c
  8887  00FDAC  6E48               	movwf	??_printf& (0+255),c
  8888  00FDAE  0E00               	movlw	0
  8889  00FDB0  145F               	andwf	printf@flag+1,w,c
  8890  00FDB2  6E49               	movwf	(??_printf+1)& (0+255),c
  8891  00FDB4  5048               	movf	??_printf,w,c
  8892  00FDB6  1049               	iorwf	??_printf+1,w,c
  8893  00FDB8  B4D8               	btfsc	status,2,c
  8894  00FDBA  D03B               	goto	l911
  8895                           
  8896                           ;doprnt.c: 1439: (putch('-') );
  8897  00FDBC  0E2D               	movlw	45
  8898  00FDBE  EC47  F066         	call	_putch
  8899                           
  8900                           ;doprnt.c: 1469: }
  8901                           ;doprnt.c: 1474: while(prec--) {
  8902  00FDC2  D037               	goto	l911
  8903  00FDC4                     l4750:
  8904                           
  8905                           ;doprnt.c: 1478: {
  8906                           ;doprnt.c: 1499: {
  8907                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8908  00FDC4  C054  F001         	movff	printf@val,___lldiv@dividend
  8909  00FDC8  C055  F002         	movff	printf@val+1,___lldiv@dividend+1
  8910  00FDCC  C056  F003         	movff	printf@val+2,___lldiv@dividend+2
  8911  00FDD0  C057  F004         	movff	printf@val+3,___lldiv@dividend+3
  8912  00FDD4  C065  F048         	movff	printf@prec,??_printf
  8913  00FDD8  C066  F049         	movff	printf@prec+1,??_printf+1
  8914  00FDDC  90D8               	bcf	status,0,c
  8915  00FDDE  3648               	rlcf	??_printf,f,c
  8916  00FDE0  3649               	rlcf	??_printf+1,f,c
  8917  00FDE2  90D8               	bcf	status,0,c
  8918  00FDE4  3648               	rlcf	??_printf,f,c
  8919  00FDE6  3649               	rlcf	??_printf+1,f,c
  8920  00FDE8  0ED5               	movlw	low _hexpowers
  8921  00FDEA  2448               	addwf	??_printf,w,c
  8922  00FDEC  6EF6               	movwf	tblptrl,c
  8923  00FDEE  0EFE               	movlw	high _hexpowers
  8924  00FDF0  2049               	addwfc	??_printf+1,w,c
  8925  00FDF2  6EF7               	movwf	tblptrh,c
  8926  00FDF4                     	if	0	;There are less than 3 active tblptr bytes
  8927  00FDF4                     	endif
  8928  00FDF4  0009               	tblrd		*+
  8929  00FDF6  CFF5 F005          	movff	tablat,___lldiv@divisor
  8930  00FDFA  0009               	tblrd		*+
  8931  00FDFC  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  8932  00FE00  0009               	tblrd		*+
  8933  00FE02  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  8934  00FE06  000A               	tblrd		*-
  8935  00FE08  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  8936  00FE0C  EC27  F06A         	call	___lldiv	;wreg free
  8937  00FE10  5001               	movf	?___lldiv,w,c
  8938  00FE12  0B0F               	andlw	15
  8939  00FE14  6E51               	movwf	printf@idx,c
  8940                           
  8941                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  8942  00FE16  5051               	movf	printf@idx,w,c
  8943  00FE18  0D01               	mullw	1
  8944  00FE1A  0E87               	movlw	low STR_11
  8945  00FE1C  24F3               	addwf	prodl,w,c
  8946  00FE1E  6EF6               	movwf	tblptrl,c
  8947  00FE20  0EFF               	movlw	high STR_11
  8948  00FE22  20F4               	addwfc	prodh,w,c
  8949  00FE24  6EF7               	movwf	tblptrh,c
  8950  00FE26                     	if	0	;There are less than 3 active tblptr bytes
  8951  00FE26                     	endif
  8952  00FE26  0008               	tblrd		*
  8953  00FE28  CFF5 F067          	movff	tablat,printf@c
  8954                           
  8955                           ;doprnt.c: 1508: }
  8956                           ;doprnt.c: 1523: }
  8957                           ;doprnt.c: 1524: (putch(c) );
  8958  00FE2C  5067               	movf	printf@c,w,c
  8959  00FE2E  EC47  F066         	call	_putch
  8960  00FE32                     l911:
  8961  00FE32  0665               	decf	printf@prec,f,c
  8962  00FE34  A0D8               	btfss	status,0,c
  8963  00FE36  0666               	decf	printf@prec+1,f,c
  8964  00FE38  2865               	incf	printf@prec,w,c
  8965  00FE3A  E1C4               	bnz	l4750
  8966  00FE3C  2866               	incf	printf@prec+1,w,c
  8967  00FE3E  A4D8               	btfss	status,2,c
  8968  00FE40  D7C1               	goto	l912
  8969  00FE42                     u4570:
  8970  00FE42  C040  FFF6         	movff	printf@f,tblptrl
  8971  00FE46  C041  FFF7         	movff	printf@f+1,tblptrh
  8972  00FE4A  4A40               	infsnz	printf@f,f,c
  8973  00FE4C  2A41               	incf	printf@f+1,f,c
  8974  00FE4E                     	if	0	;tblptru may be non-zero
  8975  00FE4E                     	endif
  8976  00FE4E                     	if	0	;tblptru may be non-zero
  8977  00FE4E                     	endif
  8978  00FE4E  0008               	tblrd		*
  8979  00FE50  CFF5 F067          	movff	tablat,printf@c
  8980  00FE54  5067               	movf	printf@c,w,c
  8981  00FE56  B4D8               	btfsc	status,2,c
  8982  00FE58  0012               	return	
  8983  00FE5A  EF78  F07A         	goto	l816
  8984  00FE5E                     __end_of_printf:
  8985                           	opt stack 0
  8986                           tblptru	equ	0xFF8
  8987                           tblptrh	equ	0xFF7
  8988                           tblptrl	equ	0xFF6
  8989                           tablat	equ	0xFF5
  8990                           prodh	equ	0xFF4
  8991                           prodl	equ	0xFF3
  8992                           postinc0	equ	0xFEE
  8993                           wreg	equ	0xFE8
  8994                           plusw1	equ	0xFE3
  8995                           indf2	equ	0xFDF
  8996                           postinc2	equ	0xFDE
  8997                           postdec2	equ	0xFDD
  8998                           plusw2	equ	0xFDB
  8999                           fsr2h	equ	0xFDA
  9000                           fsr2l	equ	0xFD9
  9001                           status	equ	0xFD8
  9002                           
  9003 ;; *************** function _scale *****************
  9004 ;; Defined at:
  9005 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;  scl             1    wreg     char 
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;  scl             1   41[COMRAM] char 
  9010 ;; Return value:  Size  Location     Type
  9011 ;;                  3   35[COMRAM] char 
  9012 ;; Registers used:
  9013 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9014 ;; Tracked objects:
  9015 ;;		On entry : 0/0
  9016 ;;		On exit  : 0/0
  9017 ;;		Unchanged: 0/0
  9018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9019 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;Total ram usage:        7 bytes
  9024 ;; Hardware stack levels used:    1
  9025 ;; Hardware stack levels required when called:    2
  9026 ;; This function calls:
  9027 ;;		___awdiv
  9028 ;;		___awmod
  9029 ;;		___ftmul
  9030 ;;		___wmul
  9031 ;; This function is called by:
  9032 ;;		_printf
  9033 ;; This function uses a non-reentrant model
  9034 ;;
  9035                           
  9036                           	psect	text37
  9037  00E8D6                     __ptext37:
  9038                           	opt stack 0
  9039  00E8D6                     _scale:
  9040                           	opt stack 26
  9041                           
  9042                           ;incstack = 0
  9043                           ;scale@scl stored from wreg
  9044  00E8D6  6E2A               	movwf	scale@scl,c
  9045                           
  9046                           ;doprnt.c: 428: if(scl < 0) {
  9047  00E8D8  AE2A               	btfss	scale@scl,7,c
  9048  00E8DA  D101               	goto	l805
  9049                           
  9050                           ;doprnt.c: 429: scl = -scl;
  9051  00E8DC  6C2A               	negf	scale@scl,c
  9052                           
  9053                           ;doprnt.c: 430: if(scl>=110)
  9054  00E8DE  502A               	movf	scale@scl,w,c
  9055  00E8E0  0A80               	xorlw	128
  9056  00E8E2  0F12               	addlw	-238
  9057  00E8E4  A0D8               	btfss	status,0,c
  9058  00E8E6  D091               	goto	l806
  9059                           
  9060                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9061  00E8E8  0E00               	movlw	0
  9062  00E8EA  6E12               	movwf	___wmul@multiplicand+1,c
  9063  00E8EC  0E03               	movlw	3
  9064  00E8EE  6E11               	movwf	___wmul@multiplicand,c
  9065  00E8F0  0E00               	movlw	0
  9066  00E8F2  6E0A               	movwf	___awdiv@divisor+1,c
  9067  00E8F4  0E0A               	movlw	10
  9068  00E8F6  6E09               	movwf	___awdiv@divisor,c
  9069  00E8F8  0E00               	movlw	0
  9070  00E8FA  6E04               	movwf	___awmod@divisor+1,c
  9071  00E8FC  0E64               	movlw	100
  9072  00E8FE  6E03               	movwf	___awmod@divisor,c
  9073  00E900  502A               	movf	scale@scl,w,c
  9074  00E902  6E01               	movwf	___awmod@dividend,c
  9075  00E904  6A02               	clrf	___awmod@dividend+1,c
  9076  00E906  BE01               	btfsc	___awmod@dividend,7,c
  9077  00E908  0602               	decf	___awmod@dividend+1,f,c
  9078  00E90A  EC78  F069         	call	___awmod	;wreg free
  9079  00E90E  C001  F007         	movff	?___awmod,___awdiv@dividend
  9080  00E912  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  9081  00E916  EC68  F06A         	call	___awdiv	;wreg free
  9082  00E91A  0E09               	movlw	9
  9083  00E91C  2407               	addwf	?___awdiv,w,c
  9084  00E91E  6E0F               	movwf	___wmul@multiplier,c
  9085  00E920  0E00               	movlw	0
  9086  00E922  2008               	addwfc	?___awdiv+1,w,c
  9087  00E924  6E10               	movwf	___wmul@multiplier+1,c
  9088  00E926  EC1E  F067         	call	___wmul	;wreg free
  9089  00E92A  0EAE               	movlw	low __npowers_
  9090  00E92C  240F               	addwf	?___wmul,w,c
  9091  00E92E  6EF6               	movwf	tblptrl,c
  9092  00E930  0EFE               	movlw	high __npowers_
  9093  00E932  2010               	addwfc	?___wmul+1,w,c
  9094  00E934  6EF7               	movwf	tblptrh,c
  9095  00E936                     	if	0	;There are less than 3 active tblptr bytes
  9096  00E936                     	endif
  9097  00E936  0009               	tblrd		*+
  9098  00E938  CFF5 F018          	movff	tablat,___ftmul@f2
  9099  00E93C  0009               	tblrd		*+
  9100  00E93E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9101  00E942  000A               	tblrd		*-
  9102  00E944  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9103  00E948  0E00               	movlw	0
  9104  00E94A  6E0A               	movwf	___awdiv@divisor+1,c
  9105  00E94C  0E64               	movlw	100
  9106  00E94E  6E09               	movwf	___awdiv@divisor,c
  9107  00E950  502A               	movf	scale@scl,w,c
  9108  00E952  6E07               	movwf	___awdiv@dividend,c
  9109  00E954  6A08               	clrf	___awdiv@dividend+1,c
  9110  00E956  BE07               	btfsc	___awdiv@dividend,7,c
  9111  00E958  0608               	decf	___awdiv@dividend+1,f,c
  9112  00E95A  EC68  F06A         	call	___awdiv	;wreg free
  9113  00E95E  0E12               	movlw	18
  9114  00E960  2407               	addwf	?___awdiv,w,c
  9115  00E962  6E0F               	movwf	___wmul@multiplier,c
  9116  00E964  0E00               	movlw	0
  9117  00E966  2008               	addwfc	?___awdiv+1,w,c
  9118  00E968  6E10               	movwf	___wmul@multiplier+1,c
  9119  00E96A  0E00               	movlw	0
  9120  00E96C  6E12               	movwf	___wmul@multiplicand+1,c
  9121  00E96E  0E03               	movlw	3
  9122  00E970  6E11               	movwf	___wmul@multiplicand,c
  9123  00E972  EC1E  F067         	call	___wmul	;wreg free
  9124  00E976  0EAE               	movlw	low __npowers_
  9125  00E978  240F               	addwf	?___wmul,w,c
  9126  00E97A  6EF6               	movwf	tblptrl,c
  9127  00E97C  0EFE               	movlw	high __npowers_
  9128  00E97E  2010               	addwfc	?___wmul+1,w,c
  9129  00E980  6EF7               	movwf	tblptrh,c
  9130  00E982                     	if	0	;There are less than 3 active tblptr bytes
  9131  00E982                     	endif
  9132  00E982  0009               	tblrd		*+
  9133  00E984  CFF5 F015          	movff	tablat,___ftmul@f1
  9134  00E988  0009               	tblrd		*+
  9135  00E98A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  9136  00E98E  000A               	tblrd		*-
  9137  00E990  CFF5 F017          	movff	tablat,___ftmul@f1+2
  9138  00E994  ECDE  F06C         	call	___ftmul	;wreg free
  9139  00E998  C015  F027         	movff	?___ftmul,_scale$2267
  9140  00E99C  C016  F028         	movff	?___ftmul+1,_scale$2267+1
  9141  00E9A0  C017  F029         	movff	?___ftmul+2,_scale$2267+2
  9142                           
  9143                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9144  00E9A4  C027  F015         	movff	_scale$2267,___ftmul@f1
  9145  00E9A8  C028  F016         	movff	_scale$2267+1,___ftmul@f1+1
  9146  00E9AC  C029  F017         	movff	_scale$2267+2,___ftmul@f1+2
  9147  00E9B0  0E00               	movlw	0
  9148  00E9B2  6E12               	movwf	___wmul@multiplicand+1,c
  9149  00E9B4  0E03               	movlw	3
  9150  00E9B6  6E11               	movwf	___wmul@multiplicand,c
  9151  00E9B8  0E00               	movlw	0
  9152  00E9BA  6E04               	movwf	___awmod@divisor+1,c
  9153  00E9BC  0E0A               	movlw	10
  9154  00E9BE  6E03               	movwf	___awmod@divisor,c
  9155  00E9C0  502A               	movf	scale@scl,w,c
  9156  00E9C2  6E01               	movwf	___awmod@dividend,c
  9157  00E9C4  6A02               	clrf	___awmod@dividend+1,c
  9158  00E9C6  BE01               	btfsc	___awmod@dividend,7,c
  9159  00E9C8  0602               	decf	___awmod@dividend+1,f,c
  9160  00E9CA  EC78  F069         	call	___awmod	;wreg free
  9161  00E9CE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  9162  00E9D2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  9163  00E9D6  EC1E  F067         	call	___wmul	;wreg free
  9164  00E9DA  0EAE               	movlw	low __npowers_
  9165  00E9DC  240F               	addwf	?___wmul,w,c
  9166  00E9DE  6EF6               	movwf	tblptrl,c
  9167  00E9E0  0EFE               	movlw	high __npowers_
  9168  00E9E2  2010               	addwfc	?___wmul+1,w,c
  9169  00E9E4  6EF7               	movwf	tblptrh,c
  9170  00E9E6                     	if	0	;There are less than 3 active tblptr bytes
  9171  00E9E6                     	endif
  9172  00E9E6  0009               	tblrd		*+
  9173  00E9E8  CFF5 F018          	movff	tablat,___ftmul@f2
  9174  00E9EC  0009               	tblrd		*+
  9175  00E9EE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9176  00E9F2  000A               	tblrd		*-
  9177  00E9F4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9178  00E9F8  ECDE  F06C         	call	___ftmul	;wreg free
  9179  00E9FC  C015  F024         	movff	?___ftmul,?_scale
  9180  00EA00  C016  F025         	movff	?___ftmul+1,?_scale+1
  9181  00EA04  C017  F026         	movff	?___ftmul+2,?_scale+2
  9182  00EA08  0012               	return	
  9183  00EA0A                     l806:
  9184                           
  9185                           ;doprnt.c: 432: else if(scl > 10)
  9186  00EA0A  502A               	movf	scale@scl,w,c
  9187  00EA0C  0A80               	xorlw	128
  9188  00EA0E  0F75               	addlw	-139
  9189  00EA10  A0D8               	btfss	status,0,c
  9190  00EA12  D053               	goto	l809
  9191                           
  9192                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  9193  00EA14  0E00               	movlw	0
  9194  00EA16  6E0A               	movwf	___awdiv@divisor+1,c
  9195  00EA18  0E0A               	movlw	10
  9196  00EA1A  6E09               	movwf	___awdiv@divisor,c
  9197  00EA1C  502A               	movf	scale@scl,w,c
  9198  00EA1E  6E07               	movwf	___awdiv@dividend,c
  9199  00EA20  6A08               	clrf	___awdiv@dividend+1,c
  9200  00EA22  BE07               	btfsc	___awdiv@dividend,7,c
  9201  00EA24  0608               	decf	___awdiv@dividend+1,f,c
  9202  00EA26  EC68  F06A         	call	___awdiv	;wreg free
  9203  00EA2A  0E09               	movlw	9
  9204  00EA2C  2407               	addwf	?___awdiv,w,c
  9205  00EA2E  6E0F               	movwf	___wmul@multiplier,c
  9206  00EA30  0E00               	movlw	0
  9207  00EA32  2008               	addwfc	?___awdiv+1,w,c
  9208  00EA34  6E10               	movwf	___wmul@multiplier+1,c
  9209  00EA36  0E00               	movlw	0
  9210  00EA38  6E12               	movwf	___wmul@multiplicand+1,c
  9211  00EA3A  0E03               	movlw	3
  9212  00EA3C  6E11               	movwf	___wmul@multiplicand,c
  9213  00EA3E  EC1E  F067         	call	___wmul	;wreg free
  9214  00EA42  0EAE               	movlw	low __npowers_
  9215  00EA44  240F               	addwf	?___wmul,w,c
  9216  00EA46  6EF6               	movwf	tblptrl,c
  9217  00EA48  0EFE               	movlw	high __npowers_
  9218  00EA4A  2010               	addwfc	?___wmul+1,w,c
  9219  00EA4C  6EF7               	movwf	tblptrh,c
  9220  00EA4E                     	if	0	;There are less than 3 active tblptr bytes
  9221  00EA4E                     	endif
  9222  00EA4E  0009               	tblrd		*+
  9223  00EA50  CFF5 F015          	movff	tablat,___ftmul@f1
  9224  00EA54  0009               	tblrd		*+
  9225  00EA56  CFF5 F016          	movff	tablat,___ftmul@f1+1
  9226  00EA5A  000A               	tblrd		*-
  9227  00EA5C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  9228  00EA60  0E00               	movlw	0
  9229  00EA62  6E12               	movwf	___wmul@multiplicand+1,c
  9230  00EA64  0E03               	movlw	3
  9231  00EA66  6E11               	movwf	___wmul@multiplicand,c
  9232  00EA68  0E00               	movlw	0
  9233  00EA6A  6E04               	movwf	___awmod@divisor+1,c
  9234  00EA6C  0E0A               	movlw	10
  9235  00EA6E  6E03               	movwf	___awmod@divisor,c
  9236  00EA70  502A               	movf	scale@scl,w,c
  9237  00EA72  6E01               	movwf	___awmod@dividend,c
  9238  00EA74  6A02               	clrf	___awmod@dividend+1,c
  9239  00EA76  BE01               	btfsc	___awmod@dividend,7,c
  9240  00EA78  0602               	decf	___awmod@dividend+1,f,c
  9241  00EA7A  EC78  F069         	call	___awmod	;wreg free
  9242  00EA7E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  9243  00EA82  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  9244  00EA86  EC1E  F067         	call	___wmul	;wreg free
  9245  00EA8A  0EAE               	movlw	low __npowers_
  9246  00EA8C  240F               	addwf	?___wmul,w,c
  9247  00EA8E  6EF6               	movwf	tblptrl,c
  9248  00EA90  0EFE               	movlw	high __npowers_
  9249  00EA92  2010               	addwfc	?___wmul+1,w,c
  9250  00EA94  6EF7               	movwf	tblptrh,c
  9251  00EA96                     	if	0	;There are less than 3 active tblptr bytes
  9252  00EA96                     	endif
  9253  00EA96  0009               	tblrd		*+
  9254  00EA98  CFF5 F018          	movff	tablat,___ftmul@f2
  9255  00EA9C  0009               	tblrd		*+
  9256  00EA9E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9257  00EAA2  000A               	tblrd		*-
  9258  00EAA4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9259  00EAA8  ECDE  F06C         	call	___ftmul	;wreg free
  9260  00EAAC  C015  F024         	movff	?___ftmul,?_scale
  9261  00EAB0  C016  F025         	movff	?___ftmul+1,?_scale+1
  9262  00EAB4  C017  F026         	movff	?___ftmul+2,?_scale+2
  9263  00EAB8  0012               	return	
  9264  00EABA                     l809:
  9265                           
  9266                           ;doprnt.c: 434: return _npowers_[scl];
  9267  00EABA  502A               	movf	scale@scl,w,c
  9268  00EABC  0D03               	mullw	3
  9269  00EABE  0EAE               	movlw	low __npowers_
  9270  00EAC0  24F3               	addwf	prodl,w,c
  9271  00EAC2  6EF6               	movwf	tblptrl,c
  9272  00EAC4  0EFE               	movlw	high __npowers_
  9273  00EAC6  20F4               	addwfc	prodh,w,c
  9274  00EAC8  6EF7               	movwf	tblptrh,c
  9275  00EACA                     	if	0	;There are less than 3 active tblptr bytes
  9276  00EACA                     	endif
  9277  00EACA  0009               	tblrd		*+
  9278  00EACC  CFF5 F024          	movff	tablat,?_scale
  9279  00EAD0  0009               	tblrd		*+
  9280  00EAD2  CFF5 F025          	movff	tablat,?_scale+1
  9281  00EAD6  000A               	tblrd		*-
  9282  00EAD8  CFF5 F026          	movff	tablat,?_scale+2
  9283  00EADC  0012               	return	
  9284  00EADE                     l805:
  9285                           
  9286                           ;doprnt.c: 435: }
  9287                           ;doprnt.c: 436: if(scl>=110)
  9288  00EADE  502A               	movf	scale@scl,w,c
  9289  00EAE0  0A80               	xorlw	128
  9290  00EAE2  0F12               	addlw	-238
  9291  00EAE4  A0D8               	btfss	status,0,c
  9292  00EAE6  D091               	goto	l810
  9293                           
  9294                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9295  00EAE8  0E00               	movlw	0
  9296  00EAEA  6E12               	movwf	___wmul@multiplicand+1,c
  9297  00EAEC  0E03               	movlw	3
  9298  00EAEE  6E11               	movwf	___wmul@multiplicand,c
  9299  00EAF0  0E00               	movlw	0
  9300  00EAF2  6E0A               	movwf	___awdiv@divisor+1,c
  9301  00EAF4  0E0A               	movlw	10
  9302  00EAF6  6E09               	movwf	___awdiv@divisor,c
  9303  00EAF8  0E00               	movlw	0
  9304  00EAFA  6E04               	movwf	___awmod@divisor+1,c
  9305  00EAFC  0E64               	movlw	100
  9306  00EAFE  6E03               	movwf	___awmod@divisor,c
  9307  00EB00  502A               	movf	scale@scl,w,c
  9308  00EB02  6E01               	movwf	___awmod@dividend,c
  9309  00EB04  6A02               	clrf	___awmod@dividend+1,c
  9310  00EB06  BE01               	btfsc	___awmod@dividend,7,c
  9311  00EB08  0602               	decf	___awmod@dividend+1,f,c
  9312  00EB0A  EC78  F069         	call	___awmod	;wreg free
  9313  00EB0E  C001  F007         	movff	?___awmod,___awdiv@dividend
  9314  00EB12  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  9315  00EB16  EC68  F06A         	call	___awdiv	;wreg free
  9316  00EB1A  0E09               	movlw	9
  9317  00EB1C  2407               	addwf	?___awdiv,w,c
  9318  00EB1E  6E0F               	movwf	___wmul@multiplier,c
  9319  00EB20  0E00               	movlw	0
  9320  00EB22  2008               	addwfc	?___awdiv+1,w,c
  9321  00EB24  6E10               	movwf	___wmul@multiplier+1,c
  9322  00EB26  EC1E  F067         	call	___wmul	;wreg free
  9323  00EB2A  0E87               	movlw	low __powers_
  9324  00EB2C  240F               	addwf	?___wmul,w,c
  9325  00EB2E  6EF6               	movwf	tblptrl,c
  9326  00EB30  0EFE               	movlw	high __powers_
  9327  00EB32  2010               	addwfc	?___wmul+1,w,c
  9328  00EB34  6EF7               	movwf	tblptrh,c
  9329  00EB36                     	if	0	;There are less than 3 active tblptr bytes
  9330  00EB36                     	endif
  9331  00EB36  0009               	tblrd		*+
  9332  00EB38  CFF5 F018          	movff	tablat,___ftmul@f2
  9333  00EB3C  0009               	tblrd		*+
  9334  00EB3E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9335  00EB42  000A               	tblrd		*-
  9336  00EB44  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9337  00EB48  0E00               	movlw	0
  9338  00EB4A  6E0A               	movwf	___awdiv@divisor+1,c
  9339  00EB4C  0E64               	movlw	100
  9340  00EB4E  6E09               	movwf	___awdiv@divisor,c
  9341  00EB50  502A               	movf	scale@scl,w,c
  9342  00EB52  6E07               	movwf	___awdiv@dividend,c
  9343  00EB54  6A08               	clrf	___awdiv@dividend+1,c
  9344  00EB56  BE07               	btfsc	___awdiv@dividend,7,c
  9345  00EB58  0608               	decf	___awdiv@dividend+1,f,c
  9346  00EB5A  EC68  F06A         	call	___awdiv	;wreg free
  9347  00EB5E  0E12               	movlw	18
  9348  00EB60  2407               	addwf	?___awdiv,w,c
  9349  00EB62  6E0F               	movwf	___wmul@multiplier,c
  9350  00EB64  0E00               	movlw	0
  9351  00EB66  2008               	addwfc	?___awdiv+1,w,c
  9352  00EB68  6E10               	movwf	___wmul@multiplier+1,c
  9353  00EB6A  0E00               	movlw	0
  9354  00EB6C  6E12               	movwf	___wmul@multiplicand+1,c
  9355  00EB6E  0E03               	movlw	3
  9356  00EB70  6E11               	movwf	___wmul@multiplicand,c
  9357  00EB72  EC1E  F067         	call	___wmul	;wreg free
  9358  00EB76  0E87               	movlw	low __powers_
  9359  00EB78  240F               	addwf	?___wmul,w,c
  9360  00EB7A  6EF6               	movwf	tblptrl,c
  9361  00EB7C  0EFE               	movlw	high __powers_
  9362  00EB7E  2010               	addwfc	?___wmul+1,w,c
  9363  00EB80  6EF7               	movwf	tblptrh,c
  9364  00EB82                     	if	0	;There are less than 3 active tblptr bytes
  9365  00EB82                     	endif
  9366  00EB82  0009               	tblrd		*+
  9367  00EB84  CFF5 F015          	movff	tablat,___ftmul@f1
  9368  00EB88  0009               	tblrd		*+
  9369  00EB8A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  9370  00EB8E  000A               	tblrd		*-
  9371  00EB90  CFF5 F017          	movff	tablat,___ftmul@f1+2
  9372  00EB94  ECDE  F06C         	call	___ftmul	;wreg free
  9373  00EB98  C015  F027         	movff	?___ftmul,_scale$2267
  9374  00EB9C  C016  F028         	movff	?___ftmul+1,_scale$2267+1
  9375  00EBA0  C017  F029         	movff	?___ftmul+2,_scale$2267+2
  9376                           
  9377                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9378  00EBA4  C027  F015         	movff	_scale$2267,___ftmul@f1
  9379  00EBA8  C028  F016         	movff	_scale$2267+1,___ftmul@f1+1
  9380  00EBAC  C029  F017         	movff	_scale$2267+2,___ftmul@f1+2
  9381  00EBB0  0E00               	movlw	0
  9382  00EBB2  6E12               	movwf	___wmul@multiplicand+1,c
  9383  00EBB4  0E03               	movlw	3
  9384  00EBB6  6E11               	movwf	___wmul@multiplicand,c
  9385  00EBB8  0E00               	movlw	0
  9386  00EBBA  6E04               	movwf	___awmod@divisor+1,c
  9387  00EBBC  0E0A               	movlw	10
  9388  00EBBE  6E03               	movwf	___awmod@divisor,c
  9389  00EBC0  502A               	movf	scale@scl,w,c
  9390  00EBC2  6E01               	movwf	___awmod@dividend,c
  9391  00EBC4  6A02               	clrf	___awmod@dividend+1,c
  9392  00EBC6  BE01               	btfsc	___awmod@dividend,7,c
  9393  00EBC8  0602               	decf	___awmod@dividend+1,f,c
  9394  00EBCA  EC78  F069         	call	___awmod	;wreg free
  9395  00EBCE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  9396  00EBD2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  9397  00EBD6  EC1E  F067         	call	___wmul	;wreg free
  9398  00EBDA  0E87               	movlw	low __powers_
  9399  00EBDC  240F               	addwf	?___wmul,w,c
  9400  00EBDE  6EF6               	movwf	tblptrl,c
  9401  00EBE0  0EFE               	movlw	high __powers_
  9402  00EBE2  2010               	addwfc	?___wmul+1,w,c
  9403  00EBE4  6EF7               	movwf	tblptrh,c
  9404  00EBE6                     	if	0	;There are less than 3 active tblptr bytes
  9405  00EBE6                     	endif
  9406  00EBE6  0009               	tblrd		*+
  9407  00EBE8  CFF5 F018          	movff	tablat,___ftmul@f2
  9408  00EBEC  0009               	tblrd		*+
  9409  00EBEE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9410  00EBF2  000A               	tblrd		*-
  9411  00EBF4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9412  00EBF8  ECDE  F06C         	call	___ftmul	;wreg free
  9413  00EBFC  C015  F024         	movff	?___ftmul,?_scale
  9414  00EC00  C016  F025         	movff	?___ftmul+1,?_scale+1
  9415  00EC04  C017  F026         	movff	?___ftmul+2,?_scale+2
  9416  00EC08  0012               	return	
  9417  00EC0A                     l810:
  9418                           
  9419                           ;doprnt.c: 438: else if(scl > 10)
  9420  00EC0A  502A               	movf	scale@scl,w,c
  9421  00EC0C  0A80               	xorlw	128
  9422  00EC0E  0F75               	addlw	-139
  9423  00EC10  A0D8               	btfss	status,0,c
  9424  00EC12  D053               	goto	l812
  9425                           
  9426                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  9427  00EC14  0E00               	movlw	0
  9428  00EC16  6E0A               	movwf	___awdiv@divisor+1,c
  9429  00EC18  0E0A               	movlw	10
  9430  00EC1A  6E09               	movwf	___awdiv@divisor,c
  9431  00EC1C  502A               	movf	scale@scl,w,c
  9432  00EC1E  6E07               	movwf	___awdiv@dividend,c
  9433  00EC20  6A08               	clrf	___awdiv@dividend+1,c
  9434  00EC22  BE07               	btfsc	___awdiv@dividend,7,c
  9435  00EC24  0608               	decf	___awdiv@dividend+1,f,c
  9436  00EC26  EC68  F06A         	call	___awdiv	;wreg free
  9437  00EC2A  0E09               	movlw	9
  9438  00EC2C  2407               	addwf	?___awdiv,w,c
  9439  00EC2E  6E0F               	movwf	___wmul@multiplier,c
  9440  00EC30  0E00               	movlw	0
  9441  00EC32  2008               	addwfc	?___awdiv+1,w,c
  9442  00EC34  6E10               	movwf	___wmul@multiplier+1,c
  9443  00EC36  0E00               	movlw	0
  9444  00EC38  6E12               	movwf	___wmul@multiplicand+1,c
  9445  00EC3A  0E03               	movlw	3
  9446  00EC3C  6E11               	movwf	___wmul@multiplicand,c
  9447  00EC3E  EC1E  F067         	call	___wmul	;wreg free
  9448  00EC42  0E87               	movlw	low __powers_
  9449  00EC44  240F               	addwf	?___wmul,w,c
  9450  00EC46  6EF6               	movwf	tblptrl,c
  9451  00EC48  0EFE               	movlw	high __powers_
  9452  00EC4A  2010               	addwfc	?___wmul+1,w,c
  9453  00EC4C  6EF7               	movwf	tblptrh,c
  9454  00EC4E                     	if	0	;There are less than 3 active tblptr bytes
  9455  00EC4E                     	endif
  9456  00EC4E  0009               	tblrd		*+
  9457  00EC50  CFF5 F015          	movff	tablat,___ftmul@f1
  9458  00EC54  0009               	tblrd		*+
  9459  00EC56  CFF5 F016          	movff	tablat,___ftmul@f1+1
  9460  00EC5A  000A               	tblrd		*-
  9461  00EC5C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  9462  00EC60  0E00               	movlw	0
  9463  00EC62  6E12               	movwf	___wmul@multiplicand+1,c
  9464  00EC64  0E03               	movlw	3
  9465  00EC66  6E11               	movwf	___wmul@multiplicand,c
  9466  00EC68  0E00               	movlw	0
  9467  00EC6A  6E04               	movwf	___awmod@divisor+1,c
  9468  00EC6C  0E0A               	movlw	10
  9469  00EC6E  6E03               	movwf	___awmod@divisor,c
  9470  00EC70  502A               	movf	scale@scl,w,c
  9471  00EC72  6E01               	movwf	___awmod@dividend,c
  9472  00EC74  6A02               	clrf	___awmod@dividend+1,c
  9473  00EC76  BE01               	btfsc	___awmod@dividend,7,c
  9474  00EC78  0602               	decf	___awmod@dividend+1,f,c
  9475  00EC7A  EC78  F069         	call	___awmod	;wreg free
  9476  00EC7E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  9477  00EC82  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  9478  00EC86  EC1E  F067         	call	___wmul	;wreg free
  9479  00EC8A  0E87               	movlw	low __powers_
  9480  00EC8C  240F               	addwf	?___wmul,w,c
  9481  00EC8E  6EF6               	movwf	tblptrl,c
  9482  00EC90  0EFE               	movlw	high __powers_
  9483  00EC92  2010               	addwfc	?___wmul+1,w,c
  9484  00EC94  6EF7               	movwf	tblptrh,c
  9485  00EC96                     	if	0	;There are less than 3 active tblptr bytes
  9486  00EC96                     	endif
  9487  00EC96  0009               	tblrd		*+
  9488  00EC98  CFF5 F018          	movff	tablat,___ftmul@f2
  9489  00EC9C  0009               	tblrd		*+
  9490  00EC9E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9491  00ECA2  000A               	tblrd		*-
  9492  00ECA4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9493  00ECA8  ECDE  F06C         	call	___ftmul	;wreg free
  9494  00ECAC  C015  F024         	movff	?___ftmul,?_scale
  9495  00ECB0  C016  F025         	movff	?___ftmul+1,?_scale+1
  9496  00ECB4  C017  F026         	movff	?___ftmul+2,?_scale+2
  9497  00ECB8  0012               	return	
  9498  00ECBA                     l812:
  9499                           
  9500                           ;doprnt.c: 440: return _powers_[scl];
  9501  00ECBA  502A               	movf	scale@scl,w,c
  9502  00ECBC  0D03               	mullw	3
  9503  00ECBE  0E87               	movlw	low __powers_
  9504  00ECC0  24F3               	addwf	prodl,w,c
  9505  00ECC2  6EF6               	movwf	tblptrl,c
  9506  00ECC4  0EFE               	movlw	high __powers_
  9507  00ECC6  20F4               	addwfc	prodh,w,c
  9508  00ECC8  6EF7               	movwf	tblptrh,c
  9509  00ECCA                     	if	0	;There are less than 3 active tblptr bytes
  9510  00ECCA                     	endif
  9511  00ECCA  0009               	tblrd		*+
  9512  00ECCC  CFF5 F024          	movff	tablat,?_scale
  9513  00ECD0  0009               	tblrd		*+
  9514  00ECD2  CFF5 F025          	movff	tablat,?_scale+1
  9515  00ECD6  000A               	tblrd		*-
  9516  00ECD8  CFF5 F026          	movff	tablat,?_scale+2
  9517  00ECDC  0012               	return	
  9518  00ECDE                     __end_of_scale:
  9519                           	opt stack 0
  9520                           tblptru	equ	0xFF8
  9521                           tblptrh	equ	0xFF7
  9522                           tblptrl	equ	0xFF6
  9523                           tablat	equ	0xFF5
  9524                           prodh	equ	0xFF4
  9525                           prodl	equ	0xFF3
  9526                           postinc0	equ	0xFEE
  9527                           wreg	equ	0xFE8
  9528                           plusw1	equ	0xFE3
  9529                           indf2	equ	0xFDF
  9530                           postinc2	equ	0xFDE
  9531                           postdec2	equ	0xFDD
  9532                           plusw2	equ	0xFDB
  9533                           fsr2h	equ	0xFDA
  9534                           fsr2l	equ	0xFD9
  9535                           status	equ	0xFD8
  9536                           
  9537 ;; *************** function _putch *****************
  9538 ;; Defined at:
  9539 ;;		line 102 in file "lcd.c"
  9540 ;; Parameters:    Size  Location     Type
  9541 ;;  data            1    wreg     unsigned char 
  9542 ;; Auto vars:     Size  Location     Type
  9543 ;;  data            1    3[COMRAM] unsigned char 
  9544 ;; Return value:  Size  Location     Type
  9545 ;;                  1    wreg      void 
  9546 ;; Registers used:
  9547 ;;		wreg, status,2, status,0, cstack
  9548 ;; Tracked objects:
  9549 ;;		On entry : 0/0
  9550 ;;		On exit  : 0/0
  9551 ;;		Unchanged: 0/0
  9552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9554 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9556 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9557 ;;Total ram usage:        1 bytes
  9558 ;; Hardware stack levels used:    1
  9559 ;; Hardware stack levels required when called:    3
  9560 ;; This function calls:
  9561 ;;		_send_byte
  9562 ;; This function is called by:
  9563 ;;		_printf
  9564 ;; This function uses a non-reentrant model
  9565 ;;
  9566                           
  9567                           	psect	text38
  9568  00CC8E                     __ptext38:
  9569                           	opt stack 0
  9570  00CC8E                     _putch:
  9571                           	opt stack 25
  9572                           
  9573                           ;incstack = 0
  9574                           ;putch@data stored from wreg
  9575  00CC8E  6E04               	movwf	putch@data,c
  9576                           
  9577                           ;lcd.c: 103: LATDbits.LATD2 = 1;
  9578  00CC90  848C               	bsf	3980,2,c	;volatile
  9579                           
  9580                           ;lcd.c: 104: send_byte((unsigned char)data);
  9581  00CC92  5004               	movf	putch@data,w,c
  9582  00CC94  EC4D  F066         	call	_send_byte
  9583  00CC98  0012               	return		;funcret
  9584  00CC9A                     __end_of_putch:
  9585                           	opt stack 0
  9586                           tblptru	equ	0xFF8
  9587                           tblptrh	equ	0xFF7
  9588                           tblptrl	equ	0xFF6
  9589                           tablat	equ	0xFF5
  9590                           prodh	equ	0xFF4
  9591                           prodl	equ	0xFF3
  9592                           postinc0	equ	0xFEE
  9593                           wreg	equ	0xFE8
  9594                           plusw1	equ	0xFE3
  9595                           indf2	equ	0xFDF
  9596                           postinc2	equ	0xFDE
  9597                           postdec2	equ	0xFDD
  9598                           plusw2	equ	0xFDB
  9599                           fsr2h	equ	0xFDA
  9600                           fsr2l	equ	0xFD9
  9601                           status	equ	0xFD8
  9602                           
  9603 ;; *************** function _isdigit *****************
  9604 ;; Defined at:
  9605 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  9606 ;; Parameters:    Size  Location     Type
  9607 ;;  c               1    wreg     unsigned char 
  9608 ;; Auto vars:     Size  Location     Type
  9609 ;;  c               1    2[COMRAM] unsigned char 
  9610 ;; Return value:  Size  Location     Type
  9611 ;;		None               void
  9612 ;; Registers used:
  9613 ;;		wreg, status,2, status,0
  9614 ;; Tracked objects:
  9615 ;;		On entry : 0/0
  9616 ;;		On exit  : 0/0
  9617 ;;		Unchanged: 0/0
  9618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9621 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9622 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9623 ;;Total ram usage:        3 bytes
  9624 ;; Hardware stack levels used:    1
  9625 ;; This function calls:
  9626 ;;		Nothing
  9627 ;; This function is called by:
  9628 ;;		_printf
  9629 ;; This function uses a non-reentrant model
  9630 ;;
  9631                           
  9632                           	psect	text39
  9633  00CD6E                     __ptext39:
  9634                           	opt stack 0
  9635  00CD6E                     _isdigit:
  9636                           	opt stack 28
  9637                           
  9638                           ;incstack = 0
  9639                           ;isdigit@c stored from wreg
  9640  00CD6E  6E03               	movwf	isdigit@c,c
  9641  00CD70  0E00               	movlw	0
  9642  00CD72  6E02               	movwf	_isdigit$1838,c
  9643  00CD74  0E3A               	movlw	58
  9644  00CD76  6003               	cpfslt	isdigit@c,c
  9645  00CD78  D005               	goto	l1279
  9646  00CD7A  0E2F               	movlw	47
  9647  00CD7C  6403               	cpfsgt	isdigit@c,c
  9648  00CD7E  D002               	goto	l1279
  9649  00CD80  0E01               	movlw	1
  9650  00CD82  6E02               	movwf	_isdigit$1838,c
  9651  00CD84                     l1279:
  9652  00CD84  C002  F001         	movff	_isdigit$1838,??_isdigit
  9653  00CD88  3001               	rrcf	??_isdigit,w,c
  9654  00CD8A  0012               	return	
  9655  00CD8C                     __end_of_isdigit:
  9656                           	opt stack 0
  9657                           tblptru	equ	0xFF8
  9658                           tblptrh	equ	0xFF7
  9659                           tblptrl	equ	0xFF6
  9660                           tablat	equ	0xFF5
  9661                           prodh	equ	0xFF4
  9662                           prodl	equ	0xFF3
  9663                           postinc0	equ	0xFEE
  9664                           wreg	equ	0xFE8
  9665                           plusw1	equ	0xFE3
  9666                           indf2	equ	0xFDF
  9667                           postinc2	equ	0xFDE
  9668                           postdec2	equ	0xFDD
  9669                           plusw2	equ	0xFDB
  9670                           fsr2h	equ	0xFDA
  9671                           fsr2l	equ	0xFD9
  9672                           status	equ	0xFD8
  9673                           
  9674 ;; *************** function _fround *****************
  9675 ;; Defined at:
  9676 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  9677 ;; Parameters:    Size  Location     Type
  9678 ;;  prec            1    wreg     unsigned char 
  9679 ;; Auto vars:     Size  Location     Type
  9680 ;;  prec            1   44[COMRAM] unsigned char 
  9681 ;; Return value:  Size  Location     Type
  9682 ;;                  3   35[COMRAM] unsigned char 
  9683 ;; Registers used:
  9684 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9685 ;; Tracked objects:
  9686 ;;		On entry : 0/0
  9687 ;;		On exit  : 0/0
  9688 ;;		Unchanged: 0/0
  9689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9690 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9691 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9693 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9694 ;;Total ram usage:       10 bytes
  9695 ;; Hardware stack levels used:    1
  9696 ;; Hardware stack levels required when called:    2
  9697 ;; This function calls:
  9698 ;;		___awdiv
  9699 ;;		___awmod
  9700 ;;		___ftmul
  9701 ;;		___wmul
  9702 ;; This function is called by:
  9703 ;;		_printf
  9704 ;; This function uses a non-reentrant model
  9705 ;;
  9706                           
  9707                           	psect	text40
  9708  00E428                     __ptext40:
  9709                           	opt stack 0
  9710  00E428                     _fround:
  9711                           	opt stack 26
  9712                           
  9713                           ;incstack = 0
  9714                           ;fround@prec stored from wreg
  9715  00E428  6E2D               	movwf	fround@prec,c
  9716                           
  9717                           ;doprnt.c: 413: if(prec>=110)
  9718  00E42A  0E6D               	movlw	109
  9719  00E42C  642D               	cpfsgt	fround@prec,c
  9720  00E42E  D09F               	goto	l799
  9721                           
  9722                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9723  00E430  0E00               	movlw	0
  9724  00E432  6E12               	movwf	___wmul@multiplicand+1,c
  9725  00E434  0E03               	movlw	3
  9726  00E436  6E11               	movwf	___wmul@multiplicand,c
  9727  00E438  0E00               	movlw	0
  9728  00E43A  6E0A               	movwf	___awdiv@divisor+1,c
  9729  00E43C  0E0A               	movlw	10
  9730  00E43E  6E09               	movwf	___awdiv@divisor,c
  9731  00E440  0E00               	movlw	0
  9732  00E442  6E04               	movwf	___awmod@divisor+1,c
  9733  00E444  0E64               	movlw	100
  9734  00E446  6E03               	movwf	___awmod@divisor,c
  9735  00E448  C02D  F001         	movff	fround@prec,___awmod@dividend
  9736  00E44C  6A02               	clrf	___awmod@dividend+1,c
  9737  00E44E  EC78  F069         	call	___awmod	;wreg free
  9738  00E452  C001  F007         	movff	?___awmod,___awdiv@dividend
  9739  00E456  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  9740  00E45A  EC68  F06A         	call	___awdiv	;wreg free
  9741  00E45E  0E09               	movlw	9
  9742  00E460  2407               	addwf	?___awdiv,w,c
  9743  00E462  6E0F               	movwf	___wmul@multiplier,c
  9744  00E464  0E00               	movlw	0
  9745  00E466  2008               	addwfc	?___awdiv+1,w,c
  9746  00E468  6E10               	movwf	___wmul@multiplier+1,c
  9747  00E46A  EC1E  F067         	call	___wmul	;wreg free
  9748  00E46E  0EAE               	movlw	low __npowers_
  9749  00E470  240F               	addwf	?___wmul,w,c
  9750  00E472  6EF6               	movwf	tblptrl,c
  9751  00E474  0EFE               	movlw	high __npowers_
  9752  00E476  2010               	addwfc	?___wmul+1,w,c
  9753  00E478  6EF7               	movwf	tblptrh,c
  9754  00E47A                     	if	0	;There are less than 3 active tblptr bytes
  9755  00E47A                     	endif
  9756  00E47A  0009               	tblrd		*+
  9757  00E47C  CFF5 F018          	movff	tablat,___ftmul@f2
  9758  00E480  0009               	tblrd		*+
  9759  00E482  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9760  00E486  000A               	tblrd		*-
  9761  00E488  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9762  00E48C  0E00               	movlw	0
  9763  00E48E  6E0A               	movwf	___awdiv@divisor+1,c
  9764  00E490  0E64               	movlw	100
  9765  00E492  6E09               	movwf	___awdiv@divisor,c
  9766  00E494  C02D  F007         	movff	fround@prec,___awdiv@dividend
  9767  00E498  6A08               	clrf	___awdiv@dividend+1,c
  9768  00E49A  EC68  F06A         	call	___awdiv	;wreg free
  9769  00E49E  0E12               	movlw	18
  9770  00E4A0  2407               	addwf	?___awdiv,w,c
  9771  00E4A2  6E0F               	movwf	___wmul@multiplier,c
  9772  00E4A4  0E00               	movlw	0
  9773  00E4A6  2008               	addwfc	?___awdiv+1,w,c
  9774  00E4A8  6E10               	movwf	___wmul@multiplier+1,c
  9775  00E4AA  0E00               	movlw	0
  9776  00E4AC  6E12               	movwf	___wmul@multiplicand+1,c
  9777  00E4AE  0E03               	movlw	3
  9778  00E4B0  6E11               	movwf	___wmul@multiplicand,c
  9779  00E4B2  EC1E  F067         	call	___wmul	;wreg free
  9780  00E4B6  0EAE               	movlw	low __npowers_
  9781  00E4B8  240F               	addwf	?___wmul,w,c
  9782  00E4BA  6EF6               	movwf	tblptrl,c
  9783  00E4BC  0EFE               	movlw	high __npowers_
  9784  00E4BE  2010               	addwfc	?___wmul+1,w,c
  9785  00E4C0  6EF7               	movwf	tblptrh,c
  9786  00E4C2                     	if	0	;There are less than 3 active tblptr bytes
  9787  00E4C2                     	endif
  9788  00E4C2  0009               	tblrd		*+
  9789  00E4C4  CFF5 F015          	movff	tablat,___ftmul@f1
  9790  00E4C8  0009               	tblrd		*+
  9791  00E4CA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  9792  00E4CE  000A               	tblrd		*-
  9793  00E4D0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  9794  00E4D4  ECDE  F06C         	call	___ftmul	;wreg free
  9795  00E4D8  C015  F02A         	movff	?___ftmul,_fround$2265
  9796  00E4DC  C016  F02B         	movff	?___ftmul+1,_fround$2265+1
  9797  00E4E0  C017  F02C         	movff	?___ftmul+2,_fround$2265+2
  9798                           
  9799                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9800  00E4E4  0E00               	movlw	0
  9801  00E4E6  6E12               	movwf	___wmul@multiplicand+1,c
  9802  00E4E8  0E03               	movlw	3
  9803  00E4EA  6E11               	movwf	___wmul@multiplicand,c
  9804  00E4EC  0E00               	movlw	0
  9805  00E4EE  6E04               	movwf	___awmod@divisor+1,c
  9806  00E4F0  0E0A               	movlw	10
  9807  00E4F2  6E03               	movwf	___awmod@divisor,c
  9808  00E4F4  C02D  F001         	movff	fround@prec,___awmod@dividend
  9809  00E4F8  6A02               	clrf	___awmod@dividend+1,c
  9810  00E4FA  EC78  F069         	call	___awmod	;wreg free
  9811  00E4FE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  9812  00E502  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  9813  00E506  EC1E  F067         	call	___wmul	;wreg free
  9814  00E50A  0EAE               	movlw	low __npowers_
  9815  00E50C  240F               	addwf	?___wmul,w,c
  9816  00E50E  6EF6               	movwf	tblptrl,c
  9817  00E510  0EFE               	movlw	high __npowers_
  9818  00E512  2010               	addwfc	?___wmul+1,w,c
  9819  00E514  6EF7               	movwf	tblptrh,c
  9820  00E516                     	if	0	;There are less than 3 active tblptr bytes
  9821  00E516                     	endif
  9822  00E516  0009               	tblrd		*+
  9823  00E518  CFF5 F018          	movff	tablat,___ftmul@f2
  9824  00E51C  0009               	tblrd		*+
  9825  00E51E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9826  00E522  000A               	tblrd		*-
  9827  00E524  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9828  00E528  C02A  F015         	movff	_fround$2265,___ftmul@f1
  9829  00E52C  C02B  F016         	movff	_fround$2265+1,___ftmul@f1+1
  9830  00E530  C02C  F017         	movff	_fround$2265+2,___ftmul@f1+2
  9831  00E534  ECDE  F06C         	call	___ftmul	;wreg free
  9832  00E538  C015  F027         	movff	?___ftmul,_fround$2266
  9833  00E53C  C016  F028         	movff	?___ftmul+1,_fround$2266+1
  9834  00E540  C017  F029         	movff	?___ftmul+2,_fround$2266+2
  9835                           
  9836                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9837  00E544  C027  F015         	movff	_fround$2266,___ftmul@f1
  9838  00E548  C028  F016         	movff	_fround$2266+1,___ftmul@f1+1
  9839  00E54C  C029  F017         	movff	_fround$2266+2,___ftmul@f1+2
  9840  00E550  0E00               	movlw	0
  9841  00E552  6E18               	movwf	___ftmul@f2,c
  9842  00E554  0E00               	movlw	0
  9843  00E556  6E19               	movwf	___ftmul@f2+1,c
  9844  00E558  0E3F               	movlw	63
  9845  00E55A  6E1A               	movwf	___ftmul@f2+2,c
  9846  00E55C  ECDE  F06C         	call	___ftmul	;wreg free
  9847  00E560  C015  F024         	movff	?___ftmul,?_fround
  9848  00E564  C016  F025         	movff	?___ftmul+1,?_fround+1
  9849  00E568  C017  F026         	movff	?___ftmul+2,?_fround+2
  9850  00E56C  0012               	return	
  9851  00E56E                     l799:
  9852                           
  9853                           ;doprnt.c: 415: else if(prec > 10)
  9854  00E56E  0E0A               	movlw	10
  9855  00E570  642D               	cpfsgt	fround@prec,c
  9856  00E572  D063               	goto	l802
  9857                           
  9858                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9859  00E574  0E00               	movlw	0
  9860  00E576  6E12               	movwf	___wmul@multiplicand+1,c
  9861  00E578  0E03               	movlw	3
  9862  00E57A  6E11               	movwf	___wmul@multiplicand,c
  9863  00E57C  0E00               	movlw	0
  9864  00E57E  6E04               	movwf	___awmod@divisor+1,c
  9865  00E580  0E0A               	movlw	10
  9866  00E582  6E03               	movwf	___awmod@divisor,c
  9867  00E584  C02D  F001         	movff	fround@prec,___awmod@dividend
  9868  00E588  6A02               	clrf	___awmod@dividend+1,c
  9869  00E58A  EC78  F069         	call	___awmod	;wreg free
  9870  00E58E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  9871  00E592  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  9872  00E596  EC1E  F067         	call	___wmul	;wreg free
  9873  00E59A  0EAE               	movlw	low __npowers_
  9874  00E59C  240F               	addwf	?___wmul,w,c
  9875  00E59E  6EF6               	movwf	tblptrl,c
  9876  00E5A0  0EFE               	movlw	high __npowers_
  9877  00E5A2  2010               	addwfc	?___wmul+1,w,c
  9878  00E5A4  6EF7               	movwf	tblptrh,c
  9879  00E5A6                     	if	0	;There are less than 3 active tblptr bytes
  9880  00E5A6                     	endif
  9881  00E5A6  0009               	tblrd		*+
  9882  00E5A8  CFF5 F018          	movff	tablat,___ftmul@f2
  9883  00E5AC  0009               	tblrd		*+
  9884  00E5AE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  9885  00E5B2  000A               	tblrd		*-
  9886  00E5B4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  9887  00E5B8  0E00               	movlw	0
  9888  00E5BA  6E0A               	movwf	___awdiv@divisor+1,c
  9889  00E5BC  0E0A               	movlw	10
  9890  00E5BE  6E09               	movwf	___awdiv@divisor,c
  9891  00E5C0  C02D  F007         	movff	fround@prec,___awdiv@dividend
  9892  00E5C4  6A08               	clrf	___awdiv@dividend+1,c
  9893  00E5C6  EC68  F06A         	call	___awdiv	;wreg free
  9894  00E5CA  0E09               	movlw	9
  9895  00E5CC  2407               	addwf	?___awdiv,w,c
  9896  00E5CE  6E0F               	movwf	___wmul@multiplier,c
  9897  00E5D0  0E00               	movlw	0
  9898  00E5D2  2008               	addwfc	?___awdiv+1,w,c
  9899  00E5D4  6E10               	movwf	___wmul@multiplier+1,c
  9900  00E5D6  0E00               	movlw	0
  9901  00E5D8  6E12               	movwf	___wmul@multiplicand+1,c
  9902  00E5DA  0E03               	movlw	3
  9903  00E5DC  6E11               	movwf	___wmul@multiplicand,c
  9904  00E5DE  EC1E  F067         	call	___wmul	;wreg free
  9905  00E5E2  0EAE               	movlw	low __npowers_
  9906  00E5E4  240F               	addwf	?___wmul,w,c
  9907  00E5E6  6EF6               	movwf	tblptrl,c
  9908  00E5E8  0EFE               	movlw	high __npowers_
  9909  00E5EA  2010               	addwfc	?___wmul+1,w,c
  9910  00E5EC  6EF7               	movwf	tblptrh,c
  9911  00E5EE                     	if	0	;There are less than 3 active tblptr bytes
  9912  00E5EE                     	endif
  9913  00E5EE  0009               	tblrd		*+
  9914  00E5F0  CFF5 F015          	movff	tablat,___ftmul@f1
  9915  00E5F4  0009               	tblrd		*+
  9916  00E5F6  CFF5 F016          	movff	tablat,___ftmul@f1+1
  9917  00E5FA  000A               	tblrd		*-
  9918  00E5FC  CFF5 F017          	movff	tablat,___ftmul@f1+2
  9919  00E600  ECDE  F06C         	call	___ftmul	;wreg free
  9920  00E604  C015  F02A         	movff	?___ftmul,_fround$2265
  9921  00E608  C016  F02B         	movff	?___ftmul+1,_fround$2265+1
  9922  00E60C  C017  F02C         	movff	?___ftmul+2,_fround$2265+2
  9923                           
  9924                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9925  00E610  C02A  F015         	movff	_fround$2265,___ftmul@f1
  9926  00E614  C02B  F016         	movff	_fround$2265+1,___ftmul@f1+1
  9927  00E618  C02C  F017         	movff	_fround$2265+2,___ftmul@f1+2
  9928  00E61C  0E00               	movlw	0
  9929  00E61E  6E18               	movwf	___ftmul@f2,c
  9930  00E620  0E00               	movlw	0
  9931  00E622  6E19               	movwf	___ftmul@f2+1,c
  9932  00E624  0E3F               	movlw	63
  9933  00E626  6E1A               	movwf	___ftmul@f2+2,c
  9934  00E628  ECDE  F06C         	call	___ftmul	;wreg free
  9935  00E62C  C015  F024         	movff	?___ftmul,?_fround
  9936  00E630  C016  F025         	movff	?___ftmul+1,?_fround+1
  9937  00E634  C017  F026         	movff	?___ftmul+2,?_fround+2
  9938  00E638  0012               	return	
  9939  00E63A                     l802:
  9940                           
  9941                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9942  00E63A  502D               	movf	fround@prec,w,c
  9943  00E63C  0D03               	mullw	3
  9944  00E63E  0EAE               	movlw	low __npowers_
  9945  00E640  24F3               	addwf	prodl,w,c
  9946  00E642  6EF6               	movwf	tblptrl,c
  9947  00E644  0EFE               	movlw	high __npowers_
  9948  00E646  20F4               	addwfc	prodh,w,c
  9949  00E648  6EF7               	movwf	tblptrh,c
  9950  00E64A                     	if	0	;There are less than 3 active tblptr bytes
  9951  00E64A                     	endif
  9952  00E64A  0009               	tblrd		*+
  9953  00E64C  CFF5 F015          	movff	tablat,___ftmul@f1
  9954  00E650  0009               	tblrd		*+
  9955  00E652  CFF5 F016          	movff	tablat,___ftmul@f1+1
  9956  00E656  000A               	tblrd		*-
  9957  00E658  CFF5 F017          	movff	tablat,___ftmul@f1+2
  9958  00E65C  0E00               	movlw	0
  9959  00E65E  6E18               	movwf	___ftmul@f2,c
  9960  00E660  0E00               	movlw	0
  9961  00E662  6E19               	movwf	___ftmul@f2+1,c
  9962  00E664  0E3F               	movlw	63
  9963  00E666  6E1A               	movwf	___ftmul@f2+2,c
  9964  00E668  ECDE  F06C         	call	___ftmul	;wreg free
  9965  00E66C  C015  F024         	movff	?___ftmul,?_fround
  9966  00E670  C016  F025         	movff	?___ftmul+1,?_fround+1
  9967  00E674  C017  F026         	movff	?___ftmul+2,?_fround+2
  9968  00E678  0012               	return	
  9969  00E67A                     __end_of_fround:
  9970                           	opt stack 0
  9971                           tblptru	equ	0xFF8
  9972                           tblptrh	equ	0xFF7
  9973                           tblptrl	equ	0xFF6
  9974                           tablat	equ	0xFF5
  9975                           prodh	equ	0xFF4
  9976                           prodl	equ	0xFF3
  9977                           postinc0	equ	0xFEE
  9978                           wreg	equ	0xFE8
  9979                           plusw1	equ	0xFE3
  9980                           indf2	equ	0xFDF
  9981                           postinc2	equ	0xFDE
  9982                           postdec2	equ	0xFDD
  9983                           plusw2	equ	0xFDB
  9984                           fsr2h	equ	0xFDA
  9985                           fsr2l	equ	0xFD9
  9986                           status	equ	0xFD8
  9987                           
  9988 ;; *************** function ___wmul *****************
  9989 ;; Defined at:
  9990 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  9991 ;; Parameters:    Size  Location     Type
  9992 ;;  multiplier      2   14[COMRAM] unsigned int 
  9993 ;;  multiplicand    2   16[COMRAM] unsigned int 
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;  product         2   18[COMRAM] unsigned int 
  9996 ;; Return value:  Size  Location     Type
  9997 ;;                  2   14[COMRAM] unsigned int 
  9998 ;; Registers used:
  9999 ;;		wreg, status,2, status,0, prodl, prodh
 10000 ;; Tracked objects:
 10001 ;;		On entry : 0/0
 10002 ;;		On exit  : 0/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10005 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10006 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10008 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10009 ;;Total ram usage:        6 bytes
 10010 ;; Hardware stack levels used:    1
 10011 ;; This function calls:
 10012 ;;		Nothing
 10013 ;; This function is called by:
 10014 ;;		_glcdDrawRectangle
 10015 ;;		_fround
 10016 ;;		_scale
 10017 ;;		_printf
 10018 ;; This function uses a non-reentrant model
 10019 ;;
 10020                           
 10021                           	psect	text41
 10022  00CE3C                     __ptext41:
 10023                           	opt stack 0
 10024  00CE3C                     ___wmul:
 10025                           	opt stack 27
 10026                           
 10027                           ;incstack = 0
 10028  00CE3C  500F               	movf	___wmul@multiplier,w,c
 10029  00CE3E  0211               	mulwf	___wmul@multiplicand,c
 10030  00CE40  CFF3 F013          	movff	prodl,___wmul@product
 10031  00CE44  CFF4 F014          	movff	prodh,___wmul@product+1
 10032  00CE48  500F               	movf	___wmul@multiplier,w,c
 10033  00CE4A  0212               	mulwf	___wmul@multiplicand+1,c
 10034  00CE4C  50F3               	movf	prodl,w,c
 10035  00CE4E  2614               	addwf	___wmul@product+1,f,c
 10036  00CE50  5010               	movf	___wmul@multiplier+1,w,c
 10037  00CE52  0211               	mulwf	___wmul@multiplicand,c
 10038  00CE54  50F3               	movf	prodl,w,c
 10039  00CE56  2614               	addwf	___wmul@product+1,f,c
 10040  00CE58  C013  F00F         	movff	___wmul@product,?___wmul
 10041  00CE5C  C014  F010         	movff	___wmul@product+1,?___wmul+1
 10042  00CE60  0012               	return	
 10043  00CE62                     __end_of___wmul:
 10044                           	opt stack 0
 10045                           tblptru	equ	0xFF8
 10046                           tblptrh	equ	0xFF7
 10047                           tblptrl	equ	0xFF6
 10048                           tablat	equ	0xFF5
 10049                           prodh	equ	0xFF4
 10050                           prodl	equ	0xFF3
 10051                           postinc0	equ	0xFEE
 10052                           wreg	equ	0xFE8
 10053                           plusw1	equ	0xFE3
 10054                           indf2	equ	0xFDF
 10055                           postinc2	equ	0xFDE
 10056                           postdec2	equ	0xFDD
 10057                           plusw2	equ	0xFDB
 10058                           fsr2h	equ	0xFDA
 10059                           fsr2l	equ	0xFD9
 10060                           status	equ	0xFD8
 10061                           
 10062 ;; *************** function ___ftmul *****************
 10063 ;; Defined at:
 10064 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftmul.c"
 10065 ;; Parameters:    Size  Location     Type
 10066 ;;  f1              3   20[COMRAM] float 
 10067 ;;  f2              3   23[COMRAM] float 
 10068 ;; Auto vars:     Size  Location     Type
 10069 ;;  f3_as_produc    3   30[COMRAM] unsigned um
 10070 ;;  sign            1   34[COMRAM] unsigned char 
 10071 ;;  cntr            1   33[COMRAM] unsigned char 
 10072 ;;  exp             1   29[COMRAM] unsigned char 
 10073 ;; Return value:  Size  Location     Type
 10074 ;;                  3   20[COMRAM] float 
 10075 ;; Registers used:
 10076 ;;		wreg, status,2, status,0, cstack
 10077 ;; Tracked objects:
 10078 ;;		On entry : 0/0
 10079 ;;		On exit  : 0/0
 10080 ;;		Unchanged: 0/0
 10081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10082 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10083 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10084 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10085 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10086 ;;Total ram usage:       15 bytes
 10087 ;; Hardware stack levels used:    1
 10088 ;; Hardware stack levels required when called:    1
 10089 ;; This function calls:
 10090 ;;		___ftpack
 10091 ;; This function is called by:
 10092 ;;		_initSD
 10093 ;;		_fround
 10094 ;;		_scale
 10095 ;;		_printf
 10096 ;; This function uses a non-reentrant model
 10097 ;;
 10098                           
 10099                           	psect	text42
 10100  00D9BC                     __ptext42:
 10101                           	opt stack 0
 10102  00D9BC                     ___ftmul:
 10103                           	opt stack 26
 10104                           
 10105                           ;incstack = 0
 10106  00D9BC  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
 10107  00D9C0  6A1C               	clrf	(??___ftmul+1)& (0+255),c
 10108  00D9C2  6A1D               	clrf	(??___ftmul+2)& (0+255),c
 10109  00D9C4  3416               	rlcf	___ftmul@f1+1,w,c
 10110  00D9C6  361B               	rlcf	??___ftmul& (0+255),f,c
 10111  00D9C8  E301               	bnc	u3281
 10112  00D9CA  801C               	bsf	(??___ftmul+1)& (0+255),0,c
 10113  00D9CC                     u3281:
 10114  00D9CC  501B               	movf	??___ftmul,w,c
 10115  00D9CE  6E1E               	movwf	___ftmul@exp,c
 10116  00D9D0  501E               	movf	___ftmul@exp,w,c
 10117  00D9D2  A4D8               	btfss	status,2,c
 10118  00D9D4  D007               	goto	l1243
 10119  00D9D6  0E00               	movlw	0
 10120  00D9D8  6E15               	movwf	?___ftmul,c
 10121  00D9DA  0E00               	movlw	0
 10122  00D9DC  6E16               	movwf	?___ftmul+1,c
 10123  00D9DE  0E00               	movlw	0
 10124  00D9E0  6E17               	movwf	?___ftmul+2,c
 10125  00D9E2  0012               	return	
 10126  00D9E4                     l1243:
 10127  00D9E4  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
 10128  00D9E8  6A1C               	clrf	(??___ftmul+1)& (0+255),c
 10129  00D9EA  6A1D               	clrf	(??___ftmul+2)& (0+255),c
 10130  00D9EC  3419               	rlcf	___ftmul@f2+1,w,c
 10131  00D9EE  361B               	rlcf	??___ftmul& (0+255),f,c
 10132  00D9F0  E301               	bnc	u3301
 10133  00D9F2  801C               	bsf	(??___ftmul+1)& (0+255),0,c
 10134  00D9F4                     u3301:
 10135  00D9F4  501B               	movf	??___ftmul,w,c
 10136  00D9F6  6E23               	movwf	___ftmul@sign,c
 10137  00D9F8  5023               	movf	___ftmul@sign,w,c
 10138  00D9FA  A4D8               	btfss	status,2,c
 10139  00D9FC  D007               	goto	l1245
 10140  00D9FE  0E00               	movlw	0
 10141  00DA00  6E15               	movwf	?___ftmul,c
 10142  00DA02  0E00               	movlw	0
 10143  00DA04  6E16               	movwf	?___ftmul+1,c
 10144  00DA06  0E00               	movlw	0
 10145  00DA08  6E17               	movwf	?___ftmul+2,c
 10146  00DA0A  0012               	return	
 10147  00DA0C                     l1245:
 10148  00DA0C  5023               	movf	___ftmul@sign,w,c
 10149  00DA0E  0F7B               	addlw	123
 10150  00DA10  261E               	addwf	___ftmul@exp,f,c
 10151  00DA12  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
 10152  00DA16  501A               	movf	___ftmul@f2+2,w,c
 10153  00DA18  1A23               	xorwf	___ftmul@sign,f,c
 10154  00DA1A  0E80               	movlw	128
 10155  00DA1C  1623               	andwf	___ftmul@sign,f,c
 10156  00DA1E  8E16               	bsf	___ftmul@f1+1,7,c
 10157  00DA20  8E19               	bsf	___ftmul@f2+1,7,c
 10158  00DA22  0EFF               	movlw	255
 10159  00DA24  1618               	andwf	___ftmul@f2,f,c
 10160  00DA26  0EFF               	movlw	255
 10161  00DA28  1619               	andwf	___ftmul@f2+1,f,c
 10162  00DA2A  0E00               	movlw	0
 10163  00DA2C  161A               	andwf	___ftmul@f2+2,f,c
 10164  00DA2E  0E00               	movlw	0
 10165  00DA30  6E1F               	movwf	___ftmul@f3_as_product,c
 10166  00DA32  0E00               	movlw	0
 10167  00DA34  6E20               	movwf	___ftmul@f3_as_product+1,c
 10168  00DA36  0E00               	movlw	0
 10169  00DA38  6E21               	movwf	___ftmul@f3_as_product+2,c
 10170  00DA3A  0E07               	movlw	7
 10171  00DA3C  6E22               	movwf	___ftmul@cntr,c
 10172  00DA3E  A015               	btfss	___ftmul@f1,0,c
 10173  00DA40  D006               	goto	l1247
 10174  00DA42  5018               	movf	___ftmul@f2,w,c
 10175  00DA44  261F               	addwf	___ftmul@f3_as_product,f,c
 10176  00DA46  5019               	movf	___ftmul@f2+1,w,c
 10177  00DA48  2220               	addwfc	___ftmul@f3_as_product+1,f,c
 10178  00DA4A  501A               	movf	___ftmul@f2+2,w,c
 10179  00DA4C  2221               	addwfc	___ftmul@f3_as_product+2,f,c
 10180  00DA4E                     l1247:
 10181  00DA4E  90D8               	bcf	status,0,c
 10182  00DA50  3217               	rrcf	___ftmul@f1+2,f,c
 10183  00DA52  3216               	rrcf	___ftmul@f1+1,f,c
 10184  00DA54  3215               	rrcf	___ftmul@f1,f,c
 10185  00DA56  90D8               	bcf	status,0,c
 10186  00DA58  3618               	rlcf	___ftmul@f2,f,c
 10187  00DA5A  3619               	rlcf	___ftmul@f2+1,f,c
 10188  00DA5C  361A               	rlcf	___ftmul@f2+2,f,c
 10189  00DA5E  2E22               	decfsz	___ftmul@cntr,f,c
 10190  00DA60  D7EE               	goto	l1246
 10191  00DA62  0E09               	movlw	9
 10192  00DA64  6E22               	movwf	___ftmul@cntr,c
 10193  00DA66  A015               	btfss	___ftmul@f1,0,c
 10194  00DA68  D006               	goto	l1250
 10195  00DA6A  5018               	movf	___ftmul@f2,w,c
 10196  00DA6C  261F               	addwf	___ftmul@f3_as_product,f,c
 10197  00DA6E  5019               	movf	___ftmul@f2+1,w,c
 10198  00DA70  2220               	addwfc	___ftmul@f3_as_product+1,f,c
 10199  00DA72  501A               	movf	___ftmul@f2+2,w,c
 10200  00DA74  2221               	addwfc	___ftmul@f3_as_product+2,f,c
 10201  00DA76                     l1250:
 10202  00DA76  90D8               	bcf	status,0,c
 10203  00DA78  3217               	rrcf	___ftmul@f1+2,f,c
 10204  00DA7A  3216               	rrcf	___ftmul@f1+1,f,c
 10205  00DA7C  3215               	rrcf	___ftmul@f1,f,c
 10206  00DA7E  90D8               	bcf	status,0,c
 10207  00DA80  3221               	rrcf	___ftmul@f3_as_product+2,f,c
 10208  00DA82  3220               	rrcf	___ftmul@f3_as_product+1,f,c
 10209  00DA84  321F               	rrcf	___ftmul@f3_as_product,f,c
 10210  00DA86  2E22               	decfsz	___ftmul@cntr,f,c
 10211  00DA88  D7EE               	goto	l1249
 10212  00DA8A  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 10213  00DA8E  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 10214  00DA92  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 10215  00DA96  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
 10216  00DA9A  C023  F005         	movff	___ftmul@sign,___ftpack@sign
 10217  00DA9E  EC34  F06B         	call	___ftpack	;wreg free
 10218  00DAA2  C001  F015         	movff	?___ftpack,?___ftmul
 10219  00DAA6  C002  F016         	movff	?___ftpack+1,?___ftmul+1
 10220  00DAAA  C003  F017         	movff	?___ftpack+2,?___ftmul+2
 10221  00DAAE  0012               	return	
 10222  00DAB0                     __end_of___ftmul:
 10223                           	opt stack 0
 10224                           tblptru	equ	0xFF8
 10225                           tblptrh	equ	0xFF7
 10226                           tblptrl	equ	0xFF6
 10227                           tablat	equ	0xFF5
 10228                           prodh	equ	0xFF4
 10229                           prodl	equ	0xFF3
 10230                           postinc0	equ	0xFEE
 10231                           wreg	equ	0xFE8
 10232                           plusw1	equ	0xFE3
 10233                           indf2	equ	0xFDF
 10234                           postinc2	equ	0xFDE
 10235                           postdec2	equ	0xFDD
 10236                           plusw2	equ	0xFDB
 10237                           fsr2h	equ	0xFDA
 10238                           fsr2l	equ	0xFD9
 10239                           status	equ	0xFD8
 10240                           
 10241 ;; *************** function ___awmod *****************
 10242 ;; Defined at:
 10243 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
 10244 ;; Parameters:    Size  Location     Type
 10245 ;;  dividend        2    0[COMRAM] int 
 10246 ;;  divisor         2    2[COMRAM] int 
 10247 ;; Auto vars:     Size  Location     Type
 10248 ;;  sign            1    5[COMRAM] unsigned char 
 10249 ;;  counter         1    4[COMRAM] unsigned char 
 10250 ;; Return value:  Size  Location     Type
 10251 ;;                  2    0[COMRAM] int 
 10252 ;; Registers used:
 10253 ;;		wreg, status,2, status,0
 10254 ;; Tracked objects:
 10255 ;;		On entry : 0/0
 10256 ;;		On exit  : 0/0
 10257 ;;		Unchanged: 0/0
 10258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10259 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10260 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10262 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10263 ;;Total ram usage:        6 bytes
 10264 ;; Hardware stack levels used:    1
 10265 ;; This function calls:
 10266 ;;		Nothing
 10267 ;; This function is called by:
 10268 ;;		_fround
 10269 ;;		_scale
 10270 ;; This function uses a non-reentrant model
 10271 ;;
 10272                           
 10273                           	psect	text43
 10274  00D2F0                     __ptext43:
 10275                           	opt stack 0
 10276  00D2F0                     ___awmod:
 10277                           	opt stack 27
 10278                           
 10279                           ;incstack = 0
 10280  00D2F0  0E00               	movlw	0
 10281  00D2F2  6E06               	movwf	___awmod@sign,c
 10282  00D2F4  AE02               	btfss	___awmod@dividend+1,7,c
 10283  00D2F6  D006               	goto	l1096
 10284  00D2F8  6C01               	negf	___awmod@dividend,c
 10285  00D2FA  1E02               	comf	___awmod@dividend+1,f,c
 10286  00D2FC  B0D8               	btfsc	status,0,c
 10287  00D2FE  2A02               	incf	___awmod@dividend+1,f,c
 10288  00D300  0E01               	movlw	1
 10289  00D302  6E06               	movwf	___awmod@sign,c
 10290  00D304                     l1096:
 10291  00D304  AE04               	btfss	___awmod@divisor+1,7,c
 10292  00D306  D004               	goto	l1097
 10293  00D308  6C03               	negf	___awmod@divisor,c
 10294  00D30A  1E04               	comf	___awmod@divisor+1,f,c
 10295  00D30C  B0D8               	btfsc	status,0,c
 10296  00D30E  2A04               	incf	___awmod@divisor+1,f,c
 10297  00D310                     l1097:
 10298  00D310  5003               	movf	___awmod@divisor,w,c
 10299  00D312  1004               	iorwf	___awmod@divisor+1,w,c
 10300  00D314  B4D8               	btfsc	status,2,c
 10301  00D316  D018               	goto	l1104
 10302  00D318  0E01               	movlw	1
 10303  00D31A  6E05               	movwf	___awmod@counter,c
 10304  00D31C  D004               	goto	l1099
 10305  00D31E  90D8               	bcf	status,0,c
 10306  00D320  3603               	rlcf	___awmod@divisor,f,c
 10307  00D322  3604               	rlcf	___awmod@divisor+1,f,c
 10308  00D324  2A05               	incf	___awmod@counter,f,c
 10309  00D326                     l1099:
 10310  00D326  AE04               	btfss	___awmod@divisor+1,7,c
 10311  00D328  D7FA               	goto	l1100
 10312  00D32A                     u3430:
 10313  00D32A  5003               	movf	___awmod@divisor,w,c
 10314  00D32C  5C01               	subwf	___awmod@dividend,w,c
 10315  00D32E  5004               	movf	___awmod@divisor+1,w,c
 10316  00D330  5802               	subwfb	___awmod@dividend+1,w,c
 10317  00D332  A0D8               	btfss	status,0,c
 10318  00D334  D004               	goto	l1103
 10319  00D336  5003               	movf	___awmod@divisor,w,c
 10320  00D338  5E01               	subwf	___awmod@dividend,f,c
 10321  00D33A  5004               	movf	___awmod@divisor+1,w,c
 10322  00D33C  5A02               	subwfb	___awmod@dividend+1,f,c
 10323  00D33E                     l1103:
 10324  00D33E  90D8               	bcf	status,0,c
 10325  00D340  3204               	rrcf	___awmod@divisor+1,f,c
 10326  00D342  3203               	rrcf	___awmod@divisor,f,c
 10327  00D344  2E05               	decfsz	___awmod@counter,f,c
 10328  00D346  D7F1               	goto	u3430
 10329  00D348                     l1104:
 10330  00D348  5006               	movf	___awmod@sign,w,c
 10331  00D34A  B4D8               	btfsc	status,2,c
 10332  00D34C  D004               	goto	l1105
 10333  00D34E  6C01               	negf	___awmod@dividend,c
 10334  00D350  1E02               	comf	___awmod@dividend+1,f,c
 10335  00D352  B0D8               	btfsc	status,0,c
 10336  00D354  2A02               	incf	___awmod@dividend+1,f,c
 10337  00D356                     l1105:
 10338  00D356  C001  F001         	movff	___awmod@dividend,?___awmod
 10339  00D35A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 10340  00D35E  0012               	return	
 10341  00D360                     __end_of___awmod:
 10342                           	opt stack 0
 10343                           tblptru	equ	0xFF8
 10344                           tblptrh	equ	0xFF7
 10345                           tblptrl	equ	0xFF6
 10346                           tablat	equ	0xFF5
 10347                           prodh	equ	0xFF4
 10348                           prodl	equ	0xFF3
 10349                           postinc0	equ	0xFEE
 10350                           wreg	equ	0xFE8
 10351                           plusw1	equ	0xFE3
 10352                           indf2	equ	0xFDF
 10353                           postinc2	equ	0xFDE
 10354                           postdec2	equ	0xFDD
 10355                           plusw2	equ	0xFDB
 10356                           fsr2h	equ	0xFDA
 10357                           fsr2l	equ	0xFD9
 10358                           status	equ	0xFD8
 10359                           
 10360 ;; *************** function ___awdiv *****************
 10361 ;; Defined at:
 10362 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
 10363 ;; Parameters:    Size  Location     Type
 10364 ;;  dividend        2    6[COMRAM] int 
 10365 ;;  divisor         2    8[COMRAM] int 
 10366 ;; Auto vars:     Size  Location     Type
 10367 ;;  quotient        2   12[COMRAM] int 
 10368 ;;  sign            1   11[COMRAM] unsigned char 
 10369 ;;  counter         1   10[COMRAM] unsigned char 
 10370 ;; Return value:  Size  Location     Type
 10371 ;;                  2    6[COMRAM] int 
 10372 ;; Registers used:
 10373 ;;		wreg, status,2, status,0
 10374 ;; Tracked objects:
 10375 ;;		On entry : 0/0
 10376 ;;		On exit  : 0/0
 10377 ;;		Unchanged: 0/0
 10378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10379 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10380 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10382 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10383 ;;Total ram usage:        8 bytes
 10384 ;; Hardware stack levels used:    1
 10385 ;; This function calls:
 10386 ;;		Nothing
 10387 ;; This function is called by:
 10388 ;;		_fround
 10389 ;;		_scale
 10390 ;;		_printf
 10391 ;; This function uses a non-reentrant model
 10392 ;;
 10393                           
 10394                           	psect	text44
 10395  00D4D0                     __ptext44:
 10396                           	opt stack 0
 10397  00D4D0                     ___awdiv:
 10398                           	opt stack 27
 10399                           
 10400                           ;incstack = 0
 10401  00D4D0  0E00               	movlw	0
 10402  00D4D2  6E0C               	movwf	___awdiv@sign,c
 10403  00D4D4  AE0A               	btfss	___awdiv@divisor+1,7,c
 10404  00D4D6  D006               	goto	l1083
 10405  00D4D8  6C09               	negf	___awdiv@divisor,c
 10406  00D4DA  1E0A               	comf	___awdiv@divisor+1,f,c
 10407  00D4DC  B0D8               	btfsc	status,0,c
 10408  00D4DE  2A0A               	incf	___awdiv@divisor+1,f,c
 10409  00D4E0  0E01               	movlw	1
 10410  00D4E2  6E0C               	movwf	___awdiv@sign,c
 10411  00D4E4                     l1083:
 10412  00D4E4  AE08               	btfss	___awdiv@dividend+1,7,c
 10413  00D4E6  D006               	goto	l1084
 10414  00D4E8  6C07               	negf	___awdiv@dividend,c
 10415  00D4EA  1E08               	comf	___awdiv@dividend+1,f,c
 10416  00D4EC  B0D8               	btfsc	status,0,c
 10417  00D4EE  2A08               	incf	___awdiv@dividend+1,f,c
 10418  00D4F0  0E01               	movlw	1
 10419  00D4F2  1A0C               	xorwf	___awdiv@sign,f,c
 10420  00D4F4                     l1084:
 10421  00D4F4  0E00               	movlw	0
 10422  00D4F6  6E0E               	movwf	___awdiv@quotient+1,c
 10423  00D4F8  0E00               	movlw	0
 10424  00D4FA  6E0D               	movwf	___awdiv@quotient,c
 10425  00D4FC  5009               	movf	___awdiv@divisor,w,c
 10426  00D4FE  100A               	iorwf	___awdiv@divisor+1,w,c
 10427  00D500  B4D8               	btfsc	status,2,c
 10428  00D502  D01C               	goto	l1091
 10429  00D504  0E01               	movlw	1
 10430  00D506  6E0B               	movwf	___awdiv@counter,c
 10431  00D508  D004               	goto	l1086
 10432  00D50A  90D8               	bcf	status,0,c
 10433  00D50C  3609               	rlcf	___awdiv@divisor,f,c
 10434  00D50E  360A               	rlcf	___awdiv@divisor+1,f,c
 10435  00D510  2A0B               	incf	___awdiv@counter,f,c
 10436  00D512                     l1086:
 10437  00D512  AE0A               	btfss	___awdiv@divisor+1,7,c
 10438  00D514  D7FA               	goto	l1087
 10439  00D516                     u3370:
 10440  00D516  90D8               	bcf	status,0,c
 10441  00D518  360D               	rlcf	___awdiv@quotient,f,c
 10442  00D51A  360E               	rlcf	___awdiv@quotient+1,f,c
 10443  00D51C  5009               	movf	___awdiv@divisor,w,c
 10444  00D51E  5C07               	subwf	___awdiv@dividend,w,c
 10445  00D520  500A               	movf	___awdiv@divisor+1,w,c
 10446  00D522  5808               	subwfb	___awdiv@dividend+1,w,c
 10447  00D524  A0D8               	btfss	status,0,c
 10448  00D526  D005               	goto	l1090
 10449  00D528  5009               	movf	___awdiv@divisor,w,c
 10450  00D52A  5E07               	subwf	___awdiv@dividend,f,c
 10451  00D52C  500A               	movf	___awdiv@divisor+1,w,c
 10452  00D52E  5A08               	subwfb	___awdiv@dividend+1,f,c
 10453  00D530  800D               	bsf	___awdiv@quotient,0,c
 10454  00D532                     l1090:
 10455  00D532  90D8               	bcf	status,0,c
 10456  00D534  320A               	rrcf	___awdiv@divisor+1,f,c
 10457  00D536  3209               	rrcf	___awdiv@divisor,f,c
 10458  00D538  2E0B               	decfsz	___awdiv@counter,f,c
 10459  00D53A  D7ED               	goto	u3370
 10460  00D53C                     l1091:
 10461  00D53C  500C               	movf	___awdiv@sign,w,c
 10462  00D53E  B4D8               	btfsc	status,2,c
 10463  00D540  D004               	goto	l1092
 10464  00D542  6C0D               	negf	___awdiv@quotient,c
 10465  00D544  1E0E               	comf	___awdiv@quotient+1,f,c
 10466  00D546  B0D8               	btfsc	status,0,c
 10467  00D548  2A0E               	incf	___awdiv@quotient+1,f,c
 10468  00D54A                     l1092:
 10469  00D54A  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 10470  00D54E  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 10471  00D552  0012               	return	
 10472  00D554                     __end_of___awdiv:
 10473                           	opt stack 0
 10474                           tblptru	equ	0xFF8
 10475                           tblptrh	equ	0xFF7
 10476                           tblptrl	equ	0xFF6
 10477                           tablat	equ	0xFF5
 10478                           prodh	equ	0xFF4
 10479                           prodl	equ	0xFF3
 10480                           postinc0	equ	0xFEE
 10481                           wreg	equ	0xFE8
 10482                           plusw1	equ	0xFE3
 10483                           indf2	equ	0xFDF
 10484                           postinc2	equ	0xFDE
 10485                           postdec2	equ	0xFDD
 10486                           plusw2	equ	0xFDB
 10487                           fsr2h	equ	0xFDA
 10488                           fsr2l	equ	0xFD9
 10489                           status	equ	0xFD8
 10490                           
 10491 ;; *************** function __tdiv_to_l_ *****************
 10492 ;; Defined at:
 10493 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdivl.c"
 10494 ;; Parameters:    Size  Location     Type
 10495 ;;  f1              3    0[COMRAM] float 
 10496 ;;  f2              3    3[COMRAM] float 
 10497 ;; Auto vars:     Size  Location     Type
 10498 ;;  quot            4    9[COMRAM] unsigned long 
 10499 ;;  exp1            1   14[COMRAM] unsigned char 
 10500 ;;  cntr            1   13[COMRAM] unsigned char 
 10501 ;; Return value:  Size  Location     Type
 10502 ;;                  4    0[COMRAM] unsigned long 
 10503 ;; Registers used:
 10504 ;;		wreg, status,2, status,0
 10505 ;; Tracked objects:
 10506 ;;		On entry : 0/0
 10507 ;;		On exit  : 0/0
 10508 ;;		Unchanged: 0/0
 10509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10510 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10511 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10512 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;Total ram usage:       15 bytes
 10515 ;; Hardware stack levels used:    1
 10516 ;; This function calls:
 10517 ;;		Nothing
 10518 ;; This function is called by:
 10519 ;;		_printf
 10520 ;; This function uses a non-reentrant model
 10521 ;;
 10522                           
 10523                           	psect	text45
 10524  00DCF6                     __ptext45:
 10525                           	opt stack 0
 10526  00DCF6                     __tdiv_to_l_:
 10527                           	opt stack 28
 10528                           
 10529                           ;incstack = 0
 10530  00DCF6  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 10531  00DCFA  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 10532  00DCFC  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 10533  00DCFE  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
 10534  00DD00  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
 10535  00DD02  E301               	bnc	u3621
 10536  00DD04  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 10537  00DD06                     u3621:
 10538  00DD06  5007               	movf	??__tdiv_to_l_,w,c
 10539  00DD08  6E0F               	movwf	__tdiv_to_l_@exp1,c
 10540  00DD0A  500F               	movf	__tdiv_to_l_@exp1,w,c
 10541  00DD0C  A4D8               	btfss	status,2,c
 10542  00DD0E  D009               	goto	l1219
 10543  00DD10  0E00               	movlw	0
 10544  00DD12  6E01               	movwf	?__tdiv_to_l_,c
 10545  00DD14  0E00               	movlw	0
 10546  00DD16  6E02               	movwf	?__tdiv_to_l_+1,c
 10547  00DD18  0E00               	movlw	0
 10548  00DD1A  6E03               	movwf	?__tdiv_to_l_+2,c
 10549  00DD1C  0E00               	movlw	0
 10550  00DD1E  6E04               	movwf	?__tdiv_to_l_+3,c
 10551  00DD20  0012               	return	
 10552  00DD22                     l1219:
 10553  00DD22  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 10554  00DD26  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 10555  00DD28  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 10556  00DD2A  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
 10557  00DD2C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
 10558  00DD2E  E301               	bnc	u3641
 10559  00DD30  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 10560  00DD32                     u3641:
 10561  00DD32  5007               	movf	??__tdiv_to_l_,w,c
 10562  00DD34  6E0E               	movwf	__tdiv_to_l_@cntr,c
 10563  00DD36  500E               	movf	__tdiv_to_l_@cntr,w,c
 10564  00DD38  A4D8               	btfss	status,2,c
 10565  00DD3A  D009               	goto	l1221
 10566  00DD3C  0E00               	movlw	0
 10567  00DD3E  6E01               	movwf	?__tdiv_to_l_,c
 10568  00DD40  0E00               	movlw	0
 10569  00DD42  6E02               	movwf	?__tdiv_to_l_+1,c
 10570  00DD44  0E00               	movlw	0
 10571  00DD46  6E03               	movwf	?__tdiv_to_l_+2,c
 10572  00DD48  0E00               	movlw	0
 10573  00DD4A  6E04               	movwf	?__tdiv_to_l_+3,c
 10574  00DD4C  0012               	return	
 10575  00DD4E                     l1221:
 10576  00DD4E  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
 10577  00DD50  0EFF               	movlw	255
 10578  00DD52  1601               	andwf	__tdiv_to_l_@f1,f,c
 10579  00DD54  0EFF               	movlw	255
 10580  00DD56  1602               	andwf	__tdiv_to_l_@f1+1,f,c
 10581  00DD58  0E00               	movlw	0
 10582  00DD5A  1603               	andwf	__tdiv_to_l_@f1+2,f,c
 10583  00DD5C  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
 10584  00DD5E  0EFF               	movlw	255
 10585  00DD60  1604               	andwf	__tdiv_to_l_@f2,f,c
 10586  00DD62  0EFF               	movlw	255
 10587  00DD64  1605               	andwf	__tdiv_to_l_@f2+1,f,c
 10588  00DD66  0E00               	movlw	0
 10589  00DD68  1606               	andwf	__tdiv_to_l_@f2+2,f,c
 10590  00DD6A  0E00               	movlw	0
 10591  00DD6C  6E0A               	movwf	__tdiv_to_l_@quot,c
 10592  00DD6E  0E00               	movlw	0
 10593  00DD70  6E0B               	movwf	__tdiv_to_l_@quot+1,c
 10594  00DD72  0E00               	movlw	0
 10595  00DD74  6E0C               	movwf	__tdiv_to_l_@quot+2,c
 10596  00DD76  0E00               	movlw	0
 10597  00DD78  6E0D               	movwf	__tdiv_to_l_@quot+3,c
 10598  00DD7A  0E7F               	movlw	127
 10599  00DD7C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
 10600  00DD7E  500E               	movf	__tdiv_to_l_@cntr,w,c
 10601  00DD80  0F98               	addlw	152
 10602  00DD82  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
 10603  00DD84  0E18               	movlw	24
 10604  00DD86  6E0E               	movwf	__tdiv_to_l_@cntr,c
 10605  00DD88                     l1222:
 10606  00DD88  90D8               	bcf	status,0,c
 10607  00DD8A  360A               	rlcf	__tdiv_to_l_@quot,f,c
 10608  00DD8C  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
 10609  00DD8E  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
 10610  00DD90  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
 10611  00DD92  5004               	movf	__tdiv_to_l_@f2,w,c
 10612  00DD94  5C01               	subwf	__tdiv_to_l_@f1,w,c
 10613  00DD96  5005               	movf	__tdiv_to_l_@f2+1,w,c
 10614  00DD98  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
 10615  00DD9A  5006               	movf	__tdiv_to_l_@f2+2,w,c
 10616  00DD9C  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
 10617  00DD9E  A0D8               	btfss	status,0,c
 10618  00DDA0  D007               	goto	l1223
 10619  00DDA2  5004               	movf	__tdiv_to_l_@f2,w,c
 10620  00DDA4  5E01               	subwf	__tdiv_to_l_@f1,f,c
 10621  00DDA6  5005               	movf	__tdiv_to_l_@f2+1,w,c
 10622  00DDA8  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
 10623  00DDAA  5006               	movf	__tdiv_to_l_@f2+2,w,c
 10624  00DDAC  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
 10625  00DDAE  800A               	bsf	__tdiv_to_l_@quot,0,c
 10626  00DDB0                     l1223:
 10627  00DDB0  90D8               	bcf	status,0,c
 10628  00DDB2  3601               	rlcf	__tdiv_to_l_@f1,f,c
 10629  00DDB4  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
 10630  00DDB6  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
 10631  00DDB8  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
 10632  00DDBA  D7E6               	goto	l1222
 10633  00DDBC  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
 10634  00DDBE  D016               	goto	l1225
 10635  00DDC0  500F               	movf	__tdiv_to_l_@exp1,w,c
 10636  00DDC2  0A80               	xorlw	128
 10637  00DDC4  0F97               	addlw	151
 10638  00DDC6  B0D8               	btfsc	status,0,c
 10639  00DDC8  D009               	goto	l1226
 10640  00DDCA  0E00               	movlw	0
 10641  00DDCC  6E01               	movwf	?__tdiv_to_l_,c
 10642  00DDCE  0E00               	movlw	0
 10643  00DDD0  6E02               	movwf	?__tdiv_to_l_+1,c
 10644  00DDD2  0E00               	movlw	0
 10645  00DDD4  6E03               	movwf	?__tdiv_to_l_+2,c
 10646  00DDD6  0E00               	movlw	0
 10647  00DDD8  6E04               	movwf	?__tdiv_to_l_+3,c
 10648  00DDDA  0012               	return	
 10649  00DDDC                     l1226:
 10650  00DDDC  90D8               	bcf	status,0,c
 10651  00DDDE  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
 10652  00DDE0  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
 10653  00DDE2  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
 10654  00DDE4  320A               	rrcf	__tdiv_to_l_@quot,f,c
 10655  00DDE6  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
 10656  00DDE8  D7F9               	goto	l1226
 10657  00DDEA  D015               	goto	u3700
 10658  00DDEC                     l1225:
 10659  00DDEC  0E17               	movlw	23
 10660  00DDEE  640F               	cpfsgt	__tdiv_to_l_@exp1,c
 10661  00DDF0  D00F               	goto	l1231
 10662  00DDF2  0E00               	movlw	0
 10663  00DDF4  6E01               	movwf	?__tdiv_to_l_,c
 10664  00DDF6  0E00               	movlw	0
 10665  00DDF8  6E02               	movwf	?__tdiv_to_l_+1,c
 10666  00DDFA  0E00               	movlw	0
 10667  00DDFC  6E03               	movwf	?__tdiv_to_l_+2,c
 10668  00DDFE  0E00               	movlw	0
 10669  00DE00  6E04               	movwf	?__tdiv_to_l_+3,c
 10670  00DE02  0012               	return	
 10671  00DE04  90D8               	bcf	status,0,c
 10672  00DE06  360A               	rlcf	__tdiv_to_l_@quot,f,c
 10673  00DE08  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
 10674  00DE0A  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
 10675  00DE0C  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
 10676  00DE0E  060F               	decf	__tdiv_to_l_@exp1,f,c
 10677  00DE10                     l1231:
 10678  00DE10  500F               	movf	__tdiv_to_l_@exp1,w,c
 10679  00DE12  A4D8               	btfss	status,2,c
 10680  00DE14  D7F7               	goto	l1232
 10681  00DE16                     u3700:
 10682  00DE16  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 10683  00DE1A  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 10684  00DE1E  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 10685  00DE22  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 10686  00DE26  0012               	return		;funcret
 10687  00DE28                     __end_of__tdiv_to_l_:
 10688                           	opt stack 0
 10689                           tblptru	equ	0xFF8
 10690                           tblptrh	equ	0xFF7
 10691                           tblptrl	equ	0xFF6
 10692                           tablat	equ	0xFF5
 10693                           prodh	equ	0xFF4
 10694                           prodl	equ	0xFF3
 10695                           postinc0	equ	0xFEE
 10696                           wreg	equ	0xFE8
 10697                           plusw1	equ	0xFE3
 10698                           indf2	equ	0xFDF
 10699                           postinc2	equ	0xFDE
 10700                           postdec2	equ	0xFDD
 10701                           plusw2	equ	0xFDB
 10702                           fsr2h	equ	0xFDA
 10703                           fsr2l	equ	0xFD9
 10704                           status	equ	0xFD8
 10705                           
 10706 ;; *************** function __div_to_l_ *****************
 10707 ;; Defined at:
 10708 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fldivl.c"
 10709 ;; Parameters:    Size  Location     Type
 10710 ;;  f1              3    0[COMRAM] unsigned long 
 10711 ;;  f2              3    3[COMRAM] unsigned long 
 10712 ;; Auto vars:     Size  Location     Type
 10713 ;;  quot            4    6[COMRAM] unsigned long 
 10714 ;;  exp1            1   11[COMRAM] unsigned char 
 10715 ;;  cntr            1   10[COMRAM] unsigned char 
 10716 ;; Return value:  Size  Location     Type
 10717 ;;                  4    0[COMRAM] unsigned long 
 10718 ;; Registers used:
 10719 ;;		wreg, status,2, status,0
 10720 ;; Tracked objects:
 10721 ;;		On entry : 0/0
 10722 ;;		On exit  : 0/0
 10723 ;;		Unchanged: 0/0
 10724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10725 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10726 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10728 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10729 ;;Total ram usage:       12 bytes
 10730 ;; Hardware stack levels used:    1
 10731 ;; This function calls:
 10732 ;;		Nothing
 10733 ;; This function is called by:
 10734 ;;		_printf
 10735 ;; This function uses a non-reentrant model
 10736 ;;
 10737                           
 10738                           	psect	text46
 10739  00DBCE                     __ptext46:
 10740                           	opt stack 0
 10741  00DBCE                     __div_to_l_:
 10742                           	opt stack 28
 10743                           
 10744                           ;incstack = 0
 10745  00DBCE  3403               	rlcf	__div_to_l_@f1+2,w,c
 10746  00DBD0  3404               	rlcf	__div_to_l_@f1+3,w,c
 10747  00DBD2  6E0C               	movwf	__div_to_l_@exp1,c
 10748  00DBD4  500C               	movf	__div_to_l_@exp1,w,c
 10749  00DBD6  A4D8               	btfss	status,2,c
 10750  00DBD8  D009               	goto	l1115
 10751  00DBDA  0E00               	movlw	0
 10752  00DBDC  6E01               	movwf	?__div_to_l_,c
 10753  00DBDE  0E00               	movlw	0
 10754  00DBE0  6E02               	movwf	?__div_to_l_+1,c
 10755  00DBE2  0E00               	movlw	0
 10756  00DBE4  6E03               	movwf	?__div_to_l_+2,c
 10757  00DBE6  0E00               	movlw	0
 10758  00DBE8  6E04               	movwf	?__div_to_l_+3,c
 10759  00DBEA  0012               	return	
 10760  00DBEC                     l1115:
 10761  00DBEC  3406               	rlcf	__div_to_l_@f2+2,w,c
 10762  00DBEE  3407               	rlcf	__div_to_l_@f2+3,w,c
 10763  00DBF0  6E0B               	movwf	__div_to_l_@cntr,c
 10764  00DBF2  500B               	movf	__div_to_l_@cntr,w,c
 10765  00DBF4  A4D8               	btfss	status,2,c
 10766  00DBF6  D009               	goto	l1117
 10767  00DBF8  0E00               	movlw	0
 10768  00DBFA  6E01               	movwf	?__div_to_l_,c
 10769  00DBFC  0E00               	movlw	0
 10770  00DBFE  6E02               	movwf	?__div_to_l_+1,c
 10771  00DC00  0E00               	movlw	0
 10772  00DC02  6E03               	movwf	?__div_to_l_+2,c
 10773  00DC04  0E00               	movlw	0
 10774  00DC06  6E04               	movwf	?__div_to_l_+3,c
 10775  00DC08  0012               	return	
 10776  00DC0A                     l1117:
 10777  00DC0A  8E03               	bsf	__div_to_l_@f1+2,7,c
 10778  00DC0C  0EFF               	movlw	255
 10779  00DC0E  1601               	andwf	__div_to_l_@f1,f,c
 10780  00DC10  0EFF               	movlw	255
 10781  00DC12  1602               	andwf	__div_to_l_@f1+1,f,c
 10782  00DC14  0EFF               	movlw	255
 10783  00DC16  1603               	andwf	__div_to_l_@f1+2,f,c
 10784  00DC18  0E00               	movlw	0
 10785  00DC1A  1604               	andwf	__div_to_l_@f1+3,f,c
 10786  00DC1C  8E06               	bsf	__div_to_l_@f2+2,7,c
 10787  00DC1E  0EFF               	movlw	255
 10788  00DC20  1604               	andwf	__div_to_l_@f2,f,c
 10789  00DC22  0EFF               	movlw	255
 10790  00DC24  1605               	andwf	__div_to_l_@f2+1,f,c
 10791  00DC26  0EFF               	movlw	255
 10792  00DC28  1606               	andwf	__div_to_l_@f2+2,f,c
 10793  00DC2A  0E00               	movlw	0
 10794  00DC2C  1607               	andwf	__div_to_l_@f2+3,f,c
 10795  00DC2E  0E00               	movlw	0
 10796  00DC30  6E07               	movwf	__div_to_l_@quot,c
 10797  00DC32  0E00               	movlw	0
 10798  00DC34  6E08               	movwf	__div_to_l_@quot+1,c
 10799  00DC36  0E00               	movlw	0
 10800  00DC38  6E09               	movwf	__div_to_l_@quot+2,c
 10801  00DC3A  0E00               	movlw	0
 10802  00DC3C  6E0A               	movwf	__div_to_l_@quot+3,c
 10803  00DC3E  0E7F               	movlw	127
 10804  00DC40  5E0C               	subwf	__div_to_l_@exp1,f,c
 10805  00DC42  500B               	movf	__div_to_l_@cntr,w,c
 10806  00DC44  0FA0               	addlw	160
 10807  00DC46  5E0C               	subwf	__div_to_l_@exp1,f,c
 10808  00DC48  0E20               	movlw	32
 10809  00DC4A  6E0B               	movwf	__div_to_l_@cntr,c
 10810  00DC4C  90D8               	bcf	status,0,c
 10811  00DC4E  3607               	rlcf	__div_to_l_@quot,f,c
 10812  00DC50  3608               	rlcf	__div_to_l_@quot+1,f,c
 10813  00DC52  3609               	rlcf	__div_to_l_@quot+2,f,c
 10814  00DC54  360A               	rlcf	__div_to_l_@quot+3,f,c
 10815  00DC56  5004               	movf	__div_to_l_@f2,w,c
 10816  00DC58  5C01               	subwf	__div_to_l_@f1,w,c
 10817  00DC5A  5005               	movf	__div_to_l_@f2+1,w,c
 10818  00DC5C  5802               	subwfb	__div_to_l_@f1+1,w,c
 10819  00DC5E  5006               	movf	__div_to_l_@f2+2,w,c
 10820  00DC60  5803               	subwfb	__div_to_l_@f1+2,w,c
 10821  00DC62  5007               	movf	__div_to_l_@f2+3,w,c
 10822  00DC64  5804               	subwfb	__div_to_l_@f1+3,w,c
 10823  00DC66  A0D8               	btfss	status,0,c
 10824  00DC68  D009               	goto	l1119
 10825  00DC6A  5004               	movf	__div_to_l_@f2,w,c
 10826  00DC6C  5E01               	subwf	__div_to_l_@f1,f,c
 10827  00DC6E  5005               	movf	__div_to_l_@f2+1,w,c
 10828  00DC70  5A02               	subwfb	__div_to_l_@f1+1,f,c
 10829  00DC72  5006               	movf	__div_to_l_@f2+2,w,c
 10830  00DC74  5A03               	subwfb	__div_to_l_@f1+2,f,c
 10831  00DC76  5007               	movf	__div_to_l_@f2+3,w,c
 10832  00DC78  5A04               	subwfb	__div_to_l_@f1+3,f,c
 10833  00DC7A  8007               	bsf	__div_to_l_@quot,0,c
 10834  00DC7C                     l1119:
 10835  00DC7C  90D8               	bcf	status,0,c
 10836  00DC7E  3601               	rlcf	__div_to_l_@f1,f,c
 10837  00DC80  3602               	rlcf	__div_to_l_@f1+1,f,c
 10838  00DC82  3603               	rlcf	__div_to_l_@f1+2,f,c
 10839  00DC84  3604               	rlcf	__div_to_l_@f1+3,f,c
 10840  00DC86  2E0B               	decfsz	__div_to_l_@cntr,f,c
 10841  00DC88  D7E1               	goto	l1118
 10842  00DC8A  AE0C               	btfss	__div_to_l_@exp1,7,c
 10843  00DC8C  D016               	goto	l1121
 10844  00DC8E  500C               	movf	__div_to_l_@exp1,w,c
 10845  00DC90  0A80               	xorlw	128
 10846  00DC92  0F9F               	addlw	159
 10847  00DC94  B0D8               	btfsc	status,0,c
 10848  00DC96  D009               	goto	l1122
 10849  00DC98  0E00               	movlw	0
 10850  00DC9A  6E01               	movwf	?__div_to_l_,c
 10851  00DC9C  0E00               	movlw	0
 10852  00DC9E  6E02               	movwf	?__div_to_l_+1,c
 10853  00DCA0  0E00               	movlw	0
 10854  00DCA2  6E03               	movwf	?__div_to_l_+2,c
 10855  00DCA4  0E00               	movlw	0
 10856  00DCA6  6E04               	movwf	?__div_to_l_+3,c
 10857  00DCA8  0012               	return	
 10858  00DCAA                     l1122:
 10859  00DCAA  90D8               	bcf	status,0,c
 10860  00DCAC  320A               	rrcf	__div_to_l_@quot+3,f,c
 10861  00DCAE  3209               	rrcf	__div_to_l_@quot+2,f,c
 10862  00DCB0  3208               	rrcf	__div_to_l_@quot+1,f,c
 10863  00DCB2  3207               	rrcf	__div_to_l_@quot,f,c
 10864  00DCB4  3E0C               	incfsz	__div_to_l_@exp1,f,c
 10865  00DCB6  D7F9               	goto	l1122
 10866  00DCB8  D015               	goto	u3770
 10867  00DCBA                     l1121:
 10868  00DCBA  0E1F               	movlw	31
 10869  00DCBC  640C               	cpfsgt	__div_to_l_@exp1,c
 10870  00DCBE  D00F               	goto	l1127
 10871  00DCC0  0E00               	movlw	0
 10872  00DCC2  6E01               	movwf	?__div_to_l_,c
 10873  00DCC4  0E00               	movlw	0
 10874  00DCC6  6E02               	movwf	?__div_to_l_+1,c
 10875  00DCC8  0E00               	movlw	0
 10876  00DCCA  6E03               	movwf	?__div_to_l_+2,c
 10877  00DCCC  0E00               	movlw	0
 10878  00DCCE  6E04               	movwf	?__div_to_l_+3,c
 10879  00DCD0  0012               	return	
 10880  00DCD2  90D8               	bcf	status,0,c
 10881  00DCD4  3607               	rlcf	__div_to_l_@quot,f,c
 10882  00DCD6  3608               	rlcf	__div_to_l_@quot+1,f,c
 10883  00DCD8  3609               	rlcf	__div_to_l_@quot+2,f,c
 10884  00DCDA  360A               	rlcf	__div_to_l_@quot+3,f,c
 10885  00DCDC  060C               	decf	__div_to_l_@exp1,f,c
 10886  00DCDE                     l1127:
 10887  00DCDE  500C               	movf	__div_to_l_@exp1,w,c
 10888  00DCE0  A4D8               	btfss	status,2,c
 10889  00DCE2  D7F7               	goto	l1128
 10890  00DCE4                     u3770:
 10891  00DCE4  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
 10892  00DCE8  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 10893  00DCEC  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 10894  00DCF0  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 10895  00DCF4  0012               	return		;funcret
 10896  00DCF6                     __end_of__div_to_l_:
 10897                           	opt stack 0
 10898                           tblptru	equ	0xFF8
 10899                           tblptrh	equ	0xFF7
 10900                           tblptrl	equ	0xFF6
 10901                           tablat	equ	0xFF5
 10902                           prodh	equ	0xFF4
 10903                           prodl	equ	0xFF3
 10904                           postinc0	equ	0xFEE
 10905                           wreg	equ	0xFE8
 10906                           plusw1	equ	0xFE3
 10907                           indf2	equ	0xFDF
 10908                           postinc2	equ	0xFDE
 10909                           postdec2	equ	0xFDD
 10910                           plusw2	equ	0xFDB
 10911                           fsr2h	equ	0xFDA
 10912                           fsr2l	equ	0xFD9
 10913                           status	equ	0xFD8
 10914                           
 10915 ;; *************** function ___lltoft *****************
 10916 ;; Defined at:
 10917 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lltoft.c"
 10918 ;; Parameters:    Size  Location     Type
 10919 ;;  c               4    8[COMRAM] unsigned long 
 10920 ;; Auto vars:     Size  Location     Type
 10921 ;;  exp             1   16[COMRAM] unsigned char 
 10922 ;; Return value:  Size  Location     Type
 10923 ;;                  3    8[COMRAM] float 
 10924 ;; Registers used:
 10925 ;;		wreg, status,2, status,0, cstack
 10926 ;; Tracked objects:
 10927 ;;		On entry : 0/0
 10928 ;;		On exit  : 0/0
 10929 ;;		Unchanged: 0/0
 10930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10932 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10933 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10934 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10935 ;;Total ram usage:        9 bytes
 10936 ;; Hardware stack levels used:    1
 10937 ;; Hardware stack levels required when called:    1
 10938 ;; This function calls:
 10939 ;;		___ftpack
 10940 ;; This function is called by:
 10941 ;;		_initSD
 10942 ;;		_printf
 10943 ;; This function uses a non-reentrant model
 10944 ;;
 10945                           
 10946                           	psect	text47
 10947  00D09C                     __ptext47:
 10948                           	opt stack 0
 10949  00D09C                     ___lltoft:
 10950                           	opt stack 27
 10951                           
 10952                           ;incstack = 0
 10953  00D09C  0E8E               	movlw	142
 10954  00D09E  6E11               	movwf	___lltoft@exp,c
 10955  00D0A0  D006               	goto	l1326
 10956  00D0A2  90D8               	bcf	status,0,c
 10957  00D0A4  320C               	rrcf	___lltoft@c+3,f,c
 10958  00D0A6  320B               	rrcf	___lltoft@c+2,f,c
 10959  00D0A8  320A               	rrcf	___lltoft@c+1,f,c
 10960  00D0AA  3209               	rrcf	___lltoft@c,f,c
 10961  00D0AC  2A11               	incf	___lltoft@exp,f,c
 10962  00D0AE                     l1326:
 10963  00D0AE  0E00               	movlw	0
 10964  00D0B0  1409               	andwf	___lltoft@c,w,c
 10965  00D0B2  6E0D               	movwf	??___lltoft& (0+255),c
 10966  00D0B4  0E00               	movlw	0
 10967  00D0B6  140A               	andwf	___lltoft@c+1,w,c
 10968  00D0B8  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 10969  00D0BA  0E00               	movlw	0
 10970  00D0BC  140B               	andwf	___lltoft@c+2,w,c
 10971  00D0BE  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 10972  00D0C0  0EFF               	movlw	255
 10973  00D0C2  140C               	andwf	___lltoft@c+3,w,c
 10974  00D0C4  6E10               	movwf	(??___lltoft+3)& (0+255),c
 10975  00D0C6  500D               	movf	??___lltoft,w,c
 10976  00D0C8  100E               	iorwf	??___lltoft+1,w,c
 10977  00D0CA  100F               	iorwf	??___lltoft+2,w,c
 10978  00D0CC  1010               	iorwf	??___lltoft+3,w,c
 10979  00D0CE  A4D8               	btfss	status,2,c
 10980  00D0D0  D7E8               	goto	l1327
 10981  00D0D2  C009  F001         	movff	___lltoft@c,___ftpack@arg
 10982  00D0D6  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 10983  00D0DA  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 10984  00D0DE  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 10985  00D0E2  0E00               	movlw	0
 10986  00D0E4  6E05               	movwf	___ftpack@sign,c
 10987  00D0E6  EC34  F06B         	call	___ftpack	;wreg free
 10988  00D0EA  C001  F009         	movff	?___ftpack,?___lltoft
 10989  00D0EE  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 10990  00D0F2  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 10991  00D0F6  0012               	return	
 10992  00D0F8                     __end_of___lltoft:
 10993                           	opt stack 0
 10994                           tblptru	equ	0xFF8
 10995                           tblptrh	equ	0xFF7
 10996                           tblptrl	equ	0xFF6
 10997                           tablat	equ	0xFF5
 10998                           prodh	equ	0xFF4
 10999                           prodl	equ	0xFF3
 11000                           postinc0	equ	0xFEE
 11001                           wreg	equ	0xFE8
 11002                           plusw1	equ	0xFE3
 11003                           indf2	equ	0xFDF
 11004                           postinc2	equ	0xFDE
 11005                           postdec2	equ	0xFDD
 11006                           plusw2	equ	0xFDB
 11007                           fsr2h	equ	0xFDA
 11008                           fsr2l	equ	0xFD9
 11009                           status	equ	0xFD8
 11010                           
 11011 ;; *************** function ___llmod *****************
 11012 ;; Defined at:
 11013 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\llmod.c"
 11014 ;; Parameters:    Size  Location     Type
 11015 ;;  dividend        4    0[COMRAM] unsigned long 
 11016 ;;  divisor         4    4[COMRAM] unsigned long 
 11017 ;; Auto vars:     Size  Location     Type
 11018 ;;  counter         1    8[COMRAM] unsigned char 
 11019 ;; Return value:  Size  Location     Type
 11020 ;;                  4    0[COMRAM] unsigned long 
 11021 ;; Registers used:
 11022 ;;		wreg, status,2, status,0
 11023 ;; Tracked objects:
 11024 ;;		On entry : 0/0
 11025 ;;		On exit  : 0/0
 11026 ;;		Unchanged: 0/0
 11027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11028 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11029 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11031 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11032 ;;Total ram usage:        9 bytes
 11033 ;; Hardware stack levels used:    1
 11034 ;; This function calls:
 11035 ;;		Nothing
 11036 ;; This function is called by:
 11037 ;;		_printf
 11038 ;; This function uses a non-reentrant model
 11039 ;;
 11040                           
 11041                           	psect	text48
 11042  00D1B6                     __ptext48:
 11043                           	opt stack 0
 11044  00D1B6                     ___llmod:
 11045                           	opt stack 28
 11046                           
 11047                           ;incstack = 0
 11048  00D1B6  5005               	movf	___llmod@divisor,w,c
 11049  00D1B8  1006               	iorwf	___llmod@divisor+1,w,c
 11050  00D1BA  1007               	iorwf	___llmod@divisor+2,w,c
 11051  00D1BC  1008               	iorwf	___llmod@divisor+3,w,c
 11052  00D1BE  B4D8               	btfsc	status,2,c
 11053  00D1C0  D024               	goto	l1320
 11054  00D1C2  0E01               	movlw	1
 11055  00D1C4  6E09               	movwf	___llmod@counter,c
 11056  00D1C6  D006               	goto	l1315
 11057  00D1C8  90D8               	bcf	status,0,c
 11058  00D1CA  3605               	rlcf	___llmod@divisor,f,c
 11059  00D1CC  3606               	rlcf	___llmod@divisor+1,f,c
 11060  00D1CE  3607               	rlcf	___llmod@divisor+2,f,c
 11061  00D1D0  3608               	rlcf	___llmod@divisor+3,f,c
 11062  00D1D2  2A09               	incf	___llmod@counter,f,c
 11063  00D1D4                     l1315:
 11064  00D1D4  AE08               	btfss	___llmod@divisor+3,7,c
 11065  00D1D6  D7F8               	goto	l1316
 11066  00D1D8                     u4000:
 11067  00D1D8  5005               	movf	___llmod@divisor,w,c
 11068  00D1DA  5C01               	subwf	___llmod@dividend,w,c
 11069  00D1DC  5006               	movf	___llmod@divisor+1,w,c
 11070  00D1DE  5802               	subwfb	___llmod@dividend+1,w,c
 11071  00D1E0  5007               	movf	___llmod@divisor+2,w,c
 11072  00D1E2  5803               	subwfb	___llmod@dividend+2,w,c
 11073  00D1E4  5008               	movf	___llmod@divisor+3,w,c
 11074  00D1E6  5804               	subwfb	___llmod@dividend+3,w,c
 11075  00D1E8  A0D8               	btfss	status,0,c
 11076  00D1EA  D008               	goto	l1319
 11077  00D1EC  5005               	movf	___llmod@divisor,w,c
 11078  00D1EE  5E01               	subwf	___llmod@dividend,f,c
 11079  00D1F0  5006               	movf	___llmod@divisor+1,w,c
 11080  00D1F2  5A02               	subwfb	___llmod@dividend+1,f,c
 11081  00D1F4  5007               	movf	___llmod@divisor+2,w,c
 11082  00D1F6  5A03               	subwfb	___llmod@dividend+2,f,c
 11083  00D1F8  5008               	movf	___llmod@divisor+3,w,c
 11084  00D1FA  5A04               	subwfb	___llmod@dividend+3,f,c
 11085  00D1FC                     l1319:
 11086  00D1FC  90D8               	bcf	status,0,c
 11087  00D1FE  3208               	rrcf	___llmod@divisor+3,f,c
 11088  00D200  3207               	rrcf	___llmod@divisor+2,f,c
 11089  00D202  3206               	rrcf	___llmod@divisor+1,f,c
 11090  00D204  3205               	rrcf	___llmod@divisor,f,c
 11091  00D206  2E09               	decfsz	___llmod@counter,f,c
 11092  00D208  D7E7               	goto	u4000
 11093  00D20A                     l1320:
 11094  00D20A  C001  F001         	movff	___llmod@dividend,?___llmod
 11095  00D20E  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
 11096  00D212  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
 11097  00D216  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
 11098  00D21A  0012               	return		;funcret
 11099  00D21C                     __end_of___llmod:
 11100                           	opt stack 0
 11101                           tblptru	equ	0xFF8
 11102                           tblptrh	equ	0xFF7
 11103                           tblptrl	equ	0xFF6
 11104                           tablat	equ	0xFF5
 11105                           prodh	equ	0xFF4
 11106                           prodl	equ	0xFF3
 11107                           postinc0	equ	0xFEE
 11108                           wreg	equ	0xFE8
 11109                           plusw1	equ	0xFE3
 11110                           indf2	equ	0xFDF
 11111                           postinc2	equ	0xFDE
 11112                           postdec2	equ	0xFDD
 11113                           plusw2	equ	0xFDB
 11114                           fsr2h	equ	0xFDA
 11115                           fsr2l	equ	0xFD9
 11116                           status	equ	0xFD8
 11117                           
 11118 ;; *************** function ___lldiv *****************
 11119 ;; Defined at:
 11120 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 11121 ;; Parameters:    Size  Location     Type
 11122 ;;  dividend        4    0[COMRAM] unsigned long 
 11123 ;;  divisor         4    4[COMRAM] unsigned long 
 11124 ;; Auto vars:     Size  Location     Type
 11125 ;;  quotient        4    8[COMRAM] unsigned long 
 11126 ;;  counter         1   12[COMRAM] unsigned char 
 11127 ;; Return value:  Size  Location     Type
 11128 ;;                  4    0[COMRAM] unsigned long 
 11129 ;; Registers used:
 11130 ;;		wreg, status,2, status,0
 11131 ;; Tracked objects:
 11132 ;;		On entry : 0/0
 11133 ;;		On exit  : 0/0
 11134 ;;		Unchanged: 0/0
 11135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11136 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11139 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11140 ;;Total ram usage:       13 bytes
 11141 ;; Hardware stack levels used:    1
 11142 ;; This function calls:
 11143 ;;		Nothing
 11144 ;; This function is called by:
 11145 ;;		_I2C_Master_Init
 11146 ;;		_printf
 11147 ;; This function uses a non-reentrant model
 11148 ;;
 11149                           
 11150                           	psect	text49
 11151  00D44E                     __ptext49:
 11152                           	opt stack 0
 11153  00D44E                     ___lldiv:
 11154                           	opt stack 28
 11155                           
 11156                           ;incstack = 0
 11157  00D44E  0E00               	movlw	0
 11158  00D450  6E09               	movwf	___lldiv@quotient,c
 11159  00D452  0E00               	movlw	0
 11160  00D454  6E0A               	movwf	___lldiv@quotient+1,c
 11161  00D456  0E00               	movlw	0
 11162  00D458  6E0B               	movwf	___lldiv@quotient+2,c
 11163  00D45A  0E00               	movlw	0
 11164  00D45C  6E0C               	movwf	___lldiv@quotient+3,c
 11165  00D45E  5005               	movf	___lldiv@divisor,w,c
 11166  00D460  1006               	iorwf	___lldiv@divisor+1,w,c
 11167  00D462  1007               	iorwf	___lldiv@divisor+2,w,c
 11168  00D464  1008               	iorwf	___lldiv@divisor+3,w,c
 11169  00D466  B4D8               	btfsc	status,2,c
 11170  00D468  D02A               	goto	l1310
 11171  00D46A  0E01               	movlw	1
 11172  00D46C  6E0D               	movwf	___lldiv@counter,c
 11173  00D46E  D006               	goto	l1305
 11174  00D470  90D8               	bcf	status,0,c
 11175  00D472  3605               	rlcf	___lldiv@divisor,f,c
 11176  00D474  3606               	rlcf	___lldiv@divisor+1,f,c
 11177  00D476  3607               	rlcf	___lldiv@divisor+2,f,c
 11178  00D478  3608               	rlcf	___lldiv@divisor+3,f,c
 11179  00D47A  2A0D               	incf	___lldiv@counter,f,c
 11180  00D47C                     l1305:
 11181  00D47C  AE08               	btfss	___lldiv@divisor+3,7,c
 11182  00D47E  D7F8               	goto	l1306
 11183  00D480                     u3970:
 11184  00D480  90D8               	bcf	status,0,c
 11185  00D482  3609               	rlcf	___lldiv@quotient,f,c
 11186  00D484  360A               	rlcf	___lldiv@quotient+1,f,c
 11187  00D486  360B               	rlcf	___lldiv@quotient+2,f,c
 11188  00D488  360C               	rlcf	___lldiv@quotient+3,f,c
 11189  00D48A  5005               	movf	___lldiv@divisor,w,c
 11190  00D48C  5C01               	subwf	___lldiv@dividend,w,c
 11191  00D48E  5006               	movf	___lldiv@divisor+1,w,c
 11192  00D490  5802               	subwfb	___lldiv@dividend+1,w,c
 11193  00D492  5007               	movf	___lldiv@divisor+2,w,c
 11194  00D494  5803               	subwfb	___lldiv@dividend+2,w,c
 11195  00D496  5008               	movf	___lldiv@divisor+3,w,c
 11196  00D498  5804               	subwfb	___lldiv@dividend+3,w,c
 11197  00D49A  A0D8               	btfss	status,0,c
 11198  00D49C  D009               	goto	l1309
 11199  00D49E  5005               	movf	___lldiv@divisor,w,c
 11200  00D4A0  5E01               	subwf	___lldiv@dividend,f,c
 11201  00D4A2  5006               	movf	___lldiv@divisor+1,w,c
 11202  00D4A4  5A02               	subwfb	___lldiv@dividend+1,f,c
 11203  00D4A6  5007               	movf	___lldiv@divisor+2,w,c
 11204  00D4A8  5A03               	subwfb	___lldiv@dividend+2,f,c
 11205  00D4AA  5008               	movf	___lldiv@divisor+3,w,c
 11206  00D4AC  5A04               	subwfb	___lldiv@dividend+3,f,c
 11207  00D4AE  8009               	bsf	___lldiv@quotient,0,c
 11208  00D4B0                     l1309:
 11209  00D4B0  90D8               	bcf	status,0,c
 11210  00D4B2  3208               	rrcf	___lldiv@divisor+3,f,c
 11211  00D4B4  3207               	rrcf	___lldiv@divisor+2,f,c
 11212  00D4B6  3206               	rrcf	___lldiv@divisor+1,f,c
 11213  00D4B8  3205               	rrcf	___lldiv@divisor,f,c
 11214  00D4BA  2E0D               	decfsz	___lldiv@counter,f,c
 11215  00D4BC  D7E1               	goto	u3970
 11216  00D4BE                     l1310:
 11217  00D4BE  C009  F001         	movff	___lldiv@quotient,?___lldiv
 11218  00D4C2  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 11219  00D4C6  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 11220  00D4CA  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 11221  00D4CE  0012               	return		;funcret
 11222  00D4D0                     __end_of___lldiv:
 11223                           	opt stack 0
 11224                           tblptru	equ	0xFF8
 11225                           tblptrh	equ	0xFF7
 11226                           tblptrl	equ	0xFF6
 11227                           tablat	equ	0xFF5
 11228                           prodh	equ	0xFF4
 11229                           prodl	equ	0xFF3
 11230                           postinc0	equ	0xFEE
 11231                           wreg	equ	0xFE8
 11232                           plusw1	equ	0xFE3
 11233                           indf2	equ	0xFDF
 11234                           postinc2	equ	0xFDE
 11235                           postdec2	equ	0xFDD
 11236                           plusw2	equ	0xFDB
 11237                           fsr2h	equ	0xFDA
 11238                           fsr2l	equ	0xFD9
 11239                           status	equ	0xFD8
 11240                           
 11241 ;; *************** function ___fttol *****************
 11242 ;; Defined at:
 11243 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fttol.c"
 11244 ;; Parameters:    Size  Location     Type
 11245 ;;  f1              3   42[COMRAM] float 
 11246 ;; Auto vars:     Size  Location     Type
 11247 ;;  lval            4   52[COMRAM] unsigned long 
 11248 ;;  exp1            1   56[COMRAM] unsigned char 
 11249 ;;  sign1           1   51[COMRAM] unsigned char 
 11250 ;; Return value:  Size  Location     Type
 11251 ;;                  4   42[COMRAM] long 
 11252 ;; Registers used:
 11253 ;;		wreg, status,2, status,0
 11254 ;; Tracked objects:
 11255 ;;		On entry : 0/0
 11256 ;;		On exit  : 0/0
 11257 ;;		Unchanged: 0/0
 11258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11259 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11260 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11261 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11262 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11263 ;;Total ram usage:       15 bytes
 11264 ;; Hardware stack levels used:    1
 11265 ;; This function calls:
 11266 ;;		Nothing
 11267 ;; This function is called by:
 11268 ;;		_initSD
 11269 ;;		_printf
 11270 ;; This function uses a non-reentrant model
 11271 ;;
 11272                           
 11273                           	psect	text50
 11274  00D8C8                     __ptext50:
 11275                           	opt stack 0
 11276  00D8C8                     ___fttol:
 11277                           	opt stack 28
 11278                           
 11279                           ;incstack = 0
 11280  00D8C8  C02D  F02F         	movff	___fttol@f1+2,??___fttol
 11281  00D8CC  6A30               	clrf	(??___fttol+1)& (0+255),c
 11282  00D8CE  6A31               	clrf	(??___fttol+2)& (0+255),c
 11283  00D8D0  342C               	rlcf	___fttol@f1+1,w,c
 11284  00D8D2  362F               	rlcf	??___fttol& (0+255),f,c
 11285  00D8D4  E301               	bnc	u3881
 11286  00D8D6  8030               	bsf	(??___fttol+1)& (0+255),0,c
 11287  00D8D8                     u3881:
 11288  00D8D8  502F               	movf	??___fttol,w,c
 11289  00D8DA  6E39               	movwf	___fttol@exp1,c
 11290  00D8DC  5039               	movf	___fttol@exp1,w,c
 11291  00D8DE  A4D8               	btfss	status,2,c
 11292  00D8E0  D009               	goto	l1264
 11293  00D8E2  0E00               	movlw	0
 11294  00D8E4  6E2B               	movwf	?___fttol,c
 11295  00D8E6  0E00               	movlw	0
 11296  00D8E8  6E2C               	movwf	?___fttol+1,c
 11297  00D8EA  0E00               	movlw	0
 11298  00D8EC  6E2D               	movwf	?___fttol+2,c
 11299  00D8EE  0E00               	movlw	0
 11300  00D8F0  6E2E               	movwf	?___fttol+3,c
 11301  00D8F2  0012               	return	
 11302  00D8F4                     l1264:
 11303  00D8F4  0E17               	movlw	23
 11304  00D8F6  6E2F               	movwf	??___fttol& (0+255),c
 11305  00D8F8  C02B  F030         	movff	___fttol@f1,??___fttol+1
 11306  00D8FC  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
 11307  00D900  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
 11308  00D904  282F               	incf	??___fttol,w,c
 11309  00D906  6E33               	movwf	(??___fttol+4)& (0+255),c
 11310  00D908  D004               	goto	u3900
 11311  00D90A                     u3905:
 11312  00D90A  90D8               	bcf	status,0,c
 11313  00D90C  3232               	rrcf	??___fttol+3,f,c
 11314  00D90E  3231               	rrcf	??___fttol+2,f,c
 11315  00D910  3230               	rrcf	??___fttol+1,f,c
 11316  00D912                     u3900:
 11317  00D912  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
 11318  00D914  D7FA               	goto	u3905
 11319  00D916  5030               	movf	??___fttol+1,w,c
 11320  00D918  6E34               	movwf	___fttol@sign1,c
 11321  00D91A  8E2C               	bsf	___fttol@f1+1,7,c
 11322  00D91C  0EFF               	movlw	255
 11323  00D91E  162B               	andwf	___fttol@f1,f,c
 11324  00D920  0EFF               	movlw	255
 11325  00D922  162C               	andwf	___fttol@f1+1,f,c
 11326  00D924  0E00               	movlw	0
 11327  00D926  162D               	andwf	___fttol@f1+2,f,c
 11328  00D928  502B               	movf	___fttol@f1,w,c
 11329  00D92A  6E35               	movwf	___fttol@lval,c
 11330  00D92C  502C               	movf	___fttol@f1+1,w,c
 11331  00D92E  6E36               	movwf	___fttol@lval+1,c
 11332  00D930  502D               	movf	___fttol@f1+2,w,c
 11333  00D932  6E37               	movwf	___fttol@lval+2,c
 11334  00D934  6A38               	clrf	___fttol@lval+3,c
 11335  00D936  0E8E               	movlw	142
 11336  00D938  5E39               	subwf	___fttol@exp1,f,c
 11337  00D93A  AE39               	btfss	___fttol@exp1,7,c
 11338  00D93C  D016               	goto	l1266
 11339  00D93E  5039               	movf	___fttol@exp1,w,c
 11340  00D940  0A80               	xorlw	128
 11341  00D942  0F8F               	addlw	143
 11342  00D944  B0D8               	btfsc	status,0,c
 11343  00D946  D009               	goto	l1267
 11344  00D948  0E00               	movlw	0
 11345  00D94A  6E2B               	movwf	?___fttol,c
 11346  00D94C  0E00               	movlw	0
 11347  00D94E  6E2C               	movwf	?___fttol+1,c
 11348  00D950  0E00               	movlw	0
 11349  00D952  6E2D               	movwf	?___fttol+2,c
 11350  00D954  0E00               	movlw	0
 11351  00D956  6E2E               	movwf	?___fttol+3,c
 11352  00D958  0012               	return	
 11353  00D95A                     l1267:
 11354  00D95A  90D8               	bcf	status,0,c
 11355  00D95C  3238               	rrcf	___fttol@lval+3,f,c
 11356  00D95E  3237               	rrcf	___fttol@lval+2,f,c
 11357  00D960  3236               	rrcf	___fttol@lval+1,f,c
 11358  00D962  3235               	rrcf	___fttol@lval,f,c
 11359  00D964  3E39               	incfsz	___fttol@exp1,f,c
 11360  00D966  D7F9               	goto	l1267
 11361  00D968  D015               	goto	u3940
 11362  00D96A                     l1266:
 11363  00D96A  0E17               	movlw	23
 11364  00D96C  6439               	cpfsgt	___fttol@exp1,c
 11365  00D96E  D00F               	goto	l1272
 11366  00D970  0E00               	movlw	0
 11367  00D972  6E2B               	movwf	?___fttol,c
 11368  00D974  0E00               	movlw	0
 11369  00D976  6E2C               	movwf	?___fttol+1,c
 11370  00D978  0E00               	movlw	0
 11371  00D97A  6E2D               	movwf	?___fttol+2,c
 11372  00D97C  0E00               	movlw	0
 11373  00D97E  6E2E               	movwf	?___fttol+3,c
 11374  00D980  0012               	return	
 11375  00D982  90D8               	bcf	status,0,c
 11376  00D984  3635               	rlcf	___fttol@lval,f,c
 11377  00D986  3636               	rlcf	___fttol@lval+1,f,c
 11378  00D988  3637               	rlcf	___fttol@lval+2,f,c
 11379  00D98A  3638               	rlcf	___fttol@lval+3,f,c
 11380  00D98C  0639               	decf	___fttol@exp1,f,c
 11381  00D98E                     l1272:
 11382  00D98E  5039               	movf	___fttol@exp1,w,c
 11383  00D990  A4D8               	btfss	status,2,c
 11384  00D992  D7F7               	goto	l1273
 11385  00D994                     u3940:
 11386  00D994  5034               	movf	___fttol@sign1,w,c
 11387  00D996  B4D8               	btfsc	status,2,c
 11388  00D998  D008               	goto	l1275
 11389  00D99A  1E38               	comf	___fttol@lval+3,f,c
 11390  00D99C  1E37               	comf	___fttol@lval+2,f,c
 11391  00D99E  1E36               	comf	___fttol@lval+1,f,c
 11392  00D9A0  6C35               	negf	___fttol@lval,c
 11393  00D9A2  0E00               	movlw	0
 11394  00D9A4  2236               	addwfc	___fttol@lval+1,f,c
 11395  00D9A6  2237               	addwfc	___fttol@lval+2,f,c
 11396  00D9A8  2238               	addwfc	___fttol@lval+3,f,c
 11397  00D9AA                     l1275:
 11398  00D9AA  C035  F02B         	movff	___fttol@lval,?___fttol
 11399  00D9AE  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
 11400  00D9B2  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
 11401  00D9B6  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
 11402  00D9BA  0012               	return	
 11403  00D9BC                     __end_of___fttol:
 11404                           	opt stack 0
 11405                           tblptru	equ	0xFF8
 11406                           tblptrh	equ	0xFF7
 11407                           tblptrl	equ	0xFF6
 11408                           tablat	equ	0xFF5
 11409                           prodh	equ	0xFF4
 11410                           prodl	equ	0xFF3
 11411                           postinc0	equ	0xFEE
 11412                           wreg	equ	0xFE8
 11413                           plusw1	equ	0xFE3
 11414                           indf2	equ	0xFDF
 11415                           postinc2	equ	0xFDE
 11416                           postdec2	equ	0xFDD
 11417                           plusw2	equ	0xFDB
 11418                           fsr2h	equ	0xFDA
 11419                           fsr2l	equ	0xFD9
 11420                           status	equ	0xFD8
 11421                           
 11422 ;; *************** function ___ftsub *****************
 11423 ;; Defined at:
 11424 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftsub.c"
 11425 ;; Parameters:    Size  Location     Type
 11426 ;;  f1              3   57[COMRAM] float 
 11427 ;;  f2              3   60[COMRAM] float 
 11428 ;; Auto vars:     Size  Location     Type
 11429 ;;		None
 11430 ;; Return value:  Size  Location     Type
 11431 ;;                  3   57[COMRAM] float 
 11432 ;; Registers used:
 11433 ;;		wreg, status,2, status,0, cstack
 11434 ;; Tracked objects:
 11435 ;;		On entry : 0/0
 11436 ;;		On exit  : 0/0
 11437 ;;		Unchanged: 0/0
 11438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11439 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11442 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11443 ;;Total ram usage:        6 bytes
 11444 ;; Hardware stack levels used:    1
 11445 ;; Hardware stack levels required when called:    2
 11446 ;; This function calls:
 11447 ;;		___ftadd
 11448 ;; This function is called by:
 11449 ;;		_printf
 11450 ;; This function uses a non-reentrant model
 11451 ;;
 11452                           
 11453                           	psect	text51
 11454  00CFB6                     __ptext51:
 11455                           	opt stack 0
 11456  00CFB6                     ___ftsub:
 11457                           	opt stack 26
 11458                           
 11459                           ;incstack = 0
 11460  00CFB6  503D               	movf	___ftsub@f2,w,c
 11461  00CFB8  103E               	iorwf	___ftsub@f2+1,w,c
 11462  00CFBA  103F               	iorwf	___ftsub@f2+2,w,c
 11463  00CFBC  B4D8               	btfsc	status,2,c
 11464  00CFBE  D006               	goto	l1260
 11465  00CFC0  0E00               	movlw	0
 11466  00CFC2  1A3D               	xorwf	___ftsub@f2,f,c
 11467  00CFC4  0E00               	movlw	0
 11468  00CFC6  1A3E               	xorwf	___ftsub@f2+1,f,c
 11469  00CFC8  0E80               	movlw	128
 11470  00CFCA  1A3F               	xorwf	___ftsub@f2+2,f,c
 11471  00CFCC                     l1260:
 11472  00CFCC  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
 11473  00CFD0  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
 11474  00CFD4  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
 11475  00CFD8  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
 11476  00CFDC  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
 11477  00CFE0  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
 11478  00CFE4  EC3E  F071         	call	___ftadd	;wreg free
 11479  00CFE8  C02E  F03A         	movff	?___ftadd,?___ftsub
 11480  00CFEC  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
 11481  00CFF0  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
 11482  00CFF4  0012               	return	
 11483  00CFF6                     __end_of___ftsub:
 11484                           	opt stack 0
 11485                           tblptru	equ	0xFF8
 11486                           tblptrh	equ	0xFF7
 11487                           tblptrl	equ	0xFF6
 11488                           tablat	equ	0xFF5
 11489                           prodh	equ	0xFF4
 11490                           prodl	equ	0xFF3
 11491                           postinc0	equ	0xFEE
 11492                           wreg	equ	0xFE8
 11493                           plusw1	equ	0xFE3
 11494                           indf2	equ	0xFDF
 11495                           postinc2	equ	0xFDE
 11496                           postdec2	equ	0xFDD
 11497                           plusw2	equ	0xFDB
 11498                           fsr2h	equ	0xFDA
 11499                           fsr2l	equ	0xFD9
 11500                           status	equ	0xFD8
 11501                           
 11502 ;; *************** function ___ftadd *****************
 11503 ;; Defined at:
 11504 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftadd.c"
 11505 ;; Parameters:    Size  Location     Type
 11506 ;;  f1              3   45[COMRAM] float 
 11507 ;;  f2              3   48[COMRAM] float 
 11508 ;; Auto vars:     Size  Location     Type
 11509 ;;  exp1            1   56[COMRAM] unsigned char 
 11510 ;;  exp2            1   55[COMRAM] unsigned char 
 11511 ;;  sign            1   54[COMRAM] unsigned char 
 11512 ;; Return value:  Size  Location     Type
 11513 ;;                  3   45[COMRAM] float 
 11514 ;; Registers used:
 11515 ;;		wreg, status,2, status,0, cstack
 11516 ;; Tracked objects:
 11517 ;;		On entry : 0/0
 11518 ;;		On exit  : 0/0
 11519 ;;		Unchanged: 0/0
 11520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11521 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11522 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11523 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11524 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11525 ;;Total ram usage:       12 bytes
 11526 ;; Hardware stack levels used:    1
 11527 ;; Hardware stack levels required when called:    1
 11528 ;; This function calls:
 11529 ;;		___ftpack
 11530 ;; This function is called by:
 11531 ;;		_printf
 11532 ;;		___ftsub
 11533 ;; This function uses a non-reentrant model
 11534 ;;
 11535                           
 11536                           	psect	text52
 11537  00E27C                     __ptext52:
 11538                           	opt stack 0
 11539  00E27C                     ___ftadd:
 11540                           	opt stack 26
 11541                           
 11542                           ;incstack = 0
 11543  00E27C  C030  F034         	movff	___ftadd@f1+2,??___ftadd
 11544  00E280  6A35               	clrf	(??___ftadd+1)& (0+255),c
 11545  00E282  6A36               	clrf	(??___ftadd+2)& (0+255),c
 11546  00E284  342F               	rlcf	___ftadd@f1+1,w,c
 11547  00E286  3634               	rlcf	??___ftadd& (0+255),f,c
 11548  00E288  E301               	bnc	u3071
 11549  00E28A  8035               	bsf	(??___ftadd+1)& (0+255),0,c
 11550  00E28C                     u3071:
 11551  00E28C  5034               	movf	??___ftadd,w,c
 11552  00E28E  6E39               	movwf	___ftadd@exp1,c
 11553  00E290  C033  F034         	movff	___ftadd@f2+2,??___ftadd
 11554  00E294  6A35               	clrf	(??___ftadd+1)& (0+255),c
 11555  00E296  6A36               	clrf	(??___ftadd+2)& (0+255),c
 11556  00E298  3432               	rlcf	___ftadd@f2+1,w,c
 11557  00E29A  3634               	rlcf	??___ftadd& (0+255),f,c
 11558  00E29C  E301               	bnc	u3081
 11559  00E29E  8035               	bsf	(??___ftadd+1)& (0+255),0,c
 11560  00E2A0                     u3081:
 11561  00E2A0  5034               	movf	??___ftadd,w,c
 11562  00E2A2  6E38               	movwf	___ftadd@exp2,c
 11563  00E2A4  5039               	movf	___ftadd@exp1,w,c
 11564  00E2A6  B4D8               	btfsc	status,2,c
 11565  00E2A8  D00B               	goto	u3110
 11566  00E2AA  5038               	movf	___ftadd@exp2,w,c
 11567  00E2AC  5C39               	subwf	___ftadd@exp1,w,c
 11568  00E2AE  B0D8               	btfsc	status,0,c
 11569  00E2B0  D00E               	goto	l1178
 11570  00E2B2  5039               	movf	___ftadd@exp1,w,c
 11571  00E2B4  0800               	sublw	0
 11572  00E2B6  2438               	addwf	___ftadd@exp2,w,c
 11573  00E2B8  6E34               	movwf	??___ftadd& (0+255),c
 11574  00E2BA  0E18               	movlw	24
 11575  00E2BC  6434               	cpfsgt	??___ftadd,c
 11576  00E2BE  D007               	goto	l1178
 11577  00E2C0                     u3110:
 11578  00E2C0  C031  F02E         	movff	___ftadd@f2,?___ftadd
 11579  00E2C4  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
 11580  00E2C8  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
 11581  00E2CC  0012               	return	
 11582  00E2CE                     l1178:
 11583  00E2CE  5038               	movf	___ftadd@exp2,w,c
 11584  00E2D0  B4D8               	btfsc	status,2,c
 11585  00E2D2  D00B               	goto	u3140
 11586  00E2D4  5039               	movf	___ftadd@exp1,w,c
 11587  00E2D6  5C38               	subwf	___ftadd@exp2,w,c
 11588  00E2D8  B0D8               	btfsc	status,0,c
 11589  00E2DA  D00E               	goto	l1182
 11590  00E2DC  5038               	movf	___ftadd@exp2,w,c
 11591  00E2DE  0800               	sublw	0
 11592  00E2E0  2439               	addwf	___ftadd@exp1,w,c
 11593  00E2E2  6E34               	movwf	??___ftadd& (0+255),c
 11594  00E2E4  0E18               	movlw	24
 11595  00E2E6  6434               	cpfsgt	??___ftadd,c
 11596  00E2E8  D007               	goto	l1182
 11597  00E2EA                     u3140:
 11598  00E2EA  C02E  F02E         	movff	___ftadd@f1,?___ftadd
 11599  00E2EE  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
 11600  00E2F2  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
 11601  00E2F6  0012               	return	
 11602  00E2F8                     l1182:
 11603  00E2F8  0E06               	movlw	6
 11604  00E2FA  6E37               	movwf	___ftadd@sign,c
 11605  00E2FC  BE30               	btfsc	___ftadd@f1+2,7,c
 11606  00E2FE  8E37               	bsf	___ftadd@sign,7,c
 11607  00E300  BE33               	btfsc	___ftadd@f2+2,7,c
 11608  00E302  8C37               	bsf	___ftadd@sign,6,c
 11609  00E304  8E2F               	bsf	___ftadd@f1+1,7,c
 11610  00E306  0EFF               	movlw	255
 11611  00E308  162E               	andwf	___ftadd@f1,f,c
 11612  00E30A  0EFF               	movlw	255
 11613  00E30C  162F               	andwf	___ftadd@f1+1,f,c
 11614  00E30E  0E00               	movlw	0
 11615  00E310  1630               	andwf	___ftadd@f1+2,f,c
 11616  00E312  8E32               	bsf	___ftadd@f2+1,7,c
 11617  00E314  0EFF               	movlw	255
 11618  00E316  1631               	andwf	___ftadd@f2,f,c
 11619  00E318  0EFF               	movlw	255
 11620  00E31A  1632               	andwf	___ftadd@f2+1,f,c
 11621  00E31C  0E00               	movlw	0
 11622  00E31E  1633               	andwf	___ftadd@f2+2,f,c
 11623  00E320  5038               	movf	___ftadd@exp2,w,c
 11624  00E322  5C39               	subwf	___ftadd@exp1,w,c
 11625  00E324  B0D8               	btfsc	status,0,c
 11626  00E326  D01B               	goto	l1187
 11627  00E328                     u3170:
 11628  00E328  90D8               	bcf	status,0,c
 11629  00E32A  3631               	rlcf	___ftadd@f2,f,c
 11630  00E32C  3632               	rlcf	___ftadd@f2+1,f,c
 11631  00E32E  3633               	rlcf	___ftadd@f2+2,f,c
 11632  00E330  0638               	decf	___ftadd@exp2,f,c
 11633  00E332  5039               	movf	___ftadd@exp1,w,c
 11634  00E334  1838               	xorwf	___ftadd@exp2,w,c
 11635  00E336  B4D8               	btfsc	status,2,c
 11636  00E338  D00D               	goto	l1192
 11637  00E33A  0637               	decf	___ftadd@sign,f,c
 11638  00E33C  C037  F034         	movff	___ftadd@sign,??___ftadd
 11639  00E340  0E07               	movlw	7
 11640  00E342  1634               	andwf	??___ftadd,f,c
 11641  00E344  B4D8               	btfsc	status,2,c
 11642  00E346  D006               	goto	l1192
 11643  00E348  D7EF               	goto	u3170
 11644  00E34A  90D8               	bcf	status,0,c
 11645  00E34C  3230               	rrcf	___ftadd@f1+2,f,c
 11646  00E34E  322F               	rrcf	___ftadd@f1+1,f,c
 11647  00E350  322E               	rrcf	___ftadd@f1,f,c
 11648  00E352  2A39               	incf	___ftadd@exp1,f,c
 11649  00E354                     l1192:
 11650  00E354  5038               	movf	___ftadd@exp2,w,c
 11651  00E356  1839               	xorwf	___ftadd@exp1,w,c
 11652  00E358  B4D8               	btfsc	status,2,c
 11653  00E35A  D01F               	goto	u3240
 11654  00E35C  D7F6               	goto	l1193
 11655  00E35E                     l1187:
 11656  00E35E  5039               	movf	___ftadd@exp1,w,c
 11657  00E360  5C38               	subwf	___ftadd@exp2,w,c
 11658  00E362  B0D8               	btfsc	status,0,c
 11659  00E364  D01A               	goto	u3240
 11660  00E366                     u3210:
 11661  00E366  90D8               	bcf	status,0,c
 11662  00E368  362E               	rlcf	___ftadd@f1,f,c
 11663  00E36A  362F               	rlcf	___ftadd@f1+1,f,c
 11664  00E36C  3630               	rlcf	___ftadd@f1+2,f,c
 11665  00E36E  0639               	decf	___ftadd@exp1,f,c
 11666  00E370  5039               	movf	___ftadd@exp1,w,c
 11667  00E372  1838               	xorwf	___ftadd@exp2,w,c
 11668  00E374  B4D8               	btfsc	status,2,c
 11669  00E376  D00D               	goto	l1201
 11670  00E378  0637               	decf	___ftadd@sign,f,c
 11671  00E37A  C037  F034         	movff	___ftadd@sign,??___ftadd
 11672  00E37E  0E07               	movlw	7
 11673  00E380  1634               	andwf	??___ftadd,f,c
 11674  00E382  B4D8               	btfsc	status,2,c
 11675  00E384  D006               	goto	l1201
 11676  00E386  D7EF               	goto	u3210
 11677  00E388  90D8               	bcf	status,0,c
 11678  00E38A  3233               	rrcf	___ftadd@f2+2,f,c
 11679  00E38C  3232               	rrcf	___ftadd@f2+1,f,c
 11680  00E38E  3231               	rrcf	___ftadd@f2,f,c
 11681  00E390  2A38               	incf	___ftadd@exp2,f,c
 11682  00E392                     l1201:
 11683  00E392  5038               	movf	___ftadd@exp2,w,c
 11684  00E394  1839               	xorwf	___ftadd@exp1,w,c
 11685  00E396  A4D8               	btfss	status,2,c
 11686  00E398  D7F7               	goto	l1202
 11687  00E39A                     u3240:
 11688  00E39A  AE37               	btfss	___ftadd@sign,7,c
 11689  00E39C  D00C               	goto	l1204
 11690  00E39E  0EFF               	movlw	255
 11691  00E3A0  1A2E               	xorwf	___ftadd@f1,f,c
 11692  00E3A2  0EFF               	movlw	255
 11693  00E3A4  1A2F               	xorwf	___ftadd@f1+1,f,c
 11694  00E3A6  0EFF               	movlw	255
 11695  00E3A8  1A30               	xorwf	___ftadd@f1+2,f,c
 11696  00E3AA  0E01               	movlw	1
 11697  00E3AC  262E               	addwf	___ftadd@f1,f,c
 11698  00E3AE  0E00               	movlw	0
 11699  00E3B0  222F               	addwfc	___ftadd@f1+1,f,c
 11700  00E3B2  0E00               	movlw	0
 11701  00E3B4  2230               	addwfc	___ftadd@f1+2,f,c
 11702  00E3B6                     l1204:
 11703  00E3B6  AC37               	btfss	___ftadd@sign,6,c
 11704  00E3B8  D00C               	goto	l1205
 11705  00E3BA  0EFF               	movlw	255
 11706  00E3BC  1A31               	xorwf	___ftadd@f2,f,c
 11707  00E3BE  0EFF               	movlw	255
 11708  00E3C0  1A32               	xorwf	___ftadd@f2+1,f,c
 11709  00E3C2  0EFF               	movlw	255
 11710  00E3C4  1A33               	xorwf	___ftadd@f2+2,f,c
 11711  00E3C6  0E01               	movlw	1
 11712  00E3C8  2631               	addwf	___ftadd@f2,f,c
 11713  00E3CA  0E00               	movlw	0
 11714  00E3CC  2232               	addwfc	___ftadd@f2+1,f,c
 11715  00E3CE  0E00               	movlw	0
 11716  00E3D0  2233               	addwfc	___ftadd@f2+2,f,c
 11717  00E3D2                     l1205:
 11718  00E3D2  0E00               	movlw	0
 11719  00E3D4  6E37               	movwf	___ftadd@sign,c
 11720  00E3D6  502E               	movf	___ftadd@f1,w,c
 11721  00E3D8  2631               	addwf	___ftadd@f2,f,c
 11722  00E3DA  502F               	movf	___ftadd@f1+1,w,c
 11723  00E3DC  2232               	addwfc	___ftadd@f2+1,f,c
 11724  00E3DE  5030               	movf	___ftadd@f1+2,w,c
 11725  00E3E0  2233               	addwfc	___ftadd@f2+2,f,c
 11726  00E3E2  AE33               	btfss	___ftadd@f2+2,7,c
 11727  00E3E4  D00E               	goto	l1206
 11728  00E3E6  0EFF               	movlw	255
 11729  00E3E8  1A31               	xorwf	___ftadd@f2,f,c
 11730  00E3EA  0EFF               	movlw	255
 11731  00E3EC  1A32               	xorwf	___ftadd@f2+1,f,c
 11732  00E3EE  0EFF               	movlw	255
 11733  00E3F0  1A33               	xorwf	___ftadd@f2+2,f,c
 11734  00E3F2  0E01               	movlw	1
 11735  00E3F4  2631               	addwf	___ftadd@f2,f,c
 11736  00E3F6  0E00               	movlw	0
 11737  00E3F8  2232               	addwfc	___ftadd@f2+1,f,c
 11738  00E3FA  0E00               	movlw	0
 11739  00E3FC  2233               	addwfc	___ftadd@f2+2,f,c
 11740  00E3FE  0E01               	movlw	1
 11741  00E400  6E37               	movwf	___ftadd@sign,c
 11742  00E402                     l1206:
 11743  00E402  C031  F001         	movff	___ftadd@f2,___ftpack@arg
 11744  00E406  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 11745  00E40A  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 11746  00E40E  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
 11747  00E412  C037  F005         	movff	___ftadd@sign,___ftpack@sign
 11748  00E416  EC34  F06B         	call	___ftpack	;wreg free
 11749  00E41A  C001  F02E         	movff	?___ftpack,?___ftadd
 11750  00E41E  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
 11751  00E422  C003  F030         	movff	?___ftpack+2,?___ftadd+2
 11752  00E426  0012               	return	
 11753  00E428                     __end_of___ftadd:
 11754                           	opt stack 0
 11755                           tblptru	equ	0xFF8
 11756                           tblptrh	equ	0xFF7
 11757                           tblptrl	equ	0xFF6
 11758                           tablat	equ	0xFF5
 11759                           prodh	equ	0xFF4
 11760                           prodl	equ	0xFF3
 11761                           postinc0	equ	0xFEE
 11762                           wreg	equ	0xFE8
 11763                           plusw1	equ	0xFE3
 11764                           indf2	equ	0xFDF
 11765                           postinc2	equ	0xFDE
 11766                           postdec2	equ	0xFDD
 11767                           plusw2	equ	0xFDB
 11768                           fsr2h	equ	0xFDA
 11769                           fsr2l	equ	0xFD9
 11770                           status	equ	0xFD8
 11771                           
 11772 ;; *************** function ___ftpack *****************
 11773 ;; Defined at:
 11774 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\float.c"
 11775 ;; Parameters:    Size  Location     Type
 11776 ;;  arg             3    0[COMRAM] unsigned um
 11777 ;;  exp             1    3[COMRAM] unsigned char 
 11778 ;;  sign            1    4[COMRAM] unsigned char 
 11779 ;; Auto vars:     Size  Location     Type
 11780 ;;		None
 11781 ;; Return value:  Size  Location     Type
 11782 ;;                  3    0[COMRAM] float 
 11783 ;; Registers used:
 11784 ;;		wreg, status,2, status,0
 11785 ;; Tracked objects:
 11786 ;;		On entry : 0/0
 11787 ;;		On exit  : 0/0
 11788 ;;		Unchanged: 0/0
 11789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11790 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11792 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11793 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11794 ;;Total ram usage:        8 bytes
 11795 ;; Hardware stack levels used:    1
 11796 ;; This function calls:
 11797 ;;		Nothing
 11798 ;; This function is called by:
 11799 ;;		___ftadd
 11800 ;;		___ftdiv
 11801 ;;		___ftmul
 11802 ;;		___lltoft
 11803 ;;		___lwtoft
 11804 ;; This function uses a non-reentrant model
 11805 ;;
 11806                           
 11807                           	psect	text53
 11808  00D668                     __ptext53:
 11809                           	opt stack 0
 11810  00D668                     ___ftpack:
 11811                           	opt stack 26
 11812                           
 11813                           ;incstack = 0
 11814  00D668  5004               	movf	___ftpack@exp,w,c
 11815  00D66A  B4D8               	btfsc	status,2,c
 11816  00D66C  D005               	goto	u2960
 11817  00D66E  5001               	movf	___ftpack@arg,w,c
 11818  00D670  1002               	iorwf	___ftpack@arg+1,w,c
 11819  00D672  1003               	iorwf	___ftpack@arg+2,w,c
 11820  00D674  A4D8               	btfss	status,2,c
 11821  00D676  D00C               	goto	l1147
 11822  00D678                     u2960:
 11823  00D678  0E00               	movlw	0
 11824  00D67A  6E01               	movwf	?___ftpack,c
 11825  00D67C  0E00               	movlw	0
 11826  00D67E  6E02               	movwf	?___ftpack+1,c
 11827  00D680  0E00               	movlw	0
 11828  00D682  6E03               	movwf	?___ftpack+2,c
 11829  00D684  0012               	return	
 11830  00D686  2A04               	incf	___ftpack@exp,f,c
 11831  00D688  90D8               	bcf	status,0,c
 11832  00D68A  3203               	rrcf	___ftpack@arg+2,f,c
 11833  00D68C  3202               	rrcf	___ftpack@arg+1,f,c
 11834  00D68E  3201               	rrcf	___ftpack@arg,f,c
 11835  00D690                     l1147:
 11836  00D690  0E00               	movlw	0
 11837  00D692  1401               	andwf	___ftpack@arg,w,c
 11838  00D694  6E06               	movwf	??___ftpack& (0+255),c
 11839  00D696  0E00               	movlw	0
 11840  00D698  1402               	andwf	___ftpack@arg+1,w,c
 11841  00D69A  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11842  00D69C  0EFE               	movlw	254
 11843  00D69E  1403               	andwf	___ftpack@arg+2,w,c
 11844  00D6A0  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11845  00D6A2  5006               	movf	??___ftpack,w,c
 11846  00D6A4  1007               	iorwf	??___ftpack+1,w,c
 11847  00D6A6  1008               	iorwf	??___ftpack+2,w,c
 11848  00D6A8  B4D8               	btfsc	status,2,c
 11849  00D6AA  D00C               	goto	l1150
 11850  00D6AC  D7EC               	goto	l1148
 11851  00D6AE  2A04               	incf	___ftpack@exp,f,c
 11852  00D6B0  0E01               	movlw	1
 11853  00D6B2  2601               	addwf	___ftpack@arg,f,c
 11854  00D6B4  0E00               	movlw	0
 11855  00D6B6  2202               	addwfc	___ftpack@arg+1,f,c
 11856  00D6B8  0E00               	movlw	0
 11857  00D6BA  2203               	addwfc	___ftpack@arg+2,f,c
 11858  00D6BC  90D8               	bcf	status,0,c
 11859  00D6BE  3203               	rrcf	___ftpack@arg+2,f,c
 11860  00D6C0  3202               	rrcf	___ftpack@arg+1,f,c
 11861  00D6C2  3201               	rrcf	___ftpack@arg,f,c
 11862  00D6C4                     l1150:
 11863  00D6C4  0E00               	movlw	0
 11864  00D6C6  1401               	andwf	___ftpack@arg,w,c
 11865  00D6C8  6E06               	movwf	??___ftpack& (0+255),c
 11866  00D6CA  0E00               	movlw	0
 11867  00D6CC  1402               	andwf	___ftpack@arg+1,w,c
 11868  00D6CE  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11869  00D6D0  0EFF               	movlw	255
 11870  00D6D2  1403               	andwf	___ftpack@arg+2,w,c
 11871  00D6D4  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11872  00D6D6  5006               	movf	??___ftpack,w,c
 11873  00D6D8  1007               	iorwf	??___ftpack+1,w,c
 11874  00D6DA  1008               	iorwf	??___ftpack+2,w,c
 11875  00D6DC  B4D8               	btfsc	status,2,c
 11876  00D6DE  D006               	goto	l1153
 11877  00D6E0  D7E6               	goto	l1151
 11878  00D6E2  0604               	decf	___ftpack@exp,f,c
 11879  00D6E4  90D8               	bcf	status,0,c
 11880  00D6E6  3601               	rlcf	___ftpack@arg,f,c
 11881  00D6E8  3602               	rlcf	___ftpack@arg+1,f,c
 11882  00D6EA  3603               	rlcf	___ftpack@arg+2,f,c
 11883  00D6EC                     l1153:
 11884  00D6EC  BE02               	btfsc	___ftpack@arg+1,7,c
 11885  00D6EE  D003               	goto	u3000
 11886  00D6F0  0E02               	movlw	2
 11887  00D6F2  6004               	cpfslt	___ftpack@exp,c
 11888  00D6F4  D7F6               	goto	l1154
 11889  00D6F6                     u3000:
 11890  00D6F6  A004               	btfss	___ftpack@exp,0,c
 11891  00D6F8  9E02               	bcf	___ftpack@arg+1,7,c
 11892  00D6FA  90D8               	bcf	status,0,c
 11893  00D6FC  3204               	rrcf	___ftpack@exp,f,c
 11894  00D6FE  5004               	movf	___ftpack@exp,w,c
 11895  00D700  1203               	iorwf	___ftpack@arg+2,f,c
 11896  00D702  5005               	movf	___ftpack@sign,w,c
 11897  00D704  A4D8               	btfss	status,2,c
 11898  00D706  8E03               	bsf	___ftpack@arg+2,7,c
 11899  00D708  C001  F001         	movff	___ftpack@arg,?___ftpack
 11900  00D70C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 11901  00D710  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 11902  00D714  0012               	return	
 11903  00D716                     __end_of___ftpack:
 11904                           	opt stack 0
 11905                           tblptru	equ	0xFF8
 11906                           tblptrh	equ	0xFF7
 11907                           tblptrl	equ	0xFF6
 11908                           tablat	equ	0xFF5
 11909                           prodh	equ	0xFF4
 11910                           prodl	equ	0xFF3
 11911                           postinc0	equ	0xFEE
 11912                           wreg	equ	0xFE8
 11913                           plusw1	equ	0xFE3
 11914                           indf2	equ	0xFDF
 11915                           postinc2	equ	0xFDE
 11916                           postdec2	equ	0xFDD
 11917                           plusw2	equ	0xFDB
 11918                           fsr2h	equ	0xFDA
 11919                           fsr2l	equ	0xFD9
 11920                           status	equ	0xFD8
 11921                           
 11922 ;; *************** function ___ftneg *****************
 11923 ;; Defined at:
 11924 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftneg.c"
 11925 ;; Parameters:    Size  Location     Type
 11926 ;;  f1              3    0[COMRAM] float 
 11927 ;; Auto vars:     Size  Location     Type
 11928 ;;		None
 11929 ;; Return value:  Size  Location     Type
 11930 ;;                  3    0[COMRAM] float 
 11931 ;; Registers used:
 11932 ;;		wreg, status,2, status,0
 11933 ;; Tracked objects:
 11934 ;;		On entry : 0/0
 11935 ;;		On exit  : 0/0
 11936 ;;		Unchanged: 0/0
 11937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11938 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11941 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11942 ;;Total ram usage:        3 bytes
 11943 ;; Hardware stack levels used:    1
 11944 ;; This function calls:
 11945 ;;		Nothing
 11946 ;; This function is called by:
 11947 ;;		_printf
 11948 ;; This function uses a non-reentrant model
 11949 ;;
 11950                           
 11951                           	psect	text54
 11952  00CDAC                     __ptext54:
 11953                           	opt stack 0
 11954  00CDAC                     ___ftneg:
 11955                           	opt stack 28
 11956                           
 11957                           ;incstack = 0
 11958  00CDAC  5001               	movf	___ftneg@f1,w,c
 11959  00CDAE  1002               	iorwf	___ftneg@f1+1,w,c
 11960  00CDB0  1003               	iorwf	___ftneg@f1+2,w,c
 11961  00CDB2  B4D8               	btfsc	status,2,c
 11962  00CDB4  D006               	goto	l1254
 11963  00CDB6  0E00               	movlw	0
 11964  00CDB8  1A01               	xorwf	___ftneg@f1,f,c
 11965  00CDBA  0E00               	movlw	0
 11966  00CDBC  1A02               	xorwf	___ftneg@f1+1,f,c
 11967  00CDBE  0E80               	movlw	128
 11968  00CDC0  1A03               	xorwf	___ftneg@f1+2,f,c
 11969  00CDC2                     l1254:
 11970  00CDC2  C001  F001         	movff	___ftneg@f1,?___ftneg
 11971  00CDC6  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 11972  00CDCA  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 11973  00CDCE  0012               	return		;funcret
 11974  00CDD0                     __end_of___ftneg:
 11975                           	opt stack 0
 11976                           tblptru	equ	0xFF8
 11977                           tblptrh	equ	0xFF7
 11978                           tblptrl	equ	0xFF6
 11979                           tablat	equ	0xFF5
 11980                           prodh	equ	0xFF4
 11981                           prodl	equ	0xFF3
 11982                           postinc0	equ	0xFEE
 11983                           wreg	equ	0xFE8
 11984                           plusw1	equ	0xFE3
 11985                           indf2	equ	0xFDF
 11986                           postinc2	equ	0xFDE
 11987                           postdec2	equ	0xFDD
 11988                           plusw2	equ	0xFDB
 11989                           fsr2h	equ	0xFDA
 11990                           fsr2l	equ	0xFD9
 11991                           status	equ	0xFD8
 11992                           
 11993 ;; *************** function ___ftge *****************
 11994 ;; Defined at:
 11995 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftge.c"
 11996 ;; Parameters:    Size  Location     Type
 11997 ;;  ff1             3    0[COMRAM] float 
 11998 ;;  ff2             3    3[COMRAM] float 
 11999 ;; Auto vars:     Size  Location     Type
 12000 ;;		None
 12001 ;; Return value:  Size  Location     Type
 12002 ;;		None               void
 12003 ;; Registers used:
 12004 ;;		wreg, status,2, status,0
 12005 ;; Tracked objects:
 12006 ;;		On entry : 0/0
 12007 ;;		On exit  : 0/0
 12008 ;;		Unchanged: 0/0
 12009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12010 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12012 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12013 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12014 ;;Total ram usage:        9 bytes
 12015 ;; Hardware stack levels used:    1
 12016 ;; This function calls:
 12017 ;;		Nothing
 12018 ;; This function is called by:
 12019 ;;		_printf
 12020 ;; This function uses a non-reentrant model
 12021 ;;
 12022                           
 12023                           	psect	text55
 12024  00D5D8                     __ptext55:
 12025                           	opt stack 0
 12026  00D5D8                     ___ftge:
 12027                           	opt stack 28
 12028                           
 12029                           ;incstack = 0
 12030  00D5D8  AE03               	btfss	___ftge@ff1+2,7,c
 12031  00D5DA  D016               	goto	l1236
 12032  00D5DC  C001  F007         	movff	___ftge@ff1,??___ftge
 12033  00D5E0  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 12034  00D5E4  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 12035  00D5E8  1E07               	comf	??___ftge,f,c
 12036  00D5EA  1E08               	comf	??___ftge+1,f,c
 12037  00D5EC  1E09               	comf	??___ftge+2,f,c
 12038  00D5EE  2A07               	incf	??___ftge,f,c
 12039  00D5F0  0E00               	movlw	0
 12040  00D5F2  2208               	addwfc	??___ftge+1,f,c
 12041  00D5F4  2209               	addwfc	??___ftge+2,f,c
 12042  00D5F6  0E00               	movlw	0
 12043  00D5F8  2407               	addwf	??___ftge,w,c
 12044  00D5FA  6E01               	movwf	___ftge@ff1,c
 12045  00D5FC  0E00               	movlw	0
 12046  00D5FE  2008               	addwfc	??___ftge+1,w,c
 12047  00D600  6E02               	movwf	___ftge@ff1+1,c
 12048  00D602  0E80               	movlw	128
 12049  00D604  2009               	addwfc	??___ftge+2,w,c
 12050  00D606  6E03               	movwf	___ftge@ff1+2,c
 12051  00D608                     l1236:
 12052  00D608  AE06               	btfss	___ftge@ff2+2,7,c
 12053  00D60A  D016               	goto	l1237
 12054  00D60C  C004  F007         	movff	___ftge@ff2,??___ftge
 12055  00D610  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 12056  00D614  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 12057  00D618  1E07               	comf	??___ftge,f,c
 12058  00D61A  1E08               	comf	??___ftge+1,f,c
 12059  00D61C  1E09               	comf	??___ftge+2,f,c
 12060  00D61E  2A07               	incf	??___ftge,f,c
 12061  00D620  0E00               	movlw	0
 12062  00D622  2208               	addwfc	??___ftge+1,f,c
 12063  00D624  2209               	addwfc	??___ftge+2,f,c
 12064  00D626  0E00               	movlw	0
 12065  00D628  2407               	addwf	??___ftge,w,c
 12066  00D62A  6E04               	movwf	___ftge@ff2,c
 12067  00D62C  0E00               	movlw	0
 12068  00D62E  2008               	addwfc	??___ftge+1,w,c
 12069  00D630  6E05               	movwf	___ftge@ff2+1,c
 12070  00D632  0E80               	movlw	128
 12071  00D634  2009               	addwfc	??___ftge+2,w,c
 12072  00D636  6E06               	movwf	___ftge@ff2+2,c
 12073  00D638                     l1237:
 12074  00D638  0E00               	movlw	0
 12075  00D63A  1A01               	xorwf	___ftge@ff1,f,c
 12076  00D63C  0E00               	movlw	0
 12077  00D63E  1A02               	xorwf	___ftge@ff1+1,f,c
 12078  00D640  0E80               	movlw	128
 12079  00D642  1A03               	xorwf	___ftge@ff1+2,f,c
 12080  00D644  0E00               	movlw	0
 12081  00D646  1A04               	xorwf	___ftge@ff2,f,c
 12082  00D648  0E00               	movlw	0
 12083  00D64A  1A05               	xorwf	___ftge@ff2+1,f,c
 12084  00D64C  0E80               	movlw	128
 12085  00D64E  1A06               	xorwf	___ftge@ff2+2,f,c
 12086  00D650  5004               	movf	___ftge@ff2,w,c
 12087  00D652  5C01               	subwf	___ftge@ff1,w,c
 12088  00D654  5005               	movf	___ftge@ff2+1,w,c
 12089  00D656  5802               	subwfb	___ftge@ff1+1,w,c
 12090  00D658  5006               	movf	___ftge@ff2+2,w,c
 12091  00D65A  5803               	subwfb	___ftge@ff1+2,w,c
 12092  00D65C  B0D8               	btfsc	status,0,c
 12093  00D65E  D002               	goto	l3656
 12094  00D660  90D8               	bcf	status,0,c
 12095  00D662  0012               	return	
 12096  00D664                     l3656:
 12097  00D664  80D8               	bsf	status,0,c
 12098  00D666  0012               	return	
 12099  00D668                     __end_of___ftge:
 12100                           	opt stack 0
 12101                           tblptru	equ	0xFF8
 12102                           tblptrh	equ	0xFF7
 12103                           tblptrl	equ	0xFF6
 12104                           tablat	equ	0xFF5
 12105                           prodh	equ	0xFF4
 12106                           prodl	equ	0xFF3
 12107                           postinc0	equ	0xFEE
 12108                           wreg	equ	0xFE8
 12109                           plusw1	equ	0xFE3
 12110                           indf2	equ	0xFDF
 12111                           postinc2	equ	0xFDE
 12112                           postdec2	equ	0xFDD
 12113                           plusw2	equ	0xFDB
 12114                           fsr2h	equ	0xFDA
 12115                           fsr2l	equ	0xFD9
 12116                           status	equ	0xFD8
 12117                           
 12118 ;; *************** function _initLCD *****************
 12119 ;; Defined at:
 12120 ;;		line 69 in file "lcd.c"
 12121 ;; Parameters:    Size  Location     Type
 12122 ;;		None
 12123 ;; Auto vars:     Size  Location     Type
 12124 ;;		None
 12125 ;; Return value:  Size  Location     Type
 12126 ;;                  1    wreg      void 
 12127 ;; Registers used:
 12128 ;;		wreg, status,2, status,0, cstack
 12129 ;; Tracked objects:
 12130 ;;		On entry : 0/0
 12131 ;;		On exit  : 0/0
 12132 ;;		Unchanged: 0/0
 12133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12136 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12137 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12138 ;;Total ram usage:        1 bytes
 12139 ;; Hardware stack levels used:    1
 12140 ;; Hardware stack levels required when called:    4
 12141 ;; This function calls:
 12142 ;;		_lcdInst
 12143 ;;		_send_byte
 12144 ;;		_send_nibble
 12145 ;; This function is called by:
 12146 ;;		_main
 12147 ;; This function uses a non-reentrant model
 12148 ;;
 12149                           
 12150                           	psect	text56
 12151  00D21C                     __ptext56:
 12152                           	opt stack 0
 12153  00D21C                     _initLCD:
 12154                           	opt stack 26
 12155                           
 12156                           ;lcd.c: 70: _delay((unsigned long)((15)*(10000000/4000.0)));
 12157                           
 12158                           ;incstack = 0
 12159  00D21C  0E31               	movlw	49
 12160  00D21E  6E05               	movwf	??_initLCD& (0+255),c
 12161  00D220  0EB2               	movlw	178
 12162  00D222                     u5797:
 12163  00D222  2EE8               	decfsz	wreg,f,c
 12164  00D224  D7FE               	bra	u5797
 12165  00D226  2E05               	decfsz	??_initLCD& (0+255),f,c
 12166  00D228  D7FC               	bra	u5797
 12167  00D22A  D000               	nop2	
 12168                           
 12169                           ;lcd.c: 72: LATDbits.LATD2 = 0;
 12170  00D22C  948C               	bcf	3980,2,c	;volatile
 12171                           
 12172                           ;lcd.c: 74: send_nibble(0b0011);
 12173  00D22E  0E03               	movlw	3
 12174  00D230  EC69  F066         	call	_send_nibble
 12175                           
 12176                           ;lcd.c: 75: _delay((unsigned long)((5)*(10000000/4000.0)));
 12177  00D234  0E11               	movlw	17
 12178  00D236  6E05               	movwf	??_initLCD& (0+255),c
 12179  00D238  0E3A               	movlw	58
 12180  00D23A                     u5807:
 12181  00D23A  2EE8               	decfsz	wreg,f,c
 12182  00D23C  D7FE               	bra	u5807
 12183  00D23E  2E05               	decfsz	??_initLCD& (0+255),f,c
 12184  00D240  D7FC               	bra	u5807
 12185  00D242  D000               	nop2	
 12186                           
 12187                           ;lcd.c: 76: send_nibble(0b0011);
 12188  00D244  0E03               	movlw	3
 12189  00D246  EC69  F066         	call	_send_nibble
 12190                           
 12191                           ;lcd.c: 77: _delay((unsigned long)((150)*(10000000/4000000.0)));
 12192  00D24A  0E7D               	movlw	125
 12193  00D24C                     u5817:
 12194  00D24C  2EE8               	decfsz	wreg,f,c
 12195  00D24E  D7FE               	bra	u5817
 12196                           
 12197                           ;lcd.c: 78: send_byte(0b00110010);
 12198  00D250  0E32               	movlw	50
 12199  00D252  EC4D  F066         	call	_send_byte
 12200                           
 12201                           ;lcd.c: 80: send_byte(0b00101000);
 12202  00D256  0E28               	movlw	40
 12203  00D258  EC4D  F066         	call	_send_byte
 12204                           
 12205                           ;lcd.c: 81: send_byte(0b00001000);
 12206  00D25C  0E08               	movlw	8
 12207  00D25E  EC4D  F066         	call	_send_byte
 12208                           
 12209                           ;lcd.c: 82: send_byte(0b00000001);
 12210  00D262  0E01               	movlw	1
 12211  00D264  EC4D  F066         	call	_send_byte
 12212                           
 12213                           ;lcd.c: 83: _delay((unsigned long)((5)*(10000000/4000.0)));
 12214  00D268  0E11               	movlw	17
 12215  00D26A  6E05               	movwf	??_initLCD& (0+255),c
 12216  00D26C  0E3A               	movlw	58
 12217  00D26E                     u5827:
 12218  00D26E  2EE8               	decfsz	wreg,f,c
 12219  00D270  D7FE               	bra	u5827
 12220  00D272  2E05               	decfsz	??_initLCD& (0+255),f,c
 12221  00D274  D7FC               	bra	u5827
 12222  00D276  D000               	nop2	
 12223                           
 12224                           ;lcd.c: 84: send_byte(0b00000110);
 12225  00D278  0E06               	movlw	6
 12226  00D27A  EC4D  F066         	call	_send_byte
 12227                           
 12228                           ;lcd.c: 87: { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
 12229  00D27E  0E0F               	movlw	15
 12230  00D280  EC41  F066         	call	_lcdInst
 12231  00D284  0012               	return		;funcret
 12232  00D286                     __end_of_initLCD:
 12233                           	opt stack 0
 12234                           tblptru	equ	0xFF8
 12235                           tblptrh	equ	0xFF7
 12236                           tblptrl	equ	0xFF6
 12237                           tablat	equ	0xFF5
 12238                           prodh	equ	0xFF4
 12239                           prodl	equ	0xFF3
 12240                           postinc0	equ	0xFEE
 12241                           wreg	equ	0xFE8
 12242                           plusw1	equ	0xFE3
 12243                           indf2	equ	0xFDF
 12244                           postinc2	equ	0xFDE
 12245                           postdec2	equ	0xFDD
 12246                           plusw2	equ	0xFDB
 12247                           fsr2h	equ	0xFDA
 12248                           fsr2l	equ	0xFD9
 12249                           status	equ	0xFD8
 12250                           
 12251 ;; *************** function _lcdInst *****************
 12252 ;; Defined at:
 12253 ;;		line 64 in file "lcd.c"
 12254 ;; Parameters:    Size  Location     Type
 12255 ;;  data            1    wreg     unsigned char 
 12256 ;; Auto vars:     Size  Location     Type
 12257 ;;  data            1    3[COMRAM] unsigned char 
 12258 ;; Return value:  Size  Location     Type
 12259 ;;                  1    wreg      void 
 12260 ;; Registers used:
 12261 ;;		wreg, status,2, status,0, cstack
 12262 ;; Tracked objects:
 12263 ;;		On entry : 0/0
 12264 ;;		On exit  : 0/0
 12265 ;;		Unchanged: 0/0
 12266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12270 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12271 ;;Total ram usage:        1 bytes
 12272 ;; Hardware stack levels used:    1
 12273 ;; Hardware stack levels required when called:    3
 12274 ;; This function calls:
 12275 ;;		_send_byte
 12276 ;; This function is called by:
 12277 ;;		_main
 12278 ;;		_testRTCGet
 12279 ;;		_testSDCard
 12280 ;;		_testA2D
 12281 ;;		_initLCD
 12282 ;;		_lcd_shift_cursor
 12283 ;;		_lcd_shift_display
 12284 ;; This function uses a non-reentrant model
 12285 ;;
 12286                           
 12287                           	psect	text57
 12288  00CC82                     __ptext57:
 12289                           	opt stack 0
 12290  00CC82                     _lcdInst:
 12291                           	opt stack 26
 12292                           
 12293                           ;incstack = 0
 12294                           ;lcdInst@data stored from wreg
 12295  00CC82  6E04               	movwf	lcdInst@data,c
 12296                           
 12297                           ;lcd.c: 65: LATDbits.LATD2 = 0;
 12298  00CC84  948C               	bcf	3980,2,c	;volatile
 12299                           
 12300                           ;lcd.c: 66: send_byte(data);
 12301  00CC86  5004               	movf	lcdInst@data,w,c
 12302  00CC88  EC4D  F066         	call	_send_byte
 12303  00CC8C  0012               	return		;funcret
 12304  00CC8E                     __end_of_lcdInst:
 12305                           	opt stack 0
 12306                           tblptru	equ	0xFF8
 12307                           tblptrh	equ	0xFF7
 12308                           tblptrl	equ	0xFF6
 12309                           tablat	equ	0xFF5
 12310                           prodh	equ	0xFF4
 12311                           prodl	equ	0xFF3
 12312                           postinc0	equ	0xFEE
 12313                           wreg	equ	0xFE8
 12314                           plusw1	equ	0xFE3
 12315                           indf2	equ	0xFDF
 12316                           postinc2	equ	0xFDE
 12317                           postdec2	equ	0xFDD
 12318                           plusw2	equ	0xFDB
 12319                           fsr2h	equ	0xFDA
 12320                           fsr2l	equ	0xFD9
 12321                           status	equ	0xFD8
 12322                           
 12323 ;; *************** function _send_byte *****************
 12324 ;; Defined at:
 12325 ;;		line 55 in file "lcd.c"
 12326 ;; Parameters:    Size  Location     Type
 12327 ;;  data            1    wreg     unsigned char 
 12328 ;; Auto vars:     Size  Location     Type
 12329 ;;  data            1    2[COMRAM] unsigned char 
 12330 ;; Return value:  Size  Location     Type
 12331 ;;                  1    wreg      void 
 12332 ;; Registers used:
 12333 ;;		wreg, status,2, status,0, cstack
 12334 ;; Tracked objects:
 12335 ;;		On entry : 0/0
 12336 ;;		On exit  : 0/0
 12337 ;;		Unchanged: 0/0
 12338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12340 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12342 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12343 ;;Total ram usage:        1 bytes
 12344 ;; Hardware stack levels used:    1
 12345 ;; Hardware stack levels required when called:    2
 12346 ;; This function calls:
 12347 ;;		_send_nibble
 12348 ;; This function is called by:
 12349 ;;		_lcdInst
 12350 ;;		_initLCD
 12351 ;;		_putch
 12352 ;; This function uses a non-reentrant model
 12353 ;;
 12354                           
 12355                           	psect	text58
 12356  00CC9A                     __ptext58:
 12357                           	opt stack 0
 12358  00CC9A                     _send_byte:
 12359                           	opt stack 25
 12360                           
 12361                           ;incstack = 0
 12362                           ;send_byte@data stored from wreg
 12363  00CC9A  6E03               	movwf	send_byte@data,c
 12364                           
 12365                           ;lcd.c: 57: send_nibble(data >> 4);
 12366  00CC9C  3803               	swapf	send_byte@data,w,c
 12367  00CC9E  0B0F               	andlw	15
 12368  00CCA0  EC69  F066         	call	_send_nibble
 12369                           
 12370                           ;lcd.c: 60: send_nibble(data);
 12371  00CCA4  5003               	movf	send_byte@data,w,c
 12372  00CCA6  EC69  F066         	call	_send_nibble
 12373  00CCAA  0012               	return		;funcret
 12374  00CCAC                     __end_of_send_byte:
 12375                           	opt stack 0
 12376                           tblptru	equ	0xFF8
 12377                           tblptrh	equ	0xFF7
 12378                           tblptrl	equ	0xFF6
 12379                           tablat	equ	0xFF5
 12380                           prodh	equ	0xFF4
 12381                           prodl	equ	0xFF3
 12382                           postinc0	equ	0xFEE
 12383                           wreg	equ	0xFE8
 12384                           plusw1	equ	0xFE3
 12385                           indf2	equ	0xFDF
 12386                           postinc2	equ	0xFDE
 12387                           postdec2	equ	0xFDD
 12388                           plusw2	equ	0xFDB
 12389                           fsr2h	equ	0xFDA
 12390                           fsr2l	equ	0xFD9
 12391                           status	equ	0xFD8
 12392                           
 12393 ;; *************** function _send_nibble *****************
 12394 ;; Defined at:
 12395 ;;		line 44 in file "lcd.c"
 12396 ;; Parameters:    Size  Location     Type
 12397 ;;  data            1    wreg     unsigned char 
 12398 ;; Auto vars:     Size  Location     Type
 12399 ;;  data            1    1[COMRAM] unsigned char 
 12400 ;; Return value:  Size  Location     Type
 12401 ;;                  1    wreg      void 
 12402 ;; Registers used:
 12403 ;;		wreg, status,2, status,0, cstack
 12404 ;; Tracked objects:
 12405 ;;		On entry : 0/0
 12406 ;;		On exit  : 0/0
 12407 ;;		Unchanged: 0/0
 12408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12410 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12412 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12413 ;;Total ram usage:        1 bytes
 12414 ;; Hardware stack levels used:    1
 12415 ;; Hardware stack levels required when called:    1
 12416 ;; This function calls:
 12417 ;;		_pulse_e
 12418 ;; This function is called by:
 12419 ;;		_send_byte
 12420 ;;		_initLCD
 12421 ;; This function uses a non-reentrant model
 12422 ;;
 12423                           
 12424                           	psect	text59
 12425  00CCD2                     __ptext59:
 12426                           	opt stack 0
 12427  00CCD2                     _send_nibble:
 12428                           	opt stack 25
 12429                           
 12430                           ;incstack = 0
 12431                           ;send_nibble@data stored from wreg
 12432  00CCD2  6E02               	movwf	send_nibble@data,c
 12433                           
 12434                           ;lcd.c: 46: LATD = (unsigned char)(LATD & 0x0F);
 12435  00CCD4  508C               	movf	3980,w,c	;volatile
 12436  00CCD6  0B0F               	andlw	15
 12437  00CCD8  6E8C               	movwf	3980,c	;volatile
 12438                           
 12439                           ;lcd.c: 47: LATD = (unsigned char)((data << 4) | LATD);
 12440  00CCDA  3802               	swapf	send_nibble@data,w,c
 12441  00CCDC  0BF0               	andlw	240
 12442  00CCDE  108C               	iorwf	3980,w,c	;volatile
 12443  00CCE0  6E8C               	movwf	3980,c	;volatile
 12444                           
 12445                           ;lcd.c: 48: pulse_e();
 12446  00CCE2  EC45  F067         	call	_pulse_e	;wreg free
 12447  00CCE6  0012               	return		;funcret
 12448  00CCE8                     __end_of_send_nibble:
 12449                           	opt stack 0
 12450                           tblptru	equ	0xFF8
 12451                           tblptrh	equ	0xFF7
 12452                           tblptrl	equ	0xFF6
 12453                           tablat	equ	0xFF5
 12454                           prodh	equ	0xFF4
 12455                           prodl	equ	0xFF3
 12456                           postinc0	equ	0xFEE
 12457                           wreg	equ	0xFE8
 12458                           plusw1	equ	0xFE3
 12459                           indf2	equ	0xFDF
 12460                           postinc2	equ	0xFDE
 12461                           postdec2	equ	0xFDD
 12462                           plusw2	equ	0xFDB
 12463                           fsr2h	equ	0xFDA
 12464                           fsr2l	equ	0xFD9
 12465                           status	equ	0xFD8
 12466                           
 12467 ;; *************** function _pulse_e *****************
 12468 ;; Defined at:
 12469 ;;		line 28 in file "lcd.c"
 12470 ;; Parameters:    Size  Location     Type
 12471 ;;		None
 12472 ;; Auto vars:     Size  Location     Type
 12473 ;;  interruptSta    1    0[COMRAM] unsigned char 
 12474 ;; Return value:  Size  Location     Type
 12475 ;;                  1    wreg      void 
 12476 ;; Registers used:
 12477 ;;		wreg
 12478 ;; Tracked objects:
 12479 ;;		On entry : 0/0
 12480 ;;		On exit  : 0/0
 12481 ;;		Unchanged: 0/0
 12482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12484 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12486 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12487 ;;Total ram usage:        1 bytes
 12488 ;; Hardware stack levels used:    1
 12489 ;; This function calls:
 12490 ;;		Nothing
 12491 ;; This function is called by:
 12492 ;;		_send_nibble
 12493 ;; This function uses a non-reentrant model
 12494 ;;
 12495                           
 12496                           	psect	text60
 12497  00CE8A                     __ptext60:
 12498                           	opt stack 0
 12499  00CE8A                     _pulse_e:
 12500                           	opt stack 25
 12501                           
 12502                           ;lcd.c: 29: unsigned char interruptState = INTCONbits.GIE;
 12503                           
 12504                           ;incstack = 0
 12505  00CE8A  0E00               	movlw	0
 12506  00CE8C  BEF2               	btfsc	intcon,7,c	;volatile
 12507  00CE8E  0E01               	movlw	1
 12508  00CE90  6E01               	movwf	pulse_e@interruptState,c
 12509                           
 12510                           ;lcd.c: 30: (INTCONbits.GIE = 0);
 12511  00CE92  9EF2               	bcf	intcon,7,c	;volatile
 12512                           
 12513                           ;lcd.c: 31: LATDbits.LATD3 = 1;
 12514  00CE94  868C               	bsf	3980,3,c	;volatile
 12515                           
 12516                           ;lcd.c: 34: _delay((unsigned long)((25)*(10000000/4000000.0)));
 12517  00CE96  0E14               	movlw	20
 12518  00CE98                     u5837:
 12519  00CE98  2EE8               	decfsz	wreg,f,c
 12520  00CE9A  D7FE               	bra	u5837
 12521  00CE9C  D000               	nop2	
 12522                           
 12523                           ;lcd.c: 35: LATDbits.LATD3 = 0;
 12524  00CE9E  968C               	bcf	3980,3,c	;volatile
 12525                           
 12526                           ;lcd.c: 36: _delay((unsigned long)((100)*(10000000/4000000.0)));
 12527  00CEA0  0E53               	movlw	83
 12528  00CEA2                     u5847:
 12529  00CEA2  2EE8               	decfsz	wreg,f,c
 12530  00CEA4  D7FE               	bra	u5847
 12531  00CEA6  F000               	nop	
 12532                           
 12533                           ;lcd.c: 37: INTCONbits.GIE = interruptState;
 12534  00CEA8  B001               	btfsc	pulse_e@interruptState,0,c
 12535  00CEAA  D002               	bra	u2925
 12536  00CEAC  9EF2               	bcf	intcon,7,c	;volatile
 12537  00CEAE  D001               	bra	u2926
 12538  00CEB0                     u2925:
 12539  00CEB0  8EF2               	bsf	intcon,7,c	;volatile
 12540  00CEB2                     u2926:
 12541  00CEB2  0012               	return		;funcret
 12542  00CEB4                     __end_of_pulse_e:
 12543                           	opt stack 0
 12544                           tblptru	equ	0xFF8
 12545                           tblptrh	equ	0xFF7
 12546                           tblptrl	equ	0xFF6
 12547                           tablat	equ	0xFF5
 12548                           prodh	equ	0xFF4
 12549                           prodl	equ	0xFF3
 12550                           intcon	equ	0xFF2
 12551                           postinc0	equ	0xFEE
 12552                           wreg	equ	0xFE8
 12553                           plusw1	equ	0xFE3
 12554                           indf2	equ	0xFDF
 12555                           postinc2	equ	0xFDE
 12556                           postdec2	equ	0xFDD
 12557                           plusw2	equ	0xFDB
 12558                           fsr2h	equ	0xFDA
 12559                           fsr2l	equ	0xFD9
 12560                           status	equ	0xFD8
 12561                           
 12562 ;; *************** function _getKey *****************
 12563 ;; Defined at:
 12564 ;;		line 52 in file "main.c"
 12565 ;; Parameters:    Size  Location     Type
 12566 ;;		None
 12567 ;; Auto vars:     Size  Location     Type
 12568 ;;  key             1    0[COMRAM] unsigned char 
 12569 ;; Return value:  Size  Location     Type
 12570 ;;                  1    wreg      unsigned char 
 12571 ;; Registers used:
 12572 ;;		wreg, status,2, status,0
 12573 ;; Tracked objects:
 12574 ;;		On entry : 0/0
 12575 ;;		On exit  : 0/0
 12576 ;;		Unchanged: 0/0
 12577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12579 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12581 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12582 ;;Total ram usage:        1 bytes
 12583 ;; Hardware stack levels used:    1
 12584 ;; This function calls:
 12585 ;;		Nothing
 12586 ;; This function is called by:
 12587 ;;		_main
 12588 ;; This function uses a non-reentrant model
 12589 ;;
 12590                           
 12591                           	psect	text61
 12592  00CCBE                     __ptext61:
 12593                           	opt stack 0
 12594  00CCBE                     _getKey:
 12595                           	opt stack 30
 12596                           
 12597                           ;main.c: 55: continue;
 12598                           
 12599                           ;main.c: 54: while(PORTBbits.RB1 == 0){
 12600                           
 12601                           ;incstack = 0
 12602  00CCBE  A281               	btfss	3969,1,c	;volatile
 12603  00CCC0  D7FE               	goto	_getKey
 12604                           
 12605                           ;main.c: 56: }
 12606                           ;main.c: 58: unsigned char key = (PORTB & 0xF0) >> 4;
 12607  00CCC2  3881               	swapf	3969,w,c	;volatile
 12608  00CCC4  0B0F               	andlw	15
 12609  00CCC6  0B0F               	andlw	15
 12610  00CCC8  6E01               	movwf	getKey@key,c
 12611  00CCCA                     
 12612                           ;main.c: 62: continue;
 12613  00CCCA  B281               	btfsc	3969,1,c	;volatile
 12614  00CCCC  D7FE               	goto	l115
 12615                           
 12616                           ;main.c: 63: }
 12617                           ;main.c: 65: return key;
 12618  00CCCE  5001               	movf	getKey@key,w,c
 12619  00CCD0  0012               	return	
 12620  00CCD2                     __end_of_getKey:
 12621                           	opt stack 0
 12622                           tblptru	equ	0xFF8
 12623                           tblptrh	equ	0xFF7
 12624                           tblptrl	equ	0xFF6
 12625                           tablat	equ	0xFF5
 12626                           prodh	equ	0xFF4
 12627                           prodl	equ	0xFF3
 12628                           intcon	equ	0xFF2
 12629                           postinc0	equ	0xFEE
 12630                           wreg	equ	0xFE8
 12631                           plusw1	equ	0xFE3
 12632                           indf2	equ	0xFDF
 12633                           postinc2	equ	0xFDE
 12634                           postdec2	equ	0xFDD
 12635                           plusw2	equ	0xFDB
 12636                           fsr2h	equ	0xFDA
 12637                           fsr2l	equ	0xFD9
 12638                           status	equ	0xFD8
 12639                           
 12640 ;; *************** function ___aldiv *****************
 12641 ;; Defined at:
 12642 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\aldiv.c"
 12643 ;; Parameters:    Size  Location     Type
 12644 ;;  dividend        4    0[COMRAM] long 
 12645 ;;  divisor         4    4[COMRAM] long 
 12646 ;; Auto vars:     Size  Location     Type
 12647 ;;  quotient        4   10[COMRAM] long 
 12648 ;;  sign            1    9[COMRAM] unsigned char 
 12649 ;;  counter         1    8[COMRAM] unsigned char 
 12650 ;; Return value:  Size  Location     Type
 12651 ;;                  4    0[COMRAM] long 
 12652 ;; Registers used:
 12653 ;;		wreg, status,2, status,0
 12654 ;; Tracked objects:
 12655 ;;		On entry : 0/0
 12656 ;;		On exit  : 0/0
 12657 ;;		Unchanged: 0/0
 12658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12659 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12660 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12662 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12663 ;;Total ram usage:       14 bytes
 12664 ;; Hardware stack levels used:    1
 12665 ;; This function calls:
 12666 ;;		Nothing
 12667 ;; This function is called by:
 12668 ;;		_main
 12669 ;; This function uses a non-reentrant model
 12670 ;;
 12671                           
 12672                           	psect	text62
 12673  00D716                     __ptext62:
 12674                           	opt stack 0
 12675  00D716                     ___aldiv:
 12676                           	opt stack 30
 12677                           
 12678                           ;incstack = 0
 12679  00D716  0E00               	movlw	0
 12680  00D718  6E0A               	movwf	___aldiv@sign,c
 12681  00D71A  AE08               	btfss	___aldiv@divisor+3,7,c
 12682  00D71C  D00A               	goto	l971
 12683  00D71E  1E08               	comf	___aldiv@divisor+3,f,c
 12684  00D720  1E07               	comf	___aldiv@divisor+2,f,c
 12685  00D722  1E06               	comf	___aldiv@divisor+1,f,c
 12686  00D724  6C05               	negf	___aldiv@divisor,c
 12687  00D726  0E00               	movlw	0
 12688  00D728  2206               	addwfc	___aldiv@divisor+1,f,c
 12689  00D72A  2207               	addwfc	___aldiv@divisor+2,f,c
 12690  00D72C  2208               	addwfc	___aldiv@divisor+3,f,c
 12691  00D72E  0E01               	movlw	1
 12692  00D730  6E0A               	movwf	___aldiv@sign,c
 12693  00D732                     l971:
 12694  00D732  AE04               	btfss	___aldiv@dividend+3,7,c
 12695  00D734  D00A               	goto	l972
 12696  00D736  1E04               	comf	___aldiv@dividend+3,f,c
 12697  00D738  1E03               	comf	___aldiv@dividend+2,f,c
 12698  00D73A  1E02               	comf	___aldiv@dividend+1,f,c
 12699  00D73C  6C01               	negf	___aldiv@dividend,c
 12700  00D73E  0E00               	movlw	0
 12701  00D740  2202               	addwfc	___aldiv@dividend+1,f,c
 12702  00D742  2203               	addwfc	___aldiv@dividend+2,f,c
 12703  00D744  2204               	addwfc	___aldiv@dividend+3,f,c
 12704  00D746  0E01               	movlw	1
 12705  00D748  1A0A               	xorwf	___aldiv@sign,f,c
 12706  00D74A                     l972:
 12707  00D74A  0E00               	movlw	0
 12708  00D74C  6E0B               	movwf	___aldiv@quotient,c
 12709  00D74E  0E00               	movlw	0
 12710  00D750  6E0C               	movwf	___aldiv@quotient+1,c
 12711  00D752  0E00               	movlw	0
 12712  00D754  6E0D               	movwf	___aldiv@quotient+2,c
 12713  00D756  0E00               	movlw	0
 12714  00D758  6E0E               	movwf	___aldiv@quotient+3,c
 12715  00D75A  5005               	movf	___aldiv@divisor,w,c
 12716  00D75C  1006               	iorwf	___aldiv@divisor+1,w,c
 12717  00D75E  1007               	iorwf	___aldiv@divisor+2,w,c
 12718  00D760  1008               	iorwf	___aldiv@divisor+3,w,c
 12719  00D762  B4D8               	btfsc	status,2,c
 12720  00D764  D02A               	goto	l979
 12721  00D766  0E01               	movlw	1
 12722  00D768  6E09               	movwf	___aldiv@counter,c
 12723  00D76A  D006               	goto	l974
 12724  00D76C  90D8               	bcf	status,0,c
 12725  00D76E  3605               	rlcf	___aldiv@divisor,f,c
 12726  00D770  3606               	rlcf	___aldiv@divisor+1,f,c
 12727  00D772  3607               	rlcf	___aldiv@divisor+2,f,c
 12728  00D774  3608               	rlcf	___aldiv@divisor+3,f,c
 12729  00D776  2A09               	incf	___aldiv@counter,f,c
 12730  00D778                     l974:
 12731  00D778  AE08               	btfss	___aldiv@divisor+3,7,c
 12732  00D77A  D7F8               	goto	l975
 12733  00D77C                     u5130:
 12734  00D77C  90D8               	bcf	status,0,c
 12735  00D77E  360B               	rlcf	___aldiv@quotient,f,c
 12736  00D780  360C               	rlcf	___aldiv@quotient+1,f,c
 12737  00D782  360D               	rlcf	___aldiv@quotient+2,f,c
 12738  00D784  360E               	rlcf	___aldiv@quotient+3,f,c
 12739  00D786  5005               	movf	___aldiv@divisor,w,c
 12740  00D788  5C01               	subwf	___aldiv@dividend,w,c
 12741  00D78A  5006               	movf	___aldiv@divisor+1,w,c
 12742  00D78C  5802               	subwfb	___aldiv@dividend+1,w,c
 12743  00D78E  5007               	movf	___aldiv@divisor+2,w,c
 12744  00D790  5803               	subwfb	___aldiv@dividend+2,w,c
 12745  00D792  5008               	movf	___aldiv@divisor+3,w,c
 12746  00D794  5804               	subwfb	___aldiv@dividend+3,w,c
 12747  00D796  A0D8               	btfss	status,0,c
 12748  00D798  D009               	goto	l978
 12749  00D79A  5005               	movf	___aldiv@divisor,w,c
 12750  00D79C  5E01               	subwf	___aldiv@dividend,f,c
 12751  00D79E  5006               	movf	___aldiv@divisor+1,w,c
 12752  00D7A0  5A02               	subwfb	___aldiv@dividend+1,f,c
 12753  00D7A2  5007               	movf	___aldiv@divisor+2,w,c
 12754  00D7A4  5A03               	subwfb	___aldiv@dividend+2,f,c
 12755  00D7A6  5008               	movf	___aldiv@divisor+3,w,c
 12756  00D7A8  5A04               	subwfb	___aldiv@dividend+3,f,c
 12757  00D7AA  800B               	bsf	___aldiv@quotient,0,c
 12758  00D7AC                     l978:
 12759  00D7AC  90D8               	bcf	status,0,c
 12760  00D7AE  3208               	rrcf	___aldiv@divisor+3,f,c
 12761  00D7B0  3207               	rrcf	___aldiv@divisor+2,f,c
 12762  00D7B2  3206               	rrcf	___aldiv@divisor+1,f,c
 12763  00D7B4  3205               	rrcf	___aldiv@divisor,f,c
 12764  00D7B6  2E09               	decfsz	___aldiv@counter,f,c
 12765  00D7B8  D7E1               	goto	u5130
 12766  00D7BA                     l979:
 12767  00D7BA  500A               	movf	___aldiv@sign,w,c
 12768  00D7BC  B4D8               	btfsc	status,2,c
 12769  00D7BE  D008               	goto	l980
 12770  00D7C0  1E0E               	comf	___aldiv@quotient+3,f,c
 12771  00D7C2  1E0D               	comf	___aldiv@quotient+2,f,c
 12772  00D7C4  1E0C               	comf	___aldiv@quotient+1,f,c
 12773  00D7C6  6C0B               	negf	___aldiv@quotient,c
 12774  00D7C8  0E00               	movlw	0
 12775  00D7CA  220C               	addwfc	___aldiv@quotient+1,f,c
 12776  00D7CC  220D               	addwfc	___aldiv@quotient+2,f,c
 12777  00D7CE  220E               	addwfc	___aldiv@quotient+3,f,c
 12778  00D7D0                     l980:
 12779  00D7D0  C00B  F001         	movff	___aldiv@quotient,?___aldiv
 12780  00D7D4  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
 12781  00D7D8  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
 12782  00D7DC  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
 12783  00D7E0  0012               	return	
 12784  00D7E2                     __end_of___aldiv:
 12785                           	opt stack 0
 12786                           tblptru	equ	0xFF8
 12787                           tblptrh	equ	0xFF7
 12788                           tblptrl	equ	0xFF6
 12789                           tablat	equ	0xFF5
 12790                           prodh	equ	0xFF4
 12791                           prodl	equ	0xFF3
 12792                           intcon	equ	0xFF2
 12793                           postinc0	equ	0xFEE
 12794                           wreg	equ	0xFE8
 12795                           plusw1	equ	0xFE3
 12796                           indf2	equ	0xFDF
 12797                           postinc2	equ	0xFDE
 12798                           postdec2	equ	0xFDD
 12799                           plusw2	equ	0xFDB
 12800                           fsr2h	equ	0xFDA
 12801                           fsr2l	equ	0xFD9
 12802                           status	equ	0xFD8
 12803                           tblptru	equ	0xFF8
 12804                           tblptrh	equ	0xFF7
 12805                           tblptrl	equ	0xFF6
 12806                           tablat	equ	0xFF5
 12807                           prodh	equ	0xFF4
 12808                           prodl	equ	0xFF3
 12809                           intcon	equ	0xFF2
 12810                           postinc0	equ	0xFEE
 12811                           wreg	equ	0xFE8
 12812                           plusw1	equ	0xFE3
 12813                           indf2	equ	0xFDF
 12814                           postinc2	equ	0xFDE
 12815                           postdec2	equ	0xFDD
 12816                           plusw2	equ	0xFDB
 12817                           fsr2h	equ	0xFDA
 12818                           fsr2l	equ	0xFD9
 12819                           status	equ	0xFD8
 12820                           
 12821                           	psect	rparam
 12822  0000                     tblptru	equ	0xFF8
 12823                           tblptrh	equ	0xFF7
 12824                           tblptrl	equ	0xFF6
 12825                           tablat	equ	0xFF5
 12826                           prodh	equ	0xFF4
 12827                           prodl	equ	0xFF3
 12828                           intcon	equ	0xFF2
 12829                           postinc0	equ	0xFEE
 12830                           wreg	equ	0xFE8
 12831                           plusw1	equ	0xFE3
 12832                           indf2	equ	0xFDF
 12833                           postinc2	equ	0xFDE
 12834                           postdec2	equ	0xFDD
 12835                           plusw2	equ	0xFDB
 12836                           fsr2h	equ	0xFDA
 12837                           fsr2l	equ	0xFD9
 12838                           status	equ	0xFD8


Data Sizes:
    Strings     119
    Constant    296
    Data        0
    BSS         63
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    123     124
    BANK0           128      0      62
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_10(CODE[10]), STR_9(CODE[10]), STR_8(CODE[12]), STR_7(CODE[17]), 
		 -> STR_6(CODE[15]), STR_5(CODE[15]), STR_4(CODE[12]), STR_3(CODE[11]), 
		 -> STR_2(CODE[12]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_testRTCGet
    _testSDCard->_printf
    _initSD->___fttol
    ___lwtoft->___ftpack
    ___ftdiv->___lwtoft
    _SD_ACMD->_SD_Command
    _SD_Command->_spiSend
    _spiReceive->_spiTransfer
    _testRTCSet->_I2C_Master_Init
    _testRTCGet->_printf
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv
    _testGLCD->_initGLCD
    _initGLCD->_glcdDrawRectangle
    _glcd_swreset->_glcdTransfer
    _glcd_slpout->_glcdTransfer
    _glcd_setmadctl->_glcdTransfer
    _glcd_noron->_glcdTransfer
    _glcd_invoff->_glcdTransfer
    _glcd_idmoff->_glcdTransfer
    _glcd_dispon->_glcdTransfer
    _glcdSetCOLMOD->_glcdTransfer
    _glcdDrawRectangle->___wmul
    _glcd_ramwr->_glcdTransfer
    _glcdTransfer->_spiSend
    _spiSend->_spiTransfer
    _testA2D->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_send_byte
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0  309184
                                            114 COMRAM     9     9      0
                            ___aldiv
                             _getKey
                            _initLCD
                            _lcdInst
                             _printf
                            _testA2D
                           _testGLCD
                             _testIO
                         _testRTCGet
                         _testRTCSet
                         _testSDCard
                           _testUART
 ---------------------------------------------------------------------------------
 (1) _testUART                                            15    15      0      60
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 (1) _testSDCard                                           2     2      0   72722
                                            103 COMRAM     2     2      0
                             _initSD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _initSD                                              44    44      0   19752
                                             57 COMRAM    44    44      0
                            _SD_ACMD
                         _SD_Command
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
                           ___lwtoft
                            _spiInit
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2603
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3063
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) _SD_ACMD                                              5     1      4    1983
                                             10 COMRAM     5     1      4
                         _SD_Command
 ---------------------------------------------------------------------------------
 (3) _SD_Command                                           7     3      4    1787
                                              3 COMRAM     7     3      4
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (3) _spiReceive                                           0     0      0      22
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _testRTCSet                                           1     1      0    1490
                                             21 COMRAM     1     1      0
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _testRTCGet                                          11    11      0   54721
                                            103 COMRAM    11    11      0
                    _I2C_Master_Init
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     478
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     944
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) _testIO                                               4     4      0     225
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _testGLCD                                             0     0      0   73224
                  _glcdDrawRectangle
                           _initGLCD
 ---------------------------------------------------------------------------------
 (2) _initGLCD                                             1     1      0   58589
                                             39 COMRAM     1     1      0
                  _glcdDrawRectangle
                      _glcdSetCOLMOD
                       _glcdTransfer
                        _glcd_dispon
                        _glcd_idmoff
                        _glcd_invoff
                         _glcd_noron
                     _glcd_setmadctl
                        _glcd_slpout
                       _glcd_swreset
                            _spiInit
 ---------------------------------------------------------------------------------
 (3) _spiInit                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _glcd_swreset                                         2     2      0    4876
                                              6 COMRAM     2     2      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (3) _glcd_slpout                                          2     2      0    4876
                                              6 COMRAM     2     2      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (3) _glcd_setmadctl                                       0     0      0    4876
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (3) _glcd_noron                                           0     0      0    4876
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (3) _glcd_invoff                                          0     0      0    4876
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (3) _glcd_idmoff                                          0     0      0    4876
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (3) _glcd_dispon                                          0     0      0    4876
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (3) _glcdSetCOLMOD                                        3     3      0    4924
                                              6 COMRAM     3     3      0
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (3) _glcdDrawRectangle                                   19    12      7   14635
                                             20 COMRAM    19    12      7
                             ___wmul
                       _glcdTransfer
                         _glcd_ramwr
                            _spiSend
 ---------------------------------------------------------------------------------
 (4) _glcd_ramwr                                           0     0      0    4876
                       _glcdTransfer
 ---------------------------------------------------------------------------------
 (4) _glcdTransfer                                         3     2      1    4876
                                              3 COMRAM     3     2      1
                            _spiSend
 ---------------------------------------------------------------------------------
 (3) _spiSend                                              1     1      0      44
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (4) _spiTransfer                                          2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _testA2D                                              2     2      0   52992
                                            103 COMRAM     2     2      0
                            _lcdInst
                             _printf
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _printf                                              46    38      8   52859
                                             63 COMRAM    40    32      8
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                            _readADC (ARG)
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   12409
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   12211
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3047
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5389
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2802
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     770
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     632
                                             42 COMRAM    15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     245
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (4) _send_byte                                            1     1      0      89
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (5) _send_nibble                                          1     1      0      45
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (6) _pulse_e                                              1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getKey                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv
   _getKey
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _send_byte
         _send_nibble
           _pulse_e
     _readADC (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _testA2D
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _send_byte
           _send_nibble
             _pulse_e
       _readADC (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readADC
   _testGLCD
     _glcdDrawRectangle
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _glcdTransfer
         _spiSend
           _spiTransfer
       _glcd_ramwr
         _glcdTransfer
           _spiSend
             _spiTransfer
       _spiSend
         _spiTransfer
     _initGLCD
       _glcdDrawRectangle
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _glcdTransfer
           _spiSend
             _spiTransfer
         _glcd_ramwr
           _glcdTransfer
             _spiSend
               _spiTransfer
         _spiSend
           _spiTransfer
       _glcdSetCOLMOD
         _glcdTransfer
           _spiSend
             _spiTransfer
       _glcdTransfer
         _spiSend
           _spiTransfer
       _glcd_dispon
         _glcdTransfer
           _spiSend
             _spiTransfer
       _glcd_idmoff
         _glcdTransfer
           _spiSend
             _spiTransfer
       _glcd_invoff
         _glcdTransfer
           _spiSend
             _spiTransfer
       _glcd_noron
         _glcdTransfer
           _spiSend
             _spiTransfer
       _glcd_setmadctl
         _glcdTransfer
           _spiSend
             _spiTransfer
       _glcd_slpout
         _glcdTransfer
           _spiSend
             _spiTransfer
       _glcd_swreset
         _glcdTransfer
           _spiSend
             _spiTransfer
       _spiInit
   _testIO
   _testRTCGet
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _send_byte
           _send_nibble
             _pulse_e
       _readADC (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _testRTCSet
     _I2C_Master_Init
       ___lldiv
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _testSDCard
     _initSD
       _SD_ACMD
         _SD_Command
           _spiReceive
             _spiTransfer
           _spiSend
             _spiTransfer
       _SD_Command
         _spiReceive
           _spiTransfer
         _spiSend
           _spiTransfer
       ___ftdiv
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft
         ___ftpack
       ___lwtoft
         ___ftpack
       _spiInit
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _send_byte
           _send_nibble
             _pulse_e
       _readADC (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _testUART

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      3E       5       48.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     7B      7C       1       97.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BA      34        0.0%
DATA                 0      0      BA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Tue Dec 11 01:33:04 2018

            __end_of_R1_READY_STATE FF4C                         _SSPSTATbits 000FC7  
                    ??_glcdTransfer 0005                         __CFG_CPD$ON 000000  
                initSD@arr_response 004B                        ___awdiv@sign 000C  
               ___wmul@multiplicand 0011                         __CFG_BORV$3 000000  
                      __CFG_CP0$OFF 000000                        __CFG_CP1$OFF 000000  
                      __CFG_CP2$OFF 000000                        __CFG_CP3$OFF 000000  
                       __CFG_OSC$HS 000000                        ___ftadd@exp1 0039  
                      ___ftadd@exp2 0038                        ___ftadd@sign 0037  
                               l130 E1FA                                 l122 E1BE  
                               l115 CCCA                                 l123 E206  
                               l131 E200                                 l204 D558  
                               l124 E1DC                                 l141 D190  
                               l125 E232                                 l126 E1E2  
                               l151 DBBE                                 l127 E1E8  
                               l128 E1EE                                 l129 E1F4  
                               l146 DAC4                                 l147 DB00  
                               l172 DE5E                                 l164 D3C6  
                               l181 DF46                                 l173 DE6E  
                               l149 DBA4                                 l190 D06A  
                               l175 DEA4                                 l177 DEDA  
                               l371 E0CE                                 l363 DF80  
                               l179 DF10                                 l372 E0B8  
                               l365 DF94                                 l533 D3D4  
                               l382 D014                                 l199 CF28  
                               l367 DFA6                                 l383 CFFA  
                               l535 D420                                 l368 DFB2  
                               l384 D026                                 l536 D430  
                               l640 ED10                                 l369 E05E  
                               l385 D002                                 l537 D434  
                               l802 E63A                                 l810 EC0A  
                               l722 CF5C                                 l650 EE4C  
                               l642 ED42                                 l387 D00C  
                               l723 CF4E                                 l651 EE28  
                               l812 ECBA                                 l900 FD58  
                               l820 F514                                 l724 CF72  
                               l805 EADE                                 l901 FD8C  
                               l645 ED4E                                 l806 EA0A  
                               l902 FD76                                 l726 CF52  
                               l670 EF48                                 l662 EE88  
                               l911 FE32                                 l727 CF56  
                               l671 EF50                                 l655 EE70  
                               l639 ED18                                 l912 FDC4  
                               l840 F65C                                 l832 F622  
                               l816 F4F0                                 l672 EFA8  
                               l664 EE98                                 l648 EDB2  
                               l809 EABA                                 l841 F69C  
                               l825 F548                                 l817 F502  
                               l681 F008                                 l673 EF8C  
                               l851 F85A                                 l843 F72C  
                               l835 F61E                                 l827 F612  
                               l819 F51A                                 l691 F47E  
                               l683 F02C                                 l675 EF9E  
                               l844 F790                                 l836 F648  
                               l828 F5FC                                 l692 F476  
                               l861 F97E                                 l829 F5C6  
                               l685 F132                                 l870 F9D4  
                               l862 F998                                 l846 F7B4  
                               l839 FC2C                                 l847 F7F2  
                               l687 F2E0                                 l880 FAD0  
                               l848 F8AE                                 l881 FAE8  
                               l873 FA92                                 l865 F9C4  
                               l857 F912                                 l689 F302  
                               l882 FC0C                                 l874 FA0A  
                               l866 F9B8                                 l971 D732  
                               l883 FB38                                 l980 D7D0  
                               l972 D74A                                 l892 FCC0  
                               l876 FAA8                                 l885 FC22  
                               l877 FA9C                                 l869 F9E0  
                               l974 D778                                 l894 FCE0  
                               l886 FC16                                 l975 D76C  
                               l799 E56E                                 l895 FD02  
                               l879 FACC                                 l888 FC68  
                               l897 FD24                                 l978 D7AC  
                               l898 FD2C                                 l979 D7BA  
                               l899 FD50                        __CFG_CPB$OFF 000000  
                               _RED FF3D                     __end_of_CMD0CRC FF61  
                   __end_of_CMD8CRC FF5E                        ___awmod@sign 0006  
                               prod 000FF3                                 wreg 000FE8  
                     SD_Command@cmd 0009                       SD_Command@arg 0004  
                      __CFG_LVP$OFF 000000                        ___ftdiv@cntr 0015  
                      ___ftdiv@sign 001A                        __CFG_WDT$OFF 000000  
                              l1100 D31E                                l1103 D33E  
                              l1104 D348                                l1201 E392  
                              l1121 DCBA                                l1105 D356  
                              l1202 E388                                l1122 DCAA  
                              l1115 DBEC                                l1211 D80A  
                              l1204 E3B6                                l1205 E3D2  
                              l1117 DC0A                                l1221 DD4E  
                              l1213 D832                                l1150 D6C4  
                              l1206 E402                                l1310 D4BE  
                              l1118 DC4C                                l1222 DD88  
                              l1214 D870                                l1151 D6AE  
                              l1127 DCDE                                l1119 DC7C  
                              l1231 DE10                                l1223 DDB0  
                              l1215 D896                                l1320 D20A  
                              l1128 DCD2                                l1232 DE04  
                              l1153 D6EC                                l1305 D47C  
                              l1225 DDEC                                l1154 D6E2  
                              l1306 D470                                l1226 DDDC  
                              l1090 D532                                l1250 DA76  
                              l1147 D690                                l1315 D1D4  
                              l1219 DD22                                l1091 D53C  
                              l1083 D4E4                                l1243 D9E4  
                              l1236 D608                                l1148 D686  
                              l1260 CFCC                                l1316 D1C8  
                              l1092 D54A                                l1084 D4F4  
                              l1237 D638                                l1309 D4B0  
                              l1245 DA0C                                l1254 CDC2  
                              l1182 E2F8                                l1326 D0AE  
                              l1086 D512                                l1246 DA3E  
                              l1319 D1FC                                l1327 D0A2  
                              l1087 D50A                                l1247 DA4E  
                              l1192 E354                                l1272 D98E  
                              l1264 D8F4                                l1096 D304  
                              l1193 E34A                                l1273 D982  
                              l1097 D310                                l1249 DA66  
                              l1178 E2CE                                l1266 D96A  
                              l3210 DE9C                                l1187 E35E  
                              l1275 D9AA                                l1267 D95A  
                              l1099 D326                                l3222 DED2  
                              l1279 CD84                                l3234 DF08  
                              l5002 EF96                                l3246 DF3E  
                              l3262 D062                                l5024 F024  
                              l3266 D06A                                l3198 DE66  
                              l5062 F2FA                                l3662 CDD6  
                              l5182 DAF8                                l5166 D188  
                              l3656 D664                                l4624 F9D4  
                              l4642 FA9C                                l4618 F9B8  
                              l4572 F836                                l4564 F7F2  
                              l4750 FDC4                                l4902 ED3A  
                              l4592 F916                                l4920 EDAA  
                              l4940 EE20                                l3990 DFAA  
                              l4688 FC6C                                _ADON 007E10  
                              _CMD0 FF61                                _CMD1 FF5F  
                              _CMD8 FF5E                                _CMD9 FF5C  
                              STR_1 FFDF                                STR_2 FFD3  
                              STR_3 FFDF                                STR_4 FFD3  
                              STR_5 FFA9                                STR_6 FFB8  
                              STR_7 FF98                                STR_8 FFC7  
                              STR_9 FFEA                                _BLUE FF1D  
                              u3000 D6F6                                u2300 DF32  
                              _LATA 000F89                                u3110 E2C0  
                              _LATB 000F8A                                _LATC 000F8B  
                              u4000 D1D8                                u2320 DF68  
                              u2240 DE90                                _LATD 000F8C  
                              _LATE 000F8D                                u3210 E366  
                              u2330 D054                                u3140 E2EA  
                              u2260 DEC6                                u3060 D448  
                              u3301 D9F4                                u2350 D072  
                              u3071 E28C                                u3240 E39A  
                              u4200 F836                                u4120 F6D4  
                              u2280 DEFC                                u5000 DB1C  
                              u2360 D07E                                u2352 D074  
                              u3081 E2A0                                u3170 E328  
                              u4050 F5A4                                u2362 D080  
                              u4300 F9EE                                u5020 DBB8  
                              u4125 F6CA                                u3430 D32A  
                              u1735 CE10                                u4240 F94E  
                              u4160 F7C4                                u1736 CE12  
                              u5040 DBCC                                u3281 D9CC  
                              u5130 D77C                                u3370 D516  
                              u4330 FAB6                                u4170 F802  
                              u5050 D3CA                        printf@tmpval 0058  
                              _GREY FF31                                u3700 DE16  
                              u4420 FCA4                                u4340 FAC6  
                              u2900 CDDE                                u3621 DD06  
                              u5070 D5CE                                u2910 CDEA  
                              u2902 CDE0                                u2912 CDEC  
                              u3641 DD32                                u3801 D81A  
                              u4601 ECF0                                u2930 CE70  
                              u3900 D912                                u4540 FD94  
                              u2925 CEB0                                u5165 E14A  
                              u2926 CEB2                                u4550 FDA8  
                              u4630 ED4C                                u2960 D678  
                              u4640 ED82                                u3905 D90A  
                              u3770 DCE4                                u4570 FE42  
                              u3940 D994                                u2948 CE72  
                              u4900 F208                                u4820 EFA6  
                              u4660 EDCC                                u3781 D7F2  
                              u4910 F242                                u5607 E246  
                              u4760 EEF2                                u3881 D8D8  
                              u4905 F1FE                                u5617 D370  
                              u3970 D480                                u4690 EE42  
                              u5707 DEEC                                u4595 D120  
                              u4915 F238                                u5627 D3BA  
                              u4940 F31C                                u4860 F046  
                              u5717 DF22                                u5637 ED12  
                              u5807 D23A                                u5727 DF58  
                              u5647 ED28                                u5817 D24C  
                              u5737 E68E                                u5657 F478  
                              u5827 D26E                                u5747 E8CA  
                              u5667 DB34                                u4980 D1B0  
                              u5837 CE98                                u5757 CF00  
                              u5677 DBAA                                u4885 F146  
                              u5597 E18A                                u5847 CEA2  
                              u5767 CED2                                u5687 DE80  
                              u4895 F1E0                                u5777 D564  
                              u5697 DEB6                                u5787 D5BE  
                              u5797 D222                      ??_glcd_swreset 0007  
                              _TRMT 007D61                                _TXIF 007CF4  
                   __end_of_SD_ACMD CFB6                                _main E0DE  
                      ___ftpack@arg 0001                        ___ftpack@exp 0004  
                              fsr2h 000FDA                                indf2 000FDF  
                              fsr2l 000FD9                                prodh 000FF4  
                              prodl 000FF3                                start 0000  
                     __CFG_IESO$OFF 000000                      initSD@argument 0041  
                      main@baudRate 0077                       __CFG_MCLRE$ON 000000  
                      ___ftmul@cntr 0022                        ___param_bank 000000  
                      ___ftmul@sign 0023                        ___fttol@exp1 0039  
                      ___fttol@lval 0035               I2C_Master_Read@ackBit 0002  
                  ?_I2C_Master_Init 000E                    ?_I2C_Master_Read 0001  
                  ?_I2C_Master_Wait 0001                    ?_I2C_Master_Stop 0001  
                   __end_of___aldiv D7E2                               ?_main 0001  
                             _CMD10 FF5B                               _CMD12 FF5A  
                             _CMD13 FF59                               _CMD16 FF58  
                             _CMD24 FF55                               _CMD32 FF53  
                             _CMD17 FF57                               _CMD25 FF54  
                             _CMD33 FF52                               _CMD18 FF56  
                             _CMD38 FF51                               _CMD55 FF50  
                             _CMD58 FF4F                     __end_of___awdiv D554  
                             _BLACK FF35                     __end_of___ftadd E428  
                             STR_10 FFF4                               STR_11 FF87  
                   __end_of___awmod D360                      initSD@tempSize 0047  
                   __end_of___ftdiv D8C8                     __end_of___ftneg CDD0  
                   __end_of___lldiv D4D0                    __end_of_INST_NOP FF82  
                   __end_of___ftmul DAB0                     ___awdiv@divisor 0009  
                   __end_of___llmod D21C                     __end_of___ftsub CFF6  
                   __end_of___fttol D9BC                               _GREEN FF21  
                    initSD@response 0065                     ___awdiv@counter 000B  
                             _SPBRG 000FAF                               _PORTB 000F81  
                             _WHITE FF2D                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _SSPIF 007CF3                               _TXREG 000FAD  
                initSD@last_OSCTUNE 0046                       __CFG_PWRT$OFF 000000  
                     __CFG_WRT0$OFF 000000                       __CFG_WRT1$OFF 000000  
                     __CFG_WRT2$OFF 000000                       __CFG_WRT3$OFF 000000  
                      ___lltoft@exp 0011                     __end_of_lcdInst CC8E  
                    __CFG_EBTR0$OFF 000000                      __CFG_FCMEN$OFF 000000  
                    __CFG_EBTR1$OFF 000000                      __CFG_EBTR2$OFF 000000  
                    __CFG_EBTR3$OFF 000000                       __CFG_WRTB$OFF 000000  
                     __CFG_WRTC$OFF 000000                     testRTCGet@i_629 0070  
                     __CFG_WRTD$OFF 000000                     __end_of_readADC CF44  
                   __end_of_initLCD D286                      __CFG_EBTRB$OFF 000000  
                   __end_of_dpowers FE87                     __end_of_key_map FF05  
                             _scale E8D6                     __end_of_isdigit CD8C  
                     ___ftpack@sign 0005                               _putch CC8E  
                       initSD@F3023 00AE                     __end_of_testA2D D5D8  
                   __end_of_spiInit CF7C                               tablat 000FF5  
                   __end_of_spiSend CC78                     send_nibble@data 0002  
                             plusw1 000FE3                               plusw2 000FDB  
                   __end_of_pulse_e CEB4                         ?_SD_Command 0004  
                             status 000FD8         I2C_Master_Read@receivedByte 0003  
                    __CFG_PBADEN$ON 000000                        __end_of_CMD0 FF62  
                      __end_of_CMD1 FF60                        __end_of_CMD8 FF5F  
                      __end_of_CMD9 FF5D                        __end_of_BLUE FF21  
                      __end_of_GREY FF35                     __initialization CD56  
                      __end_of_main E27C        glcdSetCOLMOD@numBitsPerPixel 0007  
                  ??_glcd_setmadctl 0007                              ??_main 0073  
                     ___fttol@sign1 0034                       __activetblptr 000002  
              __size_of__tdiv_to_l_ 0132                  SD_Command@response 000A  
                 ?_I2C_Master_Start 0001                   ?_I2C_Master_Write 0002  
                         ??_SD_ACMD 000F                  ??_I2C_Master_Start 0002  
                            _ACMD22 FF4E                              _ACMD23 FF4D  
                            _ACMD41 FF4C                              _ADCON0 000FC2  
                            _ADCON1 000FC1                  ??_I2C_Master_Write 0004  
                            _ADCON2 000FC0                        ?_send_nibble 0001  
                  ___llmod@dividend 0001                              ?_scale 0024  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                  ___awdiv@dividend 0007                              ?_putch 0001  
                  __end_of___ftpack D716                   _glcdDrawRectangle DF6E  
                 __end_of_INST_TEON FF72                              _INDIGO FF19  
                  __end_of___lltoft D0F8                              _CVRCON 000FB5  
              __end_of_glcdTransfer CE8A                    __end_of___lwtoft CE3C  
                            _ORANGE FF29                              _OSCCON 000FD3  
                ?_glcdDrawRectangle 0015                              _SDCard 0080  
                            _VIOLET FF39                              _SSPADD 000FC8  
                            _YELLOW FF25                              _SSPBUF 000FC9  
              __size_of_glcd_dispon 0016                __size_of_glcd_idmoff 0016  
              __size_of_glcd_invoff 0016                      __CFG_XINST$OFF 000000  
         glcdDrawRectangle@numLoops 0020                __size_of_glcd_slpout 002E  
                  __end_of__powers_ FEAE                 ??_glcdDrawRectangle 001C  
                            ___ftge D5D8                           ??___aldiv 0009  
                            ___wmul CE3C                    __end_of_initGLCD E8D6  
                         ??___awdiv 000B                           ??___ftadd 0034  
                    __CFG_STVREN$ON 000000                           ??___awmod 0005  
                         ??___ftdiv 0012                           ??___ftneg 0004  
                         ??___lldiv 0009                           ??___ftmul 001B  
                         ??___llmod 0009                           ??___ftsub 0040  
                         ??___fttol 002F                              _getKey CCBE  
                            _initSD ECDE                              _fround E428  
                            clear_0 CD5C                    ___awdiv@quotient 000D  
                   ___awmod@divisor 0003                              _testIO DE28  
              __end_of_glcd_swreset CF10                     ___awmod@counter 0005  
                         ??_lcdInst 0004                              _printf F4E4  
             ___ftmul@f3_as_product 001F                           ??_readADC 0003  
                         ??_initLCD 0005                 __size_of_SD_Command 007E  
                  __end_of_testGLCD D2F0                   __end_of_STOP_TRAN FF47  
                         ??_isdigit 0001                    __end_of_testUART D09C  
                      ?_spiTransfer 0001                        __mediumconst FE5E  
                         ??_testA2D 0068                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
                         ??_spiInit 0001                           ??_spiSend 0003  
         __end_of_glcdDrawRectangle E0DE                           ??_pulse_e 0001  
             pulse_e@interruptState 0001                        initSD@i_1251 005C  
                      initSD@i_1252 005F                        initSD@i_1255 0060  
                      initSD@i_1248 005D                        initSD@i_1249 005E  
                        __accesstop 0080             __end_of__initialization CD64  
                        ___ftadd@f1 002E                          ___ftadd@f2 0031  
                        ___ftge@ff1 0001                          ___ftge@ff2 0004  
                     __end_of_CMD10 FF5C                       __end_of_CMD12 FF5B  
                     __end_of_CMD13 FF5A                       __end_of_CMD16 FF59  
                     __end_of_CMD24 FF56                       __end_of_CMD32 FF54  
                     __end_of_CMD17 FF58                       __end_of_CMD25 FF55  
                     __end_of_CMD33 FF53                       __end_of_CMD18 FF57  
                     __end_of_CMD38 FF52                       __end_of_CMD55 FF51  
                     __end_of_CMD58 FF50               __end_oftestUART@F3214 FF12  
                     __end_of_BLACK FF39                       ___rparam_used 000001  
                        ___ftdiv@f1 000C                          ___ftdiv@f2 000F  
                        ___ftdiv@f3 0016                       __end_of_GREEN FF25  
                        ___ftneg@f1 0001                       __end_of_WHITE FF31  
                        ___ftmul@f1 0015                          ___ftmul@f2 0018  
                        ___ftsub@f1 003A                          ___ftsub@f2 003D  
                        ___fttol@f1 002B                      __pcstackCOMRAM 0001  
                        ___lltoft@c 0009                       __end_of_scale ECDE  
                     __end_of_putch CC9A                   _START_BLOCK_TOKEN FF47  
                        ___lwtoft@c 0009                          __div_to_l_ DBCE  
                   __div_to_l_@exp1 000C                     __div_to_l_@cntr 000B  
                           ??_scale 0027                     __div_to_l_@quot 0007  
                           ??_putch 0004                       _INST_VMOFCTR2 FF62  
             __end_of_glcdSetCOLMOD D046                          __pbssBANK0 0080  
                     __div_to_l_@f1 0001                       __div_to_l_@f2 0004  
                           ?___ftge 0001                             ?___wmul 000F  
         __end_of_START_BLOCK_TOKEN FF48                             ?_getKey 0001  
                           ?_initSD 0001                  __size_of_send_byte 0012  
                           _CMD0CRC FF60                             ?_fround 0024  
                           _CMD8CRC FF5D                  glcdDrawRectangle@i 0022  
                __end_of_INST_CASET FF77                           ?___ftpack 0001  
                           ?_testIO 0001                  __end_of_INST_IDMON FF6F  
                           ?_printf 0040                           ?___lltoft 0009  
                __end_of_INST_INVON FF7B                  __end_of_INST_RASET FF76  
                __end_of_INST_RAMWR FF75                  __end_of_INST_TEOFF FF73  
                __end_of_INST_NORON FF7D                  __end_of_INST_PTLAR FF74  
                __end_of_INST_SLPIN FF80                  __end_of_INST_PTLON FF7E  
                         ?___lwtoft 0009                          _glcd_ramwr CCE8  
                        _glcd_noron CD40               __size_of_glcdTransfer 0028  
                           _SD_ACMD CF7C          __size_of_glcdDrawRectangle 0170  
                           _OSCTUNE 000F9B           spiTransfer@byteToTransfer 0002  
                           _SSPCON1 000FC6                             _SSPCON2 000FC5  
                           _SSPSTAT 000FC7                           ?_initGLCD 0001  
              __size_of_send_nibble 0016                        ??_SD_Command 0008  
                 __end_of__npowers_ FED5                             __Hparam 0000  
                        _scale$2267 0027                      _GLCD_SIZE_HORZ FF83  
                           __Lparam 0000                      _GLCD_SIZE_VERT FF82  
                         ?_testGLCD 0001                           ?_testUART 0001  
              __end_of_INST_DISPOFF FF79               __size_of_glcd_swreset 002E  
              __end_of_INST_FRMCTR1 FF6D                __end_of_INST_FRMCTR2 FF6C  
              __end_of_INST_FRMCTR3 FF6B                             ___aldiv D716  
                   __size_of___ftge 0090                             ___awdiv D4D0  
                           ___ftadd E27C                             ___awmod D2F0  
                           ___ftdiv D7E2                             ___ftneg CDAC  
                           ___lldiv D44E                     __size_of___wmul 0026  
                           ___ftmul D9BC                             ___llmod D1B6  
                           ___ftsub CFB6                             ___fttol D8C8  
                         _CMCONbits 000FB4                     __size_of_getKey 0014  
                   __size_of_initSD 0806                             __pcinit CD56  
                        ??___ftpack 0006                     __size_of_fround 0252  
                      _glcdTransfer CE62                             __ramtop 1000  
                           _lcdInst CC82                          ??___lltoft 000D  
                           __ptext0 E0DE                             __ptext1 D046  
                           __ptext2 D360                             __ptext3 ECDE  
                           __ptext4 CE18                             __ptext5 D7E2  
                           __ptext6 CF7C                             __ptext7 D3D0  
                           __ptext8 CC66                             __ptext9 D154  
                   __size_of_testIO 0146                     __size_of_printf 097A  
                        ??___lwtoft 000C                             _readADC CF10  
              __end_of_INST_SWRESET FF81                             _initLCD D21C  
                 __end_of_hexpowers FEF5                         ?__div_to_l_ 0001  
                           _dpowers FE5F                             _key_map FEF5  
                __end_of_SD_Command D44E                             _isdigit CD6E  
                  ___awmod@dividend 0001                    ___aldiv@dividend 0001  
                           _testA2D D554            __size_of_I2C_Master_Init 005C  
          __size_of_I2C_Master_Read 0024                             _spiInit CF44  
          __size_of_I2C_Master_Wait 0012                             _spiSend CC6E  
          __size_of_I2C_Master_Stop 0008                __size_of_spiTransfer 0024  
                       testUART@msg 0002                             _pulse_e CE8A  
              end_of_initialization CD64                         testRTCGet@i 0072  
                           initSD@i 005B                          ??_initGLCD 0028  
             __end_of_R1_IDLE_STATE FF4B               __end_of_LCD_SIZE_HORZ FF46  
                       testRTCSet@i 0016                   __end_of_send_byte CCAC  
             __end_of_LCD_SIZE_VERT FF45                        _glcd_swreset CEE2  
                     __Lmediumconst FE5E              testRTCSet@happynewyear FF12  
            __end_of_GLCD_SIZE_HORZ FF84                           _INST_TEON FF71  
            __end_of_GLCD_SIZE_VERT FF83           __size_of_I2C_Master_Start 0008  
         __size_of_I2C_Master_Write 000A                     ___lldiv@divisor 0005  
                   ___lldiv@counter 000D                             testIO@i 0004  
                        ??_testGLCD 0029                          ??_testUART 0001  
                        _testSDCard D360                          _testRTCGet DAB0  
                         _RCSTAbits 000FAB                             printf@c 0067  
                           printf@f 0040                          _testRTCSet D154  
                  ___aldiv@quotient 000B                          _spiReceive CC66  
                           postdec2 000FDD                             postinc0 000FEE  
                           postinc2 000FDE                      __tdiv_to_l_@f1 0001  
                    __tdiv_to_l_@f2 0004                    glcdTransfer@byte 0006  
                     ??__tdiv_to_l_ 0007                           _PORTBbits 000F81  
                    spiInit@divider 0001                         ?_glcd_ramwr 0001  
                       ?_glcd_noron 0001                           _TRISCbits 000F94  
                         _TRISDbits 000F95                           _TRISEbits 000F96  
                         _STOP_TRAN FF46                         SD_Command@n 0008  
                    __end_of_ACMD22 FF4F                      __end_of_ACMD23 FF4E  
                    __end_of_ACMD41 FF4D                       ??_glcd_dispon 0007  
                     ??_glcd_idmoff 0007                       ??_glcd_invoff 0007  
                    __end_of_INDIGO FF1D                         ___ftdiv@exp 0019  
                     ??_glcd_slpout 0007                         printf@width 0060  
                         _TXSTAbits 000FAC                      __end_of_ORANGE FF2D  
                     send_byte@data 0003                      __end_of_VIOLET FF3D  
                    __end_of_YELLOW FF29                 __size_of__div_to_l_ 0128  
                       ___ftmul@exp 001E                      __end_of___ftge D668  
                    __end_of___wmul CE62                   initSD@last_OSCCON 0045  
                    __end_of_getKey CCD2                      __end_of_initSD F4E4  
                    __end_of_fround E67A                      testRTCGet@time 0069  
                    __end_of_testIO DF6E                      __end_of_printf FE5E  
               start_initialization CD56                         __end_of_RED FF41  
               __end_of__tdiv_to_l_ DE28              glcdDrawRectangle@color 0018  
        __end_of_R1_ILLEGAL_COMMAND FF4A             __size_of_glcd_setmadctl 0020  
                 ??_I2C_Master_Init 0012                   ??_I2C_Master_Read 0002  
                 ??_I2C_Master_Wait 0001                   ??_I2C_Master_Stop 0002  
                   ___llmod@divisor 0005                     ___llmod@counter 0009  
               __end_of_glcd_dispon CD14                 __end_of_glcd_idmoff CD2A  
               __size_of_glcd_ramwr 0016                 __size_of_glcd_noron 0016  
                       ?_testSDCard 0001                 __end_of_glcd_invoff CD40  
                       ?_testRTCGet 0001                         ?_testRTCSet 0001  
                          ??___ftge 0007                         ?_spiReceive 0001  
                          ??___wmul 0013                 __end_of_glcd_slpout CEE2  
                          ??_getKey 0001            I2C_Master_Init@clockFreq 000E  
                  __CFG_LPT1OSC$OFF 000000                            ??_initSD 003A  
                          ??_fround 0027                            ??_testIO 0001  
                          ??_printf 0048                          fround@prec 002D  
__end_of_GLCD_ADDRESSABLE_SIZE_HORZ FF86          _GLCD_ADDRESSABLE_SIZE_HORZ FF85  
                 __size_of___ftpack 00AE  __end_of_GLCD_ADDRESSABLE_SIZE_VERT FF85  
        _GLCD_ADDRESSABLE_SIZE_VERT FF84                   __size_of___lltoft 005C  
                       __pbssCOMRAM 007C                   __size_of___lwtoft 0024  
                          ?_SD_ACMD 000B                        _INST_DISPOFF FF78  
                      _isdigit$1838 0002                        _INST_FRMCTR1 FF6C  
                      _INST_FRMCTR2 FF6B                        _INST_FRMCTR3 FF6A  
                 __size_of_initGLCD 025C                        _INST_SWRESET FF80  
                  _I2C_Master_Start CC56                    _I2C_Master_Write CC78  
                 __CFG_CCP2MX$PORTC 000000                       __pmediumconst FE5E  
                        SD_ACMD@cmd 000F                          SD_ACMD@arg 000B  
                          ?___aldiv 0001                            ?___awdiv 0007  
                          ?___ftadd 002E                            ?___awmod 0001  
                          ?___ftdiv 000C                   __size_of_testGLCD 006A  
                          ?___ftneg 0001                            ?___lldiv 0001  
                          ?___ftmul 0015                            ?___llmod 0001  
                          ?___ftsub 003A                           __npowers_ FEAE  
                          ?___fttol 002B                   __size_of_testUART 0056  
            __size_of_glcdSetCOLMOD 0050                            ?_lcdInst 0001  
                       __tdiv_to_l_ DCF6                        ??__div_to_l_ 0007  
                          ?_readADC 0001                            ?_initLCD 0001  
                          ?_isdigit 0001                 glcdDrawRectangle@XE 0015  
               glcdDrawRectangle@YE 0017                 glcdDrawRectangle@XS 0027  
               glcdDrawRectangle@YS 0016                            ?_testA2D 0001  
               __end_of_INST_GAMSET FF7A                            ?_spiInit 0001  
               __end_of_INST_COLMOD FF6E                            ?_spiSend 0001  
               __end_of_INST_MADCTL FF71                 __end_of_INST_DISPON FF78  
               __end_of_INST_IDMOFF FF70                           _hexpowers FED5  
               __end_of_INST_INVCTR FF6A                       ??_send_nibble 0002  
               __end_of_INST_INVOFF FF7C                            ?_pulse_e 0001  
               __size_of_testSDCard 0070                 __size_of_testRTCGet 011E  
               __size_of_testRTCSet 0062                      __size_of_scale 0408  
               __end_of_INST_PWCTR1 FF69                 __end_of_INST_PWCTR2 FF68  
               __end_of_INST_PWCTR3 FF67                 __end_of_INST_PWCTR4 FF66  
               __end_of_INST_PWCTR5 FF65                 __size_of_spiReceive 0008  
               __end_of_INST_VMCTR1 FF64                 __end_of_INST_SLPOUT FF7F  
                    __size_of_putch 000C                         _glcd_dispon CCFE  
                       _glcd_idmoff CD14                          testIO@temp 0003  
                   ___aldiv@divisor 0005                     ___aldiv@counter 0009  
                       _glcd_invoff CD2A                      ___wmul@product 0013  
                          _LATDbits 000F8C                            _LATEbits 000F8D  
                       _glcd_slpout CEB4                           _send_byte CC9A  
                     testUART@F3214 FF05                      _LCD_LINE1_ADDR FF43  
                          _INST_NOP FF81                      _LCD_LINE2_ADDR FF86  
                        spiSend@val 0003                      _LCD_LINE3_ADDR FF42  
                    _LCD_LINE4_ADDR FF41                           getKey@key 0001  
                __end_of__div_to_l_ DCF6                    __CFG_WDTPS$32768 000000  
                   glcdTransfer@cmd 0004                          _ADCON0bits 000FC2  
                        _ADCON2bits 000FC0                   ___wmul@multiplier 000F  
                        printf@flag 005E                        ??_glcd_ramwr 0007  
                        printf@fval 0062                        ??_glcd_noron 0007  
                     ??_spiTransfer 0001                          printf@prec 0065  
              glcdSetCOLMOD@rawData 0008                           main@state 007B  
    __end_oftestRTCSet@happynewyear FF19                      _glcd_setmadctl CD8C  
                  __size_of_SD_ACMD 003A                       _glcdSetCOLMOD CFF6  
            __end_of_LCD_LINE1_ADDR FF44              __end_of_LCD_LINE2_ADDR FF87  
            __end_of_LCD_LINE3_ADDR FF43              __end_of_LCD_LINE4_ADDR FF42  
               initSD@tempSize_1254 0061                 __end_of_send_nibble CCE8  
                        ?_send_byte 0001                            __Hrparam 0000  
                          __Lrparam 0000                  __end_of_glcd_ramwr CCFE  
                __end_of_glcd_noron CD56                  __CFG_BOREN$SBORDIS 000000  
                  __size_of___aldiv 00CC                    __size_of___awdiv 0084  
                  __size_of___ftadd 01AC                    __size_of___awmod 0070  
                  __size_of___ftdiv 00E6                    __size_of___ftneg 0024  
                  __size_of___lldiv 0082                    __size_of___ftmul 00F4  
                  __size_of___llmod 0066                    __size_of___ftsub 0040  
                  __size_of___fttol 00F4                      readADC@channel 0005  
                          ___ftpack D668                         _INST_GAMSET FF79  
                       _fround$2265 002A                         _fround$2266 0027  
                       _INST_COLMOD FF6D                         _INST_MADCTL FF70  
                       _INST_DISPON FF77                         _INST_IDMOFF FF6F  
                          ___lltoft D09C                            ___lwtoft CE18  
                       _INST_INVCTR FF69                         _INST_INVOFF FF7B  
                  __size_of_lcdInst 000C                         _INST_PWCTR1 FF68  
                       _INST_PWCTR2 FF67                         _INST_PWCTR3 FF66  
                       _INST_PWCTR4 FF65                         _INST_PWCTR5 FF64  
                       _INST_VMCTR1 FF63                         _INST_SLPOUT FF7E  
                   _I2C_Master_Init D0F8                    __size_of_readADC 0034  
                   _I2C_Master_Read CDF4                    __size_of_initLCD 006A  
                   _I2C_Master_Wait CCAC                     _I2C_Master_Stop CC5E  
            __end_of_glcd_setmadctl CDAC                    __size_of_isdigit 001E  
                  __size_of_testA2D 0084                            __ptext10 DAB0  
                          __ptext11 CC78                            __ptext20 CF44  
                          __ptext12 CC5E                            __ptext21 CEE2  
                          __ptext13 CC56                            __ptext30 CCE8  
                          __ptext22 CEB4                            __ptext14 CDF4  
                          __ptext31 CE62                            __ptext23 CD8C  
                          __ptext15 CCAC                            __ptext40 E428  
                          __ptext32 CC6E                            __ptext24 CD40  
                          __ptext16 D0F8                            __ptext41 CE3C  
                          __ptext33 CDD0                            __ptext25 CD2A  
                          __ptext17 DE28                            __ptext50 D8C8  
                          __ptext42 D9BC                            __ptext34 D554  
                          __ptext26 CD14                            __ptext18 D286  
                          __ptext51 CFB6                            __ptext43 D2F0  
                          __ptext35 CF10                            __ptext27 CCFE  
                          __ptext19 E67A                            __ptext60 CE8A  
                          __ptext52 E27C                            __ptext44 D4D0  
                          __ptext36 F4E4                            __ptext28 CFF6  
                          __ptext61 CCBE                            __ptext53 D668  
                          __ptext45 DCF6                            __ptext37 E8D6  
                          __ptext29 DF6E                            __ptext62 D716  
                          __ptext54 CDAC                            __ptext46 DBCE  
                          __ptext38 CC8E                            __ptext55 D5D8  
                          __ptext47 D09C                            __ptext39 CD6E  
                          __ptext56 D21C                            __ptext48 D1B6  
                          __ptext57 CC82                            __ptext49 D44E  
                          __ptext58 CC9A                            __ptext59 CCD2  
                  __size_of_spiInit 0038                    __size_of_spiSend 000A  
             __end_of_INST_VMOFCTR2 FF63                            __powers_ FE87  
               __end_of_START_BLOCK FF49                          _MADCTLbits 007C  
                  __size_of_pulse_e 002A                 __end_of_spiTransfer CDF4  
                    ?_glcdSetCOLMOD 0001                            _initGLCD E67A  
                     __size_of_main 019E                           testUART@i 000F  
                          _testGLCD D286                        ??_testSDCard 0068  
                          _testUART D046                        ??_testRTCGet 0068  
                _R1_ILLEGAL_COMMAND FF49                        ??_testRTCSet 0016  
                      ??_spiReceive 0003                           printf@idx 0051  
                         printf@exp 005C                           printf@val 0054  
       I2C_Master_Write@byteToWrite 0002                           putch@data 0004  
          __end_of_I2C_Master_Start CC5E                         _OSCTUNEbits 000F9B  
          __end_of_I2C_Master_Write CC82                          _INTCONbits 000FF2  
                   ?_glcd_setmadctl 0001                            isdigit@c 0003  
                          scale@scl 002A                         _send_nibble CCD2  
                        _INST_CASET FF76                  __end_of_testSDCard D3D0  
                        _INST_IDMON FF6E                  __end_of_testRTCGet DBCE  
                __end_of_testRTCSet D1B6                          _INST_INVON FF7A  
                        _INST_RASET FF75                          _INST_RAMWR FF74  
                        _INST_TEOFF FF72                  __end_of_spiReceive CC6E  
                        _INST_NORON FF7C                    __tdiv_to_l_@exp1 000F  
                        _INST_PTLAR FF73                          _INST_SLPIN FF7F  
                  __tdiv_to_l_@cntr 000E                          _INST_PTLON FF7D  
                  __tdiv_to_l_@quot 000A                       _R1_IDLE_STATE FF4A  
                     _LCD_SIZE_HORZ FF45                       _LCD_SIZE_VERT FF44  
                  ___lldiv@dividend 0001                         ??_send_byte 0003  
                        _OSCCONbits 000FD3                            printf@ap 0052  
        glcdDrawRectangle@colorData 0024             __end_of_I2C_Master_Init D154  
           __end_of_I2C_Master_Read CE18             __end_of_I2C_Master_Wait CCBE  
           __end_of_I2C_Master_Stop CC66                      _R1_READY_STATE FF4B  
                       lcdInst@data 0004                       ?_glcdTransfer 0004  
                      ?__tdiv_to_l_ 0001                         _printf$2268 004E  
                       _START_BLOCK FF48                    ___lldiv@quotient 0009  
                       _spiTransfer CDD0                        ___aldiv@sign 000A  
                       _SSPCON1bits 000FC6                         _SSPCON2bits 000FC5  
                   ??_glcdSetCOLMOD 0007                        ?_glcd_dispon 0001  
                      ?_glcd_idmoff 0001                       ?_glcd_swreset 0001  
                      ?_glcd_invoff 0001                          _SD_Command D3D0  
                      ?_glcd_slpout 0001  
