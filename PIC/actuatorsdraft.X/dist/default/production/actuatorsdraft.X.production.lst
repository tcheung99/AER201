

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Apr 04 00:13:49 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1,inline
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38  0000                     
    39                           ; Version 2.05
    40                           ; Generated 20/12/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4620 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	smallconst
    75  001000                     __psmallconst:
    76                           	opt callstack 0
    77  001000  00                 	db	0
    78  001001                     _LCD_LINE4_ADDR:
    79                           	opt callstack 0
    80  001001  50                 	db	80
    81  001002                     __end_of_LCD_LINE4_ADDR:
    82                           	opt callstack 0
    83  001002                     _LCD_LINE3_ADDR:
    84                           	opt callstack 0
    85  001002  10                 	db	16
    86  001003                     __end_of_LCD_LINE3_ADDR:
    87                           	opt callstack 0
    88  001003                     _LCD_LINE1_ADDR:
    89                           	opt callstack 0
    90  001003  00                 	db	0
    91  001004                     __end_of_LCD_LINE1_ADDR:
    92                           	opt callstack 0
    93  001004                     _LCD_SIZE_VERT:
    94                           	opt callstack 0
    95  001004  04                 	db	4
    96  001005                     __end_of_LCD_SIZE_VERT:
    97                           	opt callstack 0
    98  001005                     _LCD_SIZE_HORZ:
    99                           	opt callstack 0
   100  001005  10                 	db	16
   101  001006                     __end_of_LCD_SIZE_HORZ:
   102                           	opt callstack 0
   103  001006  40                 	db	64
   104  001007                     __end_of_LCD_LINE2_ADDR:
   105                           	opt callstack 0
   106  0000                     _TMR0L	set	4054
   107  0000                     _TMR0H	set	4055
   108  0000                     _T0CONbits	set	4053
   109  0000                     _LATDbits	set	3980
   110  0000                     _INTCONbits	set	4082
   111  0000                     _SSPBUF	set	4041
   112  0000                     _SSPCON2bits	set	4037
   113  0000                     _SSPCON1	set	4038
   114  0000                     _SSPADD	set	4040
   115  0000                     _TRISCbits	set	3988
   116  0000                     _SSPCON1bits	set	4038
   117  0000                     _SSPCON2	set	4037
   118  0000                     _SSPSTAT	set	4039
   119  0000                     _LATAbits	set	3977
   120  0000                     _LATEbits	set	3981
   121  0000                     _LATCbits	set	3979
   122  0000                     _LATE	set	3981
   123  0000                     _TRISE	set	3990
   124  0000                     _LATC	set	3979
   125  0000                     _TRISC	set	3988
   126  0000                     _ADCON1	set	4033
   127  0000                     _TRISD	set	3989
   128  0000                     _LATD	set	3980
   129  0000                     _LATA	set	3977
   130  0000                     _TRISA	set	3986
   131  0000                     _LATB	set	3978
   132  0000                     _TRISB	set	3987
   133  0000                     _RC2	set	31762
   134  0000                     _RC1	set	31761
   135  001007                     STR_6:
   136  001007  53                 	db	83	;'S'
   137  001008  74                 	db	116	;'t'
   138  001009  65                 	db	101	;'e'
   139  00100A  70                 	db	112	;'p'
   140  00100B  20                 	db	32
   141  00100C  73                 	db	115	;'s'
   142  00100D  70                 	db	112	;'p'
   143  00100E  65                 	db	101	;'e'
   144  00100F  65                 	db	101	;'e'
   145  001010  64                 	db	100	;'d'
   146  001011  20                 	db	32
   147  001012  25                 	db	37
   148  001013  64                 	db	100	;'d'
   149  001014  00                 	db	0
   150  001015                     STR_2:
   151  001015  53                 	db	83	;'S'
   152  001016  74                 	db	116	;'t'
   153  001017  65                 	db	101	;'e'
   154  001018  70                 	db	112	;'p'
   155  001019  70                 	db	112	;'p'
   156  00101A  65                 	db	101	;'e'
   157  00101B  72                 	db	114	;'r'
   158  00101C  20                 	db	32
   159  00101D  73                 	db	115	;'s'
   160  00101E  74                 	db	116	;'t'
   161  00101F  61                 	db	97	;'a'
   162  001020  72                 	db	114	;'r'
   163  001021  74                 	db	116	;'t'
   164  001022  00                 	db	0
   165  001023                     STR_3:
   166  001023  53                 	db	83	;'S'
   167  001024  74                 	db	116	;'t'
   168  001025  65                 	db	101	;'e'
   169  001026  70                 	db	112	;'p'
   170  001027  70                 	db	112	;'p'
   171  001028  65                 	db	101	;'e'
   172  001029  72                 	db	114	;'r'
   173  00102A  20                 	db	32
   174  00102B  64                 	db	100	;'d'
   175  00102C  6F                 	db	111	;'o'
   176  00102D  6E                 	db	110	;'n'
   177  00102E  65                 	db	101	;'e'
   178  00102F  00                 	db	0
   179  001030                     STR_4:
   180  001030  53                 	db	83	;'S'
   181  001031  65                 	db	101	;'e'
   182  001032  72                 	db	114	;'r'
   183  001033  76                 	db	118	;'v'
   184  001034  6F                 	db	111	;'o'
   185  001035  20                 	db	32
   186  001036  64                 	db	100	;'d'
   187  001037  6F                 	db	111	;'o'
   188  001038  6E                 	db	110	;'n'
   189  001039  65                 	db	101	;'e'
   190  00103A  00                 	db	0
   191  00103B                     STR_8:
   192  00103B  73                 	db	115	;'s'
   193  00103C  74                 	db	116	;'t'
   194  00103D  65                 	db	101	;'e'
   195  00103E  70                 	db	112	;'p'
   196  00103F  73                 	db	115	;'s'
   197  001040  20                 	db	32
   198  001041  64                 	db	100	;'d'
   199  001042  6F                 	db	111	;'o'
   200  001043  6E                 	db	110	;'n'
   201  001044  65                 	db	101	;'e'
   202  001045  00                 	db	0
   203  001046                     STR_1:
   204  001046  63                 	db	99	;'c'
   205  001047  6E                 	db	110	;'n'
   206  001048  74                 	db	116	;'t'
   207  001049  20                 	db	32
   208  00104A  69                 	db	105	;'i'
   209  00104B  73                 	db	115	;'s'
   210  00104C  20                 	db	32
   211  00104D  25                 	db	37
   212  00104E  64                 	db	100	;'d'
   213  00104F  00                 	db	0
   214  001050                     STR_5:
   215  001050  73                 	db	115	;'s'
   216  001051  74                 	db	116	;'t'
   217  001052  65                 	db	101	;'e'
   218  001053  70                 	db	112	;'p'
   219  001054  31                 	db	49	;'1'
   220  001055  00                 	db	0
   221  0000                     
   222                           ; #config settings
   223  001056  00                 	db	0	; dummy byte at the end
   224  0000                     
   225                           	psect	cinit
   226  0020E0                     __pcinit:
   227                           	opt callstack 0
   228  0020E0                     start_initialization:
   229                           	opt callstack 0
   230  0020E0                     __initialization:
   231                           	opt callstack 0
   232                           
   233                           ; Clear objects allocated to BANK0 (43 bytes)
   234  0020E0  EE00  F080         	lfsr	0,__pbssBANK0
   235  0020E4  0E2B               	movlw	43
   236  0020E6                     clear_0:
   237  0020E6  6AEE               	clrf	postinc0,c
   238  0020E8  06E8               	decf	wreg,f,c
   239  0020EA  E1FD               	bnz	clear_0
   240                           
   241                           ; Clear objects allocated to COMRAM (12 bytes)
   242  0020EC  EE00  F074         	lfsr	0,__pbssCOMRAM
   243  0020F0  0E0C               	movlw	12
   244  0020F2                     clear_1:
   245  0020F2  6AEE               	clrf	postinc0,c
   246  0020F4  06E8               	decf	wreg,f,c
   247  0020F6  E1FD               	bnz	clear_1
   248  0020F8                     end_of_initialization:
   249                           	opt callstack 0
   250  0020F8                     __end_of__initialization:
   251                           	opt callstack 0
   252  0020F8  0E00               	movlw	low (__Lsmallconst shr (0+16))
   253  0020FA  6EF8               	movwf	tblptru,c
   254  0020FC  0E10               	movlw	high __Lsmallconst
   255  0020FE  6EF7               	movwf	tblptrh,c
   256  002100  0100               	movlb	0
   257  002102  EF34  F00D         	goto	_main	;jump to C main() function
   258                           
   259                           	psect	bssCOMRAM
   260  000074                     __pbssCOMRAM:
   261                           	opt callstack 0
   262  000074                     _nout:
   263                           	opt callstack 0
   264  000074                     	ds	2
   265  000076                     _width:
   266                           	opt callstack 0
   267  000076                     	ds	2
   268  000078                     _prec:
   269                           	opt callstack 0
   270  000078                     	ds	2
   271  00007A                     _flags:
   272                           	opt callstack 0
   273  00007A                     	ds	2
   274  00007C                     _steps2_adj:
   275                           	opt callstack 0
   276  00007C                     	ds	2
   277  00007E                     _act_cnt:
   278                           	opt callstack 0
   279  00007E                     	ds	2
   280                           
   281                           	psect	bssBANK0
   282  000080                     __pbssBANK0:
   283                           	opt callstack 0
   284  000080                     _time:
   285                           	opt callstack 0
   286  000080                     	ds	7
   287  000087                     _cnt:
   288                           	opt callstack 0
   289  000087                     	ds	2
   290  000089                     _timer_count:
   291                           	opt callstack 0
   292  000089                     	ds	2
   293  00008B                     _dbuf:
   294                           	opt callstack 0
   295  00008B                     	ds	32
   296                           
   297                           	psect	cstackCOMRAM
   298  000001                     __pcstackCOMRAM:
   299                           	opt callstack 0
   300  000001                     ?_strlen:
   301                           	opt callstack 0
   302  000001                     ?___aodiv:
   303                           	opt callstack 0
   304  000001                     ?___aomod:
   305                           	opt callstack 0
   306  000001                     pulse_e@interruptState:
   307                           	opt callstack 0
   308  000001                     servoRotate0@servo:
   309                           	opt callstack 0
   310  000001                     servoRotate180@servo:
   311                           	opt callstack 0
   312  000001                     full_drive@stepper_no:
   313                           	opt callstack 0
   314  000001                     strlen@s:
   315                           	opt callstack 0
   316  000001                     ___aodiv@dividend:
   317                           	opt callstack 0
   318  000001                     ___aomod@dividend:
   319                           	opt callstack 0
   320                           
   321                           ; 8 bytes @ 0x0
   322  000001                     	ds	1
   323  000002                     send_nibble@data:
   324                           	opt callstack 0
   325                           
   326                           ; 1 bytes @ 0x1
   327  000002                     	ds	1
   328  000003                     ??_full_drive:
   329  000003                     ??_servoRotate0:
   330  000003                     ??_servoRotate180:
   331  000003                     send_byte@data:
   332                           	opt callstack 0
   333  000003                     strlen@a:
   334                           	opt callstack 0
   335                           
   336                           ; 2 bytes @ 0x2
   337  000003                     	ds	1
   338  000004                     full_drive@direction:
   339                           	opt callstack 0
   340  000004                     lcdInst@data:
   341                           	opt callstack 0
   342  000004                     putch@data:
   343                           	opt callstack 0
   344  000004                     servoRotate0@i:
   345                           	opt callstack 0
   346  000004                     servoRotate180@i:
   347                           	opt callstack 0
   348                           
   349                           ; 2 bytes @ 0x3
   350  000004                     	ds	1
   351  000005                     ??_initLCD:
   352  000005                     fputc@c:
   353                           	opt callstack 0
   354                           
   355                           ; 2 bytes @ 0x4
   356  000005                     	ds	1
   357  000006                     ??_servo:
   358                           
   359                           ; 1 bytes @ 0x5
   360  000006                     	ds	1
   361  000007                     fputc@fp:
   362                           	opt callstack 0
   363                           
   364                           ; 2 bytes @ 0x6
   365  000007                     	ds	2
   366  000009                     ??_fputc:
   367  000009                     ___aodiv@divisor:
   368                           	opt callstack 0
   369  000009                     ___aomod@divisor:
   370                           	opt callstack 0
   371                           
   372                           ; 8 bytes @ 0x8
   373  000009                     	ds	5
   374  00000E                     fputs@s:
   375                           	opt callstack 0
   376                           
   377                           ; 2 bytes @ 0xD
   378  00000E                     	ds	2
   379  000010                     fputs@fp:
   380                           	opt callstack 0
   381                           
   382                           ; 2 bytes @ 0xF
   383  000010                     	ds	1
   384  000011                     ___aodiv@counter:
   385                           	opt callstack 0
   386  000011                     ___aomod@counter:
   387                           	opt callstack 0
   388                           
   389                           ; 1 bytes @ 0x10
   390  000011                     	ds	1
   391  000012                     ___aodiv@sign:
   392                           	opt callstack 0
   393  000012                     ___aomod@sign:
   394                           	opt callstack 0
   395  000012                     fputs@c:
   396                           	opt callstack 0
   397                           
   398                           ; 1 bytes @ 0x11
   399  000012                     	ds	1
   400  000013                     ?_abs:
   401                           	opt callstack 0
   402  000013                     abs@a:
   403                           	opt callstack 0
   404  000013                     fputs@i:
   405                           	opt callstack 0
   406  000013                     ___aodiv@quotient:
   407                           	opt callstack 0
   408                           
   409                           ; 8 bytes @ 0x12
   410  000013                     	ds	2
   411  000015                     ??_abs:
   412  000015                     ?_pad:
   413                           	opt callstack 0
   414  000015                     pad@fp:
   415                           	opt callstack 0
   416                           
   417                           ; 2 bytes @ 0x14
   418  000015                     	ds	2
   419  000017                     pad@buf:
   420                           	opt callstack 0
   421                           
   422                           ; 2 bytes @ 0x16
   423  000017                     	ds	2
   424  000019                     pad@p:
   425                           	opt callstack 0
   426                           
   427                           ; 2 bytes @ 0x18
   428  000019                     	ds	2
   429  00001B                     ??_pad:
   430                           
   431                           ; 1 bytes @ 0x1A
   432  00001B                     	ds	1
   433  00001C                     pad@i:
   434                           	opt callstack 0
   435                           
   436                           ; 2 bytes @ 0x1B
   437  00001C                     	ds	2
   438  00001E                     pad@w:
   439                           	opt callstack 0
   440                           
   441                           ; 2 bytes @ 0x1D
   442  00001E                     	ds	2
   443  000020                     ?_dtoa:
   444                           	opt callstack 0
   445  000020                     dtoa@fp:
   446                           	opt callstack 0
   447                           
   448                           ; 2 bytes @ 0x1F
   449  000020                     	ds	2
   450  000022                     dtoa@d:
   451                           	opt callstack 0
   452                           
   453                           ; 8 bytes @ 0x21
   454  000022                     	ds	8
   455  00002A                     ??_dtoa:
   456                           
   457                           ; 1 bytes @ 0x29
   458  00002A                     	ds	8
   459  000032                     _dtoa$652:
   460                           	opt callstack 0
   461                           
   462                           ; 2 bytes @ 0x31
   463  000032                     	ds	2
   464  000034                     dtoa@p:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0x33
   468  000034                     	ds	2
   469  000036                     dtoa@w:
   470                           	opt callstack 0
   471                           
   472                           ; 2 bytes @ 0x35
   473  000036                     	ds	2
   474  000038                     dtoa@s:
   475                           	opt callstack 0
   476                           
   477                           ; 2 bytes @ 0x37
   478  000038                     	ds	2
   479  00003A                     dtoa@n:
   480                           	opt callstack 0
   481                           
   482                           ; 8 bytes @ 0x39
   483  00003A                     	ds	8
   484  000042                     dtoa@i:
   485                           	opt callstack 0
   486                           
   487                           ; 2 bytes @ 0x41
   488  000042                     	ds	2
   489  000044                     ?_vfpfcnvrt:
   490                           	opt callstack 0
   491  000044                     vfpfcnvrt@fp:
   492                           	opt callstack 0
   493                           
   494                           ; 2 bytes @ 0x43
   495  000044                     	ds	2
   496  000046                     vfpfcnvrt@fmt:
   497                           	opt callstack 0
   498                           
   499                           ; 2 bytes @ 0x45
   500  000046                     	ds	2
   501  000048                     vfpfcnvrt@ap:
   502                           	opt callstack 0
   503                           
   504                           ; 2 bytes @ 0x47
   505  000048                     	ds	2
   506  00004A                     ??_vfpfcnvrt:
   507                           
   508                           ; 1 bytes @ 0x49
   509  00004A                     	ds	2
   510  00004C                     vfpfcnvrt@ll:
   511                           	opt callstack 0
   512                           
   513                           ; 8 bytes @ 0x4B
   514  00004C                     	ds	8
   515  000054                     ?_vfprintf:
   516                           	opt callstack 0
   517  000054                     vfprintf@fp:
   518                           	opt callstack 0
   519                           
   520                           ; 2 bytes @ 0x53
   521  000054                     	ds	2
   522  000056                     vfprintf@fmt:
   523                           	opt callstack 0
   524                           
   525                           ; 2 bytes @ 0x55
   526  000056                     	ds	2
   527  000058                     vfprintf@ap:
   528                           	opt callstack 0
   529                           
   530                           ; 2 bytes @ 0x57
   531  000058                     	ds	2
   532  00005A                     vfprintf@cfmt:
   533                           	opt callstack 0
   534                           
   535                           ; 2 bytes @ 0x59
   536  00005A                     	ds	2
   537  00005C                     ?_printf:
   538                           	opt callstack 0
   539  00005C                     printf@fmt:
   540                           	opt callstack 0
   541                           
   542                           ; 2 bytes @ 0x5B
   543  00005C                     	ds	4
   544  000060                     
   545                           ; 1 bytes @ 0x5F
   546  000060                     	ds	2
   547  000062                     printf@ap:
   548                           	opt callstack 0
   549                           
   550                           ; 2 bytes @ 0x61
   551  000062                     	ds	2
   552  000064                     ??_stepper:
   553  000064                     ??_stepper2_back:
   554  000064                     stepper2@steps2_adj:
   555                           	opt callstack 0
   556                           
   557                           ; 2 bytes @ 0x63
   558  000064                     	ds	1
   559  000065                     stepper2_back@direction:
   560                           	opt callstack 0
   561  000065                     stepper@i:
   562                           	opt callstack 0
   563                           
   564                           ; 2 bytes @ 0x64
   565  000065                     	ds	1
   566  000066                     ??_stepper2:
   567  000066                     stepper2_back@count_stepper:
   568                           	opt callstack 0
   569                           
   570                           ; 2 bytes @ 0x65
   571  000066                     	ds	1
   572  000067                     stepper@count_stepper:
   573                           	opt callstack 0
   574                           
   575                           ; 2 bytes @ 0x66
   576  000067                     	ds	1
   577  000068                     stepper2_back@i:
   578                           	opt callstack 0
   579                           
   580                           ; 2 bytes @ 0x67
   581  000068                     	ds	3
   582  00006B                     stepper2@i:
   583                           	opt callstack 0
   584                           
   585                           ; 2 bytes @ 0x6A
   586  00006B                     	ds	2
   587  00006D                     stepper2@i_227:
   588                           	opt callstack 0
   589                           
   590                           ; 2 bytes @ 0x6C
   591  00006D                     	ds	2
   592  00006F                     stepper2@count_stepper:
   593                           	opt callstack 0
   594                           
   595                           ; 2 bytes @ 0x6E
   596  00006F                     	ds	2
   597  000071                     stepper2@direction:
   598                           	opt callstack 0
   599                           
   600                           ; 1 bytes @ 0x70
   601  000071                     	ds	1
   602  000072                     ??_main:
   603                           
   604                           ; 1 bytes @ 0x71
   605  000072                     	ds	2
   606                           
   607 ;;
   608 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   609 ;;
   610 ;; *************** function _main *****************
   611 ;; Defined at:
   612 ;;		line 91 in file "main.c"
   613 ;; Parameters:    Size  Location     Type
   614 ;;		None
   615 ;; Auto vars:     Size  Location     Type
   616 ;;		None
   617 ;; Return value:  Size  Location     Type
   618 ;;                  1    wreg      void 
   619 ;; Registers used:
   620 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   621 ;; Tracked objects:
   622 ;;		On entry : 0/0
   623 ;;		On exit  : 0/0
   624 ;;		Unchanged: 0/0
   625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   628 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   629 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   630 ;;Total ram usage:        2 bytes
   631 ;; Hardware stack levels required when called:   12
   632 ;; This function calls:
   633 ;;		_initLCD
   634 ;;		_lcdInst
   635 ;;		_printf
   636 ;;		_servo
   637 ;;		_stepper
   638 ;;		_stepper2
   639 ;;		_stepper2_back
   640 ;;		_system_init
   641 ;; This function is called by:
   642 ;;		Startup code after reset
   643 ;; This function uses a non-reentrant model
   644 ;;
   645                           
   646                           	psect	text0
   647  001A68                     __ptext0:
   648                           	opt callstack 0
   649  001A68                     _main:
   650                           	opt callstack 19
   651                           
   652                           ;main.c: 92:     system_init();
   653                           
   654                           ;incstack = 0
   655  001A68  EC2F  F010         	call	_system_init	;wreg free
   656                           
   657                           ;main.c: 93:     initLCD();
   658  001A6C  EC7C  F00F         	call	_initLCD	;wreg free
   659                           
   660                           ;main.c: 97:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   661  001A70  0E01               	movlw	1
   662  001A72  ECB0  F010         	call	_lcdInst
   663  001A76  0E11               	movlw	17
   664  001A78  6E72               	movwf	??_main& (0+255),c
   665  001A7A  0E3A               	movlw	58
   666  001A7C                     u1517:
   667  001A7C  2EE8               	decfsz	wreg,f,c
   668  001A7E  D7FE               	bra	u1517
   669  001A80  2E72               	decfsz	??_main& (0+255),f,c
   670  001A82  D7FC               	bra	u1517
   671  001A84  D000               	nop2	
   672                           
   673                           ;main.c: 98:     printf("cnt is %d",act_cnt);
   674  001A86  0E46               	movlw	low STR_1
   675  001A88  6E5C               	movwf	printf@fmt,c
   676  001A8A  0E10               	movlw	high STR_1
   677  001A8C  6E5D               	movwf	printf@fmt+1,c
   678  001A8E  C07E  F05E         	movff	_act_cnt,?_printf+2
   679  001A92  C07F  F05F         	movff	_act_cnt+1,?_printf+3
   680  001A96  EC83  F010         	call	_printf	;wreg free
   681                           
   682                           ;main.c: 99:     _delay((unsigned long)((200)*(10000000/4000.0)));
   683  001A9A  0E03               	movlw	3
   684  001A9C  6E73               	movwf	(??_main+1)& (0+255),c
   685  001A9E  0E8A               	movlw	138
   686  001AA0  6E72               	movwf	??_main& (0+255),c
   687  001AA2  0E56               	movlw	86
   688  001AA4                     u1527:
   689  001AA4  2EE8               	decfsz	wreg,f,c
   690  001AA6  D7FE               	bra	u1527
   691  001AA8  2E72               	decfsz	??_main& (0+255),f,c
   692  001AAA  D7FC               	bra	u1527
   693  001AAC  2E73               	decfsz	(??_main+1)& (0+255),f,c
   694  001AAE  D7FA               	bra	u1527
   695                           
   696                           ;main.c: 101:     if (act_cnt==0){
   697  001AB0  507E               	movf	_act_cnt,w,c
   698  001AB2  107F               	iorwf	_act_cnt+1,w,c
   699  001AB4  A4D8               	btfss	status,2,c
   700  001AB6  EF00  F000         	goto	start
   701                           
   702                           ;main.c: 102:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   703  001ABA  0E01               	movlw	1
   704  001ABC  ECB0  F010         	call	_lcdInst
   705  001AC0  0E11               	movlw	17
   706  001AC2  6E72               	movwf	??_main& (0+255),c
   707  001AC4  0E3A               	movlw	58
   708  001AC6                     u1537:
   709  001AC6  2EE8               	decfsz	wreg,f,c
   710  001AC8  D7FE               	bra	u1537
   711  001ACA  2E72               	decfsz	??_main& (0+255),f,c
   712  001ACC  D7FC               	bra	u1537
   713  001ACE  D000               	nop2	
   714                           
   715                           ;main.c: 103:         printf("Stepper start");
   716  001AD0  0E15               	movlw	low STR_2
   717  001AD2  6E5C               	movwf	printf@fmt,c
   718  001AD4  0E10               	movlw	high STR_2
   719  001AD6  6E5D               	movwf	printf@fmt+1,c
   720  001AD8  EC83  F010         	call	_printf	;wreg free
   721                           
   722                           ;main.c: 105:         stepper();
   723  001ADC  ECB8  F00D         	call	_stepper	;wreg free
   724                           
   725                           ;main.c: 106:         steps2_adj = 110 + 2;
   726  001AE0  0E00               	movlw	0
   727  001AE2  6E7D               	movwf	_steps2_adj+1,c
   728  001AE4  0E70               	movlw	112
   729  001AE6  6E7C               	movwf	_steps2_adj,c
   730                           
   731                           ;main.c: 107:         stepper2(0, steps2_adj);
   732  001AE8  0E00               	movlw	0
   733  001AEA  6E65               	movwf	stepper2@steps2_adj+1,c
   734  001AEC  0E70               	movlw	112
   735  001AEE  6E64               	movwf	stepper2@steps2_adj,c
   736  001AF0  0E00               	movlw	0
   737  001AF2  ECAF  F00C         	call	_stepper2
   738                           
   739                           ;main.c: 108:         stepper2_back(1);
   740  001AF6  0E01               	movlw	1
   741  001AF8  EC01  F00F         	call	_stepper2_back
   742                           
   743                           ;main.c: 110:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   744  001AFC  0E01               	movlw	1
   745  001AFE  ECB0  F010         	call	_lcdInst
   746  001B02  0E11               	movlw	17
   747  001B04  6E72               	movwf	??_main& (0+255),c
   748  001B06  0E3A               	movlw	58
   749  001B08                     u1547:
   750  001B08  2EE8               	decfsz	wreg,f,c
   751  001B0A  D7FE               	bra	u1547
   752  001B0C  2E72               	decfsz	??_main& (0+255),f,c
   753  001B0E  D7FC               	bra	u1547
   754  001B10  D000               	nop2	
   755                           
   756                           ;main.c: 111:         printf("Stepper done");
   757  001B12  0E23               	movlw	low STR_3
   758  001B14  6E5C               	movwf	printf@fmt,c
   759  001B16  0E10               	movlw	high STR_3
   760  001B18  6E5D               	movwf	printf@fmt+1,c
   761  001B1A  EC83  F010         	call	_printf	;wreg free
   762                           
   763                           ;main.c: 113:         servo();
   764  001B1E  ECDA  F00F         	call	_servo	;wreg free
   765                           
   766                           ;main.c: 115:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   767  001B22  0E01               	movlw	1
   768  001B24  ECB0  F010         	call	_lcdInst
   769  001B28  0E11               	movlw	17
   770  001B2A  6E72               	movwf	??_main& (0+255),c
   771  001B2C  0E3A               	movlw	58
   772  001B2E                     u1557:
   773  001B2E  2EE8               	decfsz	wreg,f,c
   774  001B30  D7FE               	bra	u1557
   775  001B32  2E72               	decfsz	??_main& (0+255),f,c
   776  001B34  D7FC               	bra	u1557
   777  001B36  D000               	nop2	
   778                           
   779                           ;main.c: 116:         printf("Servo done");
   780  001B38  0E30               	movlw	low STR_4
   781  001B3A  6E5C               	movwf	printf@fmt,c
   782  001B3C  0E10               	movlw	high STR_4
   783  001B3E  6E5D               	movwf	printf@fmt+1,c
   784  001B40  EC83  F010         	call	_printf	;wreg free
   785                           
   786                           ;main.c: 120:         _delay((unsigned long)((200)*(10000000/4000.0)));
   787  001B44  0E03               	movlw	3
   788  001B46  6E73               	movwf	(??_main+1)& (0+255),c
   789  001B48  0E8A               	movlw	138
   790  001B4A  6E72               	movwf	??_main& (0+255),c
   791  001B4C  0E56               	movlw	86
   792  001B4E                     u1567:
   793  001B4E  2EE8               	decfsz	wreg,f,c
   794  001B50  D7FE               	bra	u1567
   795  001B52  2E72               	decfsz	??_main& (0+255),f,c
   796  001B54  D7FC               	bra	u1567
   797  001B56  2E73               	decfsz	(??_main+1)& (0+255),f,c
   798  001B58  D7FA               	bra	u1567
   799                           
   800                           ;main.c: 122:         stepper2(1, steps2_adj);
   801  001B5A  0E00               	movlw	0
   802  001B5C  6E65               	movwf	stepper2@steps2_adj+1,c
   803  001B5E  0E70               	movlw	112
   804  001B60  6E64               	movwf	stepper2@steps2_adj,c
   805  001B62  0E01               	movlw	1
   806  001B64  ECAF  F00C         	call	_stepper2
   807                           
   808                           ;main.c: 123:         act_cnt++;
   809  001B68  4A7E               	infsnz	_act_cnt,f,c
   810  001B6A  2A7F               	incf	_act_cnt+1,f,c
   811  001B6C  EF00  F000         	goto	start
   812  001B70                     __end_of_main:
   813                           	opt callstack 0
   814                           
   815 ;; *************** function _system_init *****************
   816 ;; Defined at:
   817 ;;		line 132 in file "main.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;		None
   820 ;; Auto vars:     Size  Location     Type
   821 ;;		None
   822 ;; Return value:  Size  Location     Type
   823 ;;                  1    wreg      void 
   824 ;; Registers used:
   825 ;;		wreg, status,2
   826 ;; Tracked objects:
   827 ;;		On entry : 0/0
   828 ;;		On exit  : 0/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   835 ;;Total ram usage:        0 bytes
   836 ;; Hardware stack levels used:    1
   837 ;; This function calls:
   838 ;;		Nothing
   839 ;; This function is called by:
   840 ;;		_main
   841 ;; This function uses a non-reentrant model
   842 ;;
   843                           
   844                           	psect	text1
   845  00205E                     __ptext1:
   846                           	opt callstack 0
   847  00205E                     _system_init:
   848                           	opt callstack 30
   849                           
   850                           ;main.c: 133:     TRISB = 0x00;
   851                           
   852                           ;incstack = 0
   853  00205E  0E00               	movlw	0
   854  002060  6E93               	movwf	3987,c	;volatile
   855                           
   856                           ;main.c: 135:     LATB = 0x0F;
   857  002062  0E0F               	movlw	15
   858  002064  6E8A               	movwf	3978,c	;volatile
   859                           
   860                           ;main.c: 136:     TRISA = 0x00;
   861  002066  0E00               	movlw	0
   862  002068  6E92               	movwf	3986,c	;volatile
   863                           
   864                           ;main.c: 137:     LATA = 0x00;
   865  00206A  0E00               	movlw	0
   866  00206C  6E89               	movwf	3977,c	;volatile
   867                           
   868                           ;main.c: 140:     LATD = 0x00;
   869  00206E  0E00               	movlw	0
   870  002070  6E8C               	movwf	3980,c	;volatile
   871                           
   872                           ;main.c: 141:     TRISD = 0x00;
   873  002072  0E00               	movlw	0
   874  002074  6E95               	movwf	3989,c	;volatile
   875                           
   876                           ;main.c: 143:     ADCON1 = 0b00001111;
   877  002076  0E0F               	movlw	15
   878  002078  6EC1               	movwf	4033,c	;volatile
   879                           
   880                           ;main.c: 145:     TRISC = 0x00;
   881  00207A  0E00               	movlw	0
   882  00207C  6E94               	movwf	3988,c	;volatile
   883                           
   884                           ;main.c: 146:     LATC = 0x00;
   885  00207E  0E00               	movlw	0
   886  002080  6E8B               	movwf	3979,c	;volatile
   887                           
   888                           ;main.c: 147:     TRISE = 0x00;
   889  002082  0E00               	movlw	0
   890  002084  6E96               	movwf	3990,c	;volatile
   891                           
   892                           ;main.c: 148:     LATE = 0x00;
   893  002086  0E00               	movlw	0
   894  002088  6E8D               	movwf	3981,c	;volatile
   895  00208A  0012               	return		;funcret
   896  00208C                     __end_of_system_init:
   897                           	opt callstack 0
   898                           
   899 ;; *************** function _stepper2_back *****************
   900 ;; Defined at:
   901 ;;		line 498 in file "main.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;  direction       1    wreg     unsigned char 
   904 ;; Auto vars:     Size  Location     Type
   905 ;;  direction       1  100[COMRAM] unsigned char 
   906 ;;  i               2  103[COMRAM] int 
   907 ;;  count_steppe    2  101[COMRAM] int 
   908 ;; Return value:  Size  Location     Type
   909 ;;                  1    wreg      void 
   910 ;; Registers used:
   911 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   912 ;; Tracked objects:
   913 ;;		On entry : 0/0
   914 ;;		On exit  : 0/0
   915 ;;		Unchanged: 0/0
   916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   918 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   919 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   920 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   921 ;;Total ram usage:        6 bytes
   922 ;; Hardware stack levels used:    1
   923 ;; Hardware stack levels required when called:   11
   924 ;; This function calls:
   925 ;;		_full_drive
   926 ;;		_lcdInst
   927 ;;		_printf
   928 ;; This function is called by:
   929 ;;		_main
   930 ;; This function uses a non-reentrant model
   931 ;;
   932                           
   933                           	psect	text2
   934  001E02                     __ptext2:
   935                           	opt callstack 0
   936  001E02                     _stepper2_back:
   937                           	opt callstack 19
   938                           
   939                           ;incstack = 0
   940                           ;stepper2_back@direction stored from wreg
   941  001E02  6E65               	movwf	stepper2_back@direction,c
   942                           
   943                           ;main.c: 516:     int count_stepper = 0;
   944  001E04  0E00               	movlw	0
   945  001E06  6E67               	movwf	stepper2_back@count_stepper+1,c
   946  001E08  0E00               	movlw	0
   947  001E0A  6E66               	movwf	stepper2_back@count_stepper,c
   948                           
   949                           ;main.c: 519:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
   950                           
   951                           ;main.c: 518:         if (count_stepper<1){
   952  001E0C  0E01               	movlw	1
   953  001E0E  ECB0  F010         	call	_lcdInst
   954  001E12  0E11               	movlw	17
   955  001E14  6E64               	movwf	??_stepper2_back& (0+255),c
   956  001E16  0E3A               	movlw	58
   957  001E18                     u1577:
   958  001E18  2EE8               	decfsz	wreg,f,c
   959  001E1A  D7FE               	bra	u1577
   960  001E1C  2E64               	decfsz	??_stepper2_back& (0+255),f,c
   961  001E1E  D7FC               	bra	u1577
   962  001E20  D000               	nop2	
   963                           
   964                           ;main.c: 520:             printf("step1");
   965  001E22  0E50               	movlw	low STR_5
   966  001E24  6E5C               	movwf	printf@fmt,c
   967  001E26  0E10               	movlw	high STR_5
   968  001E28  6E5D               	movwf	printf@fmt+1,c
   969  001E2A  EC83  F010         	call	_printf	;wreg free
   970  001E2E  0EC0               	movlw	192
   971  001E30  ECB0  F010         	call	_lcdInst
   972                           
   973                           ;main.c: 522:             printf("Step speed %d",6);
   974  001E34  0E07               	movlw	low STR_6
   975  001E36  6E5C               	movwf	printf@fmt,c
   976  001E38  0E10               	movlw	high STR_6
   977  001E3A  6E5D               	movwf	printf@fmt+1,c
   978  001E3C  0E00               	movlw	0
   979  001E3E  6E5F               	movwf	?_printf+3,c
   980  001E40  0E06               	movlw	6
   981  001E42  6E5E               	movwf	?_printf+2,c
   982  001E44  EC83  F010         	call	_printf	;wreg free
   983                           
   984                           ;main.c: 523:             for(int i=0;i<5;i++){
   985  001E48  0E00               	movlw	0
   986  001E4A  6E69               	movwf	stepper2_back@i+1,c
   987  001E4C  0E00               	movlw	0
   988  001E4E  6E68               	movwf	stepper2_back@i,c
   989  001E50                     l2504:
   990                           
   991                           ;main.c: 525:                 full_drive(direction, 2);
   992  001E50  0E00               	movlw	0
   993  001E52  6E02               	movwf	full_drive@stepper_no+1,c
   994  001E54  0E02               	movlw	2
   995  001E56  6E01               	movwf	full_drive@stepper_no,c
   996  001E58  5065               	movf	stepper2_back@direction,w,c
   997  001E5A  EC2C  F008         	call	_full_drive
   998                           
   999                           ;main.c: 527:             }
  1000  001E5E  4A68               	infsnz	stepper2_back@i,f,c
  1001  001E60  2A69               	incf	stepper2_back@i+1,f,c
  1002  001E62  BE69               	btfsc	stepper2_back@i+1,7,c
  1003  001E64  D7F5               	goto	l2504
  1004  001E66  5069               	movf	stepper2_back@i+1,w,c
  1005  001E68  E104               	bnz	u1470
  1006  001E6A  0E05               	movlw	5
  1007  001E6C  5C68               	subwf	stepper2_back@i,w,c
  1008  001E6E  A0D8               	btfss	status,0,c
  1009  001E70  D7EF               	goto	l2504
  1010  001E72                     u1470:
  1011                           
  1012                           ;main.c: 528:             printf("cnt is %d", count_stepper);
  1013  001E72  0E46               	movlw	low STR_1
  1014  001E74  6E5C               	movwf	printf@fmt,c
  1015  001E76  0E10               	movlw	high STR_1
  1016  001E78  6E5D               	movwf	printf@fmt+1,c
  1017  001E7A  C066  F05E         	movff	stepper2_back@count_stepper,?_printf+2
  1018  001E7E  C067  F05F         	movff	stepper2_back@count_stepper+1,?_printf+3
  1019  001E82  EC83  F010         	call	_printf	;wreg free
  1020                           
  1021                           ;main.c: 529:             count_stepper++;
  1022  001E86  4A66               	infsnz	stepper2_back@count_stepper,f,c
  1023  001E88  2A67               	incf	stepper2_back@count_stepper+1,f,c
  1024  001E8A  0012               	return		;funcret
  1025  001E8C                     __end_of_stepper2_back:
  1026                           	opt callstack 0
  1027                           
  1028 ;; *************** function _stepper2 *****************
  1029 ;; Defined at:
  1030 ;;		line 451 in file "main.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;  direction       1    wreg     unsigned char 
  1033 ;;  steps2_adj      2   99[COMRAM] int 
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;  direction       1  112[COMRAM] unsigned char 
  1036 ;;  i               2  108[COMRAM] int 
  1037 ;;  i               2  106[COMRAM] int 
  1038 ;;  count_steppe    2  110[COMRAM] int 
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  1    wreg      void 
  1041 ;; Registers used:
  1042 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1048 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1049 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1050 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1051 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1052 ;;Total ram usage:       14 bytes
  1053 ;; Hardware stack levels used:    1
  1054 ;; Hardware stack levels required when called:   11
  1055 ;; This function calls:
  1056 ;;		_full_drive
  1057 ;;		_lcdInst
  1058 ;;		_printf
  1059 ;; This function is called by:
  1060 ;;		_main
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           	psect	text3
  1065  00195E                     __ptext3:
  1066                           	opt callstack 0
  1067  00195E                     _stepper2:
  1068                           	opt callstack 19
  1069                           
  1070                           ;incstack = 0
  1071                           ;stepper2@direction stored from wreg
  1072  00195E  6E71               	movwf	stepper2@direction,c
  1073                           
  1074                           ;main.c: 452:     int count_stepper = 0;
  1075  001960  0E00               	movlw	0
  1076  001962  6E70               	movwf	stepper2@count_stepper+1,c
  1077  001964  0E00               	movlw	0
  1078  001966  6E6F               	movwf	stepper2@count_stepper,c
  1079  001968                     l2444:
  1080                           
  1081                           ;main.c: 454:         if (count_stepper<1){
  1082  001968  BE70               	btfsc	stepper2@count_stepper+1,7,c
  1083  00196A  D005               	goto	u1420
  1084  00196C  5070               	movf	stepper2@count_stepper+1,w,c
  1085  00196E  E102               	bnz	u1421
  1086  001970  046F               	decf	stepper2@count_stepper,w,c
  1087  001972  B0D8               	btfsc	status,0,c
  1088  001974                     u1421:
  1089  001974  0012               	return	
  1090  001976                     u1420:
  1091                           
  1092                           ;main.c: 455:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1093  001976  0E01               	movlw	1
  1094  001978  ECB0  F010         	call	_lcdInst
  1095  00197C  0E11               	movlw	17
  1096  00197E  6E66               	movwf	??_stepper2& (0+255),c
  1097  001980  0E3A               	movlw	58
  1098  001982                     u1587:
  1099  001982  2EE8               	decfsz	wreg,f,c
  1100  001984  D7FE               	bra	u1587
  1101  001986  2E66               	decfsz	??_stepper2& (0+255),f,c
  1102  001988  D7FC               	bra	u1587
  1103  00198A  D000               	nop2	
  1104                           
  1105                           ;main.c: 456:             printf("step1");
  1106  00198C  0E50               	movlw	low STR_5
  1107  00198E  6E5C               	movwf	printf@fmt,c
  1108  001990  0E10               	movlw	high STR_5
  1109  001992  6E5D               	movwf	printf@fmt+1,c
  1110  001994  EC83  F010         	call	_printf	;wreg free
  1111  001998  0EC0               	movlw	192
  1112  00199A  ECB0  F010         	call	_lcdInst
  1113                           
  1114                           ;main.c: 458:             printf("Step speed %d",6);
  1115  00199E  0E07               	movlw	low STR_6
  1116  0019A0  6E5C               	movwf	printf@fmt,c
  1117  0019A2  0E10               	movlw	high STR_6
  1118  0019A4  6E5D               	movwf	printf@fmt+1,c
  1119  0019A6  0E00               	movlw	0
  1120  0019A8  6E5F               	movwf	?_printf+3,c
  1121  0019AA  0E06               	movlw	6
  1122  0019AC  6E5E               	movwf	?_printf+2,c
  1123  0019AE  EC83  F010         	call	_printf	;wreg free
  1124                           
  1125                           ;main.c: 459:             if (direction == 0){
  1126  0019B2  5071               	movf	stepper2@direction,w,c
  1127  0019B4  A4D8               	btfss	status,2,c
  1128  0019B6  D024               	goto	l2470
  1129                           
  1130                           ;main.c: 460:                 for(int i=0;i<steps2_adj;i++){
  1131  0019B8  0E00               	movlw	0
  1132  0019BA  6E6C               	movwf	stepper2@i+1,c
  1133  0019BC  0E00               	movlw	0
  1134  0019BE  6E6B               	movwf	stepper2@i,c
  1135  0019C0  D009               	goto	l2464
  1136  0019C2                     l2460:
  1137                           
  1138                           ;main.c: 462:                 full_drive(direction, 2);
  1139  0019C2  0E00               	movlw	0
  1140  0019C4  6E02               	movwf	full_drive@stepper_no+1,c
  1141  0019C6  0E02               	movlw	2
  1142  0019C8  6E01               	movwf	full_drive@stepper_no,c
  1143  0019CA  5071               	movf	stepper2@direction,w,c
  1144  0019CC  EC2C  F008         	call	_full_drive
  1145                           
  1146                           ;main.c: 464:             }
  1147  0019D0  4A6B               	infsnz	stepper2@i,f,c
  1148  0019D2  2A6C               	incf	stepper2@i+1,f,c
  1149  0019D4                     l2464:
  1150  0019D4  5064               	movf	stepper2@steps2_adj,w,c
  1151  0019D6  5C6B               	subwf	stepper2@i,w,c
  1152  0019D8  506C               	movf	stepper2@i+1,w,c
  1153  0019DA  0A80               	xorlw	128
  1154  0019DC  6E66               	movwf	??_stepper2& (0+255),c
  1155  0019DE  5065               	movf	stepper2@steps2_adj+1,w,c
  1156  0019E0  0A80               	xorlw	128
  1157  0019E2  5866               	subwfb	??_stepper2& (0+255),w,c
  1158  0019E4  A0D8               	btfss	status,0,c
  1159  0019E6  D7ED               	goto	l2460
  1160                           
  1161                           ;main.c: 465:             printf("cnt is %d", count_stepper);
  1162  0019E8  0E46               	movlw	low STR_1
  1163  0019EA  6E5C               	movwf	printf@fmt,c
  1164  0019EC  0E10               	movlw	high STR_1
  1165  0019EE  6E5D               	movwf	printf@fmt+1,c
  1166  0019F0  C06F  F05E         	movff	stepper2@count_stepper,?_printf+2
  1167  0019F4  C070  F05F         	movff	stepper2@count_stepper+1,?_printf+3
  1168  0019F8  EC83  F010         	call	_printf	;wreg free
  1169                           
  1170                           ;main.c: 466:             count_stepper++;
  1171  0019FC  4A6F               	infsnz	stepper2@count_stepper,f,c
  1172  0019FE  2A70               	incf	stepper2@count_stepper+1,f,c
  1173  001A00                     l2470:
  1174                           
  1175                           ;main.c: 468:             if (direction == 1){
  1176  001A00  0471               	decf	stepper2@direction,w,c
  1177  001A02  A4D8               	btfss	status,2,c
  1178  001A04  D7B1               	goto	l2444
  1179                           
  1180                           ;main.c: 469:                 for(int i=0;i<steps2_adj-(5);i++){
  1181  001A06  0E00               	movlw	0
  1182  001A08  6E6E               	movwf	stepper2@i_227+1,c
  1183  001A0A  0E00               	movlw	0
  1184  001A0C  6E6D               	movwf	stepper2@i_227,c
  1185  001A0E  D009               	goto	l2478
  1186  001A10                     l2474:
  1187                           
  1188                           ;main.c: 471:                     full_drive(direction, 2);
  1189  001A10  0E00               	movlw	0
  1190  001A12  6E02               	movwf	full_drive@stepper_no+1,c
  1191  001A14  0E02               	movlw	2
  1192  001A16  6E01               	movwf	full_drive@stepper_no,c
  1193  001A18  5071               	movf	stepper2@direction,w,c
  1194  001A1A  EC2C  F008         	call	_full_drive
  1195                           
  1196                           ;main.c: 473:                 }
  1197  001A1E  4A6D               	infsnz	stepper2@i_227,f,c
  1198  001A20  2A6E               	incf	stepper2@i_227+1,f,c
  1199  001A22                     l2478:
  1200  001A22  0EFB               	movlw	251
  1201  001A24  6E66               	movwf	??_stepper2& (0+255),c
  1202  001A26  0EFF               	movlw	255
  1203  001A28  6E67               	movwf	(??_stepper2+1)& (0+255),c
  1204  001A2A  C064  F068         	movff	stepper2@steps2_adj,??_stepper2+2
  1205  001A2E  C065  F069         	movff	stepper2@steps2_adj+1,??_stepper2+3
  1206  001A32  5066               	movf	??_stepper2,w,c
  1207  001A34  2668               	addwf	??_stepper2+2,f,c
  1208  001A36  5067               	movf	??_stepper2+1,w,c
  1209  001A38  2269               	addwfc	??_stepper2+3,f,c
  1210  001A3A  5068               	movf	??_stepper2+2,w,c
  1211  001A3C  5C6D               	subwf	stepper2@i_227,w,c
  1212  001A3E  506E               	movf	stepper2@i_227+1,w,c
  1213  001A40  0A80               	xorlw	128
  1214  001A42  6E6A               	movwf	(??_stepper2+4)& (0+255),c
  1215  001A44  5069               	movf	??_stepper2+3,w,c
  1216  001A46  0A80               	xorlw	128
  1217  001A48  586A               	subwfb	(??_stepper2+4)& (0+255),w,c
  1218  001A4A  A0D8               	btfss	status,0,c
  1219  001A4C  D7E1               	goto	l2474
  1220                           
  1221                           ;main.c: 474:                 printf("cnt is %d", count_stepper);
  1222  001A4E  0E46               	movlw	low STR_1
  1223  001A50  6E5C               	movwf	printf@fmt,c
  1224  001A52  0E10               	movlw	high STR_1
  1225  001A54  6E5D               	movwf	printf@fmt+1,c
  1226  001A56  C06F  F05E         	movff	stepper2@count_stepper,?_printf+2
  1227  001A5A  C070  F05F         	movff	stepper2@count_stepper+1,?_printf+3
  1228  001A5E  EC83  F010         	call	_printf	;wreg free
  1229                           
  1230                           ;main.c: 475:                 count_stepper++;
  1231  001A62  4A6F               	infsnz	stepper2@count_stepper,f,c
  1232  001A64  2A70               	incf	stepper2@count_stepper+1,f,c
  1233  001A66  D780               	goto	l2444
  1234  001A68                     __end_of_stepper2:
  1235                           	opt callstack 0
  1236                           
  1237 ;; *************** function _stepper *****************
  1238 ;; Defined at:
  1239 ;;		line 413 in file "main.c"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;		None
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;  i               2  100[COMRAM] int 
  1244 ;;  count_steppe    2  102[COMRAM] int 
  1245 ;; Return value:  Size  Location     Type
  1246 ;;                  1    wreg      void 
  1247 ;; Registers used:
  1248 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1249 ;; Tracked objects:
  1250 ;;		On entry : 0/0
  1251 ;;		On exit  : 0/0
  1252 ;;		Unchanged: 0/0
  1253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1255 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1256 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1258 ;;Total ram usage:        5 bytes
  1259 ;; Hardware stack levels used:    1
  1260 ;; Hardware stack levels required when called:   11
  1261 ;; This function calls:
  1262 ;;		_full_drive
  1263 ;;		_lcdInst
  1264 ;;		_printf
  1265 ;; This function is called by:
  1266 ;;		_main
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           	psect	text4
  1271  001B70                     __ptext4:
  1272                           	opt callstack 0
  1273  001B70                     _stepper:
  1274                           	opt callstack 19
  1275                           
  1276                           ;main.c: 414:     int count_stepper = 0;
  1277                           
  1278                           ;incstack = 0
  1279  001B70  0E00               	movlw	0
  1280  001B72  6E68               	movwf	stepper@count_stepper+1,c
  1281  001B74  0E00               	movlw	0
  1282  001B76  6E67               	movwf	stepper@count_stepper,c
  1283  001B78                     l2404:
  1284                           
  1285                           ;main.c: 417:         if (count_stepper<1){
  1286  001B78  BE68               	btfsc	stepper@count_stepper+1,7,c
  1287  001B7A  D005               	goto	u1400
  1288  001B7C  5068               	movf	stepper@count_stepper+1,w,c
  1289  001B7E  E143               	bnz	l2432
  1290  001B80  0467               	decf	stepper@count_stepper,w,c
  1291  001B82  B0D8               	btfsc	status,0,c
  1292  001B84  D040               	goto	l2432
  1293  001B86                     u1400:
  1294                           
  1295                           ;main.c: 418:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1296  001B86  0E01               	movlw	1
  1297  001B88  ECB0  F010         	call	_lcdInst
  1298  001B8C  0E11               	movlw	17
  1299  001B8E  6E64               	movwf	??_stepper& (0+255),c
  1300  001B90  0E3A               	movlw	58
  1301  001B92                     u1597:
  1302  001B92  2EE8               	decfsz	wreg,f,c
  1303  001B94  D7FE               	bra	u1597
  1304  001B96  2E64               	decfsz	??_stepper& (0+255),f,c
  1305  001B98  D7FC               	bra	u1597
  1306  001B9A  D000               	nop2	
  1307                           
  1308                           ;main.c: 419:             printf("step1");
  1309  001B9C  0E50               	movlw	low STR_5
  1310  001B9E  6E5C               	movwf	printf@fmt,c
  1311  001BA0  0E10               	movlw	high STR_5
  1312  001BA2  6E5D               	movwf	printf@fmt+1,c
  1313  001BA4  EC83  F010         	call	_printf	;wreg free
  1314  001BA8  0EC0               	movlw	192
  1315  001BAA  ECB0  F010         	call	_lcdInst
  1316                           
  1317                           ;main.c: 421:             printf("Step speed %d",10);
  1318  001BAE  0E07               	movlw	low STR_6
  1319  001BB0  6E5C               	movwf	printf@fmt,c
  1320  001BB2  0E10               	movlw	high STR_6
  1321  001BB4  6E5D               	movwf	printf@fmt+1,c
  1322  001BB6  0E00               	movlw	0
  1323  001BB8  6E5F               	movwf	?_printf+3,c
  1324  001BBA  0E0A               	movlw	10
  1325  001BBC  6E5E               	movwf	?_printf+2,c
  1326  001BBE  EC83  F010         	call	_printf	;wreg free
  1327                           
  1328                           ;main.c: 423:             for(int i=0;i<14 +7;i++){
  1329  001BC2  0E00               	movlw	0
  1330  001BC4  6E66               	movwf	stepper@i+1,c
  1331  001BC6  0E00               	movlw	0
  1332  001BC8  6E65               	movwf	stepper@i,c
  1333  001BCA                     l2422:
  1334                           
  1335                           ;main.c: 425:                 full_drive(0, 1);
  1336  001BCA  0E00               	movlw	0
  1337  001BCC  6E02               	movwf	full_drive@stepper_no+1,c
  1338  001BCE  0E01               	movlw	1
  1339  001BD0  6E01               	movwf	full_drive@stepper_no,c
  1340  001BD2  0E00               	movlw	0
  1341  001BD4  EC2C  F008         	call	_full_drive
  1342                           
  1343                           ;main.c: 427:             }
  1344  001BD8  4A65               	infsnz	stepper@i,f,c
  1345  001BDA  2A66               	incf	stepper@i+1,f,c
  1346  001BDC  BE66               	btfsc	stepper@i+1,7,c
  1347  001BDE  D7F5               	goto	l2422
  1348  001BE0  5066               	movf	stepper@i+1,w,c
  1349  001BE2  E104               	bnz	u1410
  1350  001BE4  0E15               	movlw	21
  1351  001BE6  5C65               	subwf	stepper@i,w,c
  1352  001BE8  A0D8               	btfss	status,0,c
  1353  001BEA  D7EF               	goto	l2422
  1354  001BEC                     u1410:
  1355                           
  1356                           ;main.c: 428:             printf("cnt is %d", count_stepper);
  1357  001BEC  0E46               	movlw	low STR_1
  1358  001BEE  6E5C               	movwf	printf@fmt,c
  1359  001BF0  0E10               	movlw	high STR_1
  1360  001BF2  6E5D               	movwf	printf@fmt+1,c
  1361  001BF4  C067  F05E         	movff	stepper@count_stepper,?_printf+2
  1362  001BF8  C068  F05F         	movff	stepper@count_stepper+1,?_printf+3
  1363  001BFC  EC83  F010         	call	_printf	;wreg free
  1364                           
  1365                           ;main.c: 429:             count_stepper++;
  1366  001C00  4A67               	infsnz	stepper@count_stepper,f,c
  1367  001C02  2A68               	incf	stepper@count_stepper+1,f,c
  1368                           
  1369                           ;main.c: 430:         }
  1370  001C04  D7B9               	goto	l2404
  1371  001C06                     l2432:
  1372                           
  1373                           ;main.c: 442:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1374  001C06  0E01               	movlw	1
  1375  001C08  ECB0  F010         	call	_lcdInst
  1376  001C0C  0E11               	movlw	17
  1377  001C0E  6E64               	movwf	??_stepper& (0+255),c
  1378  001C10  0E3A               	movlw	58
  1379  001C12                     u1607:
  1380  001C12  2EE8               	decfsz	wreg,f,c
  1381  001C14  D7FE               	bra	u1607
  1382  001C16  2E64               	decfsz	??_stepper& (0+255),f,c
  1383  001C18  D7FC               	bra	u1607
  1384  001C1A  D000               	nop2	
  1385                           
  1386                           ;main.c: 443:             printf("steps done");
  1387  001C1C  0E3B               	movlw	low STR_8
  1388  001C1E  6E5C               	movwf	printf@fmt,c
  1389  001C20  0E10               	movlw	high STR_8
  1390  001C22  6E5D               	movwf	printf@fmt+1,c
  1391  001C24  EC83  F010         	call	_printf	;wreg free
  1392  001C28  0EC0               	movlw	192
  1393  001C2A  ECB0  F010         	call	_lcdInst
  1394                           
  1395                           ;main.c: 445:             printf("cnt is %d", count_stepper);
  1396  001C2E  0E46               	movlw	low STR_1
  1397  001C30  6E5C               	movwf	printf@fmt,c
  1398  001C32  0E10               	movlw	high STR_1
  1399  001C34  6E5D               	movwf	printf@fmt+1,c
  1400  001C36  C067  F05E         	movff	stepper@count_stepper,?_printf+2
  1401  001C3A  C068  F05F         	movff	stepper@count_stepper+1,?_printf+3
  1402  001C3E  EC83  F010         	call	_printf	;wreg free
  1403                           
  1404                           ;main.c: 446:             break;
  1405  001C42  0012               	return		;funcret
  1406  001C44                     __end_of_stepper:
  1407                           	opt callstack 0
  1408                           
  1409 ;; *************** function _printf *****************
  1410 ;; Defined at:
  1411 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;  fmt             2   91[COMRAM] PTR const unsigned char 
  1414 ;;		 -> STR_16(10), STR_15(14), STR_14(6), STR_13(10), 
  1415 ;;		 -> STR_12(10), STR_11(14), STR_10(6), STR_9(10), 
  1416 ;;		 -> STR_8(11), STR_7(10), STR_6(14), STR_5(6), 
  1417 ;;		 -> STR_4(11), STR_3(13), STR_2(14), STR_1(10), 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  ap              2   97[COMRAM] PTR void [1]
  1420 ;;		 -> ?_printf(2), 
  1421 ;;  ret             2    0        int 
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  2   91[COMRAM] int 
  1424 ;; Registers used:
  1425 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1431 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1432 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1434 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1435 ;;Total ram usage:        8 bytes
  1436 ;; Hardware stack levels used:    1
  1437 ;; Hardware stack levels required when called:   10
  1438 ;; This function calls:
  1439 ;;		_vfprintf
  1440 ;; This function is called by:
  1441 ;;		_main
  1442 ;;		_stepper
  1443 ;;		_stepper2
  1444 ;;		_stepper2_back
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text5
  1449  002106                     __ptext5:
  1450                           	opt callstack 0
  1451  002106                     _printf:
  1452                           	opt callstack 19
  1453                           
  1454                           ;incstack = 0
  1455  002106  0E5E               	movlw	low (?_printf+2)
  1456  002108  6E62               	movwf	printf@ap,c
  1457  00210A  0E00               	movlw	high (?_printf+2)
  1458  00210C  6E63               	movwf	printf@ap+1,c
  1459  00210E  0E00               	movlw	0
  1460  002110  6E54               	movwf	vfprintf@fp,c
  1461  002112  0E00               	movlw	0
  1462  002114  6E55               	movwf	vfprintf@fp+1,c
  1463  002116  C05C  F056         	movff	printf@fmt,vfprintf@fmt
  1464  00211A  C05D  F057         	movff	printf@fmt+1,vfprintf@fmt+1
  1465  00211E  0E62               	movlw	low printf@ap
  1466  002120  6E58               	movwf	vfprintf@ap,c
  1467  002122  0E00               	movlw	high printf@ap
  1468  002124  6E59               	movwf	vfprintf@ap+1,c
  1469  002126  ECB1  F00F         	call	_vfprintf	;wreg free
  1470  00212A  0012               	return		;funcret
  1471  00212C                     __end_of_printf:
  1472                           	opt callstack 0
  1473                           
  1474 ;; *************** function _vfprintf *****************
  1475 ;; Defined at:
  1476 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  fp              2   83[COMRAM] PTR struct _IO_FILE
  1479 ;;		 -> NULL(0), 
  1480 ;;  fmt             2   85[COMRAM] PTR const unsigned char 
  1481 ;;		 -> STR_16(10), STR_15(14), STR_14(6), STR_13(10), 
  1482 ;;		 -> STR_12(10), STR_11(14), STR_10(6), STR_9(10), 
  1483 ;;		 -> STR_8(11), STR_7(10), STR_6(14), STR_5(6), 
  1484 ;;		 -> STR_4(11), STR_3(13), STR_2(14), STR_1(10), 
  1485 ;;  ap              2   87[COMRAM] PTR PTR void 
  1486 ;;		 -> printf@ap(2), 
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;  cfmt            2   89[COMRAM] PTR unsigned char 
  1489 ;;		 -> STR_16(10), STR_15(14), STR_14(6), STR_13(10), 
  1490 ;;		 -> STR_12(10), STR_11(14), STR_10(6), STR_9(10), 
  1491 ;;		 -> STR_8(11), STR_7(10), STR_6(14), STR_5(6), 
  1492 ;;		 -> STR_4(11), STR_3(13), STR_2(14), STR_1(10), 
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  2   83[COMRAM] int 
  1495 ;; Registers used:
  1496 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1497 ;; Tracked objects:
  1498 ;;		On entry : 0/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1502 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1503 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;Total ram usage:        8 bytes
  1507 ;; Hardware stack levels used:    1
  1508 ;; Hardware stack levels required when called:    9
  1509 ;; This function calls:
  1510 ;;		_vfpfcnvrt
  1511 ;; This function is called by:
  1512 ;;		_printf
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516                           	psect	text6
  1517  001F62                     __ptext6:
  1518                           	opt callstack 0
  1519  001F62                     _vfprintf:
  1520                           	opt callstack 19
  1521                           
  1522                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1523                           
  1524                           ;incstack = 0
  1525  001F62  C056  F05A         	movff	vfprintf@fmt,vfprintf@cfmt
  1526  001F66  C057  F05B         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1527                           
  1528                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1529  001F6A  0E00               	movlw	0
  1530  001F6C  6E75               	movwf	_nout+1,c
  1531  001F6E  0E00               	movlw	0
  1532  001F70  6E74               	movwf	_nout,c
  1533                           
  1534                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1535  001F72  D012               	goto	l2120
  1536  001F74                     l2118:
  1537                           
  1538                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1539  001F74  C054  F044         	movff	vfprintf@fp,vfpfcnvrt@fp
  1540  001F78  C055  F045         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1541  001F7C  0E5A               	movlw	low vfprintf@cfmt
  1542  001F7E  6E46               	movwf	vfpfcnvrt@fmt,c
  1543  001F80  0E00               	movlw	high vfprintf@cfmt
  1544  001F82  6E47               	movwf	vfpfcnvrt@fmt+1,c
  1545  001F84  C058  F048         	movff	vfprintf@ap,vfpfcnvrt@ap
  1546  001F88  C059  F049         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1547  001F8C  ECB9  F00A         	call	_vfpfcnvrt	;wreg free
  1548  001F90  5044               	movf	?_vfpfcnvrt,w,c
  1549  001F92  2674               	addwf	_nout,f,c
  1550  001F94  5045               	movf	?_vfpfcnvrt+1,w,c
  1551  001F96  2275               	addwfc	_nout+1,f,c
  1552  001F98                     l2120:
  1553                           
  1554                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1555  001F98  C05A  FFF6         	movff	vfprintf@cfmt,tblptrl
  1556  001F9C  C05B  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1557  001FA0                     	if	0	;tblptru may be non-zero
  1558  001FA0                     	endif
  1559  001FA0                     	if	0	;tblptru may be non-zero
  1560  001FA0                     	endif
  1561  001FA0  0008               	tblrd		*
  1562  001FA2  50F5               	movf	tablat,w,c
  1563  001FA4  0900               	iorlw	0
  1564  001FA6  A4D8               	btfss	status,2,c
  1565  001FA8  D7E5               	goto	l2118
  1566                           
  1567                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1568  001FAA  C074  F054         	movff	_nout,?_vfprintf
  1569  001FAE  C075  F055         	movff	_nout+1,?_vfprintf+1
  1570  001FB2  0012               	return		;funcret
  1571  001FB4                     __end_of_vfprintf:
  1572                           	opt callstack 0
  1573                           
  1574 ;; *************** function _vfpfcnvrt *****************
  1575 ;; Defined at:
  1576 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;  fp              2   67[COMRAM] PTR struct _IO_FILE
  1579 ;;		 -> NULL(0), 
  1580 ;;  fmt             2   69[COMRAM] PTR PTR unsigned char 
  1581 ;;		 -> vfprintf@cfmt(2), 
  1582 ;;  ap              2   71[COMRAM] PTR PTR void 
  1583 ;;		 -> printf@ap(2), 
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  ll              8   75[COMRAM] long long 
  1586 ;;  llu             8    0        unsigned long long 
  1587 ;;  f               4    0        unsigned long long 
  1588 ;;  vp              3    0        PTR void 
  1589 ;;  ct              3    0        unsigned char [3]
  1590 ;;  cp              3    0        PTR unsigned char 
  1591 ;;  i               2    0        int 
  1592 ;;  done            2    0        int 
  1593 ;;  c               1    0        unsigned char 
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  2   67[COMRAM] int 
  1596 ;; Registers used:
  1597 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1603 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1604 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;Total ram usage:       16 bytes
  1608 ;; Hardware stack levels used:    1
  1609 ;; Hardware stack levels required when called:    8
  1610 ;; This function calls:
  1611 ;;		_dtoa
  1612 ;;		_fputc
  1613 ;; This function is called by:
  1614 ;;		_vfprintf
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text7
  1619  001572                     __ptext7:
  1620                           	opt callstack 0
  1621  001572                     _vfpfcnvrt:
  1622                           	opt callstack 19
  1623                           
  1624                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1625                           
  1626                           ;incstack = 0
  1627  001572  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1628  001576  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1629  00157A  CFDE FFF6          	movff	postinc2,tblptrl
  1630  00157E  CFDD FFF7          	movff	postdec2,tblptrh
  1631  001582                     	if	0	;tblptru may be non-zero
  1632  001582                     	endif
  1633  001582                     	if	0	;tblptru may be non-zero
  1634  001582                     	endif
  1635  001582  0008               	tblrd		*
  1636  001584  50F5               	movf	tablat,w,c
  1637  001586  0A25               	xorlw	37
  1638  001588  A4D8               	btfss	status,2,c
  1639  00158A  D099               	goto	l2106
  1640                           
  1641                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1642  00158C  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1643  001590  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1644  001594  2ADE               	incf	postinc2,f,c
  1645  001596  0E00               	movlw	0
  1646  001598  22DD               	addwfc	postdec2,f,c
  1647                           
  1648                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1649  00159A  0E00               	movlw	0
  1650  00159C  6E77               	movwf	_width+1,c
  1651  00159E  0E00               	movlw	0
  1652  0015A0  6E76               	movwf	_width,c
  1653  0015A2  C076  F07A         	movff	_width,_flags
  1654  0015A6  C077  F07B         	movff	_width+1,_flags+1
  1655                           
  1656                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1657  0015AA  6878               	setf	_prec,c
  1658  0015AC  6879               	setf	_prec+1,c
  1659                           
  1660                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1661  0015AE  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1662  0015B2  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1663  0015B6  CFDE FFF6          	movff	postinc2,tblptrl
  1664  0015BA  CFDD FFF7          	movff	postdec2,tblptrh
  1665  0015BE                     	if	0	;tblptru may be non-zero
  1666  0015BE                     	endif
  1667  0015BE                     	if	0	;tblptru may be non-zero
  1668  0015BE                     	endif
  1669  0015BE  0008               	tblrd		*
  1670  0015C0  50F5               	movf	tablat,w,c
  1671  0015C2  0A64               	xorlw	100
  1672  0015C4  B4D8               	btfsc	status,2,c
  1673  0015C6  D00D               	goto	u1200
  1674  0015C8  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1675  0015CC  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1676  0015D0  CFDE FFF6          	movff	postinc2,tblptrl
  1677  0015D4  CFDD FFF7          	movff	postdec2,tblptrh
  1678  0015D8                     	if	0	;tblptru may be non-zero
  1679  0015D8                     	endif
  1680  0015D8                     	if	0	;tblptru may be non-zero
  1681  0015D8                     	endif
  1682  0015D8  0008               	tblrd		*
  1683  0015DA  50F5               	movf	tablat,w,c
  1684  0015DC  0A69               	xorlw	105
  1685  0015DE  A4D8               	btfss	status,2,c
  1686  0015E0  D03F               	goto	l2090
  1687  0015E2                     u1200:
  1688                           
  1689                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1690  0015E2  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1691  0015E6  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1692  0015EA  2ADE               	incf	postinc2,f,c
  1693  0015EC  0E00               	movlw	0
  1694  0015EE  22DD               	addwfc	postdec2,f,c
  1695                           
  1696                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1697  0015F0  C048  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1698  0015F4  C049  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1699  0015F8  CFDF F04A          	movff	indf2,??_vfpfcnvrt
  1700  0015FC  0E02               	movlw	2
  1701  0015FE  26DE               	addwf	postinc2,f,c
  1702  001600  CFDF F04B          	movff	indf2,??_vfpfcnvrt+1
  1703  001604  0E00               	movlw	0
  1704  001606  22DD               	addwfc	postdec2,f,c
  1705  001608  C04A  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1706  00160C  C04B  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1707  001610  CFDE F04C          	movff	postinc2,vfpfcnvrt@ll
  1708  001614  CFDD F04D          	movff	postdec2,vfpfcnvrt@ll+1
  1709  001618  0E00               	movlw	0
  1710  00161A  BE4D               	btfsc	vfpfcnvrt@ll+1,7,c
  1711  00161C  0EFF               	movlw	-1
  1712  00161E  6E4E               	movwf	vfpfcnvrt@ll+2,c
  1713  001620  6E4F               	movwf	vfpfcnvrt@ll+3,c
  1714  001622  6E50               	movwf	vfpfcnvrt@ll+4,c
  1715  001624  6E51               	movwf	vfpfcnvrt@ll+5,c
  1716  001626  6E52               	movwf	vfpfcnvrt@ll+6,c
  1717  001628  6E53               	movwf	vfpfcnvrt@ll+7,c
  1718                           
  1719                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1720  00162A  C044  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  1721  00162E  C045  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1722  001632  C04C  F022         	movff	vfpfcnvrt@ll,dtoa@d
  1723  001636  C04D  F023         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1724  00163A  C04E  F024         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1725  00163E  C04F  F025         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1726  001642  C050  F026         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1727  001646  C051  F027         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1728  00164A  C052  F028         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1729  00164E  C053  F029         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1730  001652  EC98  F009         	call	_dtoa	;wreg free
  1731  001656  C020  F044         	movff	?_dtoa,?_vfpfcnvrt
  1732  00165A  C021  F045         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1733  00165E  0012               	return	
  1734  001660                     l2090:
  1735                           
  1736                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1737  001660  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1738  001664  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1739  001668  CFDE FFF6          	movff	postinc2,tblptrl
  1740  00166C  CFDD FFF7          	movff	postdec2,tblptrh
  1741  001670                     	if	0	;tblptru may be non-zero
  1742  001670                     	endif
  1743  001670                     	if	0	;tblptru may be non-zero
  1744  001670                     	endif
  1745  001670  0008               	tblrd		*
  1746  001672  50F5               	movf	tablat,w,c
  1747  001674  0A25               	xorlw	37
  1748  001676  A4D8               	btfss	status,2,c
  1749  001678  D016               	goto	l2100
  1750                           
  1751                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1752  00167A  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1753  00167E  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1754  001682  2ADE               	incf	postinc2,f,c
  1755  001684  0E00               	movlw	0
  1756  001686  22DD               	addwfc	postdec2,f,c
  1757                           
  1758                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1759  001688  0E00               	movlw	0
  1760  00168A  6E06               	movwf	fputc@c+1,c
  1761  00168C  0E25               	movlw	37
  1762  00168E  6E05               	movwf	fputc@c,c
  1763  001690  C044  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1764  001694  C045  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1765  001698  EC46  F00F         	call	_fputc	;wreg free
  1766  00169C                     l2096:
  1767                           
  1768                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1769  00169C  0E00               	movlw	0
  1770  00169E  6E45               	movwf	?_vfpfcnvrt+1,c
  1771  0016A0  0E01               	movlw	1
  1772  0016A2  6E44               	movwf	?_vfpfcnvrt,c
  1773  0016A4  0012               	return	
  1774  0016A6                     l2100:
  1775                           
  1776                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1777  0016A6  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1778  0016AA  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1779  0016AE  2ADE               	incf	postinc2,f,c
  1780  0016B0  0E00               	movlw	0
  1781  0016B2  22DD               	addwfc	postdec2,f,c
  1782                           
  1783                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1784  0016B4  0E00               	movlw	0
  1785  0016B6  6E45               	movwf	?_vfpfcnvrt+1,c
  1786  0016B8  0E00               	movlw	0
  1787  0016BA  6E44               	movwf	?_vfpfcnvrt,c
  1788  0016BC  0012               	return	
  1789  0016BE                     l2106:
  1790                           
  1791                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1792  0016BE  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1793  0016C2  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1794  0016C6  CFDE FFF6          	movff	postinc2,tblptrl
  1795  0016CA  CFDD FFF7          	movff	postdec2,tblptrh
  1796  0016CE                     	if	0	;tblptru may be non-zero
  1797  0016CE                     	endif
  1798  0016CE                     	if	0	;tblptru may be non-zero
  1799  0016CE                     	endif
  1800  0016CE  0008               	tblrd		*
  1801  0016D0  50F5               	movf	tablat,w,c
  1802  0016D2  6E05               	movwf	fputc@c,c
  1803  0016D4  6A06               	clrf	fputc@c+1,c
  1804  0016D6  C044  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1805  0016DA  C045  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1806  0016DE  EC46  F00F         	call	_fputc	;wreg free
  1807                           
  1808                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1809  0016E2  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1810  0016E6  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1811  0016EA  2ADE               	incf	postinc2,f,c
  1812  0016EC  0E00               	movlw	0
  1813  0016EE  22DD               	addwfc	postdec2,f,c
  1814  0016F0  D7D5               	goto	l2096
  1815  0016F2                     __end_of_vfpfcnvrt:
  1816                           	opt callstack 0
  1817                           
  1818 ;; *************** function _dtoa *****************
  1819 ;; Defined at:
  1820 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  1823 ;;		 -> NULL(0), 
  1824 ;;  d               8   33[COMRAM] long long 
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;  n               8   57[COMRAM] long long 
  1827 ;;  i               2   65[COMRAM] int 
  1828 ;;  s               2   55[COMRAM] int 
  1829 ;;  w               2   53[COMRAM] int 
  1830 ;;  p               2   51[COMRAM] int 
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  2   31[COMRAM] int 
  1833 ;; Registers used:
  1834 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1840 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;Total ram usage:       36 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:    7
  1847 ;; This function calls:
  1848 ;;		___aodiv
  1849 ;;		___aomod
  1850 ;;		_abs
  1851 ;;		_pad
  1852 ;; This function is called by:
  1853 ;;		_vfpfcnvrt
  1854 ;; This function uses a non-reentrant model
  1855 ;;
  1856                           
  1857                           	psect	text8
  1858  001330                     __ptext8:
  1859                           	opt callstack 0
  1860  001330                     _dtoa:
  1861                           	opt callstack 19
  1862                           
  1863                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1864                           
  1865                           ;incstack = 0
  1866  001330  C022  F03A         	movff	dtoa@d,dtoa@n
  1867  001334  C023  F03B         	movff	dtoa@d+1,dtoa@n+1
  1868  001338  C024  F03C         	movff	dtoa@d+2,dtoa@n+2
  1869  00133C  C025  F03D         	movff	dtoa@d+3,dtoa@n+3
  1870  001340  C026  F03E         	movff	dtoa@d+4,dtoa@n+4
  1871  001344  C027  F03F         	movff	dtoa@d+5,dtoa@n+5
  1872  001348  C028  F040         	movff	dtoa@d+6,dtoa@n+6
  1873  00134C  C029  F041         	movff	dtoa@d+7,dtoa@n+7
  1874                           
  1875                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1876  001350  AE41               	btfss	dtoa@n+7,7,c
  1877  001352  D002               	goto	u1030
  1878  001354  0E01               	movlw	1
  1879  001356  D001               	goto	u1040
  1880  001358                     u1030:
  1881  001358  0E00               	movlw	0
  1882  00135A                     u1040:
  1883  00135A  6E38               	movwf	dtoa@s,c
  1884  00135C  6A39               	clrf	dtoa@s+1,c
  1885                           
  1886                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1887  00135E  5038               	movf	dtoa@s,w,c
  1888  001360  1039               	iorwf	dtoa@s+1,w,c
  1889  001362  B4D8               	btfsc	status,2,c
  1890  001364  D010               	goto	l2016
  1891                           
  1892                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1893  001366  1E41               	comf	dtoa@n+7,f,c
  1894  001368  1E40               	comf	dtoa@n+6,f,c
  1895  00136A  1E3F               	comf	dtoa@n+5,f,c
  1896  00136C  1E3E               	comf	dtoa@n+4,f,c
  1897  00136E  1E3D               	comf	dtoa@n+3,f,c
  1898  001370  1E3C               	comf	dtoa@n+2,f,c
  1899  001372  1E3B               	comf	dtoa@n+1,f,c
  1900  001374  6C3A               	negf	dtoa@n,c
  1901  001376  0E00               	movlw	0
  1902  001378  223B               	addwfc	dtoa@n+1,f,c
  1903  00137A  223C               	addwfc	dtoa@n+2,f,c
  1904  00137C  223D               	addwfc	dtoa@n+3,f,c
  1905  00137E  223E               	addwfc	dtoa@n+4,f,c
  1906  001380  223F               	addwfc	dtoa@n+5,f,c
  1907  001382  2240               	addwfc	dtoa@n+6,f,c
  1908  001384  2241               	addwfc	dtoa@n+7,f,c
  1909  001386                     l2016:
  1910                           
  1911                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1912  001386  AE79               	btfss	_prec+1,7,c
  1913                           
  1914                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1915  001388  927A               	bcf	_flags,1,c
  1916                           
  1917                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1918  00138A  BE79               	btfsc	_prec+1,7,c
  1919  00138C  D005               	goto	u1070
  1920  00138E  5079               	movf	_prec+1,w,c
  1921  001390  E108               	bnz	l288
  1922  001392  0478               	decf	_prec,w,c
  1923  001394  B0D8               	btfsc	status,0,c
  1924  001396  D005               	goto	l288
  1925  001398                     u1070:
  1926  001398  0E00               	movlw	0
  1927  00139A  6E35               	movwf	dtoa@p+1,c
  1928  00139C  0E01               	movlw	1
  1929  00139E  6E34               	movwf	dtoa@p,c
  1930  0013A0  D004               	goto	l290
  1931  0013A2                     l288:
  1932  0013A2  C078  F034         	movff	_prec,dtoa@p
  1933  0013A6  C079  F035         	movff	_prec+1,dtoa@p+1
  1934  0013AA                     l290:
  1935                           
  1936                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1937  0013AA  C076  F036         	movff	_width,dtoa@w
  1938  0013AE  C077  F037         	movff	_width+1,dtoa@w+1
  1939                           
  1940                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1941  0013B2  5038               	movf	dtoa@s,w,c
  1942  0013B4  1039               	iorwf	dtoa@s+1,w,c
  1943  0013B6  A4D8               	btfss	status,2,c
  1944  0013B8  D002               	goto	u1090
  1945  0013BA  A47A               	btfss	_flags,2,c
  1946  0013BC  D003               	goto	l2030
  1947  0013BE                     u1090:
  1948                           
  1949                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1950  0013BE  0636               	decf	dtoa@w,f,c
  1951  0013C0  A0D8               	btfss	status,0,c
  1952  0013C2  0637               	decf	dtoa@w+1,f,c
  1953  0013C4                     l2030:
  1954                           
  1955                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1956  0013C4  0E00               	movlw	0
  1957  0013C6  6E43               	movwf	dtoa@i+1,c
  1958  0013C8  0E1F               	movlw	31
  1959  0013CA  6E42               	movwf	dtoa@i,c
  1960                           
  1961                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1962  0013CC  0E00               	movlw	0
  1963  0013CE  0100               	movlb	0	; () banked
  1964  0013D0  6FAA               	movwf	(_dbuf+31)& (0+255),b
  1965                           
  1966                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1967  0013D2  D07C               	goto	l2044
  1968  0013D4                     l2034:
  1969                           
  1970                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1971  0013D4  0642               	decf	dtoa@i,f,c
  1972  0013D6  A0D8               	btfss	status,0,c
  1973  0013D8  0643               	decf	dtoa@i+1,f,c
  1974                           
  1975                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1976  0013DA  0E8B               	movlw	low _dbuf
  1977  0013DC  2442               	addwf	dtoa@i,w,c
  1978  0013DE  6ED9               	movwf	fsr2l,c
  1979  0013E0  0E00               	movlw	high _dbuf
  1980  0013E2  2043               	addwfc	dtoa@i+1,w,c
  1981  0013E4  6EDA               	movwf	fsr2h,c
  1982  0013E6  C03A  F001         	movff	dtoa@n,___aomod@dividend
  1983  0013EA  C03B  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1984  0013EE  C03C  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1985  0013F2  C03D  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1986  0013F6  C03E  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1987  0013FA  C03F  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1988  0013FE  C040  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1989  001402  C041  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1990  001406  0E0A               	movlw	10
  1991  001408  6E09               	movwf	___aomod@divisor,c
  1992  00140A  0E00               	movlw	0
  1993  00140C  6E0A               	movwf	___aomod@divisor+1,c
  1994  00140E  0E00               	movlw	0
  1995  001410  6E0B               	movwf	___aomod@divisor+2,c
  1996  001412  0E00               	movlw	0
  1997  001414  6E0C               	movwf	___aomod@divisor+3,c
  1998  001416  0E00               	movlw	0
  1999  001418  6E0D               	movwf	___aomod@divisor+4,c
  2000  00141A  0E00               	movlw	0
  2001  00141C  6E0E               	movwf	___aomod@divisor+5,c
  2002  00141E  0E00               	movlw	0
  2003  001420  6E0F               	movwf	___aomod@divisor+6,c
  2004  001422  0E00               	movlw	0
  2005  001424  6E10               	movwf	___aomod@divisor+7,c
  2006  001426  EC1D  F00C         	call	___aomod	;wreg free
  2007  00142A  C001  F02A         	movff	?___aomod,??_dtoa
  2008  00142E  C002  F02B         	movff	?___aomod+1,??_dtoa+1
  2009  001432  C003  F02C         	movff	?___aomod+2,??_dtoa+2
  2010  001436  C004  F02D         	movff	?___aomod+3,??_dtoa+3
  2011  00143A  C005  F02E         	movff	?___aomod+4,??_dtoa+4
  2012  00143E  C006  F02F         	movff	?___aomod+5,??_dtoa+5
  2013  001442  C007  F030         	movff	?___aomod+6,??_dtoa+6
  2014  001446  C008  F031         	movff	?___aomod+7,??_dtoa+7
  2015  00144A  C02A  F013         	movff	??_dtoa,abs@a
  2016  00144E  C02C  F014         	movff	??_dtoa+2,abs@a+1
  2017  001452  EC16  F010         	call	_abs	;wreg free
  2018  001456  5013               	movf	?_abs,w,c
  2019  001458  0F30               	addlw	48
  2020  00145A  6EDF               	movwf	indf2,c
  2021                           
  2022                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  2023  00145C  0634               	decf	dtoa@p,f,c
  2024  00145E  A0D8               	btfss	status,0,c
  2025  001460  0635               	decf	dtoa@p+1,f,c
  2026                           
  2027                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  2028  001462  0636               	decf	dtoa@w,f,c
  2029  001464  A0D8               	btfss	status,0,c
  2030  001466  0637               	decf	dtoa@w+1,f,c
  2031                           
  2032                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  2033  001468  C03A  F001         	movff	dtoa@n,___aodiv@dividend
  2034  00146C  C03B  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  2035  001470  C03C  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  2036  001474  C03D  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  2037  001478  C03E  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  2038  00147C  C03F  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  2039  001480  C040  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  2040  001484  C041  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  2041  001488  0E0A               	movlw	10
  2042  00148A  6E09               	movwf	___aodiv@divisor,c
  2043  00148C  0E00               	movlw	0
  2044  00148E  6E0A               	movwf	___aodiv@divisor+1,c
  2045  001490  0E00               	movlw	0
  2046  001492  6E0B               	movwf	___aodiv@divisor+2,c
  2047  001494  0E00               	movlw	0
  2048  001496  6E0C               	movwf	___aodiv@divisor+3,c
  2049  001498  0E00               	movlw	0
  2050  00149A  6E0D               	movwf	___aodiv@divisor+4,c
  2051  00149C  0E00               	movlw	0
  2052  00149E  6E0E               	movwf	___aodiv@divisor+5,c
  2053  0014A0  0E00               	movlw	0
  2054  0014A2  6E0F               	movwf	___aodiv@divisor+6,c
  2055  0014A4  0E00               	movlw	0
  2056  0014A6  6E10               	movwf	___aodiv@divisor+7,c
  2057  0014A8  EC79  F00B         	call	___aodiv	;wreg free
  2058  0014AC  C001  F03A         	movff	?___aodiv,dtoa@n
  2059  0014B0  C002  F03B         	movff	?___aodiv+1,dtoa@n+1
  2060  0014B4  C003  F03C         	movff	?___aodiv+2,dtoa@n+2
  2061  0014B8  C004  F03D         	movff	?___aodiv+3,dtoa@n+3
  2062  0014BC  C005  F03E         	movff	?___aodiv+4,dtoa@n+4
  2063  0014C0  C006  F03F         	movff	?___aodiv+5,dtoa@n+5
  2064  0014C4  C007  F040         	movff	?___aodiv+6,dtoa@n+6
  2065  0014C8  C008  F041         	movff	?___aodiv+7,dtoa@n+7
  2066  0014CC                     l2044:
  2067                           
  2068                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2069  0014CC  BE43               	btfsc	dtoa@i+1,7,c
  2070  0014CE  D01F               	goto	u1140
  2071  0014D0  5043               	movf	dtoa@i+1,w,c
  2072  0014D2  E103               	bnz	u1100
  2073  0014D4  0442               	decf	dtoa@i,w,c
  2074  0014D6  A0D8               	btfss	status,0,c
  2075  0014D8  D01A               	goto	u1140
  2076  0014DA                     u1100:
  2077  0014DA  503A               	movf	dtoa@n,w,c
  2078  0014DC  103B               	iorwf	dtoa@n+1,w,c
  2079  0014DE  103C               	iorwf	dtoa@n+2,w,c
  2080  0014E0  103D               	iorwf	dtoa@n+3,w,c
  2081  0014E2  103E               	iorwf	dtoa@n+4,w,c
  2082  0014E4  103F               	iorwf	dtoa@n+5,w,c
  2083  0014E6  1040               	iorwf	dtoa@n+6,w,c
  2084  0014E8  1041               	iorwf	dtoa@n+7,w,c
  2085  0014EA  A4D8               	btfss	status,2,c
  2086  0014EC  D773               	goto	l2034
  2087  0014EE  BE35               	btfsc	dtoa@p+1,7,c
  2088  0014F0  D005               	goto	u1120
  2089  0014F2  5035               	movf	dtoa@p+1,w,c
  2090  0014F4  E102               	bnz	u1121
  2091  0014F6  0434               	decf	dtoa@p,w,c
  2092  0014F8  B0D8               	btfsc	status,0,c
  2093  0014FA                     u1121:
  2094  0014FA  D76C               	goto	l2034
  2095  0014FC                     u1120:
  2096  0014FC  BE37               	btfsc	dtoa@w+1,7,c
  2097  0014FE  D007               	goto	u1140
  2098  001500  5037               	movf	dtoa@w+1,w,c
  2099  001502  E103               	bnz	u1130
  2100  001504  0436               	decf	dtoa@w,w,c
  2101  001506  A0D8               	btfss	status,0,c
  2102  001508  D002               	goto	u1140
  2103  00150A                     u1130:
  2104  00150A  B27A               	btfsc	_flags,1,c
  2105  00150C  D763               	goto	l2034
  2106  00150E                     u1140:
  2107                           
  2108                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  2109  00150E  5038               	movf	dtoa@s,w,c
  2110  001510  1039               	iorwf	dtoa@s+1,w,c
  2111  001512  A4D8               	btfss	status,2,c
  2112  001514  D002               	goto	u1160
  2113  001516  A47A               	btfss	_flags,2,c
  2114  001518  D017               	goto	l2068
  2115  00151A                     u1160:
  2116                           
  2117                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  2118  00151A  0642               	decf	dtoa@i,f,c
  2119  00151C  A0D8               	btfss	status,0,c
  2120  00151E  0643               	decf	dtoa@i+1,f,c
  2121                           
  2122                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  2123  001520  5038               	movf	dtoa@s,w,c
  2124  001522  1039               	iorwf	dtoa@s+1,w,c
  2125  001524  A4D8               	btfss	status,2,c
  2126  001526  D004               	goto	l2064
  2127  001528  0E00               	movlw	0
  2128  00152A  6E33               	movwf	_dtoa$652+1,c
  2129  00152C  0E2B               	movlw	43
  2130  00152E  D003               	goto	L1
  2131  001530                     l2064:
  2132  001530  0E00               	movlw	0
  2133  001532  6E33               	movwf	_dtoa$652+1,c
  2134  001534  0E2D               	movlw	45
  2135  001536                     L1:
  2136  001536  6E32               	movwf	_dtoa$652,c
  2137  001538  0E8B               	movlw	low _dbuf
  2138  00153A  2442               	addwf	dtoa@i,w,c
  2139  00153C  6ED9               	movwf	fsr2l,c
  2140  00153E  0E00               	movlw	high _dbuf
  2141  001540  2043               	addwfc	dtoa@i+1,w,c
  2142  001542  6EDA               	movwf	fsr2h,c
  2143  001544  C032  FFDF         	movff	_dtoa$652,indf2
  2144  001548                     l2068:
  2145                           
  2146                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  2147  001548  C020  F015         	movff	dtoa@fp,pad@fp
  2148  00154C  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  2149  001550  0E8B               	movlw	low _dbuf
  2150  001552  2442               	addwf	dtoa@i,w,c
  2151  001554  6E17               	movwf	pad@buf,c
  2152  001556  0E00               	movlw	high _dbuf
  2153  001558  2043               	addwfc	dtoa@i+1,w,c
  2154  00155A  6E18               	movwf	pad@buf+1,c
  2155  00155C  C036  F019         	movff	dtoa@w,pad@p
  2156  001560  C037  F01A         	movff	dtoa@w+1,pad@p+1
  2157  001564  EC6E  F00E         	call	_pad	;wreg free
  2158  001568  C015  F020         	movff	?_pad,?_dtoa
  2159  00156C  C016  F021         	movff	?_pad+1,?_dtoa+1
  2160  001570  0012               	return		;funcret
  2161  001572                     __end_of_dtoa:
  2162                           	opt callstack 0
  2163                           
  2164 ;; *************** function _pad *****************
  2165 ;; Defined at:
  2166 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  2169 ;;		 -> NULL(0), 
  2170 ;;  buf             2   22[COMRAM] PTR unsigned char 
  2171 ;;		 -> dbuf(32), 
  2172 ;;  p               2   24[COMRAM] int 
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;  w               2   29[COMRAM] int 
  2175 ;;  i               2   27[COMRAM] int 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  2   20[COMRAM] int 
  2178 ;; Registers used:
  2179 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2185 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2186 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2187 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2188 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2189 ;;Total ram usage:       11 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    6
  2192 ;; This function calls:
  2193 ;;		_fputc
  2194 ;;		_fputs
  2195 ;;		_strlen
  2196 ;; This function is called by:
  2197 ;;		_dtoa
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text9
  2202  001CDC                     __ptext9:
  2203                           	opt callstack 0
  2204  001CDC                     _pad:
  2205                           	opt callstack 19
  2206                           
  2207                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  2208                           
  2209                           ;incstack = 0
  2210  001CDC  A07A               	btfss	_flags,0,c
  2211  001CDE  D00A               	goto	l1908
  2212                           
  2213                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  2214  001CE0  C017  F00E         	movff	pad@buf,fputs@s
  2215  001CE4  C018  F00F         	movff	pad@buf+1,fputs@s+1
  2216  001CE8  C015  F010         	movff	pad@fp,fputs@fp
  2217  001CEC  C016  F011         	movff	pad@fp+1,fputs@fp+1
  2218  001CF0  ECFA  F00F         	call	_fputs	;wreg free
  2219  001CF4                     l1908:
  2220                           
  2221                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  2222  001CF4  BE1A               	btfsc	pad@p+1,7,c
  2223  001CF6  D005               	goto	l1912
  2224  001CF8  C019  F01E         	movff	pad@p,pad@w
  2225  001CFC  C01A  F01F         	movff	pad@p+1,pad@w+1
  2226  001D00  D004               	goto	l277
  2227  001D02                     l1912:
  2228  001D02  0E00               	movlw	0
  2229  001D04  6E1F               	movwf	pad@w+1,c
  2230  001D06  0E00               	movlw	0
  2231  001D08  6E1E               	movwf	pad@w,c
  2232  001D0A                     l277:
  2233                           
  2234                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  2235  001D0A  0E00               	movlw	0
  2236  001D0C  6E1D               	movwf	pad@i+1,c
  2237  001D0E  0E00               	movlw	0
  2238  001D10  6E1C               	movwf	pad@i,c
  2239                           
  2240                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2241  001D12  D00C               	goto	l1918
  2242  001D14                     l1914:
  2243                           
  2244                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  2245  001D14  0E00               	movlw	0
  2246  001D16  6E06               	movwf	fputc@c+1,c
  2247  001D18  0E20               	movlw	32
  2248  001D1A  6E05               	movwf	fputc@c,c
  2249  001D1C  C015  F007         	movff	pad@fp,fputc@fp
  2250  001D20  C016  F008         	movff	pad@fp+1,fputc@fp+1
  2251  001D24  EC46  F00F         	call	_fputc	;wreg free
  2252                           
  2253                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  2254  001D28  4A1C               	infsnz	pad@i,f,c
  2255  001D2A  2A1D               	incf	pad@i+1,f,c
  2256  001D2C                     l1918:
  2257                           
  2258                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2259  001D2C  501E               	movf	pad@w,w,c
  2260  001D2E  5C1C               	subwf	pad@i,w,c
  2261  001D30  501D               	movf	pad@i+1,w,c
  2262  001D32  0A80               	xorlw	128
  2263  001D34  6E1B               	movwf	??_pad& (0+255),c
  2264  001D36  501F               	movf	pad@w+1,w,c
  2265  001D38  0A80               	xorlw	128
  2266  001D3A  581B               	subwfb	??_pad& (0+255),w,c
  2267  001D3C  A0D8               	btfss	status,0,c
  2268  001D3E  D7EA               	goto	l1914
  2269                           
  2270                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  2271  001D40  B07A               	btfsc	_flags,0,c
  2272  001D42  D00A               	goto	l1922
  2273                           
  2274                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  2275  001D44  C017  F00E         	movff	pad@buf,fputs@s
  2276  001D48  C018  F00F         	movff	pad@buf+1,fputs@s+1
  2277  001D4C  C015  F010         	movff	pad@fp,fputs@fp
  2278  001D50  C016  F011         	movff	pad@fp+1,fputs@fp+1
  2279  001D54  ECFA  F00F         	call	_fputs	;wreg free
  2280  001D58                     l1922:
  2281                           
  2282                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  2283  001D58  C017  F001         	movff	pad@buf,strlen@s
  2284  001D5C  C018  F002         	movff	pad@buf+1,strlen@s+1
  2285  001D60  EC46  F010         	call	_strlen	;wreg free
  2286  001D64  501E               	movf	pad@w,w,c
  2287  001D66  2401               	addwf	?_strlen,w,c
  2288  001D68  6E15               	movwf	?_pad,c
  2289  001D6A  501F               	movf	pad@w+1,w,c
  2290  001D6C  2002               	addwfc	?_strlen+1,w,c
  2291  001D6E  6E16               	movwf	?_pad+1,c
  2292  001D70  0012               	return		;funcret
  2293  001D72                     __end_of_pad:
  2294                           	opt callstack 0
  2295                           
  2296 ;; *************** function _strlen *****************
  2297 ;; Defined at:
  2298 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2301 ;;		 -> dbuf(32), 
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;  a               2    2[COMRAM] PTR const unsigned char 
  2304 ;;		 -> dbuf(32), 
  2305 ;; Return value:  Size  Location     Type
  2306 ;;                  2    0[COMRAM] unsigned int 
  2307 ;; Registers used:
  2308 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2314 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2315 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2317 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;Total ram usage:        4 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; This function calls:
  2321 ;;		Nothing
  2322 ;; This function is called by:
  2323 ;;		_pad
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           	psect	text10
  2328  00208C                     __ptext10:
  2329                           	opt callstack 0
  2330  00208C                     _strlen:
  2331                           	opt callstack 24
  2332                           
  2333                           ;incstack = 0
  2334  00208C  C001  F003         	movff	strlen@s,strlen@a
  2335  002090  C002  F004         	movff	strlen@s+1,strlen@a+1
  2336  002094  D002               	goto	l1898
  2337  002096                     l1896:
  2338  002096  4A01               	infsnz	strlen@s,f,c
  2339  002098  2A02               	incf	strlen@s+1,f,c
  2340  00209A                     l1898:
  2341  00209A  C001  FFD9         	movff	strlen@s,fsr2l
  2342  00209E  C002  FFDA         	movff	strlen@s+1,fsr2h
  2343  0020A2  50DF               	movf	indf2,w,c
  2344  0020A4  A4D8               	btfss	status,2,c
  2345  0020A6  D7F7               	goto	l1896
  2346  0020A8  5003               	movf	strlen@a,w,c
  2347  0020AA  5C01               	subwf	strlen@s,w,c
  2348  0020AC  6E01               	movwf	?_strlen,c
  2349  0020AE  5004               	movf	strlen@a+1,w,c
  2350  0020B0  5802               	subwfb	strlen@s+1,w,c
  2351  0020B2  6E02               	movwf	?_strlen+1,c
  2352  0020B4  0012               	return		;funcret
  2353  0020B6                     __end_of_strlen:
  2354                           	opt callstack 0
  2355                           
  2356 ;; *************** function _fputs *****************
  2357 ;; Defined at:
  2358 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;  s               2   13[COMRAM] PTR const unsigned char 
  2361 ;;		 -> dbuf(32), 
  2362 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  2363 ;;		 -> NULL(0), 
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;  i               2   18[COMRAM] int 
  2366 ;;  c               1   17[COMRAM] unsigned char 
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  2   13[COMRAM] int 
  2369 ;; Registers used:
  2370 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2376 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2377 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2379 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2380 ;;Total ram usage:        7 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; Hardware stack levels required when called:    5
  2383 ;; This function calls:
  2384 ;;		_fputc
  2385 ;; This function is called by:
  2386 ;;		_pad
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           	psect	text11
  2391  001FF4                     __ptext11:
  2392                           	opt callstack 0
  2393  001FF4                     _fputs:
  2394                           	opt callstack 19
  2395                           
  2396                           ;incstack = 0
  2397  001FF4  0E00               	movlw	0
  2398  001FF6  6E14               	movwf	fputs@i+1,c
  2399  001FF8  0E00               	movlw	0
  2400  001FFA  6E13               	movwf	fputs@i,c
  2401  001FFC  D00B               	goto	l1892
  2402  001FFE                     l1888:
  2403  001FFE  C012  F005         	movff	fputs@c,fputc@c
  2404  002002  6A06               	clrf	fputc@c+1,c
  2405  002004  C010  F007         	movff	fputs@fp,fputc@fp
  2406  002008  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  2407  00200C  EC46  F00F         	call	_fputc	;wreg free
  2408  002010  4A13               	infsnz	fputs@i,f,c
  2409  002012  2A14               	incf	fputs@i+1,f,c
  2410  002014                     l1892:
  2411  002014  5013               	movf	fputs@i,w,c
  2412  002016  240E               	addwf	fputs@s,w,c
  2413  002018  6ED9               	movwf	fsr2l,c
  2414  00201A  5014               	movf	fputs@i+1,w,c
  2415  00201C  200F               	addwfc	fputs@s+1,w,c
  2416  00201E  6EDA               	movwf	fsr2h,c
  2417  002020  50DF               	movf	indf2,w,c
  2418  002022  6E12               	movwf	fputs@c,c
  2419  002024  5012               	movf	fputs@c,w,c
  2420  002026  B4D8               	btfsc	status,2,c
  2421  002028  0012               	return	
  2422  00202A  D7E9               	goto	l1888
  2423  00202C                     __end_of_fputs:
  2424                           	opt callstack 0
  2425                           
  2426 ;; *************** function _fputc *****************
  2427 ;; Defined at:
  2428 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;  c               2    4[COMRAM] int 
  2431 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  2432 ;;		 -> NULL(0), 
  2433 ;; Auto vars:     Size  Location     Type
  2434 ;;		None
  2435 ;; Return value:  Size  Location     Type
  2436 ;;                  2    4[COMRAM] int 
  2437 ;; Registers used:
  2438 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2439 ;; Tracked objects:
  2440 ;;		On entry : 0/0
  2441 ;;		On exit  : 0/0
  2442 ;;		Unchanged: 0/0
  2443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2444 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2446 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2447 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2448 ;;Total ram usage:        9 bytes
  2449 ;; Hardware stack levels used:    1
  2450 ;; Hardware stack levels required when called:    4
  2451 ;; This function calls:
  2452 ;;		_putch
  2453 ;; This function is called by:
  2454 ;;		_pad
  2455 ;;		_vfpfcnvrt
  2456 ;;		_fputs
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459                           
  2460                           	psect	text12
  2461  001E8C                     __ptext12:
  2462                           	opt callstack 0
  2463  001E8C                     _fputc:
  2464                           	opt callstack 22
  2465                           
  2466                           ;incstack = 0
  2467  001E8C  5007               	movf	fputc@fp,w,c
  2468  001E8E  1008               	iorwf	fputc@fp+1,w,c
  2469  001E90  B4D8               	btfsc	status,2,c
  2470  001E92  D004               	goto	u800
  2471  001E94  5007               	movf	fputc@fp,w,c
  2472  001E96  1008               	iorwf	fputc@fp+1,w,c
  2473  001E98  A4D8               	btfss	status,2,c
  2474  001E9A  D004               	goto	l1878
  2475  001E9C                     u800:
  2476  001E9C  5005               	movf	fputc@c,w,c
  2477  001E9E  ECAA  F010         	call	_putch
  2478  001EA2  0012               	return	
  2479  001EA4                     l1878:
  2480  001EA4  EE20 F004          	lfsr	2,4
  2481  001EA8  5007               	movf	fputc@fp,w,c
  2482  001EAA  26D9               	addwf	fsr2l,f,c
  2483  001EAC  5008               	movf	fputc@fp+1,w,c
  2484  001EAE  22DA               	addwfc	fsr2h,f,c
  2485  001EB0  50DE               	movf	postinc2,w,c
  2486  001EB2  10DE               	iorwf	postinc2,w,c
  2487  001EB4  B4D8               	btfsc	status,2,c
  2488  001EB6  D016               	goto	u820
  2489  001EB8  EE20 F004          	lfsr	2,4
  2490  001EBC  5007               	movf	fputc@fp,w,c
  2491  001EBE  26D9               	addwf	fsr2l,f,c
  2492  001EC0  5008               	movf	fputc@fp+1,w,c
  2493  001EC2  22DA               	addwfc	fsr2h,f,c
  2494  001EC4  EE10 F002          	lfsr	1,2
  2495  001EC8  5007               	movf	fputc@fp,w,c
  2496  001ECA  26E1               	addwf	fsr1l,f,c
  2497  001ECC  5008               	movf	fputc@fp+1,w,c
  2498  001ECE  22E2               	addwfc	fsr1h,f,c
  2499  001ED0  50DE               	movf	postinc2,w,c
  2500  001ED2  5CE6               	subwf	postinc1,w,c
  2501  001ED4  50E6               	movf	postinc1,w,c
  2502  001ED6  0A80               	xorlw	128
  2503  001ED8  6E0D               	movwf	(??_fputc+4)& (0+255),c
  2504  001EDA  50DE               	movf	postinc2,w,c
  2505  001EDC  0A80               	xorlw	128
  2506  001EDE  580D               	subwfb	(??_fputc+4)& (0+255),w,c
  2507  001EE0  B0D8               	btfsc	status,0,c
  2508  001EE2  0012               	return	
  2509  001EE4                     u820:
  2510  001EE4  EE20 F002          	lfsr	2,2
  2511  001EE8  5007               	movf	fputc@fp,w,c
  2512  001EEA  26D9               	addwf	fsr2l,f,c
  2513  001EEC  5008               	movf	fputc@fp+1,w,c
  2514  001EEE  22DA               	addwfc	fsr2h,f,c
  2515  001EF0  2ADE               	incf	postinc2,f,c
  2516  001EF2  0E00               	movlw	0
  2517  001EF4  22DD               	addwfc	postdec2,f,c
  2518  001EF6  0012               	return		;funcret
  2519  001EF8                     __end_of_fputc:
  2520                           	opt callstack 0
  2521                           
  2522 ;; *************** function _putch *****************
  2523 ;; Defined at:
  2524 ;;		line 102 in file "lcd.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;  data            1    wreg     unsigned char 
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;  data            1    3[COMRAM] unsigned char 
  2529 ;; Return value:  Size  Location     Type
  2530 ;;                  1    wreg      void 
  2531 ;; Registers used:
  2532 ;;		wreg, status,2, status,0, cstack
  2533 ;; Tracked objects:
  2534 ;;		On entry : 0/0
  2535 ;;		On exit  : 0/0
  2536 ;;		Unchanged: 0/0
  2537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2539 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2541 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2542 ;;Total ram usage:        1 bytes
  2543 ;; Hardware stack levels used:    1
  2544 ;; Hardware stack levels required when called:    3
  2545 ;; This function calls:
  2546 ;;		_send_byte
  2547 ;; This function is called by:
  2548 ;;		_fputc
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	text13
  2553  002154                     __ptext13:
  2554                           	opt callstack 0
  2555  002154                     _putch:
  2556                           	opt callstack 22
  2557                           
  2558                           ;incstack = 0
  2559                           ;putch@data stored from wreg
  2560  002154  6E04               	movwf	putch@data,c
  2561                           
  2562                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
  2563  002156  848C               	bsf	3980,2,c	;volatile
  2564                           
  2565                           ;lcd.c: 104:     send_byte((unsigned char)data);
  2566  002158  5004               	movf	putch@data,w,c
  2567  00215A  ECA1  F010         	call	_send_byte
  2568  00215E  0012               	return		;funcret
  2569  002160                     __end_of_putch:
  2570                           	opt callstack 0
  2571                           
  2572 ;; *************** function _abs *****************
  2573 ;; Defined at:
  2574 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;  a               2   18[COMRAM] int 
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;		None
  2579 ;; Return value:  Size  Location     Type
  2580 ;;                  2   18[COMRAM] int 
  2581 ;; Registers used:
  2582 ;;		wreg, status,2, status,0
  2583 ;; Tracked objects:
  2584 ;;		On entry : 0/0
  2585 ;;		On exit  : 0/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2588 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2590 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2591 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;Total ram usage:        4 bytes
  2593 ;; Hardware stack levels used:    1
  2594 ;; This function calls:
  2595 ;;		Nothing
  2596 ;; This function is called by:
  2597 ;;		_dtoa
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           	psect	text14
  2602  00202C                     __ptext14:
  2603                           	opt callstack 0
  2604  00202C                     _abs:
  2605                           	opt callstack 25
  2606                           
  2607                           ;incstack = 0
  2608  00202C  BE14               	btfsc	abs@a+1,7,c
  2609  00202E  D005               	goto	u890
  2610  002030  5014               	movf	abs@a+1,w,c
  2611  002032  E110               	bnz	l1000
  2612  002034  0413               	decf	abs@a,w,c
  2613  002036  B0D8               	btfsc	status,0,c
  2614  002038  D00D               	goto	l1000
  2615  00203A                     u890:
  2616  00203A  C013  F015         	movff	abs@a,??_abs
  2617  00203E  C014  F016         	movff	abs@a+1,??_abs+1
  2618  002042  1E15               	comf	??_abs,f,c
  2619  002044  1E16               	comf	??_abs+1,f,c
  2620  002046  4A15               	infsnz	??_abs,f,c
  2621  002048  2A16               	incf	??_abs+1,f,c
  2622  00204A  C015  F013         	movff	??_abs,?_abs
  2623  00204E  C016  F014         	movff	??_abs+1,?_abs+1
  2624  002052  0012               	return	
  2625  002054                     l1000:
  2626  002054  C013  F013         	movff	abs@a,?_abs
  2627  002058  C014  F014         	movff	abs@a+1,?_abs+1
  2628  00205C  0012               	return		;funcret
  2629  00205E                     __end_of_abs:
  2630                           	opt callstack 0
  2631                           
  2632 ;; *************** function ___aomod *****************
  2633 ;; Defined at:
  2634 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;  dividend        8    0[COMRAM] long long 
  2637 ;;  divisor         8    8[COMRAM] long long 
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;  sign            1   17[COMRAM] unsigned char 
  2640 ;;  counter         1   16[COMRAM] unsigned char 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  8    0[COMRAM] long long 
  2643 ;; Registers used:
  2644 ;;		wreg, status,2, status,0
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2650 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;Total ram usage:       18 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; This function calls:
  2657 ;;		Nothing
  2658 ;; This function is called by:
  2659 ;;		_dtoa
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           	psect	text15
  2664  00183A                     __ptext15:
  2665                           	opt callstack 0
  2666  00183A                     ___aomod:
  2667                           	opt callstack 25
  2668                           
  2669                           ;incstack = 0
  2670  00183A  0E00               	movlw	0
  2671  00183C  6E12               	movwf	___aomod@sign,c
  2672  00183E  AE08               	btfss	___aomod@dividend+7,7,c
  2673  001840  D012               	goto	l1982
  2674  001842  1E08               	comf	___aomod@dividend+7,f,c
  2675  001844  1E07               	comf	___aomod@dividend+6,f,c
  2676  001846  1E06               	comf	___aomod@dividend+5,f,c
  2677  001848  1E05               	comf	___aomod@dividend+4,f,c
  2678  00184A  1E04               	comf	___aomod@dividend+3,f,c
  2679  00184C  1E03               	comf	___aomod@dividend+2,f,c
  2680  00184E  1E02               	comf	___aomod@dividend+1,f,c
  2681  001850  6C01               	negf	___aomod@dividend,c
  2682  001852  0E00               	movlw	0
  2683  001854  2202               	addwfc	___aomod@dividend+1,f,c
  2684  001856  2203               	addwfc	___aomod@dividend+2,f,c
  2685  001858  2204               	addwfc	___aomod@dividend+3,f,c
  2686  00185A  2205               	addwfc	___aomod@dividend+4,f,c
  2687  00185C  2206               	addwfc	___aomod@dividend+5,f,c
  2688  00185E  2207               	addwfc	___aomod@dividend+6,f,c
  2689  001860  2208               	addwfc	___aomod@dividend+7,f,c
  2690  001862  0E01               	movlw	1
  2691  001864  6E12               	movwf	___aomod@sign,c
  2692  001866                     l1982:
  2693  001866  AE10               	btfss	___aomod@divisor+7,7,c
  2694  001868  D010               	goto	l1986
  2695  00186A  1E10               	comf	___aomod@divisor+7,f,c
  2696  00186C  1E0F               	comf	___aomod@divisor+6,f,c
  2697  00186E  1E0E               	comf	___aomod@divisor+5,f,c
  2698  001870  1E0D               	comf	___aomod@divisor+4,f,c
  2699  001872  1E0C               	comf	___aomod@divisor+3,f,c
  2700  001874  1E0B               	comf	___aomod@divisor+2,f,c
  2701  001876  1E0A               	comf	___aomod@divisor+1,f,c
  2702  001878  6C09               	negf	___aomod@divisor,c
  2703  00187A  0E00               	movlw	0
  2704  00187C  220A               	addwfc	___aomod@divisor+1,f,c
  2705  00187E  220B               	addwfc	___aomod@divisor+2,f,c
  2706  001880  220C               	addwfc	___aomod@divisor+3,f,c
  2707  001882  220D               	addwfc	___aomod@divisor+4,f,c
  2708  001884  220E               	addwfc	___aomod@divisor+5,f,c
  2709  001886  220F               	addwfc	___aomod@divisor+6,f,c
  2710  001888  2210               	addwfc	___aomod@divisor+7,f,c
  2711  00188A                     l1986:
  2712  00188A  5009               	movf	___aomod@divisor,w,c
  2713  00188C  100A               	iorwf	___aomod@divisor+1,w,c
  2714  00188E  100B               	iorwf	___aomod@divisor+2,w,c
  2715  001890  100C               	iorwf	___aomod@divisor+3,w,c
  2716  001892  100D               	iorwf	___aomod@divisor+4,w,c
  2717  001894  100E               	iorwf	___aomod@divisor+5,w,c
  2718  001896  100F               	iorwf	___aomod@divisor+6,w,c
  2719  001898  1010               	iorwf	___aomod@divisor+7,w,c
  2720  00189A  B4D8               	btfsc	status,2,c
  2721  00189C  D03C               	goto	l2002
  2722  00189E  0E01               	movlw	1
  2723  0018A0  6E11               	movwf	___aomod@counter,c
  2724  0018A2  D00A               	goto	l1992
  2725  0018A4                     l1990:
  2726  0018A4  90D8               	bcf	status,0,c
  2727  0018A6  3609               	rlcf	___aomod@divisor,f,c
  2728  0018A8  360A               	rlcf	___aomod@divisor+1,f,c
  2729  0018AA  360B               	rlcf	___aomod@divisor+2,f,c
  2730  0018AC  360C               	rlcf	___aomod@divisor+3,f,c
  2731  0018AE  360D               	rlcf	___aomod@divisor+4,f,c
  2732  0018B0  360E               	rlcf	___aomod@divisor+5,f,c
  2733  0018B2  360F               	rlcf	___aomod@divisor+6,f,c
  2734  0018B4  3610               	rlcf	___aomod@divisor+7,f,c
  2735  0018B6  2A11               	incf	___aomod@counter,f,c
  2736  0018B8                     l1992:
  2737  0018B8  AE10               	btfss	___aomod@divisor+7,7,c
  2738  0018BA  D7F4               	goto	l1990
  2739  0018BC                     u1000:
  2740  0018BC  5009               	movf	___aomod@divisor,w,c
  2741  0018BE  5C01               	subwf	___aomod@dividend,w,c
  2742  0018C0  500A               	movf	___aomod@divisor+1,w,c
  2743  0018C2  5802               	subwfb	___aomod@dividend+1,w,c
  2744  0018C4  500B               	movf	___aomod@divisor+2,w,c
  2745  0018C6  5803               	subwfb	___aomod@dividend+2,w,c
  2746  0018C8  500C               	movf	___aomod@divisor+3,w,c
  2747  0018CA  5804               	subwfb	___aomod@dividend+3,w,c
  2748  0018CC  500D               	movf	___aomod@divisor+4,w,c
  2749  0018CE  5805               	subwfb	___aomod@dividend+4,w,c
  2750  0018D0  500E               	movf	___aomod@divisor+5,w,c
  2751  0018D2  5806               	subwfb	___aomod@dividend+5,w,c
  2752  0018D4  500F               	movf	___aomod@divisor+6,w,c
  2753  0018D6  5807               	subwfb	___aomod@dividend+6,w,c
  2754  0018D8  5010               	movf	___aomod@divisor+7,w,c
  2755  0018DA  5808               	subwfb	___aomod@dividend+7,w,c
  2756  0018DC  A0D8               	btfss	status,0,c
  2757  0018DE  D010               	goto	l1998
  2758  0018E0  5009               	movf	___aomod@divisor,w,c
  2759  0018E2  5E01               	subwf	___aomod@dividend,f,c
  2760  0018E4  500A               	movf	___aomod@divisor+1,w,c
  2761  0018E6  5A02               	subwfb	___aomod@dividend+1,f,c
  2762  0018E8  500B               	movf	___aomod@divisor+2,w,c
  2763  0018EA  5A03               	subwfb	___aomod@dividend+2,f,c
  2764  0018EC  500C               	movf	___aomod@divisor+3,w,c
  2765  0018EE  5A04               	subwfb	___aomod@dividend+3,f,c
  2766  0018F0  500D               	movf	___aomod@divisor+4,w,c
  2767  0018F2  5A05               	subwfb	___aomod@dividend+4,f,c
  2768  0018F4  500E               	movf	___aomod@divisor+5,w,c
  2769  0018F6  5A06               	subwfb	___aomod@dividend+5,f,c
  2770  0018F8  500F               	movf	___aomod@divisor+6,w,c
  2771  0018FA  5A07               	subwfb	___aomod@dividend+6,f,c
  2772  0018FC  5010               	movf	___aomod@divisor+7,w,c
  2773  0018FE  5A08               	subwfb	___aomod@dividend+7,f,c
  2774  001900                     l1998:
  2775  001900  90D8               	bcf	status,0,c
  2776  001902  3210               	rrcf	___aomod@divisor+7,f,c
  2777  001904  320F               	rrcf	___aomod@divisor+6,f,c
  2778  001906  320E               	rrcf	___aomod@divisor+5,f,c
  2779  001908  320D               	rrcf	___aomod@divisor+4,f,c
  2780  00190A  320C               	rrcf	___aomod@divisor+3,f,c
  2781  00190C  320B               	rrcf	___aomod@divisor+2,f,c
  2782  00190E  320A               	rrcf	___aomod@divisor+1,f,c
  2783  001910  3209               	rrcf	___aomod@divisor,f,c
  2784  001912  2E11               	decfsz	___aomod@counter,f,c
  2785  001914  D7D3               	goto	u1000
  2786  001916                     l2002:
  2787  001916  5012               	movf	___aomod@sign,w,c
  2788  001918  B4D8               	btfsc	status,2,c
  2789  00191A  D010               	goto	l2006
  2790  00191C  1E08               	comf	___aomod@dividend+7,f,c
  2791  00191E  1E07               	comf	___aomod@dividend+6,f,c
  2792  001920  1E06               	comf	___aomod@dividend+5,f,c
  2793  001922  1E05               	comf	___aomod@dividend+4,f,c
  2794  001924  1E04               	comf	___aomod@dividend+3,f,c
  2795  001926  1E03               	comf	___aomod@dividend+2,f,c
  2796  001928  1E02               	comf	___aomod@dividend+1,f,c
  2797  00192A  6C01               	negf	___aomod@dividend,c
  2798  00192C  0E00               	movlw	0
  2799  00192E  2202               	addwfc	___aomod@dividend+1,f,c
  2800  001930  2203               	addwfc	___aomod@dividend+2,f,c
  2801  001932  2204               	addwfc	___aomod@dividend+3,f,c
  2802  001934  2205               	addwfc	___aomod@dividend+4,f,c
  2803  001936  2206               	addwfc	___aomod@dividend+5,f,c
  2804  001938  2207               	addwfc	___aomod@dividend+6,f,c
  2805  00193A  2208               	addwfc	___aomod@dividend+7,f,c
  2806  00193C                     l2006:
  2807  00193C  C001  F001         	movff	___aomod@dividend,?___aomod
  2808  001940  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2809  001944  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2810  001948  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2811  00194C  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2812  001950  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2813  001954  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2814  001958  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2815  00195C  0012               	return		;funcret
  2816  00195E                     __end_of___aomod:
  2817                           	opt callstack 0
  2818                           
  2819 ;; *************** function ___aodiv *****************
  2820 ;; Defined at:
  2821 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2822 ;; Parameters:    Size  Location     Type
  2823 ;;  dividend        8    0[COMRAM] long long 
  2824 ;;  divisor         8    8[COMRAM] long long 
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;  quotient        8   18[COMRAM] long long 
  2827 ;;  sign            1   17[COMRAM] unsigned char 
  2828 ;;  counter         1   16[COMRAM] unsigned char 
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  8    0[COMRAM] long long 
  2831 ;; Registers used:
  2832 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2838 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;Total ram usage:       26 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; This function calls:
  2845 ;;		Nothing
  2846 ;; This function is called by:
  2847 ;;		_dtoa
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850                           
  2851                           	psect	text16
  2852  0016F2                     __ptext16:
  2853                           	opt callstack 0
  2854  0016F2                     ___aodiv:
  2855                           	opt callstack 25
  2856                           
  2857                           ;incstack = 0
  2858  0016F2  0E00               	movlw	0
  2859  0016F4  6E12               	movwf	___aodiv@sign,c
  2860  0016F6  AE10               	btfss	___aodiv@divisor+7,7,c
  2861  0016F8  D012               	goto	l1938
  2862  0016FA  1E10               	comf	___aodiv@divisor+7,f,c
  2863  0016FC  1E0F               	comf	___aodiv@divisor+6,f,c
  2864  0016FE  1E0E               	comf	___aodiv@divisor+5,f,c
  2865  001700  1E0D               	comf	___aodiv@divisor+4,f,c
  2866  001702  1E0C               	comf	___aodiv@divisor+3,f,c
  2867  001704  1E0B               	comf	___aodiv@divisor+2,f,c
  2868  001706  1E0A               	comf	___aodiv@divisor+1,f,c
  2869  001708  6C09               	negf	___aodiv@divisor,c
  2870  00170A  0E00               	movlw	0
  2871  00170C  220A               	addwfc	___aodiv@divisor+1,f,c
  2872  00170E  220B               	addwfc	___aodiv@divisor+2,f,c
  2873  001710  220C               	addwfc	___aodiv@divisor+3,f,c
  2874  001712  220D               	addwfc	___aodiv@divisor+4,f,c
  2875  001714  220E               	addwfc	___aodiv@divisor+5,f,c
  2876  001716  220F               	addwfc	___aodiv@divisor+6,f,c
  2877  001718  2210               	addwfc	___aodiv@divisor+7,f,c
  2878  00171A  0E01               	movlw	1
  2879  00171C  6E12               	movwf	___aodiv@sign,c
  2880  00171E                     l1938:
  2881  00171E  AE08               	btfss	___aodiv@dividend+7,7,c
  2882  001720  D012               	goto	l1944
  2883  001722  1E08               	comf	___aodiv@dividend+7,f,c
  2884  001724  1E07               	comf	___aodiv@dividend+6,f,c
  2885  001726  1E06               	comf	___aodiv@dividend+5,f,c
  2886  001728  1E05               	comf	___aodiv@dividend+4,f,c
  2887  00172A  1E04               	comf	___aodiv@dividend+3,f,c
  2888  00172C  1E03               	comf	___aodiv@dividend+2,f,c
  2889  00172E  1E02               	comf	___aodiv@dividend+1,f,c
  2890  001730  6C01               	negf	___aodiv@dividend,c
  2891  001732  0E00               	movlw	0
  2892  001734  2202               	addwfc	___aodiv@dividend+1,f,c
  2893  001736  2203               	addwfc	___aodiv@dividend+2,f,c
  2894  001738  2204               	addwfc	___aodiv@dividend+3,f,c
  2895  00173A  2205               	addwfc	___aodiv@dividend+4,f,c
  2896  00173C  2206               	addwfc	___aodiv@dividend+5,f,c
  2897  00173E  2207               	addwfc	___aodiv@dividend+6,f,c
  2898  001740  2208               	addwfc	___aodiv@dividend+7,f,c
  2899  001742  0E01               	movlw	1
  2900  001744  1A12               	xorwf	___aodiv@sign,f,c
  2901  001746                     l1944:
  2902  001746  EE20  F013         	lfsr	2,___aodiv@quotient
  2903  00174A  0E07               	movlw	7
  2904  00174C                     u921:
  2905  00174C  6ADE               	clrf	postinc2,c
  2906  00174E  06E8               	decf	wreg,f,c
  2907  001750  E2FD               	bc	u921
  2908  001752  5009               	movf	___aodiv@divisor,w,c
  2909  001754  100A               	iorwf	___aodiv@divisor+1,w,c
  2910  001756  100B               	iorwf	___aodiv@divisor+2,w,c
  2911  001758  100C               	iorwf	___aodiv@divisor+3,w,c
  2912  00175A  100D               	iorwf	___aodiv@divisor+4,w,c
  2913  00175C  100E               	iorwf	___aodiv@divisor+5,w,c
  2914  00175E  100F               	iorwf	___aodiv@divisor+6,w,c
  2915  001760  1010               	iorwf	___aodiv@divisor+7,w,c
  2916  001762  B4D8               	btfsc	status,2,c
  2917  001764  D046               	goto	l1966
  2918  001766  0E01               	movlw	1
  2919  001768  6E11               	movwf	___aodiv@counter,c
  2920  00176A  D00A               	goto	l1952
  2921  00176C                     l1950:
  2922  00176C  90D8               	bcf	status,0,c
  2923  00176E  3609               	rlcf	___aodiv@divisor,f,c
  2924  001770  360A               	rlcf	___aodiv@divisor+1,f,c
  2925  001772  360B               	rlcf	___aodiv@divisor+2,f,c
  2926  001774  360C               	rlcf	___aodiv@divisor+3,f,c
  2927  001776  360D               	rlcf	___aodiv@divisor+4,f,c
  2928  001778  360E               	rlcf	___aodiv@divisor+5,f,c
  2929  00177A  360F               	rlcf	___aodiv@divisor+6,f,c
  2930  00177C  3610               	rlcf	___aodiv@divisor+7,f,c
  2931  00177E  2A11               	incf	___aodiv@counter,f,c
  2932  001780                     l1952:
  2933  001780  AE10               	btfss	___aodiv@divisor+7,7,c
  2934  001782  D7F4               	goto	l1950
  2935  001784                     u940:
  2936  001784  90D8               	bcf	status,0,c
  2937  001786  3613               	rlcf	___aodiv@quotient,f,c
  2938  001788  3614               	rlcf	___aodiv@quotient+1,f,c
  2939  00178A  3615               	rlcf	___aodiv@quotient+2,f,c
  2940  00178C  3616               	rlcf	___aodiv@quotient+3,f,c
  2941  00178E  3617               	rlcf	___aodiv@quotient+4,f,c
  2942  001790  3618               	rlcf	___aodiv@quotient+5,f,c
  2943  001792  3619               	rlcf	___aodiv@quotient+6,f,c
  2944  001794  361A               	rlcf	___aodiv@quotient+7,f,c
  2945  001796  5009               	movf	___aodiv@divisor,w,c
  2946  001798  5C01               	subwf	___aodiv@dividend,w,c
  2947  00179A  500A               	movf	___aodiv@divisor+1,w,c
  2948  00179C  5802               	subwfb	___aodiv@dividend+1,w,c
  2949  00179E  500B               	movf	___aodiv@divisor+2,w,c
  2950  0017A0  5803               	subwfb	___aodiv@dividend+2,w,c
  2951  0017A2  500C               	movf	___aodiv@divisor+3,w,c
  2952  0017A4  5804               	subwfb	___aodiv@dividend+3,w,c
  2953  0017A6  500D               	movf	___aodiv@divisor+4,w,c
  2954  0017A8  5805               	subwfb	___aodiv@dividend+4,w,c
  2955  0017AA  500E               	movf	___aodiv@divisor+5,w,c
  2956  0017AC  5806               	subwfb	___aodiv@dividend+5,w,c
  2957  0017AE  500F               	movf	___aodiv@divisor+6,w,c
  2958  0017B0  5807               	subwfb	___aodiv@dividend+6,w,c
  2959  0017B2  5010               	movf	___aodiv@divisor+7,w,c
  2960  0017B4  5808               	subwfb	___aodiv@dividend+7,w,c
  2961  0017B6  A0D8               	btfss	status,0,c
  2962  0017B8  D011               	goto	l1962
  2963  0017BA  5009               	movf	___aodiv@divisor,w,c
  2964  0017BC  5E01               	subwf	___aodiv@dividend,f,c
  2965  0017BE  500A               	movf	___aodiv@divisor+1,w,c
  2966  0017C0  5A02               	subwfb	___aodiv@dividend+1,f,c
  2967  0017C2  500B               	movf	___aodiv@divisor+2,w,c
  2968  0017C4  5A03               	subwfb	___aodiv@dividend+2,f,c
  2969  0017C6  500C               	movf	___aodiv@divisor+3,w,c
  2970  0017C8  5A04               	subwfb	___aodiv@dividend+3,f,c
  2971  0017CA  500D               	movf	___aodiv@divisor+4,w,c
  2972  0017CC  5A05               	subwfb	___aodiv@dividend+4,f,c
  2973  0017CE  500E               	movf	___aodiv@divisor+5,w,c
  2974  0017D0  5A06               	subwfb	___aodiv@dividend+5,f,c
  2975  0017D2  500F               	movf	___aodiv@divisor+6,w,c
  2976  0017D4  5A07               	subwfb	___aodiv@dividend+6,f,c
  2977  0017D6  5010               	movf	___aodiv@divisor+7,w,c
  2978  0017D8  5A08               	subwfb	___aodiv@dividend+7,f,c
  2979  0017DA  8013               	bsf	___aodiv@quotient,0,c
  2980  0017DC                     l1962:
  2981  0017DC  90D8               	bcf	status,0,c
  2982  0017DE  3210               	rrcf	___aodiv@divisor+7,f,c
  2983  0017E0  320F               	rrcf	___aodiv@divisor+6,f,c
  2984  0017E2  320E               	rrcf	___aodiv@divisor+5,f,c
  2985  0017E4  320D               	rrcf	___aodiv@divisor+4,f,c
  2986  0017E6  320C               	rrcf	___aodiv@divisor+3,f,c
  2987  0017E8  320B               	rrcf	___aodiv@divisor+2,f,c
  2988  0017EA  320A               	rrcf	___aodiv@divisor+1,f,c
  2989  0017EC  3209               	rrcf	___aodiv@divisor,f,c
  2990  0017EE  2E11               	decfsz	___aodiv@counter,f,c
  2991  0017F0  D7C9               	goto	u940
  2992  0017F2                     l1966:
  2993  0017F2  5012               	movf	___aodiv@sign,w,c
  2994  0017F4  B4D8               	btfsc	status,2,c
  2995  0017F6  D010               	goto	l1970
  2996  0017F8  1E1A               	comf	___aodiv@quotient+7,f,c
  2997  0017FA  1E19               	comf	___aodiv@quotient+6,f,c
  2998  0017FC  1E18               	comf	___aodiv@quotient+5,f,c
  2999  0017FE  1E17               	comf	___aodiv@quotient+4,f,c
  3000  001800  1E16               	comf	___aodiv@quotient+3,f,c
  3001  001802  1E15               	comf	___aodiv@quotient+2,f,c
  3002  001804  1E14               	comf	___aodiv@quotient+1,f,c
  3003  001806  6C13               	negf	___aodiv@quotient,c
  3004  001808  0E00               	movlw	0
  3005  00180A  2214               	addwfc	___aodiv@quotient+1,f,c
  3006  00180C  2215               	addwfc	___aodiv@quotient+2,f,c
  3007  00180E  2216               	addwfc	___aodiv@quotient+3,f,c
  3008  001810  2217               	addwfc	___aodiv@quotient+4,f,c
  3009  001812  2218               	addwfc	___aodiv@quotient+5,f,c
  3010  001814  2219               	addwfc	___aodiv@quotient+6,f,c
  3011  001816  221A               	addwfc	___aodiv@quotient+7,f,c
  3012  001818                     l1970:
  3013  001818  C013  F001         	movff	___aodiv@quotient,?___aodiv
  3014  00181C  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  3015  001820  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  3016  001824  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  3017  001828  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  3018  00182C  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  3019  001830  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  3020  001834  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  3021  001838  0012               	return		;funcret
  3022  00183A                     __end_of___aodiv:
  3023                           	opt callstack 0
  3024                           
  3025 ;; *************** function _full_drive *****************
  3026 ;; Defined at:
  3027 ;;		line 547 in file "main.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;  direction       1    wreg     unsigned char 
  3030 ;;  stepper_no      2    0[COMRAM] int 
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;  direction       1    3[COMRAM] unsigned char 
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, status,2, status,0
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3042 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3043 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;Total ram usage:        4 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_stepper
  3052 ;;		_stepper2
  3053 ;;		_stepper2_back
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           	psect	text17
  3058  001058                     __ptext17:
  3059                           	opt callstack 0
  3060  001058                     _full_drive:
  3061                           	opt callstack 29
  3062                           
  3063                           ;incstack = 0
  3064                           ;full_drive@direction stored from wreg
  3065  001058  6E04               	movwf	full_drive@direction,c
  3066                           
  3067                           ;main.c: 548:     if (stepper_no == 1){
  3068  00105A  0401               	decf	full_drive@stepper_no,w,c
  3069  00105C  1002               	iorwf	full_drive@stepper_no+1,w,c
  3070  00105E  A4D8               	btfss	status,2,c
  3071  001060  D06A               	goto	l2226
  3072                           
  3073                           ;main.c: 549:         if (direction == 1){
  3074  001062  0404               	decf	full_drive@direction,w,c
  3075  001064  A4D8               	btfss	status,2,c
  3076  001066  D032               	goto	l2210
  3077                           
  3078                           ;main.c: 550:             LATA = 0b00000011;
  3079  001068  0E03               	movlw	3
  3080  00106A  6E89               	movwf	3977,c	;volatile
  3081                           
  3082                           ;main.c: 551:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3083  00106C  0E21               	movlw	33
  3084  00106E  6E03               	movwf	??_full_drive& (0+255),c
  3085  001070  0E76               	movlw	118
  3086  001072                     u1617:
  3087  001072  2EE8               	decfsz	wreg,f,c
  3088  001074  D7FE               	bra	u1617
  3089  001076  2E03               	decfsz	??_full_drive& (0+255),f,c
  3090  001078  D7FC               	bra	u1617
  3091  00107A  D000               	nop2	
  3092                           
  3093                           ;main.c: 552:             LATA = 0b00000110;
  3094  00107C  0E06               	movlw	6
  3095  00107E  6E89               	movwf	3977,c	;volatile
  3096                           
  3097                           ;main.c: 553:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3098  001080  0E21               	movlw	33
  3099  001082  6E03               	movwf	??_full_drive& (0+255),c
  3100  001084  0E76               	movlw	118
  3101  001086                     u1627:
  3102  001086  2EE8               	decfsz	wreg,f,c
  3103  001088  D7FE               	bra	u1627
  3104  00108A  2E03               	decfsz	??_full_drive& (0+255),f,c
  3105  00108C  D7FC               	bra	u1627
  3106  00108E  D000               	nop2	
  3107                           
  3108                           ;main.c: 554:             LATA = 0b00001100;
  3109  001090  0E0C               	movlw	12
  3110  001092  6E89               	movwf	3977,c	;volatile
  3111                           
  3112                           ;main.c: 555:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3113  001094  0E21               	movlw	33
  3114  001096  6E03               	movwf	??_full_drive& (0+255),c
  3115  001098  0E76               	movlw	118
  3116  00109A                     u1637:
  3117  00109A  2EE8               	decfsz	wreg,f,c
  3118  00109C  D7FE               	bra	u1637
  3119  00109E  2E03               	decfsz	??_full_drive& (0+255),f,c
  3120  0010A0  D7FC               	bra	u1637
  3121  0010A2  D000               	nop2	
  3122                           
  3123                           ;main.c: 556:             LATA = 0b00001001;
  3124  0010A4  0E09               	movlw	9
  3125  0010A6  6E89               	movwf	3977,c	;volatile
  3126                           
  3127                           ;main.c: 557:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3128  0010A8  0E21               	movlw	33
  3129  0010AA  6E03               	movwf	??_full_drive& (0+255),c
  3130  0010AC  0E76               	movlw	118
  3131  0010AE                     u1647:
  3132  0010AE  2EE8               	decfsz	wreg,f,c
  3133  0010B0  D7FE               	bra	u1647
  3134  0010B2  2E03               	decfsz	??_full_drive& (0+255),f,c
  3135  0010B4  D7FC               	bra	u1647
  3136  0010B6  D000               	nop2	
  3137                           
  3138                           ;main.c: 558:             LATA = 0b00000011;
  3139  0010B8  0E03               	movlw	3
  3140  0010BA  6E89               	movwf	3977,c	;volatile
  3141                           
  3142                           ;main.c: 559:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3143  0010BC  0E21               	movlw	33
  3144  0010BE  6E03               	movwf	??_full_drive& (0+255),c
  3145  0010C0  0E76               	movlw	118
  3146  0010C2                     u1657:
  3147  0010C2  2EE8               	decfsz	wreg,f,c
  3148  0010C4  D7FE               	bra	u1657
  3149  0010C6  2E03               	decfsz	??_full_drive& (0+255),f,c
  3150  0010C8  D7FC               	bra	u1657
  3151  0010CA  D000               	nop2	
  3152  0010CC                     l2210:
  3153                           
  3154                           ;main.c: 561:         if (direction == 0){
  3155  0010CC  5004               	movf	full_drive@direction,w,c
  3156  0010CE  A4D8               	btfss	status,2,c
  3157  0010D0  D032               	goto	l2226
  3158                           
  3159                           ;main.c: 562:             LATA = 0b00001001;
  3160  0010D2  0E09               	movlw	9
  3161  0010D4  6E89               	movwf	3977,c	;volatile
  3162                           
  3163                           ;main.c: 563:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3164  0010D6  0E21               	movlw	33
  3165  0010D8  6E03               	movwf	??_full_drive& (0+255),c
  3166  0010DA  0E76               	movlw	118
  3167  0010DC                     u1667:
  3168  0010DC  2EE8               	decfsz	wreg,f,c
  3169  0010DE  D7FE               	bra	u1667
  3170  0010E0  2E03               	decfsz	??_full_drive& (0+255),f,c
  3171  0010E2  D7FC               	bra	u1667
  3172  0010E4  D000               	nop2	
  3173                           
  3174                           ;main.c: 564:             LATA = 0b00001100;
  3175  0010E6  0E0C               	movlw	12
  3176  0010E8  6E89               	movwf	3977,c	;volatile
  3177                           
  3178                           ;main.c: 565:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3179  0010EA  0E21               	movlw	33
  3180  0010EC  6E03               	movwf	??_full_drive& (0+255),c
  3181  0010EE  0E76               	movlw	118
  3182  0010F0                     u1677:
  3183  0010F0  2EE8               	decfsz	wreg,f,c
  3184  0010F2  D7FE               	bra	u1677
  3185  0010F4  2E03               	decfsz	??_full_drive& (0+255),f,c
  3186  0010F6  D7FC               	bra	u1677
  3187  0010F8  D000               	nop2	
  3188                           
  3189                           ;main.c: 566:             LATA = 0b00000110;
  3190  0010FA  0E06               	movlw	6
  3191  0010FC  6E89               	movwf	3977,c	;volatile
  3192                           
  3193                           ;main.c: 567:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3194  0010FE  0E21               	movlw	33
  3195  001100  6E03               	movwf	??_full_drive& (0+255),c
  3196  001102  0E76               	movlw	118
  3197  001104                     u1687:
  3198  001104  2EE8               	decfsz	wreg,f,c
  3199  001106  D7FE               	bra	u1687
  3200  001108  2E03               	decfsz	??_full_drive& (0+255),f,c
  3201  00110A  D7FC               	bra	u1687
  3202  00110C  D000               	nop2	
  3203                           
  3204                           ;main.c: 568:             LATA = 0b00000011;
  3205  00110E  0E03               	movlw	3
  3206  001110  6E89               	movwf	3977,c	;volatile
  3207                           
  3208                           ;main.c: 569:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3209  001112  0E21               	movlw	33
  3210  001114  6E03               	movwf	??_full_drive& (0+255),c
  3211  001116  0E76               	movlw	118
  3212  001118                     u1697:
  3213  001118  2EE8               	decfsz	wreg,f,c
  3214  00111A  D7FE               	bra	u1697
  3215  00111C  2E03               	decfsz	??_full_drive& (0+255),f,c
  3216  00111E  D7FC               	bra	u1697
  3217  001120  D000               	nop2	
  3218                           
  3219                           ;main.c: 570:             LATA = 0b00001001;
  3220  001122  0E09               	movlw	9
  3221  001124  6E89               	movwf	3977,c	;volatile
  3222                           
  3223                           ;main.c: 571:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3224  001126  0E21               	movlw	33
  3225  001128  6E03               	movwf	??_full_drive& (0+255),c
  3226  00112A  0E76               	movlw	118
  3227  00112C                     u1707:
  3228  00112C  2EE8               	decfsz	wreg,f,c
  3229  00112E  D7FE               	bra	u1707
  3230  001130  2E03               	decfsz	??_full_drive& (0+255),f,c
  3231  001132  D7FC               	bra	u1707
  3232  001134  D000               	nop2	
  3233  001136                     l2226:
  3234                           
  3235                           ;main.c: 574:     if (stepper_no == 2){
  3236  001136  0E02               	movlw	2
  3237  001138  1801               	xorwf	full_drive@stepper_no,w,c
  3238  00113A  1002               	iorwf	full_drive@stepper_no+1,w,c
  3239  00113C  A4D8               	btfss	status,2,c
  3240  00113E  D074               	goto	l2304
  3241                           
  3242                           ;main.c: 575:         if (direction == 1){
  3243  001140  0404               	decf	full_drive@direction,w,c
  3244  001142  A4D8               	btfss	status,2,c
  3245  001144  D037               	goto	l2266
  3246                           
  3247                           ;main.c: 576:             LATCbits.LATC0 = 1;
  3248  001146  808B               	bsf	3979,0,c	;volatile
  3249                           
  3250                           ;main.c: 577:             LATEbits.LATE0 = 1;
  3251  001148  808D               	bsf	3981,0,c	;volatile
  3252                           
  3253                           ;main.c: 578:             LATEbits.LATE1 = 0;
  3254  00114A  928D               	bcf	3981,1,c	;volatile
  3255                           
  3256                           ;main.c: 579:             LATEbits.LATE2 = 0;
  3257  00114C  948D               	bcf	3981,2,c	;volatile
  3258                           
  3259                           ;main.c: 580:             _delay((unsigned long)((6)*(10000000/4000.0)));
  3260  00114E  0E14               	movlw	20
  3261  001150  6E03               	movwf	??_full_drive& (0+255),c
  3262  001152  0E7A               	movlw	122
  3263  001154                     u1717:
  3264  001154  2EE8               	decfsz	wreg,f,c
  3265  001156  D7FE               	bra	u1717
  3266  001158  2E03               	decfsz	??_full_drive& (0+255),f,c
  3267  00115A  D7FC               	bra	u1717
  3268                           
  3269                           ;main.c: 581:             LATCbits.LATC0 = 0;
  3270  00115C  908B               	bcf	3979,0,c	;volatile
  3271                           
  3272                           ;main.c: 582:             LATEbits.LATE0 = 1;
  3273  00115E  808D               	bsf	3981,0,c	;volatile
  3274                           
  3275                           ;main.c: 583:             LATEbits.LATE1 = 1;
  3276  001160  828D               	bsf	3981,1,c	;volatile
  3277                           
  3278                           ;main.c: 584:             LATEbits.LATE2 = 0;
  3279  001162  948D               	bcf	3981,2,c	;volatile
  3280                           
  3281                           ;main.c: 585:             _delay((unsigned long)((6)*(10000000/4000.0)));
  3282  001164  0E14               	movlw	20
  3283  001166  6E03               	movwf	??_full_drive& (0+255),c
  3284  001168  0E7A               	movlw	122
  3285  00116A                     u1727:
  3286  00116A  2EE8               	decfsz	wreg,f,c
  3287  00116C  D7FE               	bra	u1727
  3288  00116E  2E03               	decfsz	??_full_drive& (0+255),f,c
  3289  001170  D7FC               	bra	u1727
  3290                           
  3291                           ;main.c: 586:             LATCbits.LATC0 = 0;
  3292  001172  908B               	bcf	3979,0,c	;volatile
  3293                           
  3294                           ;main.c: 587:             LATEbits.LATE0 = 0;
  3295  001174  908D               	bcf	3981,0,c	;volatile
  3296                           
  3297                           ;main.c: 588:             LATEbits.LATE1 = 1;
  3298  001176  828D               	bsf	3981,1,c	;volatile
  3299                           
  3300                           ;main.c: 589:             LATEbits.LATE2 = 1;
  3301  001178  848D               	bsf	3981,2,c	;volatile
  3302                           
  3303                           ;main.c: 590:             _delay((unsigned long)((6)*(10000000/4000.0)));
  3304  00117A  0E14               	movlw	20
  3305  00117C  6E03               	movwf	??_full_drive& (0+255),c
  3306  00117E  0E7A               	movlw	122
  3307  001180                     u1737:
  3308  001180  2EE8               	decfsz	wreg,f,c
  3309  001182  D7FE               	bra	u1737
  3310  001184  2E03               	decfsz	??_full_drive& (0+255),f,c
  3311  001186  D7FC               	bra	u1737
  3312                           
  3313                           ;main.c: 591:             LATCbits.LATC0 = 1;
  3314  001188  808B               	bsf	3979,0,c	;volatile
  3315                           
  3316                           ;main.c: 592:             LATEbits.LATE0 = 0;
  3317  00118A  908D               	bcf	3981,0,c	;volatile
  3318                           
  3319                           ;main.c: 593:             LATEbits.LATE1 = 0;
  3320  00118C  928D               	bcf	3981,1,c	;volatile
  3321                           
  3322                           ;main.c: 594:             LATEbits.LATE2 = 1;
  3323  00118E  848D               	bsf	3981,2,c	;volatile
  3324                           
  3325                           ;main.c: 595:             _delay((unsigned long)((6)*(10000000/4000.0)));
  3326  001190  0E14               	movlw	20
  3327  001192  6E03               	movwf	??_full_drive& (0+255),c
  3328  001194  0E7A               	movlw	122
  3329  001196                     u1747:
  3330  001196  2EE8               	decfsz	wreg,f,c
  3331  001198  D7FE               	bra	u1747
  3332  00119A  2E03               	decfsz	??_full_drive& (0+255),f,c
  3333  00119C  D7FC               	bra	u1747
  3334                           
  3335                           ;main.c: 596:             LATCbits.LATC0 = 1;
  3336  00119E  808B               	bsf	3979,0,c	;volatile
  3337                           
  3338                           ;main.c: 597:             LATEbits.LATE0 = 1;
  3339  0011A0  808D               	bsf	3981,0,c	;volatile
  3340                           
  3341                           ;main.c: 598:             LATEbits.LATE1 = 0;
  3342  0011A2  928D               	bcf	3981,1,c	;volatile
  3343                           
  3344                           ;main.c: 599:             LATEbits.LATE2 = 0;
  3345  0011A4  948D               	bcf	3981,2,c	;volatile
  3346                           
  3347                           ;main.c: 600:             _delay((unsigned long)((6)*(10000000/4000.0)));
  3348  0011A6  0E14               	movlw	20
  3349  0011A8  6E03               	movwf	??_full_drive& (0+255),c
  3350  0011AA  0E7A               	movlw	122
  3351  0011AC                     u1757:
  3352  0011AC  2EE8               	decfsz	wreg,f,c
  3353  0011AE  D7FE               	bra	u1757
  3354  0011B0  2E03               	decfsz	??_full_drive& (0+255),f,c
  3355  0011B2  D7FC               	bra	u1757
  3356  0011B4                     l2266:
  3357                           
  3358                           ;main.c: 602:         if (direction == 0){
  3359  0011B4  5004               	movf	full_drive@direction,w,c
  3360  0011B6  A4D8               	btfss	status,2,c
  3361  0011B8  D037               	goto	l2304
  3362                           
  3363                           ;main.c: 603:             LATCbits.LATC0 = 1;
  3364  0011BA  808B               	bsf	3979,0,c	;volatile
  3365                           
  3366                           ;main.c: 604:             LATEbits.LATE0 = 0;
  3367  0011BC  908D               	bcf	3981,0,c	;volatile
  3368                           
  3369                           ;main.c: 605:             LATEbits.LATE1 = 0;
  3370  0011BE  928D               	bcf	3981,1,c	;volatile
  3371                           
  3372                           ;main.c: 606:             LATEbits.LATE2 = 1;
  3373  0011C0  848D               	bsf	3981,2,c	;volatile
  3374                           
  3375                           ;main.c: 607:             _delay((unsigned long)((6)*(10000000/4000.0)));
  3376  0011C2  0E14               	movlw	20
  3377  0011C4  6E03               	movwf	??_full_drive& (0+255),c
  3378  0011C6  0E7A               	movlw	122
  3379  0011C8                     u1767:
  3380  0011C8  2EE8               	decfsz	wreg,f,c
  3381  0011CA  D7FE               	bra	u1767
  3382  0011CC  2E03               	decfsz	??_full_drive& (0+255),f,c
  3383  0011CE  D7FC               	bra	u1767
  3384                           
  3385                           ;main.c: 608:             LATCbits.LATC0 = 0;
  3386  0011D0  908B               	bcf	3979,0,c	;volatile
  3387                           
  3388                           ;main.c: 609:             LATEbits.LATE0 = 0;
  3389  0011D2  908D               	bcf	3981,0,c	;volatile
  3390                           
  3391                           ;main.c: 610:             LATEbits.LATE1 = 1;
  3392  0011D4  828D               	bsf	3981,1,c	;volatile
  3393                           
  3394                           ;main.c: 611:             LATEbits.LATE2 = 1;
  3395  0011D6  848D               	bsf	3981,2,c	;volatile
  3396                           
  3397                           ;main.c: 612:             _delay((unsigned long)((6)*(10000000/4000.0)));
  3398  0011D8  0E14               	movlw	20
  3399  0011DA  6E03               	movwf	??_full_drive& (0+255),c
  3400  0011DC  0E7A               	movlw	122
  3401  0011DE                     u1777:
  3402  0011DE  2EE8               	decfsz	wreg,f,c
  3403  0011E0  D7FE               	bra	u1777
  3404  0011E2  2E03               	decfsz	??_full_drive& (0+255),f,c
  3405  0011E4  D7FC               	bra	u1777
  3406                           
  3407                           ;main.c: 613:             LATCbits.LATC0 = 0;
  3408  0011E6  908B               	bcf	3979,0,c	;volatile
  3409                           
  3410                           ;main.c: 614:             LATEbits.LATE0 = 1;
  3411  0011E8  808D               	bsf	3981,0,c	;volatile
  3412                           
  3413                           ;main.c: 615:             LATEbits.LATE1 = 1;
  3414  0011EA  828D               	bsf	3981,1,c	;volatile
  3415                           
  3416                           ;main.c: 616:             LATEbits.LATE2 = 0;
  3417  0011EC  948D               	bcf	3981,2,c	;volatile
  3418                           
  3419                           ;main.c: 617:             _delay((unsigned long)((6)*(10000000/4000.0)));
  3420  0011EE  0E14               	movlw	20
  3421  0011F0  6E03               	movwf	??_full_drive& (0+255),c
  3422  0011F2  0E7A               	movlw	122
  3423  0011F4                     u1787:
  3424  0011F4  2EE8               	decfsz	wreg,f,c
  3425  0011F6  D7FE               	bra	u1787
  3426  0011F8  2E03               	decfsz	??_full_drive& (0+255),f,c
  3427  0011FA  D7FC               	bra	u1787
  3428                           
  3429                           ;main.c: 618:             LATCbits.LATC0 = 1;
  3430  0011FC  808B               	bsf	3979,0,c	;volatile
  3431                           
  3432                           ;main.c: 619:             LATEbits.LATE0 = 1;
  3433  0011FE  808D               	bsf	3981,0,c	;volatile
  3434                           
  3435                           ;main.c: 620:             LATEbits.LATE1 = 0;
  3436  001200  928D               	bcf	3981,1,c	;volatile
  3437                           
  3438                           ;main.c: 621:             LATEbits.LATE2 = 0;
  3439  001202  948D               	bcf	3981,2,c	;volatile
  3440                           
  3441                           ;main.c: 622:             _delay((unsigned long)((6)*(10000000/4000.0)));
  3442  001204  0E14               	movlw	20
  3443  001206  6E03               	movwf	??_full_drive& (0+255),c
  3444  001208  0E7A               	movlw	122
  3445  00120A                     u1797:
  3446  00120A  2EE8               	decfsz	wreg,f,c
  3447  00120C  D7FE               	bra	u1797
  3448  00120E  2E03               	decfsz	??_full_drive& (0+255),f,c
  3449  001210  D7FC               	bra	u1797
  3450                           
  3451                           ;main.c: 623:             LATCbits.LATC0 = 1;
  3452  001212  808B               	bsf	3979,0,c	;volatile
  3453                           
  3454                           ;main.c: 624:             LATEbits.LATE0 = 0;
  3455  001214  908D               	bcf	3981,0,c	;volatile
  3456                           
  3457                           ;main.c: 625:             LATEbits.LATE1 = 0;
  3458  001216  928D               	bcf	3981,1,c	;volatile
  3459                           
  3460                           ;main.c: 626:             LATEbits.LATE2 = 1;
  3461  001218  848D               	bsf	3981,2,c	;volatile
  3462                           
  3463                           ;main.c: 627:             _delay((unsigned long)((6)*(10000000/4000.0)));
  3464  00121A  0E14               	movlw	20
  3465  00121C  6E03               	movwf	??_full_drive& (0+255),c
  3466  00121E  0E7A               	movlw	122
  3467  001220                     u1807:
  3468  001220  2EE8               	decfsz	wreg,f,c
  3469  001222  D7FE               	bra	u1807
  3470  001224  2E03               	decfsz	??_full_drive& (0+255),f,c
  3471  001226  D7FC               	bra	u1807
  3472  001228                     l2304:
  3473                           
  3474                           ;main.c: 630:     if (stepper_no == 3){
  3475  001228  0E03               	movlw	3
  3476  00122A  1801               	xorwf	full_drive@stepper_no,w,c
  3477  00122C  1002               	iorwf	full_drive@stepper_no+1,w,c
  3478  00122E  A4D8               	btfss	status,2,c
  3479  001230  0012               	return	
  3480                           
  3481                           ;main.c: 631:         if (direction == 0){
  3482  001232  5004               	movf	full_drive@direction,w,c
  3483  001234  A4D8               	btfss	status,2,c
  3484  001236  D03C               	goto	l2344
  3485                           
  3486                           ;main.c: 632:             LATCbits.LATC5 = 1;
  3487  001238  8A8B               	bsf	3979,5,c	;volatile
  3488                           
  3489                           ;main.c: 633:             LATCbits.LATC6 = 0;
  3490  00123A  9C8B               	bcf	3979,6,c	;volatile
  3491                           
  3492                           ;main.c: 634:             LATCbits.LATC7 = 0;
  3493  00123C  9E8B               	bcf	3979,7,c	;volatile
  3494                           
  3495                           ;main.c: 635:             LATAbits.LATA5 = 1;
  3496  00123E  8A89               	bsf	3977,5,c	;volatile
  3497                           
  3498                           ;main.c: 636:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3499  001240  0E21               	movlw	33
  3500  001242  6E03               	movwf	??_full_drive& (0+255),c
  3501  001244  0E76               	movlw	118
  3502  001246                     u1817:
  3503  001246  2EE8               	decfsz	wreg,f,c
  3504  001248  D7FE               	bra	u1817
  3505  00124A  2E03               	decfsz	??_full_drive& (0+255),f,c
  3506  00124C  D7FC               	bra	u1817
  3507  00124E  D000               	nop2	
  3508                           
  3509                           ;main.c: 637:             LATCbits.LATC5 = 1;
  3510  001250  8A8B               	bsf	3979,5,c	;volatile
  3511                           
  3512                           ;main.c: 638:             LATCbits.LATC6 = 1;
  3513  001252  8C8B               	bsf	3979,6,c	;volatile
  3514                           
  3515                           ;main.c: 639:             LATCbits.LATC7 = 0;
  3516  001254  9E8B               	bcf	3979,7,c	;volatile
  3517                           
  3518                           ;main.c: 640:             LATAbits.LATA5 = 0;
  3519  001256  9A89               	bcf	3977,5,c	;volatile
  3520                           
  3521                           ;main.c: 641:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3522  001258  0E21               	movlw	33
  3523  00125A  6E03               	movwf	??_full_drive& (0+255),c
  3524  00125C  0E76               	movlw	118
  3525  00125E                     u1827:
  3526  00125E  2EE8               	decfsz	wreg,f,c
  3527  001260  D7FE               	bra	u1827
  3528  001262  2E03               	decfsz	??_full_drive& (0+255),f,c
  3529  001264  D7FC               	bra	u1827
  3530  001266  D000               	nop2	
  3531                           
  3532                           ;main.c: 642:             LATCbits.LATC5 = 0;
  3533  001268  9A8B               	bcf	3979,5,c	;volatile
  3534                           
  3535                           ;main.c: 643:             LATCbits.LATC6 = 1;
  3536  00126A  8C8B               	bsf	3979,6,c	;volatile
  3537                           
  3538                           ;main.c: 644:             LATCbits.LATC7 = 1;
  3539  00126C  8E8B               	bsf	3979,7,c	;volatile
  3540                           
  3541                           ;main.c: 645:             LATAbits.LATA5 = 0;
  3542  00126E  9A89               	bcf	3977,5,c	;volatile
  3543                           
  3544                           ;main.c: 646:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3545  001270  0E21               	movlw	33
  3546  001272  6E03               	movwf	??_full_drive& (0+255),c
  3547  001274  0E76               	movlw	118
  3548  001276                     u1837:
  3549  001276  2EE8               	decfsz	wreg,f,c
  3550  001278  D7FE               	bra	u1837
  3551  00127A  2E03               	decfsz	??_full_drive& (0+255),f,c
  3552  00127C  D7FC               	bra	u1837
  3553  00127E  D000               	nop2	
  3554                           
  3555                           ;main.c: 647:             LATCbits.LATC5 = 0;
  3556  001280  9A8B               	bcf	3979,5,c	;volatile
  3557                           
  3558                           ;main.c: 648:             LATCbits.LATC6 = 0;
  3559  001282  9C8B               	bcf	3979,6,c	;volatile
  3560                           
  3561                           ;main.c: 649:             LATCbits.LATC7 = 1;
  3562  001284  8E8B               	bsf	3979,7,c	;volatile
  3563                           
  3564                           ;main.c: 650:             LATAbits.LATA5 = 1;
  3565  001286  8A89               	bsf	3977,5,c	;volatile
  3566                           
  3567                           ;main.c: 651:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3568  001288  0E21               	movlw	33
  3569  00128A  6E03               	movwf	??_full_drive& (0+255),c
  3570  00128C  0E76               	movlw	118
  3571  00128E                     u1847:
  3572  00128E  2EE8               	decfsz	wreg,f,c
  3573  001290  D7FE               	bra	u1847
  3574  001292  2E03               	decfsz	??_full_drive& (0+255),f,c
  3575  001294  D7FC               	bra	u1847
  3576  001296  D000               	nop2	
  3577                           
  3578                           ;main.c: 652:             LATCbits.LATC5 = 1;
  3579  001298  8A8B               	bsf	3979,5,c	;volatile
  3580                           
  3581                           ;main.c: 653:             LATCbits.LATC6 = 0;
  3582  00129A  9C8B               	bcf	3979,6,c	;volatile
  3583                           
  3584                           ;main.c: 654:             LATCbits.LATC7 = 0;
  3585  00129C  9E8B               	bcf	3979,7,c	;volatile
  3586                           
  3587                           ;main.c: 655:             LATAbits.LATA5 = 1;
  3588  00129E  8A89               	bsf	3977,5,c	;volatile
  3589                           
  3590                           ;main.c: 656:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3591  0012A0  0E21               	movlw	33
  3592  0012A2  6E03               	movwf	??_full_drive& (0+255),c
  3593  0012A4  0E76               	movlw	118
  3594  0012A6                     u1857:
  3595  0012A6  2EE8               	decfsz	wreg,f,c
  3596  0012A8  D7FE               	bra	u1857
  3597  0012AA  2E03               	decfsz	??_full_drive& (0+255),f,c
  3598  0012AC  D7FC               	bra	u1857
  3599  0012AE  D000               	nop2	
  3600  0012B0                     l2344:
  3601                           
  3602                           ;main.c: 658:         if (direction == 1){
  3603  0012B0  0404               	decf	full_drive@direction,w,c
  3604  0012B2  A4D8               	btfss	status,2,c
  3605  0012B4  0012               	return	
  3606                           
  3607                           ;main.c: 659:             LATCbits.LATC5 = 1;
  3608  0012B6  8A8B               	bsf	3979,5,c	;volatile
  3609                           
  3610                           ;main.c: 660:             LATCbits.LATC6 = 1;
  3611  0012B8  8C8B               	bsf	3979,6,c	;volatile
  3612                           
  3613                           ;main.c: 661:             LATCbits.LATC7 = 0;
  3614  0012BA  9E8B               	bcf	3979,7,c	;volatile
  3615                           
  3616                           ;main.c: 662:             LATAbits.LATA5 = 0;
  3617  0012BC  9A89               	bcf	3977,5,c	;volatile
  3618                           
  3619                           ;main.c: 663:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3620  0012BE  0E21               	movlw	33
  3621  0012C0  6E03               	movwf	??_full_drive& (0+255),c
  3622  0012C2  0E76               	movlw	118
  3623  0012C4                     u1867:
  3624  0012C4  2EE8               	decfsz	wreg,f,c
  3625  0012C6  D7FE               	bra	u1867
  3626  0012C8  2E03               	decfsz	??_full_drive& (0+255),f,c
  3627  0012CA  D7FC               	bra	u1867
  3628  0012CC  D000               	nop2	
  3629                           
  3630                           ;main.c: 664:             LATCbits.LATC5 = 0;
  3631  0012CE  9A8B               	bcf	3979,5,c	;volatile
  3632                           
  3633                           ;main.c: 665:             LATCbits.LATC6 = 1;
  3634  0012D0  8C8B               	bsf	3979,6,c	;volatile
  3635                           
  3636                           ;main.c: 666:             LATCbits.LATC7 = 1;
  3637  0012D2  8E8B               	bsf	3979,7,c	;volatile
  3638                           
  3639                           ;main.c: 667:             LATAbits.LATA5 = 0;
  3640  0012D4  9A89               	bcf	3977,5,c	;volatile
  3641                           
  3642                           ;main.c: 668:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3643  0012D6  0E21               	movlw	33
  3644  0012D8  6E03               	movwf	??_full_drive& (0+255),c
  3645  0012DA  0E76               	movlw	118
  3646  0012DC                     u1877:
  3647  0012DC  2EE8               	decfsz	wreg,f,c
  3648  0012DE  D7FE               	bra	u1877
  3649  0012E0  2E03               	decfsz	??_full_drive& (0+255),f,c
  3650  0012E2  D7FC               	bra	u1877
  3651  0012E4  D000               	nop2	
  3652                           
  3653                           ;main.c: 669:             LATCbits.LATC5 = 0;
  3654  0012E6  9A8B               	bcf	3979,5,c	;volatile
  3655                           
  3656                           ;main.c: 670:             LATCbits.LATC6 = 0;
  3657  0012E8  9C8B               	bcf	3979,6,c	;volatile
  3658                           
  3659                           ;main.c: 671:             LATCbits.LATC7 = 1;
  3660  0012EA  8E8B               	bsf	3979,7,c	;volatile
  3661                           
  3662                           ;main.c: 672:             LATAbits.LATA5 = 1;
  3663  0012EC  8A89               	bsf	3977,5,c	;volatile
  3664                           
  3665                           ;main.c: 673:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3666  0012EE  0E21               	movlw	33
  3667  0012F0  6E03               	movwf	??_full_drive& (0+255),c
  3668  0012F2  0E76               	movlw	118
  3669  0012F4                     u1887:
  3670  0012F4  2EE8               	decfsz	wreg,f,c
  3671  0012F6  D7FE               	bra	u1887
  3672  0012F8  2E03               	decfsz	??_full_drive& (0+255),f,c
  3673  0012FA  D7FC               	bra	u1887
  3674  0012FC  D000               	nop2	
  3675                           
  3676                           ;main.c: 674:             LATCbits.LATC5 = 1;
  3677  0012FE  8A8B               	bsf	3979,5,c	;volatile
  3678                           
  3679                           ;main.c: 675:             LATCbits.LATC6 = 0;
  3680  001300  9C8B               	bcf	3979,6,c	;volatile
  3681                           
  3682                           ;main.c: 676:             LATCbits.LATC7 = 0;
  3683  001302  9E8B               	bcf	3979,7,c	;volatile
  3684                           
  3685                           ;main.c: 677:             LATAbits.LATA5 = 1;
  3686  001304  8A89               	bsf	3977,5,c	;volatile
  3687                           
  3688                           ;main.c: 678:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3689  001306  0E21               	movlw	33
  3690  001308  6E03               	movwf	??_full_drive& (0+255),c
  3691  00130A  0E76               	movlw	118
  3692  00130C                     u1897:
  3693  00130C  2EE8               	decfsz	wreg,f,c
  3694  00130E  D7FE               	bra	u1897
  3695  001310  2E03               	decfsz	??_full_drive& (0+255),f,c
  3696  001312  D7FC               	bra	u1897
  3697  001314  D000               	nop2	
  3698                           
  3699                           ;main.c: 679:             LATCbits.LATC5 = 1;
  3700  001316  8A8B               	bsf	3979,5,c	;volatile
  3701                           
  3702                           ;main.c: 680:             LATCbits.LATC6 = 1;
  3703  001318  8C8B               	bsf	3979,6,c	;volatile
  3704                           
  3705                           ;main.c: 681:             LATCbits.LATC7 = 0;
  3706  00131A  9E8B               	bcf	3979,7,c	;volatile
  3707                           
  3708                           ;main.c: 682:             LATAbits.LATA5 = 0;
  3709  00131C  9A89               	bcf	3977,5,c	;volatile
  3710                           
  3711                           ;main.c: 683:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3712  00131E  0E21               	movlw	33
  3713  001320  6E03               	movwf	??_full_drive& (0+255),c
  3714  001322  0E76               	movlw	118
  3715  001324                     u1907:
  3716  001324  2EE8               	decfsz	wreg,f,c
  3717  001326  D7FE               	bra	u1907
  3718  001328  2E03               	decfsz	??_full_drive& (0+255),f,c
  3719  00132A  D7FC               	bra	u1907
  3720  00132C  D000               	nop2	
  3721  00132E  0012               	return		;funcret
  3722  001330                     __end_of_full_drive:
  3723                           	opt callstack 0
  3724                           
  3725 ;; *************** function _servo *****************
  3726 ;; Defined at:
  3727 ;;		line 396 in file "main.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;		None
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;		None
  3732 ;; Return value:  Size  Location     Type
  3733 ;;                  1    wreg      void 
  3734 ;; Registers used:
  3735 ;;		wreg, status,2, status,0, cstack
  3736 ;; Tracked objects:
  3737 ;;		On entry : 0/0
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;Total ram usage:        2 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; Hardware stack levels required when called:    1
  3748 ;; This function calls:
  3749 ;;		_servoRotate0
  3750 ;;		_servoRotate180
  3751 ;; This function is called by:
  3752 ;;		_main
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           	psect	text18
  3757  001FB4                     __ptext18:
  3758                           	opt callstack 0
  3759  001FB4                     _servo:
  3760                           	opt callstack 29
  3761                           
  3762                           ;main.c: 398:   TRISC = 0;
  3763                           
  3764                           ;incstack = 0
  3765  001FB4  0E00               	movlw	0
  3766  001FB6  6E94               	movwf	3988,c	;volatile
  3767                           
  3768                           ;main.c: 399:   {;main.c: 401:     servoRotate0(1);
  3769  001FB8  0E00               	movlw	0
  3770  001FBA  6E02               	movwf	servoRotate0@servo+1,c
  3771  001FBC  0E01               	movlw	1
  3772  001FBE  6E01               	movwf	servoRotate0@servo,c
  3773  001FC0  ECB9  F00E         	call	_servoRotate0	;wreg free
  3774                           
  3775                           ;main.c: 405:     servoRotate180(1);
  3776  001FC4  0E00               	movlw	0
  3777  001FC6  6E02               	movwf	servoRotate180@servo+1,c
  3778  001FC8  0E01               	movlw	1
  3779  001FCA  6E01               	movwf	servoRotate180@servo,c
  3780  001FCC  EC22  F00E         	call	_servoRotate180	;wreg free
  3781                           
  3782                           ;main.c: 407:     _delay((unsigned long)((500)*(10000000/4000.0)));
  3783  001FD0  0E07               	movlw	7
  3784  001FD2  6E07               	movwf	(??_servo+1)& (0+255),c
  3785  001FD4  0E58               	movlw	88
  3786  001FD6  6E06               	movwf	??_servo& (0+255),c
  3787  001FD8  0E5A               	movlw	90
  3788  001FDA                     u1917:
  3789  001FDA  2EE8               	decfsz	wreg,f,c
  3790  001FDC  D7FE               	bra	u1917
  3791  001FDE  2E06               	decfsz	??_servo& (0+255),f,c
  3792  001FE0  D7FC               	bra	u1917
  3793  001FE2  2E07               	decfsz	(??_servo+1)& (0+255),f,c
  3794  001FE4  D7FA               	bra	u1917
  3795                           
  3796                           ;main.c: 408:     servoRotate0(1);
  3797  001FE6  0E00               	movlw	0
  3798  001FE8  6E02               	movwf	servoRotate0@servo+1,c
  3799  001FEA  0E01               	movlw	1
  3800  001FEC  6E01               	movwf	servoRotate0@servo,c
  3801  001FEE  ECB9  F00E         	call	_servoRotate0	;wreg free
  3802  001FF2  0012               	return		;funcret
  3803  001FF4                     __end_of_servo:
  3804                           	opt callstack 0
  3805                           
  3806 ;; *************** function _servoRotate180 *****************
  3807 ;; Defined at:
  3808 ;;		line 369 in file "main.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;  servo           2    0[COMRAM] int 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  i               2    3[COMRAM] unsigned int 
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      void 
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3822 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;Total ram usage:        5 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; This function calls:
  3829 ;;		Nothing
  3830 ;; This function is called by:
  3831 ;;		_servo
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           	psect	text19
  3836  001C44                     __ptext19:
  3837                           	opt callstack 0
  3838  001C44                     _servoRotate180:
  3839                           	opt callstack 29
  3840                           
  3841                           ;main.c: 369: void servoRotate180(int servo);main.c: 370: {;main.c: 371:   unsigned int 
      +                          i;;main.c: 372:     if (servo==1){
  3842                           
  3843                           ;incstack = 0
  3844  001C44  0401               	decf	servoRotate180@servo,w,c
  3845  001C46  1002               	iorwf	servoRotate180@servo+1,w,c
  3846  001C48  A4D8               	btfss	status,2,c
  3847  001C4A  D024               	goto	u1280
  3848                           
  3849                           ;main.c: 373:     for(i=0;i<40;i++)
  3850  001C4C  0E00               	movlw	0
  3851  001C4E  6E05               	movwf	servoRotate180@i+1,c
  3852  001C50  0E00               	movlw	0
  3853  001C52  6E04               	movwf	servoRotate180@i,c
  3854  001C54                     l86:
  3855                           
  3856                           ;main.c: 374:         {;main.c: 375:           RC1 = 1;
  3857  001C54  8282               	bsf	3970,1,c	;volatile
  3858                           
  3859                           ;main.c: 376:             RC2 = 1;
  3860  001C56  8482               	bsf	3970,2,c	;volatile
  3861                           
  3862                           ;main.c: 377:           _delay((unsigned long)((450)*(10000000/4000000.0)));
  3863  001C58  0EE1               	movlw	225
  3864  001C5A                     u1927:
  3865  001C5A  D000               	nop2	
  3866  001C5C  2EE8               	decfsz	wreg,f,c
  3867  001C5E  D7FD               	bra	u1927
  3868                           
  3869                           ;main.c: 379:           RC2 =0;
  3870  001C60  9482               	bcf	3970,2,c	;volatile
  3871                           
  3872                           ;main.c: 380:           _delay((unsigned long)((2100)*(10000000/4000000.0)));
  3873  001C62  0E07               	movlw	7
  3874  001C64  6E03               	movwf	??_servoRotate180& (0+255),c
  3875  001C66  0ED0               	movlw	208
  3876  001C68                     u1937:
  3877  001C68  2EE8               	decfsz	wreg,f,c
  3878  001C6A  D7FE               	bra	u1937
  3879  001C6C  2E03               	decfsz	??_servoRotate180& (0+255),f,c
  3880  001C6E  D7FC               	bra	u1937
  3881  001C70  D000               	nop2	
  3882                           
  3883                           ;main.c: 382:           RC1 = 0;
  3884  001C72  9282               	bcf	3970,1,c	;volatile
  3885                           
  3886                           ;main.c: 383:           _delay((unsigned long)((13550)*(10000000/4000000.0)));
  3887  001C74  0E2C               	movlw	44
  3888  001C76  6E03               	movwf	??_servoRotate180& (0+255),c
  3889  001C78  0EFD               	movlw	253
  3890  001C7A                     u1947:
  3891  001C7A  2EE8               	decfsz	wreg,f,c
  3892  001C7C  D7FE               	bra	u1947
  3893  001C7E  2E03               	decfsz	??_servoRotate180& (0+255),f,c
  3894  001C80  D7FC               	bra	u1947
  3895  001C82  D000               	nop2	
  3896                           
  3897                           ;main.c: 384:         }
  3898  001C84  4A04               	infsnz	servoRotate180@i,f,c
  3899  001C86  2A05               	incf	servoRotate180@i+1,f,c
  3900  001C88  5005               	movf	servoRotate180@i+1,w,c
  3901  001C8A  E104               	bnz	u1280
  3902  001C8C  0E28               	movlw	40
  3903  001C8E  5C04               	subwf	servoRotate180@i,w,c
  3904  001C90  A0D8               	btfss	status,0,c
  3905  001C92  D7E0               	goto	l86
  3906  001C94                     u1280:
  3907                           
  3908                           ;main.c: 386:   if (servo==2){
  3909  001C94  0E02               	movlw	2
  3910  001C96  1801               	xorwf	servoRotate180@servo,w,c
  3911  001C98  1002               	iorwf	servoRotate180@servo+1,w,c
  3912  001C9A  A4D8               	btfss	status,2,c
  3913  001C9C  0012               	return	
  3914                           
  3915                           ;main.c: 387:     for(i=0;i<40;i++)
  3916  001C9E  0E00               	movlw	0
  3917  001CA0  6E05               	movwf	servoRotate180@i+1,c
  3918  001CA2  0E00               	movlw	0
  3919  001CA4  6E04               	movwf	servoRotate180@i,c
  3920  001CA6                     l89:
  3921                           
  3922                           ;main.c: 388:           {;main.c: 389:             RC2 = 1;
  3923  001CA6  8482               	bsf	3970,2,c	;volatile
  3924                           
  3925                           ;main.c: 390:             _delay((unsigned long)((2200)*(10000000/4000000.0)));
  3926  001CA8  0E08               	movlw	8
  3927  001CAA  6E03               	movwf	??_servoRotate180& (0+255),c
  3928  001CAC  0E23               	movlw	35
  3929  001CAE                     u1957:
  3930  001CAE  2EE8               	decfsz	wreg,f,c
  3931  001CB0  D7FE               	bra	u1957
  3932  001CB2  2E03               	decfsz	??_servoRotate180& (0+255),f,c
  3933  001CB4  D7FC               	bra	u1957
  3934  001CB6  F000               	nop	
  3935                           
  3936                           ;main.c: 391:             RC2 = 0;
  3937  001CB8  9482               	bcf	3970,2,c	;volatile
  3938                           
  3939                           ;main.c: 392:             _delay((unsigned long)((17800)*(10000000/4000000.0)));
  3940  001CBA  0E3A               	movlw	58
  3941  001CBC  6E03               	movwf	??_servoRotate180& (0+255),c
  3942  001CBE  0ECA               	movlw	202
  3943  001CC0                     u1967:
  3944  001CC0  2EE8               	decfsz	wreg,f,c
  3945  001CC2  D7FE               	bra	u1967
  3946  001CC4  2E03               	decfsz	??_servoRotate180& (0+255),f,c
  3947  001CC6  D7FC               	bra	u1967
  3948                           
  3949                           ;main.c: 393:           }
  3950  001CC8  4A04               	infsnz	servoRotate180@i,f,c
  3951  001CCA  2A05               	incf	servoRotate180@i+1,f,c
  3952  001CCC  5005               	movf	servoRotate180@i+1,w,c
  3953  001CCE  E105               	bnz	u1300
  3954  001CD0  0E28               	movlw	40
  3955  001CD2  5C04               	subwf	servoRotate180@i,w,c
  3956  001CD4  B0D8               	btfsc	status,0,c
  3957  001CD6  0012               	return	
  3958  001CD8  D7E6               	goto	l89
  3959  001CDA                     u1300:
  3960  001CDA  0012               	return		;funcret
  3961  001CDC                     __end_of_servoRotate180:
  3962                           	opt callstack 0
  3963                           
  3964 ;; *************** function _servoRotate0 *****************
  3965 ;; Defined at:
  3966 ;;		line 342 in file "main.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;  servo           2    0[COMRAM] int 
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;  i               2    3[COMRAM] unsigned int 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      void 
  3973 ;; Registers used:
  3974 ;;		wreg, status,2, status,0
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3980 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3984 ;;Total ram usage:        5 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; This function calls:
  3987 ;;		Nothing
  3988 ;; This function is called by:
  3989 ;;		_servo
  3990 ;; This function uses a non-reentrant model
  3991 ;;
  3992                           
  3993                           	psect	text20
  3994  001D72                     __ptext20:
  3995                           	opt callstack 0
  3996  001D72                     _servoRotate0:
  3997                           	opt callstack 29
  3998                           
  3999                           ;main.c: 343:     unsigned int i;;main.c: 344:     if (servo==1){
  4000                           
  4001                           ;incstack = 0
  4002  001D72  0401               	decf	servoRotate0@servo,w,c
  4003  001D74  1002               	iorwf	servoRotate0@servo+1,w,c
  4004  001D76  A4D8               	btfss	status,2,c
  4005  001D78  D023               	goto	u1240
  4006                           
  4007                           ;main.c: 345:       for(i=0;i<40;i++)
  4008  001D7A  0E00               	movlw	0
  4009  001D7C  6E05               	movwf	servoRotate0@i+1,c
  4010  001D7E  0E00               	movlw	0
  4011  001D80  6E04               	movwf	servoRotate0@i,c
  4012  001D82                     l77:
  4013                           
  4014                           ;main.c: 346:           {;main.c: 347:             RC1 = 1;
  4015  001D82  8282               	bsf	3970,1,c	;volatile
  4016                           
  4017                           ;main.c: 348:             RC2 = 1;
  4018  001D84  8482               	bsf	3970,2,c	;volatile
  4019                           
  4020                           ;main.c: 349:             _delay((unsigned long)((1100)*(10000000/4000000.0)));
  4021  001D86  0E04               	movlw	4
  4022  001D88  6E03               	movwf	??_servoRotate0& (0+255),c
  4023  001D8A  0E91               	movlw	145
  4024  001D8C                     u1977:
  4025  001D8C  2EE8               	decfsz	wreg,f,c
  4026  001D8E  D7FE               	bra	u1977
  4027  001D90  2E03               	decfsz	??_servoRotate0& (0+255),f,c
  4028  001D92  D7FC               	bra	u1977
  4029  001D94  F000               	nop	
  4030                           
  4031                           ;main.c: 350:             RC2 = 0;
  4032  001D96  9482               	bcf	3970,2,c	;volatile
  4033                           
  4034                           ;main.c: 351:             _delay((unsigned long)((300)*(10000000/4000000.0)));
  4035  001D98  0EFA               	movlw	250
  4036  001D9A                     u1987:
  4037  001D9A  2EE8               	decfsz	wreg,f,c
  4038  001D9C  D7FE               	bra	u1987
  4039                           
  4040                           ;main.c: 352:             RC1 = 0;
  4041  001D9E  9282               	bcf	3970,1,c	;volatile
  4042                           
  4043                           ;main.c: 356:             _delay((unsigned long)((18600)*(10000000/4000000.0)));
  4044  001DA0  0E3D               	movlw	61
  4045  001DA2  6E03               	movwf	??_servoRotate0& (0+255),c
  4046  001DA4  0E62               	movlw	98
  4047  001DA6                     u1997:
  4048  001DA6  2EE8               	decfsz	wreg,f,c
  4049  001DA8  D7FE               	bra	u1997
  4050  001DAA  2E03               	decfsz	??_servoRotate0& (0+255),f,c
  4051  001DAC  D7FC               	bra	u1997
  4052  001DAE  D000               	nop2	
  4053                           
  4054                           ;main.c: 357:           }
  4055  001DB0  4A04               	infsnz	servoRotate0@i,f,c
  4056  001DB2  2A05               	incf	servoRotate0@i+1,f,c
  4057  001DB4  5005               	movf	servoRotate0@i+1,w,c
  4058  001DB6  E104               	bnz	u1240
  4059  001DB8  0E28               	movlw	40
  4060  001DBA  5C04               	subwf	servoRotate0@i,w,c
  4061  001DBC  A0D8               	btfss	status,0,c
  4062  001DBE  D7E1               	goto	l77
  4063  001DC0                     u1240:
  4064                           
  4065                           ;main.c: 359:     if (servo==2){
  4066  001DC0  0E02               	movlw	2
  4067  001DC2  1801               	xorwf	servoRotate0@servo,w,c
  4068  001DC4  1002               	iorwf	servoRotate0@servo+1,w,c
  4069  001DC6  A4D8               	btfss	status,2,c
  4070  001DC8  0012               	return	
  4071                           
  4072                           ;main.c: 360:       for(i=0;i<40;i++)
  4073  001DCA  0E00               	movlw	0
  4074  001DCC  6E05               	movwf	servoRotate0@i+1,c
  4075  001DCE  0E00               	movlw	0
  4076  001DD0  6E04               	movwf	servoRotate0@i,c
  4077  001DD2                     l80:
  4078                           
  4079                           ;main.c: 361:         {;main.c: 362:           RC2 = 1;
  4080  001DD2  8482               	bsf	3970,2,c	;volatile
  4081                           
  4082                           ;main.c: 363:           _delay((unsigned long)((449)*(10000000/4000000.0)));
  4083  001DD4  0EE0               	movlw	224
  4084  001DD6                     u2007:
  4085  001DD6  D000               	nop2	
  4086  001DD8  2EE8               	decfsz	wreg,f,c
  4087  001DDA  D7FD               	bra	u2007
  4088  001DDC  D000               	nop2	
  4089                           
  4090                           ;main.c: 364:           RC2 = 0;
  4091  001DDE  9482               	bcf	3970,2,c	;volatile
  4092                           
  4093                           ;main.c: 365:           _delay((unsigned long)((27300)*(10000000/4000000.0)));
  4094  001DE0  0E59               	movlw	89
  4095  001DE2  6E03               	movwf	??_servoRotate0& (0+255),c
  4096  001DE4  0EA2               	movlw	162
  4097  001DE6                     u2017:
  4098  001DE6  2EE8               	decfsz	wreg,f,c
  4099  001DE8  D7FE               	bra	u2017
  4100  001DEA  2E03               	decfsz	??_servoRotate0& (0+255),f,c
  4101  001DEC  D7FC               	bra	u2017
  4102                           
  4103                           ;main.c: 366:         }
  4104  001DEE  4A04               	infsnz	servoRotate0@i,f,c
  4105  001DF0  2A05               	incf	servoRotate0@i+1,f,c
  4106  001DF2  5005               	movf	servoRotate0@i+1,w,c
  4107  001DF4  E105               	bnz	u1260
  4108  001DF6  0E28               	movlw	40
  4109  001DF8  5C04               	subwf	servoRotate0@i,w,c
  4110  001DFA  B0D8               	btfsc	status,0,c
  4111  001DFC  0012               	return	
  4112  001DFE  D7E9               	goto	l80
  4113  001E00                     u1260:
  4114  001E00  0012               	return		;funcret
  4115  001E02                     __end_of_servoRotate0:
  4116                           	opt callstack 0
  4117                           
  4118 ;; *************** function _initLCD *****************
  4119 ;; Defined at:
  4120 ;;		line 69 in file "lcd.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;		None
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;		None
  4125 ;; Return value:  Size  Location     Type
  4126 ;;                  1    wreg      void 
  4127 ;; Registers used:
  4128 ;;		wreg, status,2, status,0, cstack
  4129 ;; Tracked objects:
  4130 ;;		On entry : 0/0
  4131 ;;		On exit  : 0/0
  4132 ;;		Unchanged: 0/0
  4133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4136 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4137 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4138 ;;Total ram usage:        1 bytes
  4139 ;; Hardware stack levels used:    1
  4140 ;; Hardware stack levels required when called:    4
  4141 ;; This function calls:
  4142 ;;		_lcdInst
  4143 ;;		_send_byte
  4144 ;;		_send_nibble
  4145 ;; This function is called by:
  4146 ;;		_main
  4147 ;;		_timer_main
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           	psect	text21
  4152  001EF8                     __ptext21:
  4153                           	opt callstack 0
  4154  001EF8                     _initLCD:
  4155                           	opt callstack 26
  4156                           
  4157                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
  4158                           
  4159                           ;incstack = 0
  4160  001EF8  0E31               	movlw	49
  4161  001EFA  6E05               	movwf	??_initLCD& (0+255),c
  4162  001EFC  0EB2               	movlw	178
  4163  001EFE                     u2027:
  4164  001EFE  2EE8               	decfsz	wreg,f,c
  4165  001F00  D7FE               	bra	u2027
  4166  001F02  2E05               	decfsz	??_initLCD& (0+255),f,c
  4167  001F04  D7FC               	bra	u2027
  4168  001F06  D000               	nop2	
  4169                           
  4170                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
  4171  001F08  948C               	bcf	3980,2,c	;volatile
  4172                           
  4173                           ;lcd.c: 74:     send_nibble(0b0011);
  4174  001F0A  0E03               	movlw	3
  4175  001F0C  EC96  F010         	call	_send_nibble
  4176                           
  4177                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
  4178  001F10  0E11               	movlw	17
  4179  001F12  6E05               	movwf	??_initLCD& (0+255),c
  4180  001F14  0E3A               	movlw	58
  4181  001F16                     u2037:
  4182  001F16  2EE8               	decfsz	wreg,f,c
  4183  001F18  D7FE               	bra	u2037
  4184  001F1A  2E05               	decfsz	??_initLCD& (0+255),f,c
  4185  001F1C  D7FC               	bra	u2037
  4186  001F1E  D000               	nop2	
  4187                           
  4188                           ;lcd.c: 76:     send_nibble(0b0011);
  4189  001F20  0E03               	movlw	3
  4190  001F22  EC96  F010         	call	_send_nibble
  4191                           
  4192                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  4193  001F26  0E7D               	movlw	125
  4194  001F28                     u2047:
  4195  001F28  2EE8               	decfsz	wreg,f,c
  4196  001F2A  D7FE               	bra	u2047
  4197                           
  4198                           ;lcd.c: 78:     send_byte(0b00110010);
  4199  001F2C  0E32               	movlw	50
  4200  001F2E  ECA1  F010         	call	_send_byte
  4201                           
  4202                           ;lcd.c: 80:     send_byte(0b00101000);
  4203  001F32  0E28               	movlw	40
  4204  001F34  ECA1  F010         	call	_send_byte
  4205                           
  4206                           ;lcd.c: 81:     send_byte(0b00001000);
  4207  001F38  0E08               	movlw	8
  4208  001F3A  ECA1  F010         	call	_send_byte
  4209                           
  4210                           ;lcd.c: 82:     send_byte(0b00000001);
  4211  001F3E  0E01               	movlw	1
  4212  001F40  ECA1  F010         	call	_send_byte
  4213                           
  4214                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
  4215  001F44  0E11               	movlw	17
  4216  001F46  6E05               	movwf	??_initLCD& (0+255),c
  4217  001F48  0E3A               	movlw	58
  4218  001F4A                     u2057:
  4219  001F4A  2EE8               	decfsz	wreg,f,c
  4220  001F4C  D7FE               	bra	u2057
  4221  001F4E  2E05               	decfsz	??_initLCD& (0+255),f,c
  4222  001F50  D7FC               	bra	u2057
  4223  001F52  D000               	nop2	
  4224                           
  4225                           ;lcd.c: 84:     send_byte(0b00000110);
  4226  001F54  0E06               	movlw	6
  4227  001F56  ECA1  F010         	call	_send_byte
  4228                           
  4229                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  4230  001F5A  0E0F               	movlw	15
  4231  001F5C  ECB0  F010         	call	_lcdInst
  4232  001F60  0012               	return		;funcret
  4233  001F62                     __end_of_initLCD:
  4234                           	opt callstack 0
  4235                           
  4236 ;; *************** function _lcdInst *****************
  4237 ;; Defined at:
  4238 ;;		line 64 in file "lcd.c"
  4239 ;; Parameters:    Size  Location     Type
  4240 ;;  data            1    wreg     unsigned char 
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;  data            1    3[COMRAM] unsigned char 
  4243 ;; Return value:  Size  Location     Type
  4244 ;;                  1    wreg      void 
  4245 ;; Registers used:
  4246 ;;		wreg, status,2, status,0, cstack
  4247 ;; Tracked objects:
  4248 ;;		On entry : 0/0
  4249 ;;		On exit  : 0/0
  4250 ;;		Unchanged: 0/0
  4251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4255 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4256 ;;Total ram usage:        1 bytes
  4257 ;; Hardware stack levels used:    1
  4258 ;; Hardware stack levels required when called:    3
  4259 ;; This function calls:
  4260 ;;		_send_byte
  4261 ;; This function is called by:
  4262 ;;		_main
  4263 ;;		_stepper
  4264 ;;		_stepper2
  4265 ;;		_stepper2_back
  4266 ;;		_initLCD
  4267 ;;		_lcd_shift_cursor
  4268 ;;		_lcd_shift_display
  4269 ;; This function uses a non-reentrant model
  4270 ;;
  4271                           
  4272                           	psect	text22
  4273  002160                     __ptext22:
  4274                           	opt callstack 0
  4275  002160                     _lcdInst:
  4276                           	opt callstack 26
  4277                           
  4278                           ;incstack = 0
  4279                           ;lcdInst@data stored from wreg
  4280  002160  6E04               	movwf	lcdInst@data,c
  4281                           
  4282                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
  4283  002162  948C               	bcf	3980,2,c	;volatile
  4284                           
  4285                           ;lcd.c: 66:     send_byte(data);
  4286  002164  5004               	movf	lcdInst@data,w,c
  4287  002166  ECA1  F010         	call	_send_byte
  4288  00216A  0012               	return		;funcret
  4289  00216C                     __end_of_lcdInst:
  4290                           	opt callstack 0
  4291                           
  4292 ;; *************** function _send_byte *****************
  4293 ;; Defined at:
  4294 ;;		line 55 in file "lcd.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;  data            1    wreg     unsigned char 
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;  data            1    2[COMRAM] unsigned char 
  4299 ;; Return value:  Size  Location     Type
  4300 ;;                  1    wreg      void 
  4301 ;; Registers used:
  4302 ;;		wreg, status,2, status,0, cstack
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4309 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4311 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;Total ram usage:        1 bytes
  4313 ;; Hardware stack levels used:    1
  4314 ;; Hardware stack levels required when called:    2
  4315 ;; This function calls:
  4316 ;;		_send_nibble
  4317 ;; This function is called by:
  4318 ;;		_lcdInst
  4319 ;;		_initLCD
  4320 ;;		_putch
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           	psect	text23
  4325  002142                     __ptext23:
  4326                           	opt callstack 0
  4327  002142                     _send_byte:
  4328                           	opt callstack 22
  4329                           
  4330                           ;incstack = 0
  4331                           ;send_byte@data stored from wreg
  4332  002142  6E03               	movwf	send_byte@data,c
  4333                           
  4334                           ;lcd.c: 57:     send_nibble(data >> 4);
  4335  002144  3803               	swapf	send_byte@data,w,c
  4336  002146  0B0F               	andlw	15
  4337  002148  EC96  F010         	call	_send_nibble
  4338                           
  4339                           ;lcd.c: 60:     send_nibble(data);
  4340  00214C  5003               	movf	send_byte@data,w,c
  4341  00214E  EC96  F010         	call	_send_nibble
  4342  002152  0012               	return		;funcret
  4343  002154                     __end_of_send_byte:
  4344                           	opt callstack 0
  4345                           
  4346 ;; *************** function _send_nibble *****************
  4347 ;; Defined at:
  4348 ;;		line 44 in file "lcd.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;  data            1    wreg     unsigned char 
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  data            1    1[COMRAM] unsigned char 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  1    wreg      void 
  4355 ;; Registers used:
  4356 ;;		wreg, status,2, status,0, cstack
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4365 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4366 ;;Total ram usage:        1 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; Hardware stack levels required when called:    1
  4369 ;; This function calls:
  4370 ;;		_pulse_e
  4371 ;; This function is called by:
  4372 ;;		_send_byte
  4373 ;;		_initLCD
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           	psect	text24
  4378  00212C                     __ptext24:
  4379                           	opt callstack 0
  4380  00212C                     _send_nibble:
  4381                           	opt callstack 22
  4382                           
  4383                           ;incstack = 0
  4384                           ;send_nibble@data stored from wreg
  4385  00212C  6E02               	movwf	send_nibble@data,c
  4386                           
  4387                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
  4388  00212E  508C               	movf	3980,w,c	;volatile
  4389  002130  0B0F               	andlw	15
  4390  002132  6E8C               	movwf	3980,c	;volatile
  4391                           
  4392                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
  4393  002134  3802               	swapf	send_nibble@data,w,c
  4394  002136  0BF0               	andlw	240
  4395  002138  108C               	iorwf	3980,w,c	;volatile
  4396  00213A  6E8C               	movwf	3980,c	;volatile
  4397                           
  4398                           ;lcd.c: 48:     pulse_e();
  4399  00213C  EC5B  F010         	call	_pulse_e	;wreg free
  4400  002140  0012               	return		;funcret
  4401  002142                     __end_of_send_nibble:
  4402                           	opt callstack 0
  4403                           
  4404 ;; *************** function _pulse_e *****************
  4405 ;; Defined at:
  4406 ;;		line 28 in file "lcd.c"
  4407 ;; Parameters:    Size  Location     Type
  4408 ;;		None
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;  interruptSta    1    0[COMRAM] unsigned char 
  4411 ;; Return value:  Size  Location     Type
  4412 ;;                  1    wreg      void 
  4413 ;; Registers used:
  4414 ;;		wreg
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4424 ;;Total ram usage:        1 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; This function calls:
  4427 ;;		Nothing
  4428 ;; This function is called by:
  4429 ;;		_send_nibble
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           	psect	text25
  4434  0020B6                     __ptext25:
  4435                           	opt callstack 0
  4436  0020B6                     _pulse_e:
  4437                           	opt callstack 22
  4438                           
  4439                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
  4440                           
  4441                           ;incstack = 0
  4442  0020B6  0E00               	movlw	0
  4443  0020B8  BEF2               	btfsc	4082,7,c	;volatile
  4444  0020BA  0E01               	movlw	1
  4445  0020BC  6E01               	movwf	pulse_e@interruptState,c
  4446                           
  4447                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
  4448  0020BE  9EF2               	bcf	4082,7,c	;volatile
  4449                           
  4450                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
  4451  0020C0  868C               	bsf	3980,3,c	;volatile
  4452                           
  4453                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  4454  0020C2  0E14               	movlw	20
  4455  0020C4                     u2067:
  4456  0020C4  2EE8               	decfsz	wreg,f,c
  4457  0020C6  D7FE               	bra	u2067
  4458  0020C8  D000               	nop2	
  4459                           
  4460                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
  4461  0020CA  968C               	bcf	3980,3,c	;volatile
  4462                           
  4463                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  4464  0020CC  0E53               	movlw	83
  4465  0020CE                     u2077:
  4466  0020CE  2EE8               	decfsz	wreg,f,c
  4467  0020D0  D7FE               	bra	u2077
  4468  0020D2  F000               	nop	
  4469                           
  4470                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
  4471  0020D4  B001               	btfsc	pulse_e@interruptState,0,c
  4472  0020D6  D002               	bra	u785
  4473  0020D8  9EF2               	bcf	4082,7,c	;volatile
  4474  0020DA  D001               	bra	u786
  4475  0020DC                     u785:
  4476  0020DC  8EF2               	bsf	4082,7,c	;volatile
  4477  0020DE                     u786:
  4478  0020DE  0012               	return		;funcret
  4479  0020E0                     __end_of_pulse_e:
  4480                           	opt callstack 0
  4481                           
  4482                           	psect	rparam
  4483  0000                     tosu	equ	0xFFF
  4484                           tosh	equ	0xFFE
  4485                           tosl	equ	0xFFD
  4486                           stkptr	equ	0xFFC
  4487                           pclatu	equ	0xFFB
  4488                           pclath	equ	0xFFA
  4489                           pcl	equ	0xFF9
  4490                           tblptru	equ	0xFF8
  4491                           tblptrh	equ	0xFF7
  4492                           tblptrl	equ	0xFF6
  4493                           tablat	equ	0xFF5
  4494                           prodh	equ	0xFF4
  4495                           prodl	equ	0xFF3
  4496                           indf0	equ	0xFEF
  4497                           postinc0	equ	0xFEE
  4498                           postdec0	equ	0xFED
  4499                           preinc0	equ	0xFEC
  4500                           plusw0	equ	0xFEB
  4501                           fsr0h	equ	0xFEA
  4502                           fsr0l	equ	0xFE9
  4503                           wreg	equ	0xFE8
  4504                           indf1	equ	0xFE7
  4505                           postinc1	equ	0xFE6
  4506                           postdec1	equ	0xFE5
  4507                           preinc1	equ	0xFE4
  4508                           plusw1	equ	0xFE3
  4509                           fsr1h	equ	0xFE2
  4510                           fsr1l	equ	0xFE1
  4511                           bsr	equ	0xFE0
  4512                           indf2	equ	0xFDF
  4513                           postinc2	equ	0xFDE
  4514                           postdec2	equ	0xFDD
  4515                           preinc2	equ	0xFDC
  4516                           plusw2	equ	0xFDB
  4517                           fsr2h	equ	0xFDA
  4518                           fsr2l	equ	0xFD9
  4519                           status	equ	0xFD8


Data Sizes:
    Strings     79
    Constant    6
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    115     127
    BANK0           128      0      43
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_16(CODE[10]), STR_15(CODE[14]), STR_14(CODE[6]), STR_13(CODE[10]), 
		 -> STR_12(CODE[10]), STR_11(CODE[14]), STR_10(CODE[6]), STR_9(CODE[10]), 
		 -> STR_8(CODE[11]), STR_7(CODE[10]), STR_6(CODE[14]), STR_5(CODE[6]), 
		 -> STR_4(CODE[11]), STR_3(CODE[13]), STR_2(CODE[14]), STR_1(CODE[10]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S1113_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_16(CODE[10]), STR_15(CODE[14]), STR_14(CODE[6]), STR_13(CODE[10]), 
		 -> STR_12(CODE[10]), STR_11(CODE[14]), STR_10(CODE[6]), STR_9(CODE[10]), 
		 -> STR_8(CODE[11]), STR_7(CODE[10]), STR_6(CODE[14]), STR_5(CODE[6]), 
		 -> STR_4(CODE[11]), STR_3(CODE[13]), STR_2(CODE[14]), STR_1(CODE[10]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 14
		 -> STR_16(CODE[10]), STR_15(CODE[14]), STR_14(CODE[6]), STR_13(CODE[10]), 
		 -> STR_12(CODE[10]), STR_11(CODE[14]), STR_10(CODE[6]), STR_9(CODE[10]), 
		 -> STR_8(CODE[11]), STR_7(CODE[10]), STR_6(CODE[14]), STR_5(CODE[6]), 
		 -> STR_4(CODE[11]), STR_3(CODE[13]), STR_2(CODE[14]), STR_1(CODE[10]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_stepper2
    _stepper2_back->_printf
    _stepper2->_printf
    _stepper->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_send_byte
    _abs->___aomod
    _servo->_servoRotate0
    _servo->_servoRotate180
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   33364
                                            113 COMRAM     2     2      0
                            _initLCD
                            _lcdInst
                             _printf
                              _servo
                            _stepper
                           _stepper2
                      _stepper2_back
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stepper2_back                                        6     6      0    8237
                                             99 COMRAM     6     6      0
                         _full_drive
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _stepper2                                            14    12      2    8524
                                             99 COMRAM    14    12      2
                         _full_drive
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _stepper                                              5     5      0    8237
                                             99 COMRAM     5     5      0
                         _full_drive
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     4      4    7510
                                             91 COMRAM     8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    6240
                                             83 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           42    36      6    5886
                                             67 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    4448
                                             31 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2799
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1280
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     879
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _full_drive                                           4     2      2     502
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _servo                                                2     2      0     500
                                              5 COMRAM     2     2      0
                       _servoRotate0
                     _servoRotate180
 ---------------------------------------------------------------------------------
 (2) _servoRotate180                                       5     3      2     212
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate0                                         5     3      2     288
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     245
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (7) _send_byte                                            1     1      0      89
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (8) _send_nibble                                          1     1      0      45
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (9) _pulse_e                                              1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _fputc
           _putch
             _send_byte
               _send_nibble
                 _pulse_e
   _servo
     _servoRotate0
     _servoRotate180
   _stepper
     _full_drive
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
   _stepper2
     _full_drive
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
   _stepper2_back
     _full_drive
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
   _system_init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      2B       5       33.6%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     73      7F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AA      34        0.0%
DATA                 0      0      AA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Apr 04 00:13:49 2019

                        l80 1DD2                          l77 1D82                          l86 1C54  
                        l89 1CA6                 __CFG_CPD$ON 000000         servoRotate180@servo 0001  
               __CFG_BORV$3 000000           stepper2@direction 0071               servoRotate0@i 0004  
              __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000  
              __CFG_CP3$OFF 000000                 __CFG_OSC$HS 000000         __end_of_system_init 208C  
                       l290 13AA                         l277 1D0A                         l288 13A2  
              __CFG_CPB$OFF 000000                         _RC1 007C11                         _RC2 007C12  
                       u800 1E9C                         u820 1EE4                         u921 174C  
                       u940 1784                         u785 20DC                         u786 20DE  
                       u890 203A      __size_of_stepper2_back 008A                         _abs 202C  
                       _cnt 0087                         _pad 1CDC              stepper2_back@i 0068  
                       wreg 000FE8                __CFG_IESO$ON 000000                __CFG_LVP$OFF 000000  
              __CFG_WDT$OFF 000000                        l1000 2054                        l2002 1916  
                      ?_abs 0013                        l2100 16A6                        l2006 193C  
                      l2030 13C4                        l2016 1386                        l2120 1F98  
                      l2210 10CC                        l2034 13D4                        l2106 16BE  
                      l2044 14CC                        l2118 1F74                        l2304 1228  
                      l2064 1530                        l2226 1136                        l2090 1660  
                      l2068 1548                        l2404 1B78                        l2422 1BCA  
                      l2344 12B0                        l2096 169C                        l2432 1C06  
                      l2504 1E50                        l2266 11B4                        l2460 19C2  
                      l2444 1968                        l2470 1A00                        l1912 1D02  
                      l2464 19D4                        l1922 1D58                        l1914 1D14  
                      l2474 1A10                        l1908 1CF4                        l1950 176C  
                      l1918 1D2C                        l2478 1A22                        l1952 1780  
                      l1944 1746                        l1970 1818                        l1962 17DC  
                      l1938 171E                        l1892 2014                        l1966 17F2  
                      l1990 18A4                        l1982 1866                        l1878 1EA4  
                      ?_pad 0015                        l1992 18B8                        l1888 1FFE  
                      l1896 2096                        l1986 188A                        l1898 209A  
                      l1998 1900                        STR_1 1046                        STR_2 1015  
                      STR_3 1023                        STR_4 1030                        STR_5 1050  
                      STR_6 1007                        STR_7 1046                        STR_8 103B  
                      STR_9 1046                        u1000 18BC                        u1100 14DA  
                      u1030 1358                        u1120 14FC                        u1040 135A  
                      u1200 15E2                        u1121 14FA                        u1130 150A  
                      u1300 1CDA                        u1140 150E                        u1070 1398  
                      u2007 1DD6                        u1240 1DC0                        u1160 151A  
                      u1400 1B86                        u2017 1DE6                        u1090 13BE  
                      u1410 1BEC                        u2027 1EFE                        u1260 1E00  
                      u1420 1976                        u2037 1F16                        u1421 1974  
                      _LATA 000F89                        _LATB 000F8A                        u2047 1F28  
                      _LATC 000F8B                        u1280 1C94                        _LATD 000F8C  
                      u2057 1F4A                        _LATE 000F8D                        u2067 20C4  
                      u2077 20CE                        u1517 1A7C                        u1470 1E72  
                      u1607 1C12                        u1527 1AA4                        u1617 1072  
                      u1537 1AC6                        u1707 112C                        u1627 1086  
                      u1547 1B08                        u1717 1154                        u1637 109A  
                      u1557 1B2E                        u1807 1220                        u1727 116A  
                      u1647 10AE                        u1567 1B4E                        u1817 1246  
                      u1737 1180                        u1657 10C2                        u1577 1E18  
                      u1907 1324                        u1827 125E                        u1747 1196  
                      u1667 10DC                        u1587 1982                        u1917 1FDA  
                      u1837 1276                        u1757 11AC                        u1677 10F0  
                      u1597 1B92                        u1927 1C5A                        u1847 128E  
                      u1767 11C8                        u1687 1104                        u1937 1C68  
                      u1857 12A6                        u1777 11DE                        u1697 1118  
                      u1947 1C7A                        u1867 12C4                        u1787 11F4  
                      u1957 1CAE                        u1877 12DC                        u1797 120A  
                      u1967 1CC0                        u1887 12F4                        u1977 1D8C  
                      u1897 130C                        u1987 1D9A                        u1997 1DA6  
                      abs@a 0013                        _dbuf 008B                        _main 1A68  
                      _dtoa 1330                        _prec 0078                        _time 0080  
                      _nout 0074                        pad@i 001C                        pad@p 0019  
                      fsr1h 000FE2                        fsr2h 000FDA                        indf2 000FDF  
                      fsr1l 000FE1                        pad@w 001E                        fsr2l 000FD9  
                      start 0000             servoRotate180@i 0004               __CFG_MCLRE$ON 000000  
              ___param_bank 000000                       ??_abs 0015                       ??_pad 001B  
           __end_of___aodiv 183A                       ?_main 0001                       ?_dtoa 0020  
           __end_of___aomod 195E                       STR_10 1050                       STR_11 1007  
                     STR_12 1046                       STR_13 1046                       STR_14 1050  
                     STR_15 1007                       STR_16 1046                vfpfcnvrt@fmt 0046  
                     _TMR0H 000FD7                       _TMR0L 000FD6                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94                       _TRISD 000F95  
                     _TRISE 000F96               __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
           __end_of_lcdInst 216C              __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000  
            __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000  
           __end_of_initLCD 1F62              __CFG_EBTRB$OFF 000000                       _flags 007A  
                     _fputc 1E8C                       _fputs 1FF4                       _servo 1FB4  
                     pad@fp 0015                       _width 0076                       _putch 2154  
                     dtoa@d 0022                       dtoa@i 0042                       dtoa@n 003A  
                     dtoa@p 0034                       dtoa@s 0038                       dtoa@w 0036  
                     tablat 000FF5             send_nibble@data 0002             __end_of_pulse_e 20E0  
                     status 000FD8             __end_of_stepper 1C44               _stepper2_back 1E02  
          ??_servoRotate180 0003              __CFG_PBADEN$ON 000000             __initialization 20E0  
               _system_init 205E                __end_of_main 1B70                __end_of_dtoa 1572  
                    ??_main 0072                      ??_dtoa 002A               __activetblptr 000001  
                    _ADCON1 000FC1                ?_send_nibble 0001                      ?_fputc 0005  
                    ?_fputs 000E                      ?_servo 0001                      ?_putch 0001  
        stepper2@steps2_adj 0064              ?_stepper2_back 0001                      _SSPADD 000FC8  
                    _SSPBUF 000FC9              __CFG_XINST$OFF 000000                vfprintf@cfmt 005A  
                 ??___aodiv 0011                   ??___aomod 0011              __CFG_STVREN$ON 000000  
                    clear_0 20E6                      clear_1 20F2                   ??_lcdInst 0004  
                    _printf 2106                      pad@buf 0017                      dtoa@fp 0020  
                    _strlen 208C                   ??_initLCD 0005                      fputc@c 0005  
                    fputs@c 0012                      fputs@i 0013                      fputs@s 000E  
              __mediumconst 0000                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8            __end_of_vfprintf 1FB4                   ??_pulse_e 0001  
          __end_of_stepper2 1A68                   ??_stepper 0064       pulse_e@interruptState 0001  
                __accesstop 0080     __end_of__initialization 20F8               ___rparam_used 000001  
       full_drive@direction 0004              __pcstackCOMRAM 0001               __end_of_fputc 1EF8  
             __end_of_fputs 202C               __end_of_servo 1FF4           servoRotate0@servo 0001  
             __end_of_putch 2160                     ??_fputc 0009                     ??_fputs 0012  
                   ??_servo 0006                     ??_putch 0004             ??_stepper2_back 0064  
                __pbssBANK0 0080          __size_of_send_byte 0012                     ?_printf 005C  
    stepper2_back@direction 0065                     ?_strlen 0001          __size_of_vfpfcnvrt 0180  
                   _SSPCON1 000FC6                     _SSPCON2 000FC5                     _SSPSTAT 000FC7  
      __size_of_send_nibble 0016                     __Hparam 0000                     __Lparam 0000  
              ?_system_init 0001                     ___aodiv 16F2                     ___aomod 183A  
                 ?_vfprintf 0054                __psmallconst 1000                   ?_stepper2 0064  
                   _act_cnt 007E                     __pcinit 20E0                  _full_drive 1058  
                   __ramtop 1000                     _lcdInst 2160                     __ptext0 1A68  
                   __ptext1 205E                     __ptext2 1E02                     __ptext3 195E  
                   __ptext4 1B70                     __ptext5 2106                     __ptext6 1F62  
                   __ptext7 1572                     __ptext8 1330                     __ptext9 1CDC  
           __size_of_printf 0026                   _T0CONbits 000FD5             __size_of_strlen 002A  
                   _initLCD 1EF8                __size_of_abs 0032                __size_of_pad 0096  
                   _pulse_e 20B6                     _stepper 1B70        end_of_initialization 20F8  
     __end_of_LCD_SIZE_HORZ 1006           __end_of_send_byte 2154       __end_of_LCD_SIZE_VERT 1005  
                   fputc@fp 0007                     fputs@fp 0010           __end_of_vfpfcnvrt 16F2  
             ?_servoRotate0 0001                     postdec2 000FDD                     postinc0 000FEE  
                   postinc1 000FE6                     postinc2 000FDE                  ??_vfprintf 005A  
                ??_stepper2 0066                     strlen@a 0003                     strlen@s 0001  
             stepper2@i_227 006D                   _TRISCbits 000F94                  _steps2_adj 007C  
             send_byte@data 0003              ??_servoRotate0 0003                 vfpfcnvrt@ap 0048  
               vfpfcnvrt@fp 0044                 vfpfcnvrt@ll 004C                 ?_full_drive 0001  
   __size_of_servoRotate180 0098              __end_of_printf 212C              __end_of_strlen 20B6  
       start_initialization 20E0                 __end_of_abs 205E                 __end_of_pad 1D72  
     stepper2@count_stepper 006F                 vfprintf@fmt 0056            __CFG_LPT1OSC$OFF 000000  
      __size_of_system_init 002E                    ??_printf 0060                    ??_strlen 0003  
               __pbssCOMRAM 0074            ___aodiv@dividend 0001       __end_of_stepper2_back 1E8C  
       __size_of_full_drive 02D8           __CFG_CCP2MX$PORTC 000000                    ?___aodiv 0001  
                  ?___aomod 0001            ___aodiv@quotient 0013                    ?_lcdInst 0001  
         __size_of_vfprintf 0052           __size_of_stepper2 010A        full_drive@stepper_no 0001  
                  ?_initLCD 0001                 __smallconst 1000        __end_of_servoRotate0 1E02  
             ??_send_nibble 0002                    ?_pulse_e 0001                    ?_stepper 0001  
            __size_of_fputc 006C              __size_of_fputs 0038              __size_of_servo 0040  
            __size_of_putch 000C                    _LATAbits 000F89                    _LATCbits 000F8B  
                  _LATDbits 000F8C                    _LATEbits 000F8D                   _send_byte 2142  
            _LCD_LINE1_ADDR 1003              _LCD_LINE2_ADDR 1006              _LCD_LINE3_ADDR 1002  
            _LCD_LINE4_ADDR 1001            __CFG_WDTPS$32768 000000  stepper2_back@count_stepper 0066  
            _servoRotate180 1C44                   _vfpfcnvrt 1572      __end_of_LCD_LINE1_ADDR 1004  
    __end_of_LCD_LINE2_ADDR 1007      __end_of_LCD_LINE3_ADDR 1003      __end_of_LCD_LINE4_ADDR 1002  
       __end_of_send_nibble 2142                  ?_send_byte 0001                    __Hrparam 0000  
                vfprintf@ap 0058                    __Lrparam 0000                  vfprintf@fp 0054  
              __Lsmallconst 1000          __CFG_BOREN$SBORDIS 000000      __end_of_servoRotate180 1CDC  
          __size_of___aodiv 0148            __size_of___aomod 0124                ??_full_drive 0003  
                ?_vfpfcnvrt 0044             ___aodiv@divisor 0009             ___aodiv@counter 0011  
          __size_of_lcdInst 000C            __size_of_initLCD 006A                    _dtoa$652 0032  
                  __ptext10 208C                    __ptext11 1FF4                    __ptext20 1D72  
                  __ptext12 1E8C                    __ptext21 1EF8                    __ptext13 2154  
                  __ptext22 2160                    __ptext14 202C                    __ptext23 2142  
                  __ptext15 183A                    __ptext24 212C                    __ptext16 16F2  
                  __ptext25 20B6                    __ptext17 1058                    __ptext18 1FB4  
                  __ptext19 1C44            __size_of_pulse_e 002A            __size_of_stepper 00D4  
             __size_of_main 0108               __size_of_dtoa 0242          __end_of_full_drive 1330  
           ?_servoRotate180 0001                    _vfprintf 1F62                    _stepper2 195E  
                 printf@fmt 005C            ___aomod@dividend 0001       __size_of_servoRotate0 0090  
                 putch@data 0004                  _INTCONbits 000FF2                   stepper2@i 006B  
               _send_nibble 212C               _LCD_SIZE_HORZ 1005               _LCD_SIZE_VERT 1004  
               ??_send_byte 0003               ??_system_init 0001                _servoRotate0 1D72  
                  printf@ap 0062             ___aomod@divisor 0009                 ??_vfpfcnvrt 004A  
               lcdInst@data 0004             ___aomod@counter 0011                    stepper@i 0065  
               _SSPCON1bits 000FC6                 _SSPCON2bits 000FC5                 _timer_count 0089  
              ___aodiv@sign 0012                ___aomod@sign 0012        stepper@count_stepper 0067  
