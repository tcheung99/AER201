

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 08 02:44:45 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1,inline
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38  0000                     
    39                           ; Version 2.05
    40                           ; Generated 20/12/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4620 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	smallconst
    75  001000                     __psmallconst:
    76                           	opt callstack 0
    77  001000  00                 	db	0
    78  001001                     _LCD_LINE4_ADDR:
    79                           	opt callstack 0
    80  001001  50                 	db	80
    81  001002                     __end_of_LCD_LINE4_ADDR:
    82                           	opt callstack 0
    83  001002                     _LCD_LINE3_ADDR:
    84                           	opt callstack 0
    85  001002  10                 	db	16
    86  001003                     __end_of_LCD_LINE3_ADDR:
    87                           	opt callstack 0
    88  001003                     _LCD_LINE1_ADDR:
    89                           	opt callstack 0
    90  001003  00                 	db	0
    91  001004                     __end_of_LCD_LINE1_ADDR:
    92                           	opt callstack 0
    93  001004                     _LCD_SIZE_VERT:
    94                           	opt callstack 0
    95  001004  04                 	db	4
    96  001005                     __end_of_LCD_SIZE_VERT:
    97                           	opt callstack 0
    98  001005                     _LCD_SIZE_HORZ:
    99                           	opt callstack 0
   100  001005  10                 	db	16
   101  001006                     __end_of_LCD_SIZE_HORZ:
   102                           	opt callstack 0
   103  001006  40                 	db	64
   104  001007                     __end_of_LCD_LINE2_ADDR:
   105                           	opt callstack 0
   106  0000                     _TMR0L	set	4054
   107  0000                     _TMR0H	set	4055
   108  0000                     _T0CONbits	set	4053
   109  0000                     _LATDbits	set	3980
   110  0000                     _INTCONbits	set	4082
   111  0000                     _SSPBUF	set	4041
   112  0000                     _SSPCON2bits	set	4037
   113  0000                     _SSPCON1	set	4038
   114  0000                     _SSPADD	set	4040
   115  0000                     _TRISCbits	set	3988
   116  0000                     _SSPCON1bits	set	4038
   117  0000                     _SSPCON2	set	4037
   118  0000                     _SSPSTAT	set	4039
   119  0000                     _LATAbits	set	3977
   120  0000                     _LATEbits	set	3981
   121  0000                     _LATCbits	set	3979
   122  0000                     _LATE	set	3981
   123  0000                     _TRISE	set	3990
   124  0000                     _LATC	set	3979
   125  0000                     _TRISC	set	3988
   126  0000                     _ADCON1	set	4033
   127  0000                     _TRISD	set	3989
   128  0000                     _LATD	set	3980
   129  0000                     _LATA	set	3977
   130  0000                     _TRISA	set	3986
   131  0000                     _LATB	set	3978
   132  0000                     _TRISB	set	3987
   133  0000                     _RD0	set	31768
   134  0000                     _RD1	set	31769
   135  0000                     _RC2	set	31762
   136  0000                     _RC1	set	31761
   137  001007                     STR_6:
   138  001007  53                 	db	83	;'S'
   139  001008  74                 	db	116	;'t'
   140  001009  65                 	db	101	;'e'
   141  00100A  70                 	db	112	;'p'
   142  00100B  20                 	db	32
   143  00100C  73                 	db	115	;'s'
   144  00100D  70                 	db	112	;'p'
   145  00100E  65                 	db	101	;'e'
   146  00100F  65                 	db	101	;'e'
   147  001010  64                 	db	100	;'d'
   148  001011  20                 	db	32
   149  001012  25                 	db	37
   150  001013  64                 	db	100	;'d'
   151  001014  00                 	db	0
   152  001015                     STR_2:
   153  001015  53                 	db	83	;'S'
   154  001016  74                 	db	116	;'t'
   155  001017  65                 	db	101	;'e'
   156  001018  70                 	db	112	;'p'
   157  001019  70                 	db	112	;'p'
   158  00101A  65                 	db	101	;'e'
   159  00101B  72                 	db	114	;'r'
   160  00101C  20                 	db	32
   161  00101D  73                 	db	115	;'s'
   162  00101E  74                 	db	116	;'t'
   163  00101F  61                 	db	97	;'a'
   164  001020  72                 	db	114	;'r'
   165  001021  74                 	db	116	;'t'
   166  001022  00                 	db	0
   167  001023                     STR_3:
   168  001023  53                 	db	83	;'S'
   169  001024  74                 	db	116	;'t'
   170  001025  65                 	db	101	;'e'
   171  001026  70                 	db	112	;'p'
   172  001027  70                 	db	112	;'p'
   173  001028  65                 	db	101	;'e'
   174  001029  72                 	db	114	;'r'
   175  00102A  20                 	db	32
   176  00102B  64                 	db	100	;'d'
   177  00102C  6F                 	db	111	;'o'
   178  00102D  6E                 	db	110	;'n'
   179  00102E  65                 	db	101	;'e'
   180  00102F  00                 	db	0
   181  001030                     STR_4:
   182  001030  53                 	db	83	;'S'
   183  001031  65                 	db	101	;'e'
   184  001032  72                 	db	114	;'r'
   185  001033  76                 	db	118	;'v'
   186  001034  6F                 	db	111	;'o'
   187  001035  20                 	db	32
   188  001036  64                 	db	100	;'d'
   189  001037  6F                 	db	111	;'o'
   190  001038  6E                 	db	110	;'n'
   191  001039  65                 	db	101	;'e'
   192  00103A  00                 	db	0
   193  00103B                     STR_8:
   194  00103B  73                 	db	115	;'s'
   195  00103C  74                 	db	116	;'t'
   196  00103D  65                 	db	101	;'e'
   197  00103E  70                 	db	112	;'p'
   198  00103F  73                 	db	115	;'s'
   199  001040  20                 	db	32
   200  001041  64                 	db	100	;'d'
   201  001042  6F                 	db	111	;'o'
   202  001043  6E                 	db	110	;'n'
   203  001044  65                 	db	101	;'e'
   204  001045  00                 	db	0
   205  001046                     STR_1:
   206  001046  63                 	db	99	;'c'
   207  001047  6E                 	db	110	;'n'
   208  001048  74                 	db	116	;'t'
   209  001049  20                 	db	32
   210  00104A  69                 	db	105	;'i'
   211  00104B  73                 	db	115	;'s'
   212  00104C  20                 	db	32
   213  00104D  25                 	db	37
   214  00104E  64                 	db	100	;'d'
   215  00104F  00                 	db	0
   216  001050                     STR_5:
   217  001050  73                 	db	115	;'s'
   218  001051  74                 	db	116	;'t'
   219  001052  65                 	db	101	;'e'
   220  001053  70                 	db	112	;'p'
   221  001054  31                 	db	49	;'1'
   222  001055  00                 	db	0
   223  0000                     
   224                           ; #config settings
   225  001056  00                 	db	0	; dummy byte at the end
   226  0000                     
   227                           	psect	cinit
   228  0021CC                     __pcinit:
   229                           	opt callstack 0
   230  0021CC                     start_initialization:
   231                           	opt callstack 0
   232  0021CC                     __initialization:
   233                           	opt callstack 0
   234                           
   235                           ; Clear objects allocated to BANK0 (43 bytes)
   236  0021CC  EE00  F080         	lfsr	0,__pbssBANK0
   237  0021D0  0E2B               	movlw	43
   238  0021D2                     clear_0:
   239  0021D2  6AEE               	clrf	postinc0,c
   240  0021D4  06E8               	decf	wreg,f,c
   241  0021D6  E1FD               	bnz	clear_0
   242                           
   243                           ; Clear objects allocated to COMRAM (12 bytes)
   244  0021D8  EE00  F074         	lfsr	0,__pbssCOMRAM
   245  0021DC  0E0C               	movlw	12
   246  0021DE                     clear_1:
   247  0021DE  6AEE               	clrf	postinc0,c
   248  0021E0  06E8               	decf	wreg,f,c
   249  0021E2  E1FD               	bnz	clear_1
   250  0021E4                     end_of_initialization:
   251                           	opt callstack 0
   252  0021E4                     __end_of__initialization:
   253                           	opt callstack 0
   254  0021E4  0E00               	movlw	low (__Lsmallconst shr (0+16))
   255  0021E6  6EF8               	movwf	tblptru,c
   256  0021E8  0E10               	movlw	high __Lsmallconst
   257  0021EA  6EF7               	movwf	tblptrh,c
   258  0021EC  0100               	movlb	0
   259  0021EE  EF34  F00D         	goto	_main	;jump to C main() function
   260                           
   261                           	psect	bssCOMRAM
   262  000074                     __pbssCOMRAM:
   263                           	opt callstack 0
   264  000074                     _nout:
   265                           	opt callstack 0
   266  000074                     	ds	2
   267  000076                     _width:
   268                           	opt callstack 0
   269  000076                     	ds	2
   270  000078                     _prec:
   271                           	opt callstack 0
   272  000078                     	ds	2
   273  00007A                     _flags:
   274                           	opt callstack 0
   275  00007A                     	ds	2
   276  00007C                     _steps2_adj:
   277                           	opt callstack 0
   278  00007C                     	ds	2
   279  00007E                     _act_cnt:
   280                           	opt callstack 0
   281  00007E                     	ds	2
   282                           
   283                           	psect	bssBANK0
   284  000080                     __pbssBANK0:
   285                           	opt callstack 0
   286  000080                     _time:
   287                           	opt callstack 0
   288  000080                     	ds	7
   289  000087                     _cnt:
   290                           	opt callstack 0
   291  000087                     	ds	2
   292  000089                     _timer_count:
   293                           	opt callstack 0
   294  000089                     	ds	2
   295  00008B                     _dbuf:
   296                           	opt callstack 0
   297  00008B                     	ds	32
   298                           
   299                           	psect	cstackCOMRAM
   300  000001                     __pcstackCOMRAM:
   301                           	opt callstack 0
   302  000001                     ?_strlen:
   303                           	opt callstack 0
   304  000001                     ?___aodiv:
   305                           	opt callstack 0
   306  000001                     ?___aomod:
   307                           	opt callstack 0
   308  000001                     pulse_e@interruptState:
   309                           	opt callstack 0
   310  000001                     servoRotate0@servo:
   311                           	opt callstack 0
   312  000001                     servoRotate180@servo:
   313                           	opt callstack 0
   314  000001                     full_drive@stepper_no:
   315                           	opt callstack 0
   316  000001                     strlen@s:
   317                           	opt callstack 0
   318  000001                     ___aodiv@dividend:
   319                           	opt callstack 0
   320  000001                     ___aomod@dividend:
   321                           	opt callstack 0
   322                           
   323                           ; 8 bytes @ 0x0
   324  000001                     	ds	1
   325  000002                     send_nibble@data:
   326                           	opt callstack 0
   327                           
   328                           ; 1 bytes @ 0x1
   329  000002                     	ds	1
   330  000003                     ??_full_drive:
   331  000003                     ??_servoRotate0:
   332  000003                     ??_servoRotate180:
   333  000003                     send_byte@data:
   334                           	opt callstack 0
   335  000003                     strlen@a:
   336                           	opt callstack 0
   337                           
   338                           ; 2 bytes @ 0x2
   339  000003                     	ds	1
   340  000004                     full_drive@direction:
   341                           	opt callstack 0
   342  000004                     lcdInst@data:
   343                           	opt callstack 0
   344  000004                     putch@data:
   345                           	opt callstack 0
   346  000004                     servoRotate0@i:
   347                           	opt callstack 0
   348  000004                     servoRotate180@i:
   349                           	opt callstack 0
   350                           
   351                           ; 2 bytes @ 0x3
   352  000004                     	ds	1
   353  000005                     ??_initLCD:
   354  000005                     fputc@c:
   355                           	opt callstack 0
   356                           
   357                           ; 2 bytes @ 0x4
   358  000005                     	ds	1
   359  000006                     ??_servo:
   360                           
   361                           ; 1 bytes @ 0x5
   362  000006                     	ds	1
   363  000007                     fputc@fp:
   364                           	opt callstack 0
   365                           
   366                           ; 2 bytes @ 0x6
   367  000007                     	ds	2
   368  000009                     ??_fputc:
   369  000009                     ___aodiv@divisor:
   370                           	opt callstack 0
   371  000009                     ___aomod@divisor:
   372                           	opt callstack 0
   373                           
   374                           ; 8 bytes @ 0x8
   375  000009                     	ds	5
   376  00000E                     fputs@s:
   377                           	opt callstack 0
   378                           
   379                           ; 2 bytes @ 0xD
   380  00000E                     	ds	2
   381  000010                     fputs@fp:
   382                           	opt callstack 0
   383                           
   384                           ; 2 bytes @ 0xF
   385  000010                     	ds	1
   386  000011                     ___aodiv@counter:
   387                           	opt callstack 0
   388  000011                     ___aomod@counter:
   389                           	opt callstack 0
   390                           
   391                           ; 1 bytes @ 0x10
   392  000011                     	ds	1
   393  000012                     ___aodiv@sign:
   394                           	opt callstack 0
   395  000012                     ___aomod@sign:
   396                           	opt callstack 0
   397  000012                     fputs@c:
   398                           	opt callstack 0
   399                           
   400                           ; 1 bytes @ 0x11
   401  000012                     	ds	1
   402  000013                     ?_abs:
   403                           	opt callstack 0
   404  000013                     abs@a:
   405                           	opt callstack 0
   406  000013                     fputs@i:
   407                           	opt callstack 0
   408  000013                     ___aodiv@quotient:
   409                           	opt callstack 0
   410                           
   411                           ; 8 bytes @ 0x12
   412  000013                     	ds	2
   413  000015                     ??_abs:
   414  000015                     ?_pad:
   415                           	opt callstack 0
   416  000015                     pad@fp:
   417                           	opt callstack 0
   418                           
   419                           ; 2 bytes @ 0x14
   420  000015                     	ds	2
   421  000017                     pad@buf:
   422                           	opt callstack 0
   423                           
   424                           ; 2 bytes @ 0x16
   425  000017                     	ds	2
   426  000019                     pad@p:
   427                           	opt callstack 0
   428                           
   429                           ; 2 bytes @ 0x18
   430  000019                     	ds	2
   431  00001B                     ??_pad:
   432                           
   433                           ; 1 bytes @ 0x1A
   434  00001B                     	ds	1
   435  00001C                     pad@i:
   436                           	opt callstack 0
   437                           
   438                           ; 2 bytes @ 0x1B
   439  00001C                     	ds	2
   440  00001E                     pad@w:
   441                           	opt callstack 0
   442                           
   443                           ; 2 bytes @ 0x1D
   444  00001E                     	ds	2
   445  000020                     ?_dtoa:
   446                           	opt callstack 0
   447  000020                     dtoa@fp:
   448                           	opt callstack 0
   449                           
   450                           ; 2 bytes @ 0x1F
   451  000020                     	ds	2
   452  000022                     dtoa@d:
   453                           	opt callstack 0
   454                           
   455                           ; 8 bytes @ 0x21
   456  000022                     	ds	8
   457  00002A                     ??_dtoa:
   458                           
   459                           ; 1 bytes @ 0x29
   460  00002A                     	ds	8
   461  000032                     _dtoa$654:
   462                           	opt callstack 0
   463                           
   464                           ; 2 bytes @ 0x31
   465  000032                     	ds	2
   466  000034                     dtoa@p:
   467                           	opt callstack 0
   468                           
   469                           ; 2 bytes @ 0x33
   470  000034                     	ds	2
   471  000036                     dtoa@w:
   472                           	opt callstack 0
   473                           
   474                           ; 2 bytes @ 0x35
   475  000036                     	ds	2
   476  000038                     dtoa@s:
   477                           	opt callstack 0
   478                           
   479                           ; 2 bytes @ 0x37
   480  000038                     	ds	2
   481  00003A                     dtoa@n:
   482                           	opt callstack 0
   483                           
   484                           ; 8 bytes @ 0x39
   485  00003A                     	ds	8
   486  000042                     dtoa@i:
   487                           	opt callstack 0
   488                           
   489                           ; 2 bytes @ 0x41
   490  000042                     	ds	2
   491  000044                     ?_vfpfcnvrt:
   492                           	opt callstack 0
   493  000044                     vfpfcnvrt@fp:
   494                           	opt callstack 0
   495                           
   496                           ; 2 bytes @ 0x43
   497  000044                     	ds	2
   498  000046                     vfpfcnvrt@fmt:
   499                           	opt callstack 0
   500                           
   501                           ; 2 bytes @ 0x45
   502  000046                     	ds	2
   503  000048                     vfpfcnvrt@ap:
   504                           	opt callstack 0
   505                           
   506                           ; 2 bytes @ 0x47
   507  000048                     	ds	2
   508  00004A                     ??_vfpfcnvrt:
   509                           
   510                           ; 1 bytes @ 0x49
   511  00004A                     	ds	2
   512  00004C                     vfpfcnvrt@ll:
   513                           	opt callstack 0
   514                           
   515                           ; 8 bytes @ 0x4B
   516  00004C                     	ds	8
   517  000054                     ?_vfprintf:
   518                           	opt callstack 0
   519  000054                     vfprintf@fp:
   520                           	opt callstack 0
   521                           
   522                           ; 2 bytes @ 0x53
   523  000054                     	ds	2
   524  000056                     vfprintf@fmt:
   525                           	opt callstack 0
   526                           
   527                           ; 2 bytes @ 0x55
   528  000056                     	ds	2
   529  000058                     vfprintf@ap:
   530                           	opt callstack 0
   531                           
   532                           ; 2 bytes @ 0x57
   533  000058                     	ds	2
   534  00005A                     vfprintf@cfmt:
   535                           	opt callstack 0
   536                           
   537                           ; 2 bytes @ 0x59
   538  00005A                     	ds	2
   539  00005C                     ?_printf:
   540                           	opt callstack 0
   541  00005C                     printf@fmt:
   542                           	opt callstack 0
   543                           
   544                           ; 2 bytes @ 0x5B
   545  00005C                     	ds	4
   546  000060                     
   547                           ; 1 bytes @ 0x5F
   548  000060                     	ds	2
   549  000062                     printf@ap:
   550                           	opt callstack 0
   551                           
   552                           ; 2 bytes @ 0x61
   553  000062                     	ds	2
   554  000064                     ??_stepper:
   555  000064                     ??_stepper2_back:
   556  000064                     stepper2@steps2_adj:
   557                           	opt callstack 0
   558                           
   559                           ; 2 bytes @ 0x63
   560  000064                     	ds	1
   561  000065                     stepper2_back@direction:
   562                           	opt callstack 0
   563  000065                     stepper@i:
   564                           	opt callstack 0
   565                           
   566                           ; 2 bytes @ 0x64
   567  000065                     	ds	1
   568  000066                     ??_stepper2:
   569  000066                     stepper2_back@count_stepper:
   570                           	opt callstack 0
   571                           
   572                           ; 2 bytes @ 0x65
   573  000066                     	ds	1
   574  000067                     stepper@count_stepper:
   575                           	opt callstack 0
   576                           
   577                           ; 2 bytes @ 0x66
   578  000067                     	ds	1
   579  000068                     stepper2_back@i:
   580                           	opt callstack 0
   581                           
   582                           ; 2 bytes @ 0x67
   583  000068                     	ds	3
   584  00006B                     stepper2@i:
   585                           	opt callstack 0
   586                           
   587                           ; 2 bytes @ 0x6A
   588  00006B                     	ds	2
   589  00006D                     stepper2@i_229:
   590                           	opt callstack 0
   591                           
   592                           ; 2 bytes @ 0x6C
   593  00006D                     	ds	2
   594  00006F                     stepper2@count_stepper:
   595                           	opt callstack 0
   596                           
   597                           ; 2 bytes @ 0x6E
   598  00006F                     	ds	2
   599  000071                     stepper2@direction:
   600                           	opt callstack 0
   601                           
   602                           ; 1 bytes @ 0x70
   603  000071                     	ds	1
   604  000072                     ??_main:
   605                           
   606                           ; 1 bytes @ 0x71
   607  000072                     	ds	2
   608                           
   609 ;;
   610 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   611 ;;
   612 ;; *************** function _main *****************
   613 ;; Defined at:
   614 ;;		line 92 in file "main.c"
   615 ;; Parameters:    Size  Location     Type
   616 ;;		None
   617 ;; Auto vars:     Size  Location     Type
   618 ;;		None
   619 ;; Return value:  Size  Location     Type
   620 ;;                  1    wreg      void 
   621 ;; Registers used:
   622 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   623 ;; Tracked objects:
   624 ;;		On entry : 0/0
   625 ;;		On exit  : 0/0
   626 ;;		Unchanged: 0/0
   627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   630 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   631 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   632 ;;Total ram usage:        2 bytes
   633 ;; Hardware stack levels required when called:   12
   634 ;; This function calls:
   635 ;;		_initLCD
   636 ;;		_lcdInst
   637 ;;		_printf
   638 ;;		_servo
   639 ;;		_stepper
   640 ;;		_stepper2
   641 ;;		_stepper2_back
   642 ;;		_system_init
   643 ;; This function is called by:
   644 ;;		Startup code after reset
   645 ;; This function uses a non-reentrant model
   646 ;;
   647                           
   648                           	psect	text0
   649  001A68                     __ptext0:
   650                           	opt callstack 0
   651  001A68                     _main:
   652                           	opt callstack 19
   653                           
   654                           ;main.c: 93:     system_init();
   655                           
   656                           ;incstack = 0
   657  001A68  ECA5  F010         	call	_system_init	;wreg free
   658                           
   659                           ;main.c: 94:     initLCD();
   660  001A6C  EC12  F010         	call	_initLCD	;wreg free
   661                           
   662                           ;main.c: 98:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   663  001A70  0E01               	movlw	1
   664  001A72  EC26  F011         	call	_lcdInst
   665  001A76  0E11               	movlw	17
   666  001A78  6E72               	movwf	??_main& (0+255),c
   667  001A7A  0E3A               	movlw	58
   668  001A7C                     u1597:
   669  001A7C  2EE8               	decfsz	wreg,f,c
   670  001A7E  D7FE               	bra	u1597
   671  001A80  2E72               	decfsz	??_main& (0+255),f,c
   672  001A82  D7FC               	bra	u1597
   673  001A84  D000               	nop2	
   674                           
   675                           ;main.c: 99:     printf("cnt is %d",act_cnt);
   676  001A86  0E46               	movlw	low STR_1
   677  001A88  6E5C               	movwf	printf@fmt,c
   678  001A8A  0E10               	movlw	high STR_1
   679  001A8C  6E5D               	movwf	printf@fmt+1,c
   680  001A8E  C07E  F05E         	movff	_act_cnt,?_printf+2
   681  001A92  C07F  F05F         	movff	_act_cnt+1,?_printf+3
   682  001A96  ECF9  F010         	call	_printf	;wreg free
   683                           
   684                           ;main.c: 100:     _delay((unsigned long)((200)*(10000000/4000.0)));
   685  001A9A  0E03               	movlw	3
   686  001A9C  6E73               	movwf	(??_main+1)& (0+255),c
   687  001A9E  0E8A               	movlw	138
   688  001AA0  6E72               	movwf	??_main& (0+255),c
   689  001AA2  0E56               	movlw	86
   690  001AA4                     u1607:
   691  001AA4  2EE8               	decfsz	wreg,f,c
   692  001AA6  D7FE               	bra	u1607
   693  001AA8  2E72               	decfsz	??_main& (0+255),f,c
   694  001AAA  D7FC               	bra	u1607
   695  001AAC  2E73               	decfsz	(??_main+1)& (0+255),f,c
   696  001AAE  D7FA               	bra	u1607
   697                           
   698                           ;main.c: 102:     if (act_cnt==0){
   699  001AB0  507E               	movf	_act_cnt,w,c
   700  001AB2  107F               	iorwf	_act_cnt+1,w,c
   701  001AB4  A4D8               	btfss	status,2,c
   702  001AB6  EF00  F000         	goto	start
   703                           
   704                           ;main.c: 103:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   705  001ABA  0E01               	movlw	1
   706  001ABC  EC26  F011         	call	_lcdInst
   707  001AC0  0E11               	movlw	17
   708  001AC2  6E72               	movwf	??_main& (0+255),c
   709  001AC4  0E3A               	movlw	58
   710  001AC6                     u1617:
   711  001AC6  2EE8               	decfsz	wreg,f,c
   712  001AC8  D7FE               	bra	u1617
   713  001ACA  2E72               	decfsz	??_main& (0+255),f,c
   714  001ACC  D7FC               	bra	u1617
   715  001ACE  D000               	nop2	
   716                           
   717                           ;main.c: 104:         printf("Stepper start");
   718  001AD0  0E15               	movlw	low STR_2
   719  001AD2  6E5C               	movwf	printf@fmt,c
   720  001AD4  0E10               	movlw	high STR_2
   721  001AD6  6E5D               	movwf	printf@fmt+1,c
   722  001AD8  ECF9  F010         	call	_printf	;wreg free
   723                           
   724                           ;main.c: 106:         stepper();
   725  001ADC  EC93  F00E         	call	_stepper	;wreg free
   726                           
   727                           ;main.c: 107:         steps2_adj = 110 + 2;
   728  001AE0  0E00               	movlw	0
   729  001AE2  6E7D               	movwf	_steps2_adj+1,c
   730  001AE4  0E70               	movlw	112
   731  001AE6  6E7C               	movwf	_steps2_adj,c
   732                           
   733                           ;main.c: 108:         stepper2(0, steps2_adj);
   734  001AE8  0E00               	movlw	0
   735  001AEA  6E65               	movwf	stepper2@steps2_adj+1,c
   736  001AEC  0E70               	movlw	112
   737  001AEE  6E64               	movwf	stepper2@steps2_adj,c
   738  001AF0  0E00               	movlw	0
   739  001AF2  ECAF  F00C         	call	_stepper2
   740                           
   741                           ;main.c: 109:         stepper2_back(1);
   742  001AF6  0E01               	movlw	1
   743  001AF8  EC97  F00F         	call	_stepper2_back
   744                           
   745                           ;main.c: 111:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   746  001AFC  0E01               	movlw	1
   747  001AFE  EC26  F011         	call	_lcdInst
   748  001B02  0E11               	movlw	17
   749  001B04  6E72               	movwf	??_main& (0+255),c
   750  001B06  0E3A               	movlw	58
   751  001B08                     u1627:
   752  001B08  2EE8               	decfsz	wreg,f,c
   753  001B0A  D7FE               	bra	u1627
   754  001B0C  2E72               	decfsz	??_main& (0+255),f,c
   755  001B0E  D7FC               	bra	u1627
   756  001B10  D000               	nop2	
   757                           
   758                           ;main.c: 112:         printf("Stepper done");
   759  001B12  0E23               	movlw	low STR_3
   760  001B14  6E5C               	movwf	printf@fmt,c
   761  001B16  0E10               	movlw	high STR_3
   762  001B18  6E5D               	movwf	printf@fmt+1,c
   763  001B1A  ECF9  F010         	call	_printf	;wreg free
   764                           
   765                           ;main.c: 114:         servo();
   766  001B1E  ECFD  F00E         	call	_servo	;wreg free
   767                           
   768                           ;main.c: 116:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   769  001B22  0E01               	movlw	1
   770  001B24  EC26  F011         	call	_lcdInst
   771  001B28  0E11               	movlw	17
   772  001B2A  6E72               	movwf	??_main& (0+255),c
   773  001B2C  0E3A               	movlw	58
   774  001B2E                     u1637:
   775  001B2E  2EE8               	decfsz	wreg,f,c
   776  001B30  D7FE               	bra	u1637
   777  001B32  2E72               	decfsz	??_main& (0+255),f,c
   778  001B34  D7FC               	bra	u1637
   779  001B36  D000               	nop2	
   780                           
   781                           ;main.c: 117:         printf("Servo done");
   782  001B38  0E30               	movlw	low STR_4
   783  001B3A  6E5C               	movwf	printf@fmt,c
   784  001B3C  0E10               	movlw	high STR_4
   785  001B3E  6E5D               	movwf	printf@fmt+1,c
   786  001B40  ECF9  F010         	call	_printf	;wreg free
   787                           
   788                           ;main.c: 121:         _delay((unsigned long)((200)*(10000000/4000.0)));
   789  001B44  0E03               	movlw	3
   790  001B46  6E73               	movwf	(??_main+1)& (0+255),c
   791  001B48  0E8A               	movlw	138
   792  001B4A  6E72               	movwf	??_main& (0+255),c
   793  001B4C  0E56               	movlw	86
   794  001B4E                     u1647:
   795  001B4E  2EE8               	decfsz	wreg,f,c
   796  001B50  D7FE               	bra	u1647
   797  001B52  2E72               	decfsz	??_main& (0+255),f,c
   798  001B54  D7FC               	bra	u1647
   799  001B56  2E73               	decfsz	(??_main+1)& (0+255),f,c
   800  001B58  D7FA               	bra	u1647
   801                           
   802                           ;main.c: 123:         stepper2(1, steps2_adj);
   803  001B5A  0E00               	movlw	0
   804  001B5C  6E65               	movwf	stepper2@steps2_adj+1,c
   805  001B5E  0E70               	movlw	112
   806  001B60  6E64               	movwf	stepper2@steps2_adj,c
   807  001B62  0E01               	movlw	1
   808  001B64  ECAF  F00C         	call	_stepper2
   809                           
   810                           ;main.c: 124:         act_cnt++;
   811  001B68  4A7E               	infsnz	_act_cnt,f,c
   812  001B6A  2A7F               	incf	_act_cnt+1,f,c
   813  001B6C  EF00  F000         	goto	start
   814  001B70                     __end_of_main:
   815                           	opt callstack 0
   816                           
   817 ;; *************** function _system_init *****************
   818 ;; Defined at:
   819 ;;		line 133 in file "main.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;		None
   822 ;; Auto vars:     Size  Location     Type
   823 ;;		None
   824 ;; Return value:  Size  Location     Type
   825 ;;                  1    wreg      void 
   826 ;; Registers used:
   827 ;;		wreg, status,2
   828 ;; Tracked objects:
   829 ;;		On entry : 0/0
   830 ;;		On exit  : 0/0
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   837 ;;Total ram usage:        0 bytes
   838 ;; Hardware stack levels used:    1
   839 ;; This function calls:
   840 ;;		Nothing
   841 ;; This function is called by:
   842 ;;		_main
   843 ;; This function uses a non-reentrant model
   844 ;;
   845                           
   846                           	psect	text1
   847  00214A                     __ptext1:
   848                           	opt callstack 0
   849  00214A                     _system_init:
   850                           	opt callstack 30
   851                           
   852                           ;main.c: 134:     TRISB = 0x00;
   853                           
   854                           ;incstack = 0
   855  00214A  0E00               	movlw	0
   856  00214C  6E93               	movwf	3987,c	;volatile
   857                           
   858                           ;main.c: 136:     LATB = 0x0F;
   859  00214E  0E0F               	movlw	15
   860  002150  6E8A               	movwf	3978,c	;volatile
   861                           
   862                           ;main.c: 137:     TRISA = 0x00;
   863  002152  0E00               	movlw	0
   864  002154  6E92               	movwf	3986,c	;volatile
   865                           
   866                           ;main.c: 138:     LATA = 0x00;
   867  002156  0E00               	movlw	0
   868  002158  6E89               	movwf	3977,c	;volatile
   869                           
   870                           ;main.c: 141:     LATD = 0x00;
   871  00215A  0E00               	movlw	0
   872  00215C  6E8C               	movwf	3980,c	;volatile
   873                           
   874                           ;main.c: 142:     TRISD = 0x00;
   875  00215E  0E00               	movlw	0
   876  002160  6E95               	movwf	3989,c	;volatile
   877                           
   878                           ;main.c: 144:     ADCON1 = 0b00001111;
   879  002162  0E0F               	movlw	15
   880  002164  6EC1               	movwf	4033,c	;volatile
   881                           
   882                           ;main.c: 146:     TRISC = 0x00;
   883  002166  0E00               	movlw	0
   884  002168  6E94               	movwf	3988,c	;volatile
   885                           
   886                           ;main.c: 147:     LATC = 0x00;
   887  00216A  0E00               	movlw	0
   888  00216C  6E8B               	movwf	3979,c	;volatile
   889                           
   890                           ;main.c: 148:     TRISE = 0x00;
   891  00216E  0E00               	movlw	0
   892  002170  6E96               	movwf	3990,c	;volatile
   893                           
   894                           ;main.c: 149:     LATE = 0x00;
   895  002172  0E00               	movlw	0
   896  002174  6E8D               	movwf	3981,c	;volatile
   897  002176  0012               	return		;funcret
   898  002178                     __end_of_system_init:
   899                           	opt callstack 0
   900                           
   901 ;; *************** function _stepper2_back *****************
   902 ;; Defined at:
   903 ;;		line 544 in file "main.c"
   904 ;; Parameters:    Size  Location     Type
   905 ;;  direction       1    wreg     unsigned char 
   906 ;; Auto vars:     Size  Location     Type
   907 ;;  direction       1  100[COMRAM] unsigned char 
   908 ;;  i               2  103[COMRAM] int 
   909 ;;  count_steppe    2  101[COMRAM] int 
   910 ;; Return value:  Size  Location     Type
   911 ;;                  1    wreg      void 
   912 ;; Registers used:
   913 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   914 ;; Tracked objects:
   915 ;;		On entry : 0/0
   916 ;;		On exit  : 0/0
   917 ;;		Unchanged: 0/0
   918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   920 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   921 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   922 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   923 ;;Total ram usage:        6 bytes
   924 ;; Hardware stack levels used:    1
   925 ;; Hardware stack levels required when called:   11
   926 ;; This function calls:
   927 ;;		_full_drive
   928 ;;		_lcdInst
   929 ;;		_printf
   930 ;; This function is called by:
   931 ;;		_main
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text2
   936  001F2E                     __ptext2:
   937                           	opt callstack 0
   938  001F2E                     _stepper2_back:
   939                           	opt callstack 19
   940                           
   941                           ;incstack = 0
   942                           ;stepper2_back@direction stored from wreg
   943  001F2E  6E65               	movwf	stepper2_back@direction,c
   944                           
   945                           ;main.c: 562:     int count_stepper = 0;
   946  001F30  0E00               	movlw	0
   947  001F32  6E67               	movwf	stepper2_back@count_stepper+1,c
   948  001F34  0E00               	movlw	0
   949  001F36  6E66               	movwf	stepper2_back@count_stepper,c
   950                           
   951                           ;main.c: 565:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
   952                           
   953                           ;main.c: 564:         if (count_stepper<1){
   954  001F38  0E01               	movlw	1
   955  001F3A  EC26  F011         	call	_lcdInst
   956  001F3E  0E11               	movlw	17
   957  001F40  6E64               	movwf	??_stepper2_back& (0+255),c
   958  001F42  0E3A               	movlw	58
   959  001F44                     u1657:
   960  001F44  2EE8               	decfsz	wreg,f,c
   961  001F46  D7FE               	bra	u1657
   962  001F48  2E64               	decfsz	??_stepper2_back& (0+255),f,c
   963  001F4A  D7FC               	bra	u1657
   964  001F4C  D000               	nop2	
   965                           
   966                           ;main.c: 566:             printf("step1");
   967  001F4E  0E50               	movlw	low STR_5
   968  001F50  6E5C               	movwf	printf@fmt,c
   969  001F52  0E10               	movlw	high STR_5
   970  001F54  6E5D               	movwf	printf@fmt+1,c
   971  001F56  ECF9  F010         	call	_printf	;wreg free
   972  001F5A  0EC0               	movlw	192
   973  001F5C  EC26  F011         	call	_lcdInst
   974                           
   975                           ;main.c: 568:             printf("Step speed %d",4);
   976  001F60  0E07               	movlw	low STR_6
   977  001F62  6E5C               	movwf	printf@fmt,c
   978  001F64  0E10               	movlw	high STR_6
   979  001F66  6E5D               	movwf	printf@fmt+1,c
   980  001F68  0E00               	movlw	0
   981  001F6A  6E5F               	movwf	?_printf+3,c
   982  001F6C  0E04               	movlw	4
   983  001F6E  6E5E               	movwf	?_printf+2,c
   984  001F70  ECF9  F010         	call	_printf	;wreg free
   985                           
   986                           ;main.c: 569:             for(int i=0;i<5;i++){
   987  001F74  0E00               	movlw	0
   988  001F76  6E69               	movwf	stepper2_back@i+1,c
   989  001F78  0E00               	movlw	0
   990  001F7A  6E68               	movwf	stepper2_back@i,c
   991  001F7C                     l2584:
   992                           
   993                           ;main.c: 571:                 full_drive(direction, 2);
   994  001F7C  0E00               	movlw	0
   995  001F7E  6E02               	movwf	full_drive@stepper_no+1,c
   996  001F80  0E02               	movlw	2
   997  001F82  6E01               	movwf	full_drive@stepper_no,c
   998  001F84  5065               	movf	stepper2_back@direction,w,c
   999  001F86  EC2C  F008         	call	_full_drive
  1000                           
  1001                           ;main.c: 573:             }
  1002  001F8A  4A68               	infsnz	stepper2_back@i,f,c
  1003  001F8C  2A69               	incf	stepper2_back@i+1,f,c
  1004  001F8E  BE69               	btfsc	stepper2_back@i+1,7,c
  1005  001F90  D7F5               	goto	l2584
  1006  001F92  5069               	movf	stepper2_back@i+1,w,c
  1007  001F94  E104               	bnz	u1550
  1008  001F96  0E05               	movlw	5
  1009  001F98  5C68               	subwf	stepper2_back@i,w,c
  1010  001F9A  A0D8               	btfss	status,0,c
  1011  001F9C  D7EF               	goto	l2584
  1012  001F9E                     u1550:
  1013                           
  1014                           ;main.c: 574:             printf("cnt is %d", count_stepper);
  1015  001F9E  0E46               	movlw	low STR_1
  1016  001FA0  6E5C               	movwf	printf@fmt,c
  1017  001FA2  0E10               	movlw	high STR_1
  1018  001FA4  6E5D               	movwf	printf@fmt+1,c
  1019  001FA6  C066  F05E         	movff	stepper2_back@count_stepper,?_printf+2
  1020  001FAA  C067  F05F         	movff	stepper2_back@count_stepper+1,?_printf+3
  1021  001FAE  ECF9  F010         	call	_printf	;wreg free
  1022                           
  1023                           ;main.c: 575:             count_stepper++;
  1024  001FB2  4A66               	infsnz	stepper2_back@count_stepper,f,c
  1025  001FB4  2A67               	incf	stepper2_back@count_stepper+1,f,c
  1026  001FB6  0012               	return		;funcret
  1027  001FB8                     __end_of_stepper2_back:
  1028                           	opt callstack 0
  1029                           
  1030 ;; *************** function _stepper2 *****************
  1031 ;; Defined at:
  1032 ;;		line 497 in file "main.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;  direction       1    wreg     unsigned char 
  1035 ;;  steps2_adj      2   99[COMRAM] int 
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;  direction       1  112[COMRAM] unsigned char 
  1038 ;;  i               2  108[COMRAM] int 
  1039 ;;  i               2  106[COMRAM] int 
  1040 ;;  count_steppe    2  110[COMRAM] int 
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  1    wreg      void 
  1043 ;; Registers used:
  1044 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1050 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1051 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1052 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1053 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1054 ;;Total ram usage:       14 bytes
  1055 ;; Hardware stack levels used:    1
  1056 ;; Hardware stack levels required when called:   11
  1057 ;; This function calls:
  1058 ;;		_full_drive
  1059 ;;		_lcdInst
  1060 ;;		_printf
  1061 ;; This function is called by:
  1062 ;;		_main
  1063 ;; This function uses a non-reentrant model
  1064 ;;
  1065                           
  1066                           	psect	text3
  1067  00195E                     __ptext3:
  1068                           	opt callstack 0
  1069  00195E                     _stepper2:
  1070                           	opt callstack 19
  1071                           
  1072                           ;incstack = 0
  1073                           ;stepper2@direction stored from wreg
  1074  00195E  6E71               	movwf	stepper2@direction,c
  1075                           
  1076                           ;main.c: 498:     int count_stepper = 0;
  1077  001960  0E00               	movlw	0
  1078  001962  6E70               	movwf	stepper2@count_stepper+1,c
  1079  001964  0E00               	movlw	0
  1080  001966  6E6F               	movwf	stepper2@count_stepper,c
  1081  001968                     l2524:
  1082                           
  1083                           ;main.c: 500:         if (count_stepper<1){
  1084  001968  BE70               	btfsc	stepper2@count_stepper+1,7,c
  1085  00196A  D005               	goto	u1500
  1086  00196C  5070               	movf	stepper2@count_stepper+1,w,c
  1087  00196E  E102               	bnz	u1501
  1088  001970  046F               	decf	stepper2@count_stepper,w,c
  1089  001972  B0D8               	btfsc	status,0,c
  1090  001974                     u1501:
  1091  001974  0012               	return	
  1092  001976                     u1500:
  1093                           
  1094                           ;main.c: 501:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1095  001976  0E01               	movlw	1
  1096  001978  EC26  F011         	call	_lcdInst
  1097  00197C  0E11               	movlw	17
  1098  00197E  6E66               	movwf	??_stepper2& (0+255),c
  1099  001980  0E3A               	movlw	58
  1100  001982                     u1667:
  1101  001982  2EE8               	decfsz	wreg,f,c
  1102  001984  D7FE               	bra	u1667
  1103  001986  2E66               	decfsz	??_stepper2& (0+255),f,c
  1104  001988  D7FC               	bra	u1667
  1105  00198A  D000               	nop2	
  1106                           
  1107                           ;main.c: 502:             printf("step1");
  1108  00198C  0E50               	movlw	low STR_5
  1109  00198E  6E5C               	movwf	printf@fmt,c
  1110  001990  0E10               	movlw	high STR_5
  1111  001992  6E5D               	movwf	printf@fmt+1,c
  1112  001994  ECF9  F010         	call	_printf	;wreg free
  1113  001998  0EC0               	movlw	192
  1114  00199A  EC26  F011         	call	_lcdInst
  1115                           
  1116                           ;main.c: 504:             printf("Step speed %d",4);
  1117  00199E  0E07               	movlw	low STR_6
  1118  0019A0  6E5C               	movwf	printf@fmt,c
  1119  0019A2  0E10               	movlw	high STR_6
  1120  0019A4  6E5D               	movwf	printf@fmt+1,c
  1121  0019A6  0E00               	movlw	0
  1122  0019A8  6E5F               	movwf	?_printf+3,c
  1123  0019AA  0E04               	movlw	4
  1124  0019AC  6E5E               	movwf	?_printf+2,c
  1125  0019AE  ECF9  F010         	call	_printf	;wreg free
  1126                           
  1127                           ;main.c: 505:             if (direction == 0){
  1128  0019B2  5071               	movf	stepper2@direction,w,c
  1129  0019B4  A4D8               	btfss	status,2,c
  1130  0019B6  D024               	goto	l2550
  1131                           
  1132                           ;main.c: 506:                 for(int i=0;i<steps2_adj;i++){
  1133  0019B8  0E00               	movlw	0
  1134  0019BA  6E6C               	movwf	stepper2@i+1,c
  1135  0019BC  0E00               	movlw	0
  1136  0019BE  6E6B               	movwf	stepper2@i,c
  1137  0019C0  D009               	goto	l2544
  1138  0019C2                     l2540:
  1139                           
  1140                           ;main.c: 508:                 full_drive(direction, 2);
  1141  0019C2  0E00               	movlw	0
  1142  0019C4  6E02               	movwf	full_drive@stepper_no+1,c
  1143  0019C6  0E02               	movlw	2
  1144  0019C8  6E01               	movwf	full_drive@stepper_no,c
  1145  0019CA  5071               	movf	stepper2@direction,w,c
  1146  0019CC  EC2C  F008         	call	_full_drive
  1147                           
  1148                           ;main.c: 510:             }
  1149  0019D0  4A6B               	infsnz	stepper2@i,f,c
  1150  0019D2  2A6C               	incf	stepper2@i+1,f,c
  1151  0019D4                     l2544:
  1152  0019D4  5064               	movf	stepper2@steps2_adj,w,c
  1153  0019D6  5C6B               	subwf	stepper2@i,w,c
  1154  0019D8  506C               	movf	stepper2@i+1,w,c
  1155  0019DA  0A80               	xorlw	128
  1156  0019DC  6E66               	movwf	??_stepper2& (0+255),c
  1157  0019DE  5065               	movf	stepper2@steps2_adj+1,w,c
  1158  0019E0  0A80               	xorlw	128
  1159  0019E2  5866               	subwfb	??_stepper2& (0+255),w,c
  1160  0019E4  A0D8               	btfss	status,0,c
  1161  0019E6  D7ED               	goto	l2540
  1162                           
  1163                           ;main.c: 511:             printf("cnt is %d", count_stepper);
  1164  0019E8  0E46               	movlw	low STR_1
  1165  0019EA  6E5C               	movwf	printf@fmt,c
  1166  0019EC  0E10               	movlw	high STR_1
  1167  0019EE  6E5D               	movwf	printf@fmt+1,c
  1168  0019F0  C06F  F05E         	movff	stepper2@count_stepper,?_printf+2
  1169  0019F4  C070  F05F         	movff	stepper2@count_stepper+1,?_printf+3
  1170  0019F8  ECF9  F010         	call	_printf	;wreg free
  1171                           
  1172                           ;main.c: 512:             count_stepper++;
  1173  0019FC  4A6F               	infsnz	stepper2@count_stepper,f,c
  1174  0019FE  2A70               	incf	stepper2@count_stepper+1,f,c
  1175  001A00                     l2550:
  1176                           
  1177                           ;main.c: 514:             if (direction == 1){
  1178  001A00  0471               	decf	stepper2@direction,w,c
  1179  001A02  A4D8               	btfss	status,2,c
  1180  001A04  D7B1               	goto	l2524
  1181                           
  1182                           ;main.c: 515:                 for(int i=0;i<steps2_adj-(5);i++){
  1183  001A06  0E00               	movlw	0
  1184  001A08  6E6E               	movwf	stepper2@i_229+1,c
  1185  001A0A  0E00               	movlw	0
  1186  001A0C  6E6D               	movwf	stepper2@i_229,c
  1187  001A0E  D009               	goto	l2558
  1188  001A10                     l2554:
  1189                           
  1190                           ;main.c: 517:                     full_drive(direction, 2);
  1191  001A10  0E00               	movlw	0
  1192  001A12  6E02               	movwf	full_drive@stepper_no+1,c
  1193  001A14  0E02               	movlw	2
  1194  001A16  6E01               	movwf	full_drive@stepper_no,c
  1195  001A18  5071               	movf	stepper2@direction,w,c
  1196  001A1A  EC2C  F008         	call	_full_drive
  1197                           
  1198                           ;main.c: 519:                 }
  1199  001A1E  4A6D               	infsnz	stepper2@i_229,f,c
  1200  001A20  2A6E               	incf	stepper2@i_229+1,f,c
  1201  001A22                     l2558:
  1202  001A22  0EFB               	movlw	251
  1203  001A24  6E66               	movwf	??_stepper2& (0+255),c
  1204  001A26  0EFF               	movlw	255
  1205  001A28  6E67               	movwf	(??_stepper2+1)& (0+255),c
  1206  001A2A  C064  F068         	movff	stepper2@steps2_adj,??_stepper2+2
  1207  001A2E  C065  F069         	movff	stepper2@steps2_adj+1,??_stepper2+3
  1208  001A32  5066               	movf	??_stepper2,w,c
  1209  001A34  2668               	addwf	??_stepper2+2,f,c
  1210  001A36  5067               	movf	??_stepper2+1,w,c
  1211  001A38  2269               	addwfc	??_stepper2+3,f,c
  1212  001A3A  5068               	movf	??_stepper2+2,w,c
  1213  001A3C  5C6D               	subwf	stepper2@i_229,w,c
  1214  001A3E  506E               	movf	stepper2@i_229+1,w,c
  1215  001A40  0A80               	xorlw	128
  1216  001A42  6E6A               	movwf	(??_stepper2+4)& (0+255),c
  1217  001A44  5069               	movf	??_stepper2+3,w,c
  1218  001A46  0A80               	xorlw	128
  1219  001A48  586A               	subwfb	(??_stepper2+4)& (0+255),w,c
  1220  001A4A  A0D8               	btfss	status,0,c
  1221  001A4C  D7E1               	goto	l2554
  1222                           
  1223                           ;main.c: 520:                 printf("cnt is %d", count_stepper);
  1224  001A4E  0E46               	movlw	low STR_1
  1225  001A50  6E5C               	movwf	printf@fmt,c
  1226  001A52  0E10               	movlw	high STR_1
  1227  001A54  6E5D               	movwf	printf@fmt+1,c
  1228  001A56  C06F  F05E         	movff	stepper2@count_stepper,?_printf+2
  1229  001A5A  C070  F05F         	movff	stepper2@count_stepper+1,?_printf+3
  1230  001A5E  ECF9  F010         	call	_printf	;wreg free
  1231                           
  1232                           ;main.c: 521:                 count_stepper++;
  1233  001A62  4A6F               	infsnz	stepper2@count_stepper,f,c
  1234  001A64  2A70               	incf	stepper2@count_stepper+1,f,c
  1235  001A66  D780               	goto	l2524
  1236  001A68                     __end_of_stepper2:
  1237                           	opt callstack 0
  1238                           
  1239 ;; *************** function _stepper *****************
  1240 ;; Defined at:
  1241 ;;		line 459 in file "main.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;		None
  1244 ;; Auto vars:     Size  Location     Type
  1245 ;;  i               2  100[COMRAM] int 
  1246 ;;  count_steppe    2  102[COMRAM] int 
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      void 
  1249 ;; Registers used:
  1250 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1258 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1259 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1260 ;;Total ram usage:        5 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:   11
  1263 ;; This function calls:
  1264 ;;		_full_drive
  1265 ;;		_lcdInst
  1266 ;;		_printf
  1267 ;; This function is called by:
  1268 ;;		_main
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           	psect	text4
  1273  001D26                     __ptext4:
  1274                           	opt callstack 0
  1275  001D26                     _stepper:
  1276                           	opt callstack 19
  1277                           
  1278                           ;main.c: 460:     int count_stepper = 0;
  1279                           
  1280                           ;incstack = 0
  1281  001D26  0E00               	movlw	0
  1282  001D28  6E68               	movwf	stepper@count_stepper+1,c
  1283  001D2A  0E00               	movlw	0
  1284  001D2C  6E67               	movwf	stepper@count_stepper,c
  1285  001D2E                     l2484:
  1286                           
  1287                           ;main.c: 463:         if (count_stepper<1){
  1288  001D2E  BE68               	btfsc	stepper@count_stepper+1,7,c
  1289  001D30  D005               	goto	u1480
  1290  001D32  5068               	movf	stepper@count_stepper+1,w,c
  1291  001D34  E143               	bnz	l2512
  1292  001D36  0467               	decf	stepper@count_stepper,w,c
  1293  001D38  B0D8               	btfsc	status,0,c
  1294  001D3A  D040               	goto	l2512
  1295  001D3C                     u1480:
  1296                           
  1297                           ;main.c: 464:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1298  001D3C  0E01               	movlw	1
  1299  001D3E  EC26  F011         	call	_lcdInst
  1300  001D42  0E11               	movlw	17
  1301  001D44  6E64               	movwf	??_stepper& (0+255),c
  1302  001D46  0E3A               	movlw	58
  1303  001D48                     u1677:
  1304  001D48  2EE8               	decfsz	wreg,f,c
  1305  001D4A  D7FE               	bra	u1677
  1306  001D4C  2E64               	decfsz	??_stepper& (0+255),f,c
  1307  001D4E  D7FC               	bra	u1677
  1308  001D50  D000               	nop2	
  1309                           
  1310                           ;main.c: 465:             printf("step1");
  1311  001D52  0E50               	movlw	low STR_5
  1312  001D54  6E5C               	movwf	printf@fmt,c
  1313  001D56  0E10               	movlw	high STR_5
  1314  001D58  6E5D               	movwf	printf@fmt+1,c
  1315  001D5A  ECF9  F010         	call	_printf	;wreg free
  1316  001D5E  0EC0               	movlw	192
  1317  001D60  EC26  F011         	call	_lcdInst
  1318                           
  1319                           ;main.c: 467:             printf("Step speed %d",10);
  1320  001D64  0E07               	movlw	low STR_6
  1321  001D66  6E5C               	movwf	printf@fmt,c
  1322  001D68  0E10               	movlw	high STR_6
  1323  001D6A  6E5D               	movwf	printf@fmt+1,c
  1324  001D6C  0E00               	movlw	0
  1325  001D6E  6E5F               	movwf	?_printf+3,c
  1326  001D70  0E0A               	movlw	10
  1327  001D72  6E5E               	movwf	?_printf+2,c
  1328  001D74  ECF9  F010         	call	_printf	;wreg free
  1329                           
  1330                           ;main.c: 469:             for(int i=0;i<14 +7;i++){
  1331  001D78  0E00               	movlw	0
  1332  001D7A  6E66               	movwf	stepper@i+1,c
  1333  001D7C  0E00               	movlw	0
  1334  001D7E  6E65               	movwf	stepper@i,c
  1335  001D80                     l2502:
  1336                           
  1337                           ;main.c: 471:                 full_drive(0, 1);
  1338  001D80  0E00               	movlw	0
  1339  001D82  6E02               	movwf	full_drive@stepper_no+1,c
  1340  001D84  0E01               	movlw	1
  1341  001D86  6E01               	movwf	full_drive@stepper_no,c
  1342  001D88  0E00               	movlw	0
  1343  001D8A  EC2C  F008         	call	_full_drive
  1344                           
  1345                           ;main.c: 473:             }
  1346  001D8E  4A65               	infsnz	stepper@i,f,c
  1347  001D90  2A66               	incf	stepper@i+1,f,c
  1348  001D92  BE66               	btfsc	stepper@i+1,7,c
  1349  001D94  D7F5               	goto	l2502
  1350  001D96  5066               	movf	stepper@i+1,w,c
  1351  001D98  E104               	bnz	u1490
  1352  001D9A  0E15               	movlw	21
  1353  001D9C  5C65               	subwf	stepper@i,w,c
  1354  001D9E  A0D8               	btfss	status,0,c
  1355  001DA0  D7EF               	goto	l2502
  1356  001DA2                     u1490:
  1357                           
  1358                           ;main.c: 474:             printf("cnt is %d", count_stepper);
  1359  001DA2  0E46               	movlw	low STR_1
  1360  001DA4  6E5C               	movwf	printf@fmt,c
  1361  001DA6  0E10               	movlw	high STR_1
  1362  001DA8  6E5D               	movwf	printf@fmt+1,c
  1363  001DAA  C067  F05E         	movff	stepper@count_stepper,?_printf+2
  1364  001DAE  C068  F05F         	movff	stepper@count_stepper+1,?_printf+3
  1365  001DB2  ECF9  F010         	call	_printf	;wreg free
  1366                           
  1367                           ;main.c: 475:             count_stepper++;
  1368  001DB6  4A67               	infsnz	stepper@count_stepper,f,c
  1369  001DB8  2A68               	incf	stepper@count_stepper+1,f,c
  1370                           
  1371                           ;main.c: 476:         }
  1372  001DBA  D7B9               	goto	l2484
  1373  001DBC                     l2512:
  1374                           
  1375                           ;main.c: 488:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1376  001DBC  0E01               	movlw	1
  1377  001DBE  EC26  F011         	call	_lcdInst
  1378  001DC2  0E11               	movlw	17
  1379  001DC4  6E64               	movwf	??_stepper& (0+255),c
  1380  001DC6  0E3A               	movlw	58
  1381  001DC8                     u1687:
  1382  001DC8  2EE8               	decfsz	wreg,f,c
  1383  001DCA  D7FE               	bra	u1687
  1384  001DCC  2E64               	decfsz	??_stepper& (0+255),f,c
  1385  001DCE  D7FC               	bra	u1687
  1386  001DD0  D000               	nop2	
  1387                           
  1388                           ;main.c: 489:             printf("steps done");
  1389  001DD2  0E3B               	movlw	low STR_8
  1390  001DD4  6E5C               	movwf	printf@fmt,c
  1391  001DD6  0E10               	movlw	high STR_8
  1392  001DD8  6E5D               	movwf	printf@fmt+1,c
  1393  001DDA  ECF9  F010         	call	_printf	;wreg free
  1394  001DDE  0EC0               	movlw	192
  1395  001DE0  EC26  F011         	call	_lcdInst
  1396                           
  1397                           ;main.c: 491:             printf("cnt is %d", count_stepper);
  1398  001DE4  0E46               	movlw	low STR_1
  1399  001DE6  6E5C               	movwf	printf@fmt,c
  1400  001DE8  0E10               	movlw	high STR_1
  1401  001DEA  6E5D               	movwf	printf@fmt+1,c
  1402  001DEC  C067  F05E         	movff	stepper@count_stepper,?_printf+2
  1403  001DF0  C068  F05F         	movff	stepper@count_stepper+1,?_printf+3
  1404  001DF4  ECF9  F010         	call	_printf	;wreg free
  1405                           
  1406                           ;main.c: 492:             break;
  1407  001DF8  0012               	return		;funcret
  1408  001DFA                     __end_of_stepper:
  1409                           	opt callstack 0
  1410                           
  1411 ;; *************** function _printf *****************
  1412 ;; Defined at:
  1413 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;  fmt             2   91[COMRAM] PTR const unsigned char 
  1416 ;;		 -> STR_16(10), STR_15(14), STR_14(6), STR_13(10), 
  1417 ;;		 -> STR_12(10), STR_11(14), STR_10(6), STR_9(10), 
  1418 ;;		 -> STR_8(11), STR_7(10), STR_6(14), STR_5(6), 
  1419 ;;		 -> STR_4(11), STR_3(13), STR_2(14), STR_1(10), 
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;  ap              2   97[COMRAM] PTR void [1]
  1422 ;;		 -> ?_printf(2), 
  1423 ;;  ret             2    0        int 
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  2   91[COMRAM] int 
  1426 ;; Registers used:
  1427 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1428 ;; Tracked objects:
  1429 ;;		On entry : 0/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1433 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1434 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1436 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1437 ;;Total ram usage:        8 bytes
  1438 ;; Hardware stack levels used:    1
  1439 ;; Hardware stack levels required when called:   10
  1440 ;; This function calls:
  1441 ;;		_vfprintf
  1442 ;; This function is called by:
  1443 ;;		_main
  1444 ;;		_stepper
  1445 ;;		_stepper2
  1446 ;;		_stepper2_back
  1447 ;; This function uses a non-reentrant model
  1448 ;;
  1449                           
  1450                           	psect	text5
  1451  0021F2                     __ptext5:
  1452                           	opt callstack 0
  1453  0021F2                     _printf:
  1454                           	opt callstack 19
  1455                           
  1456                           ;incstack = 0
  1457  0021F2  0E5E               	movlw	low (?_printf+2)
  1458  0021F4  6E62               	movwf	printf@ap,c
  1459  0021F6  0E00               	movlw	high (?_printf+2)
  1460  0021F8  6E63               	movwf	printf@ap+1,c
  1461  0021FA  0E00               	movlw	0
  1462  0021FC  6E54               	movwf	vfprintf@fp,c
  1463  0021FE  0E00               	movlw	0
  1464  002200  6E55               	movwf	vfprintf@fp+1,c
  1465  002202  C05C  F056         	movff	printf@fmt,vfprintf@fmt
  1466  002206  C05D  F057         	movff	printf@fmt+1,vfprintf@fmt+1
  1467  00220A  0E62               	movlw	low printf@ap
  1468  00220C  6E58               	movwf	vfprintf@ap,c
  1469  00220E  0E00               	movlw	high printf@ap
  1470  002210  6E59               	movwf	vfprintf@ap+1,c
  1471  002212  EC47  F010         	call	_vfprintf	;wreg free
  1472  002216  0012               	return		;funcret
  1473  002218                     __end_of_printf:
  1474                           	opt callstack 0
  1475                           
  1476 ;; *************** function _vfprintf *****************
  1477 ;; Defined at:
  1478 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;  fp              2   83[COMRAM] PTR struct _IO_FILE
  1481 ;;		 -> NULL(0), 
  1482 ;;  fmt             2   85[COMRAM] PTR const unsigned char 
  1483 ;;		 -> STR_16(10), STR_15(14), STR_14(6), STR_13(10), 
  1484 ;;		 -> STR_12(10), STR_11(14), STR_10(6), STR_9(10), 
  1485 ;;		 -> STR_8(11), STR_7(10), STR_6(14), STR_5(6), 
  1486 ;;		 -> STR_4(11), STR_3(13), STR_2(14), STR_1(10), 
  1487 ;;  ap              2   87[COMRAM] PTR PTR void 
  1488 ;;		 -> printf@ap(2), 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;  cfmt            2   89[COMRAM] PTR unsigned char 
  1491 ;;		 -> STR_16(10), STR_15(14), STR_14(6), STR_13(10), 
  1492 ;;		 -> STR_12(10), STR_11(14), STR_10(6), STR_9(10), 
  1493 ;;		 -> STR_8(11), STR_7(10), STR_6(14), STR_5(6), 
  1494 ;;		 -> STR_4(11), STR_3(13), STR_2(14), STR_1(10), 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  2   83[COMRAM] int 
  1497 ;; Registers used:
  1498 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1504 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;Total ram usage:        8 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    9
  1511 ;; This function calls:
  1512 ;;		_vfpfcnvrt
  1513 ;; This function is called by:
  1514 ;;		_printf
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text6
  1519  00208E                     __ptext6:
  1520                           	opt callstack 0
  1521  00208E                     _vfprintf:
  1522                           	opt callstack 19
  1523                           
  1524                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1525                           
  1526                           ;incstack = 0
  1527  00208E  C056  F05A         	movff	vfprintf@fmt,vfprintf@cfmt
  1528  002092  C057  F05B         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1529                           
  1530                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1531  002096  0E00               	movlw	0
  1532  002098  6E75               	movwf	_nout+1,c
  1533  00209A  0E00               	movlw	0
  1534  00209C  6E74               	movwf	_nout,c
  1535                           
  1536                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1537  00209E  D012               	goto	l2172
  1538  0020A0                     l2170:
  1539                           
  1540                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1541  0020A0  C054  F044         	movff	vfprintf@fp,vfpfcnvrt@fp
  1542  0020A4  C055  F045         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1543  0020A8  0E5A               	movlw	low vfprintf@cfmt
  1544  0020AA  6E46               	movwf	vfpfcnvrt@fmt,c
  1545  0020AC  0E00               	movlw	high vfprintf@cfmt
  1546  0020AE  6E47               	movwf	vfpfcnvrt@fmt+1,c
  1547  0020B0  C058  F048         	movff	vfprintf@ap,vfpfcnvrt@ap
  1548  0020B4  C059  F049         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1549  0020B8  ECB9  F00A         	call	_vfpfcnvrt	;wreg free
  1550  0020BC  5044               	movf	?_vfpfcnvrt,w,c
  1551  0020BE  2674               	addwf	_nout,f,c
  1552  0020C0  5045               	movf	?_vfpfcnvrt+1,w,c
  1553  0020C2  2275               	addwfc	_nout+1,f,c
  1554  0020C4                     l2172:
  1555                           
  1556                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1557  0020C4  C05A  FFF6         	movff	vfprintf@cfmt,tblptrl
  1558  0020C8  C05B  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1559  0020CC                     	if	0	;tblptru may be non-zero
  1560  0020CC                     	endif
  1561  0020CC                     	if	0	;tblptru may be non-zero
  1562  0020CC                     	endif
  1563  0020CC  0008               	tblrd		*
  1564  0020CE  50F5               	movf	tablat,w,c
  1565  0020D0  0900               	iorlw	0
  1566  0020D2  A4D8               	btfss	status,2,c
  1567  0020D4  D7E5               	goto	l2170
  1568                           
  1569                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1570  0020D6  C074  F054         	movff	_nout,?_vfprintf
  1571  0020DA  C075  F055         	movff	_nout+1,?_vfprintf+1
  1572  0020DE  0012               	return		;funcret
  1573  0020E0                     __end_of_vfprintf:
  1574                           	opt callstack 0
  1575                           
  1576 ;; *************** function _vfpfcnvrt *****************
  1577 ;; Defined at:
  1578 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;  fp              2   67[COMRAM] PTR struct _IO_FILE
  1581 ;;		 -> NULL(0), 
  1582 ;;  fmt             2   69[COMRAM] PTR PTR unsigned char 
  1583 ;;		 -> vfprintf@cfmt(2), 
  1584 ;;  ap              2   71[COMRAM] PTR PTR void 
  1585 ;;		 -> printf@ap(2), 
  1586 ;; Auto vars:     Size  Location     Type
  1587 ;;  ll              8   75[COMRAM] long long 
  1588 ;;  llu             8    0        unsigned long long 
  1589 ;;  f               4    0        unsigned long long 
  1590 ;;  vp              3    0        PTR void 
  1591 ;;  ct              3    0        unsigned char [3]
  1592 ;;  cp              3    0        PTR unsigned char 
  1593 ;;  i               2    0        int 
  1594 ;;  done            2    0        int 
  1595 ;;  c               1    0        unsigned char 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;                  2   67[COMRAM] int 
  1598 ;; Registers used:
  1599 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1605 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1609 ;;Total ram usage:       16 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; Hardware stack levels required when called:    8
  1612 ;; This function calls:
  1613 ;;		_dtoa
  1614 ;;		_fputc
  1615 ;; This function is called by:
  1616 ;;		_vfprintf
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           	psect	text7
  1621  001572                     __ptext7:
  1622                           	opt callstack 0
  1623  001572                     _vfpfcnvrt:
  1624                           	opt callstack 19
  1625                           
  1626                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1627                           
  1628                           ;incstack = 0
  1629  001572  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1630  001576  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1631  00157A  CFDE FFF6          	movff	postinc2,tblptrl
  1632  00157E  CFDD FFF7          	movff	postdec2,tblptrh
  1633  001582                     	if	0	;tblptru may be non-zero
  1634  001582                     	endif
  1635  001582                     	if	0	;tblptru may be non-zero
  1636  001582                     	endif
  1637  001582  0008               	tblrd		*
  1638  001584  50F5               	movf	tablat,w,c
  1639  001586  0A25               	xorlw	37
  1640  001588  A4D8               	btfss	status,2,c
  1641  00158A  D099               	goto	l2158
  1642                           
  1643                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1644  00158C  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1645  001590  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1646  001594  2ADE               	incf	postinc2,f,c
  1647  001596  0E00               	movlw	0
  1648  001598  22DD               	addwfc	postdec2,f,c
  1649                           
  1650                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1651  00159A  0E00               	movlw	0
  1652  00159C  6E77               	movwf	_width+1,c
  1653  00159E  0E00               	movlw	0
  1654  0015A0  6E76               	movwf	_width,c
  1655  0015A2  C076  F07A         	movff	_width,_flags
  1656  0015A6  C077  F07B         	movff	_width+1,_flags+1
  1657                           
  1658                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1659  0015AA  6878               	setf	_prec,c
  1660  0015AC  6879               	setf	_prec+1,c
  1661                           
  1662                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1663  0015AE  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1664  0015B2  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1665  0015B6  CFDE FFF6          	movff	postinc2,tblptrl
  1666  0015BA  CFDD FFF7          	movff	postdec2,tblptrh
  1667  0015BE                     	if	0	;tblptru may be non-zero
  1668  0015BE                     	endif
  1669  0015BE                     	if	0	;tblptru may be non-zero
  1670  0015BE                     	endif
  1671  0015BE  0008               	tblrd		*
  1672  0015C0  50F5               	movf	tablat,w,c
  1673  0015C2  0A64               	xorlw	100
  1674  0015C4  B4D8               	btfsc	status,2,c
  1675  0015C6  D00D               	goto	u1240
  1676  0015C8  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1677  0015CC  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1678  0015D0  CFDE FFF6          	movff	postinc2,tblptrl
  1679  0015D4  CFDD FFF7          	movff	postdec2,tblptrh
  1680  0015D8                     	if	0	;tblptru may be non-zero
  1681  0015D8                     	endif
  1682  0015D8                     	if	0	;tblptru may be non-zero
  1683  0015D8                     	endif
  1684  0015D8  0008               	tblrd		*
  1685  0015DA  50F5               	movf	tablat,w,c
  1686  0015DC  0A69               	xorlw	105
  1687  0015DE  A4D8               	btfss	status,2,c
  1688  0015E0  D03F               	goto	l2142
  1689  0015E2                     u1240:
  1690                           
  1691                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1692  0015E2  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1693  0015E6  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1694  0015EA  2ADE               	incf	postinc2,f,c
  1695  0015EC  0E00               	movlw	0
  1696  0015EE  22DD               	addwfc	postdec2,f,c
  1697                           
  1698                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1699  0015F0  C048  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1700  0015F4  C049  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1701  0015F8  CFDF F04A          	movff	indf2,??_vfpfcnvrt
  1702  0015FC  0E02               	movlw	2
  1703  0015FE  26DE               	addwf	postinc2,f,c
  1704  001600  CFDF F04B          	movff	indf2,??_vfpfcnvrt+1
  1705  001604  0E00               	movlw	0
  1706  001606  22DD               	addwfc	postdec2,f,c
  1707  001608  C04A  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1708  00160C  C04B  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1709  001610  CFDE F04C          	movff	postinc2,vfpfcnvrt@ll
  1710  001614  CFDD F04D          	movff	postdec2,vfpfcnvrt@ll+1
  1711  001618  0E00               	movlw	0
  1712  00161A  BE4D               	btfsc	vfpfcnvrt@ll+1,7,c
  1713  00161C  0EFF               	movlw	-1
  1714  00161E  6E4E               	movwf	vfpfcnvrt@ll+2,c
  1715  001620  6E4F               	movwf	vfpfcnvrt@ll+3,c
  1716  001622  6E50               	movwf	vfpfcnvrt@ll+4,c
  1717  001624  6E51               	movwf	vfpfcnvrt@ll+5,c
  1718  001626  6E52               	movwf	vfpfcnvrt@ll+6,c
  1719  001628  6E53               	movwf	vfpfcnvrt@ll+7,c
  1720                           
  1721                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1722  00162A  C044  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  1723  00162E  C045  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1724  001632  C04C  F022         	movff	vfpfcnvrt@ll,dtoa@d
  1725  001636  C04D  F023         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1726  00163A  C04E  F024         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1727  00163E  C04F  F025         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1728  001642  C050  F026         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1729  001646  C051  F027         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1730  00164A  C052  F028         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1731  00164E  C053  F029         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1732  001652  EC98  F009         	call	_dtoa	;wreg free
  1733  001656  C020  F044         	movff	?_dtoa,?_vfpfcnvrt
  1734  00165A  C021  F045         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1735  00165E  0012               	return	
  1736  001660                     l2142:
  1737                           
  1738                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1739  001660  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1740  001664  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1741  001668  CFDE FFF6          	movff	postinc2,tblptrl
  1742  00166C  CFDD FFF7          	movff	postdec2,tblptrh
  1743  001670                     	if	0	;tblptru may be non-zero
  1744  001670                     	endif
  1745  001670                     	if	0	;tblptru may be non-zero
  1746  001670                     	endif
  1747  001670  0008               	tblrd		*
  1748  001672  50F5               	movf	tablat,w,c
  1749  001674  0A25               	xorlw	37
  1750  001676  A4D8               	btfss	status,2,c
  1751  001678  D016               	goto	l2152
  1752                           
  1753                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1754  00167A  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1755  00167E  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1756  001682  2ADE               	incf	postinc2,f,c
  1757  001684  0E00               	movlw	0
  1758  001686  22DD               	addwfc	postdec2,f,c
  1759                           
  1760                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1761  001688  0E00               	movlw	0
  1762  00168A  6E06               	movwf	fputc@c+1,c
  1763  00168C  0E25               	movlw	37
  1764  00168E  6E05               	movwf	fputc@c,c
  1765  001690  C044  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1766  001694  C045  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1767  001698  ECDC  F00F         	call	_fputc	;wreg free
  1768  00169C                     l2148:
  1769                           
  1770                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1771  00169C  0E00               	movlw	0
  1772  00169E  6E45               	movwf	?_vfpfcnvrt+1,c
  1773  0016A0  0E01               	movlw	1
  1774  0016A2  6E44               	movwf	?_vfpfcnvrt,c
  1775  0016A4  0012               	return	
  1776  0016A6                     l2152:
  1777                           
  1778                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1779  0016A6  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1780  0016AA  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1781  0016AE  2ADE               	incf	postinc2,f,c
  1782  0016B0  0E00               	movlw	0
  1783  0016B2  22DD               	addwfc	postdec2,f,c
  1784                           
  1785                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1786  0016B4  0E00               	movlw	0
  1787  0016B6  6E45               	movwf	?_vfpfcnvrt+1,c
  1788  0016B8  0E00               	movlw	0
  1789  0016BA  6E44               	movwf	?_vfpfcnvrt,c
  1790  0016BC  0012               	return	
  1791  0016BE                     l2158:
  1792                           
  1793                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1794  0016BE  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1795  0016C2  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1796  0016C6  CFDE FFF6          	movff	postinc2,tblptrl
  1797  0016CA  CFDD FFF7          	movff	postdec2,tblptrh
  1798  0016CE                     	if	0	;tblptru may be non-zero
  1799  0016CE                     	endif
  1800  0016CE                     	if	0	;tblptru may be non-zero
  1801  0016CE                     	endif
  1802  0016CE  0008               	tblrd		*
  1803  0016D0  50F5               	movf	tablat,w,c
  1804  0016D2  6E05               	movwf	fputc@c,c
  1805  0016D4  6A06               	clrf	fputc@c+1,c
  1806  0016D6  C044  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1807  0016DA  C045  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1808  0016DE  ECDC  F00F         	call	_fputc	;wreg free
  1809                           
  1810                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1811  0016E2  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1812  0016E6  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1813  0016EA  2ADE               	incf	postinc2,f,c
  1814  0016EC  0E00               	movlw	0
  1815  0016EE  22DD               	addwfc	postdec2,f,c
  1816  0016F0  D7D5               	goto	l2148
  1817  0016F2                     __end_of_vfpfcnvrt:
  1818                           	opt callstack 0
  1819                           
  1820 ;; *************** function _dtoa *****************
  1821 ;; Defined at:
  1822 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  1825 ;;		 -> NULL(0), 
  1826 ;;  d               8   33[COMRAM] long long 
  1827 ;; Auto vars:     Size  Location     Type
  1828 ;;  n               8   57[COMRAM] long long 
  1829 ;;  i               2   65[COMRAM] int 
  1830 ;;  s               2   55[COMRAM] int 
  1831 ;;  w               2   53[COMRAM] int 
  1832 ;;  p               2   51[COMRAM] int 
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  2   31[COMRAM] int 
  1835 ;; Registers used:
  1836 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1842 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;Total ram usage:       36 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; Hardware stack levels required when called:    7
  1849 ;; This function calls:
  1850 ;;		___aodiv
  1851 ;;		___aomod
  1852 ;;		_abs
  1853 ;;		_pad
  1854 ;; This function is called by:
  1855 ;;		_vfpfcnvrt
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           	psect	text8
  1860  001330                     __ptext8:
  1861                           	opt callstack 0
  1862  001330                     _dtoa:
  1863                           	opt callstack 19
  1864                           
  1865                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1866                           
  1867                           ;incstack = 0
  1868  001330  C022  F03A         	movff	dtoa@d,dtoa@n
  1869  001334  C023  F03B         	movff	dtoa@d+1,dtoa@n+1
  1870  001338  C024  F03C         	movff	dtoa@d+2,dtoa@n+2
  1871  00133C  C025  F03D         	movff	dtoa@d+3,dtoa@n+3
  1872  001340  C026  F03E         	movff	dtoa@d+4,dtoa@n+4
  1873  001344  C027  F03F         	movff	dtoa@d+5,dtoa@n+5
  1874  001348  C028  F040         	movff	dtoa@d+6,dtoa@n+6
  1875  00134C  C029  F041         	movff	dtoa@d+7,dtoa@n+7
  1876                           
  1877                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1878  001350  AE41               	btfss	dtoa@n+7,7,c
  1879  001352  D002               	goto	u1070
  1880  001354  0E01               	movlw	1
  1881  001356  D001               	goto	u1080
  1882  001358                     u1070:
  1883  001358  0E00               	movlw	0
  1884  00135A                     u1080:
  1885  00135A  6E38               	movwf	dtoa@s,c
  1886  00135C  6A39               	clrf	dtoa@s+1,c
  1887                           
  1888                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1889  00135E  5038               	movf	dtoa@s,w,c
  1890  001360  1039               	iorwf	dtoa@s+1,w,c
  1891  001362  B4D8               	btfsc	status,2,c
  1892  001364  D010               	goto	l2068
  1893                           
  1894                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1895  001366  1E41               	comf	dtoa@n+7,f,c
  1896  001368  1E40               	comf	dtoa@n+6,f,c
  1897  00136A  1E3F               	comf	dtoa@n+5,f,c
  1898  00136C  1E3E               	comf	dtoa@n+4,f,c
  1899  00136E  1E3D               	comf	dtoa@n+3,f,c
  1900  001370  1E3C               	comf	dtoa@n+2,f,c
  1901  001372  1E3B               	comf	dtoa@n+1,f,c
  1902  001374  6C3A               	negf	dtoa@n,c
  1903  001376  0E00               	movlw	0
  1904  001378  223B               	addwfc	dtoa@n+1,f,c
  1905  00137A  223C               	addwfc	dtoa@n+2,f,c
  1906  00137C  223D               	addwfc	dtoa@n+3,f,c
  1907  00137E  223E               	addwfc	dtoa@n+4,f,c
  1908  001380  223F               	addwfc	dtoa@n+5,f,c
  1909  001382  2240               	addwfc	dtoa@n+6,f,c
  1910  001384  2241               	addwfc	dtoa@n+7,f,c
  1911  001386                     l2068:
  1912                           
  1913                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1914  001386  AE79               	btfss	_prec+1,7,c
  1915                           
  1916                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1917  001388  927A               	bcf	_flags,1,c
  1918                           
  1919                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1920  00138A  BE79               	btfsc	_prec+1,7,c
  1921  00138C  D005               	goto	u1110
  1922  00138E  5079               	movf	_prec+1,w,c
  1923  001390  E108               	bnz	l298
  1924  001392  0478               	decf	_prec,w,c
  1925  001394  B0D8               	btfsc	status,0,c
  1926  001396  D005               	goto	l298
  1927  001398                     u1110:
  1928  001398  0E00               	movlw	0
  1929  00139A  6E35               	movwf	dtoa@p+1,c
  1930  00139C  0E01               	movlw	1
  1931  00139E  6E34               	movwf	dtoa@p,c
  1932  0013A0  D004               	goto	l300
  1933  0013A2                     l298:
  1934  0013A2  C078  F034         	movff	_prec,dtoa@p
  1935  0013A6  C079  F035         	movff	_prec+1,dtoa@p+1
  1936  0013AA                     l300:
  1937                           
  1938                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1939  0013AA  C076  F036         	movff	_width,dtoa@w
  1940  0013AE  C077  F037         	movff	_width+1,dtoa@w+1
  1941                           
  1942                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1943  0013B2  5038               	movf	dtoa@s,w,c
  1944  0013B4  1039               	iorwf	dtoa@s+1,w,c
  1945  0013B6  A4D8               	btfss	status,2,c
  1946  0013B8  D002               	goto	u1130
  1947  0013BA  A47A               	btfss	_flags,2,c
  1948  0013BC  D003               	goto	l2082
  1949  0013BE                     u1130:
  1950                           
  1951                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1952  0013BE  0636               	decf	dtoa@w,f,c
  1953  0013C0  A0D8               	btfss	status,0,c
  1954  0013C2  0637               	decf	dtoa@w+1,f,c
  1955  0013C4                     l2082:
  1956                           
  1957                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1958  0013C4  0E00               	movlw	0
  1959  0013C6  6E43               	movwf	dtoa@i+1,c
  1960  0013C8  0E1F               	movlw	31
  1961  0013CA  6E42               	movwf	dtoa@i,c
  1962                           
  1963                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1964  0013CC  0E00               	movlw	0
  1965  0013CE  0100               	movlb	0	; () banked
  1966  0013D0  6FAA               	movwf	(_dbuf+31)& (0+255),b
  1967                           
  1968                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1969  0013D2  D07C               	goto	l2096
  1970  0013D4                     l2086:
  1971                           
  1972                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1973  0013D4  0642               	decf	dtoa@i,f,c
  1974  0013D6  A0D8               	btfss	status,0,c
  1975  0013D8  0643               	decf	dtoa@i+1,f,c
  1976                           
  1977                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1978  0013DA  0E8B               	movlw	low _dbuf
  1979  0013DC  2442               	addwf	dtoa@i,w,c
  1980  0013DE  6ED9               	movwf	fsr2l,c
  1981  0013E0  0E00               	movlw	high _dbuf
  1982  0013E2  2043               	addwfc	dtoa@i+1,w,c
  1983  0013E4  6EDA               	movwf	fsr2h,c
  1984  0013E6  C03A  F001         	movff	dtoa@n,___aomod@dividend
  1985  0013EA  C03B  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1986  0013EE  C03C  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1987  0013F2  C03D  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1988  0013F6  C03E  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1989  0013FA  C03F  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1990  0013FE  C040  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1991  001402  C041  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1992  001406  0E0A               	movlw	10
  1993  001408  6E09               	movwf	___aomod@divisor,c
  1994  00140A  0E00               	movlw	0
  1995  00140C  6E0A               	movwf	___aomod@divisor+1,c
  1996  00140E  0E00               	movlw	0
  1997  001410  6E0B               	movwf	___aomod@divisor+2,c
  1998  001412  0E00               	movlw	0
  1999  001414  6E0C               	movwf	___aomod@divisor+3,c
  2000  001416  0E00               	movlw	0
  2001  001418  6E0D               	movwf	___aomod@divisor+4,c
  2002  00141A  0E00               	movlw	0
  2003  00141C  6E0E               	movwf	___aomod@divisor+5,c
  2004  00141E  0E00               	movlw	0
  2005  001420  6E0F               	movwf	___aomod@divisor+6,c
  2006  001422  0E00               	movlw	0
  2007  001424  6E10               	movwf	___aomod@divisor+7,c
  2008  001426  EC1D  F00C         	call	___aomod	;wreg free
  2009  00142A  C001  F02A         	movff	?___aomod,??_dtoa
  2010  00142E  C002  F02B         	movff	?___aomod+1,??_dtoa+1
  2011  001432  C003  F02C         	movff	?___aomod+2,??_dtoa+2
  2012  001436  C004  F02D         	movff	?___aomod+3,??_dtoa+3
  2013  00143A  C005  F02E         	movff	?___aomod+4,??_dtoa+4
  2014  00143E  C006  F02F         	movff	?___aomod+5,??_dtoa+5
  2015  001442  C007  F030         	movff	?___aomod+6,??_dtoa+6
  2016  001446  C008  F031         	movff	?___aomod+7,??_dtoa+7
  2017  00144A  C02A  F013         	movff	??_dtoa,abs@a
  2018  00144E  C02C  F014         	movff	??_dtoa+2,abs@a+1
  2019  001452  EC8C  F010         	call	_abs	;wreg free
  2020  001456  5013               	movf	?_abs,w,c
  2021  001458  0F30               	addlw	48
  2022  00145A  6EDF               	movwf	indf2,c
  2023                           
  2024                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  2025  00145C  0634               	decf	dtoa@p,f,c
  2026  00145E  A0D8               	btfss	status,0,c
  2027  001460  0635               	decf	dtoa@p+1,f,c
  2028                           
  2029                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  2030  001462  0636               	decf	dtoa@w,f,c
  2031  001464  A0D8               	btfss	status,0,c
  2032  001466  0637               	decf	dtoa@w+1,f,c
  2033                           
  2034                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  2035  001468  C03A  F001         	movff	dtoa@n,___aodiv@dividend
  2036  00146C  C03B  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  2037  001470  C03C  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  2038  001474  C03D  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  2039  001478  C03E  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  2040  00147C  C03F  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  2041  001480  C040  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  2042  001484  C041  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  2043  001488  0E0A               	movlw	10
  2044  00148A  6E09               	movwf	___aodiv@divisor,c
  2045  00148C  0E00               	movlw	0
  2046  00148E  6E0A               	movwf	___aodiv@divisor+1,c
  2047  001490  0E00               	movlw	0
  2048  001492  6E0B               	movwf	___aodiv@divisor+2,c
  2049  001494  0E00               	movlw	0
  2050  001496  6E0C               	movwf	___aodiv@divisor+3,c
  2051  001498  0E00               	movlw	0
  2052  00149A  6E0D               	movwf	___aodiv@divisor+4,c
  2053  00149C  0E00               	movlw	0
  2054  00149E  6E0E               	movwf	___aodiv@divisor+5,c
  2055  0014A0  0E00               	movlw	0
  2056  0014A2  6E0F               	movwf	___aodiv@divisor+6,c
  2057  0014A4  0E00               	movlw	0
  2058  0014A6  6E10               	movwf	___aodiv@divisor+7,c
  2059  0014A8  EC79  F00B         	call	___aodiv	;wreg free
  2060  0014AC  C001  F03A         	movff	?___aodiv,dtoa@n
  2061  0014B0  C002  F03B         	movff	?___aodiv+1,dtoa@n+1
  2062  0014B4  C003  F03C         	movff	?___aodiv+2,dtoa@n+2
  2063  0014B8  C004  F03D         	movff	?___aodiv+3,dtoa@n+3
  2064  0014BC  C005  F03E         	movff	?___aodiv+4,dtoa@n+4
  2065  0014C0  C006  F03F         	movff	?___aodiv+5,dtoa@n+5
  2066  0014C4  C007  F040         	movff	?___aodiv+6,dtoa@n+6
  2067  0014C8  C008  F041         	movff	?___aodiv+7,dtoa@n+7
  2068  0014CC                     l2096:
  2069                           
  2070                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2071  0014CC  BE43               	btfsc	dtoa@i+1,7,c
  2072  0014CE  D01F               	goto	u1180
  2073  0014D0  5043               	movf	dtoa@i+1,w,c
  2074  0014D2  E103               	bnz	u1140
  2075  0014D4  0442               	decf	dtoa@i,w,c
  2076  0014D6  A0D8               	btfss	status,0,c
  2077  0014D8  D01A               	goto	u1180
  2078  0014DA                     u1140:
  2079  0014DA  503A               	movf	dtoa@n,w,c
  2080  0014DC  103B               	iorwf	dtoa@n+1,w,c
  2081  0014DE  103C               	iorwf	dtoa@n+2,w,c
  2082  0014E0  103D               	iorwf	dtoa@n+3,w,c
  2083  0014E2  103E               	iorwf	dtoa@n+4,w,c
  2084  0014E4  103F               	iorwf	dtoa@n+5,w,c
  2085  0014E6  1040               	iorwf	dtoa@n+6,w,c
  2086  0014E8  1041               	iorwf	dtoa@n+7,w,c
  2087  0014EA  A4D8               	btfss	status,2,c
  2088  0014EC  D773               	goto	l2086
  2089  0014EE  BE35               	btfsc	dtoa@p+1,7,c
  2090  0014F0  D005               	goto	u1160
  2091  0014F2  5035               	movf	dtoa@p+1,w,c
  2092  0014F4  E102               	bnz	u1161
  2093  0014F6  0434               	decf	dtoa@p,w,c
  2094  0014F8  B0D8               	btfsc	status,0,c
  2095  0014FA                     u1161:
  2096  0014FA  D76C               	goto	l2086
  2097  0014FC                     u1160:
  2098  0014FC  BE37               	btfsc	dtoa@w+1,7,c
  2099  0014FE  D007               	goto	u1180
  2100  001500  5037               	movf	dtoa@w+1,w,c
  2101  001502  E103               	bnz	u1170
  2102  001504  0436               	decf	dtoa@w,w,c
  2103  001506  A0D8               	btfss	status,0,c
  2104  001508  D002               	goto	u1180
  2105  00150A                     u1170:
  2106  00150A  B27A               	btfsc	_flags,1,c
  2107  00150C  D763               	goto	l2086
  2108  00150E                     u1180:
  2109                           
  2110                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  2111  00150E  5038               	movf	dtoa@s,w,c
  2112  001510  1039               	iorwf	dtoa@s+1,w,c
  2113  001512  A4D8               	btfss	status,2,c
  2114  001514  D002               	goto	u1200
  2115  001516  A47A               	btfss	_flags,2,c
  2116  001518  D017               	goto	l2120
  2117  00151A                     u1200:
  2118                           
  2119                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  2120  00151A  0642               	decf	dtoa@i,f,c
  2121  00151C  A0D8               	btfss	status,0,c
  2122  00151E  0643               	decf	dtoa@i+1,f,c
  2123                           
  2124                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  2125  001520  5038               	movf	dtoa@s,w,c
  2126  001522  1039               	iorwf	dtoa@s+1,w,c
  2127  001524  A4D8               	btfss	status,2,c
  2128  001526  D004               	goto	l2116
  2129  001528  0E00               	movlw	0
  2130  00152A  6E33               	movwf	_dtoa$654+1,c
  2131  00152C  0E2B               	movlw	43
  2132  00152E  D003               	goto	L1
  2133  001530                     l2116:
  2134  001530  0E00               	movlw	0
  2135  001532  6E33               	movwf	_dtoa$654+1,c
  2136  001534  0E2D               	movlw	45
  2137  001536                     L1:
  2138  001536  6E32               	movwf	_dtoa$654,c
  2139  001538  0E8B               	movlw	low _dbuf
  2140  00153A  2442               	addwf	dtoa@i,w,c
  2141  00153C  6ED9               	movwf	fsr2l,c
  2142  00153E  0E00               	movlw	high _dbuf
  2143  001540  2043               	addwfc	dtoa@i+1,w,c
  2144  001542  6EDA               	movwf	fsr2h,c
  2145  001544  C032  FFDF         	movff	_dtoa$654,indf2
  2146  001548                     l2120:
  2147                           
  2148                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  2149  001548  C020  F015         	movff	dtoa@fp,pad@fp
  2150  00154C  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  2151  001550  0E8B               	movlw	low _dbuf
  2152  001552  2442               	addwf	dtoa@i,w,c
  2153  001554  6E17               	movwf	pad@buf,c
  2154  001556  0E00               	movlw	high _dbuf
  2155  001558  2043               	addwfc	dtoa@i+1,w,c
  2156  00155A  6E18               	movwf	pad@buf+1,c
  2157  00155C  C036  F019         	movff	dtoa@w,pad@p
  2158  001560  C037  F01A         	movff	dtoa@w+1,pad@p+1
  2159  001564  EC4C  F00F         	call	_pad	;wreg free
  2160  001568  C015  F020         	movff	?_pad,?_dtoa
  2161  00156C  C016  F021         	movff	?_pad+1,?_dtoa+1
  2162  001570  0012               	return		;funcret
  2163  001572                     __end_of_dtoa:
  2164                           	opt callstack 0
  2165                           
  2166 ;; *************** function _pad *****************
  2167 ;; Defined at:
  2168 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  2171 ;;		 -> NULL(0), 
  2172 ;;  buf             2   22[COMRAM] PTR unsigned char 
  2173 ;;		 -> dbuf(32), 
  2174 ;;  p               2   24[COMRAM] int 
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;  w               2   29[COMRAM] int 
  2177 ;;  i               2   27[COMRAM] int 
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  2   20[COMRAM] int 
  2180 ;; Registers used:
  2181 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2187 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2188 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2189 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;Total ram usage:       11 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    6
  2194 ;; This function calls:
  2195 ;;		_fputc
  2196 ;;		_fputs
  2197 ;;		_strlen
  2198 ;; This function is called by:
  2199 ;;		_dtoa
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           	psect	text9
  2204  001E98                     __ptext9:
  2205                           	opt callstack 0
  2206  001E98                     _pad:
  2207                           	opt callstack 19
  2208                           
  2209                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  2210                           
  2211                           ;incstack = 0
  2212  001E98  A07A               	btfss	_flags,0,c
  2213  001E9A  D00A               	goto	l1960
  2214                           
  2215                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  2216  001E9C  C017  F00E         	movff	pad@buf,fputs@s
  2217  001EA0  C018  F00F         	movff	pad@buf+1,fputs@s+1
  2218  001EA4  C015  F010         	movff	pad@fp,fputs@fp
  2219  001EA8  C016  F011         	movff	pad@fp+1,fputs@fp+1
  2220  001EAC  EC70  F010         	call	_fputs	;wreg free
  2221  001EB0                     l1960:
  2222                           
  2223                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  2224  001EB0  BE1A               	btfsc	pad@p+1,7,c
  2225  001EB2  D005               	goto	l1964
  2226  001EB4  C019  F01E         	movff	pad@p,pad@w
  2227  001EB8  C01A  F01F         	movff	pad@p+1,pad@w+1
  2228  001EBC  D004               	goto	l287
  2229  001EBE                     l1964:
  2230  001EBE  0E00               	movlw	0
  2231  001EC0  6E1F               	movwf	pad@w+1,c
  2232  001EC2  0E00               	movlw	0
  2233  001EC4  6E1E               	movwf	pad@w,c
  2234  001EC6                     l287:
  2235                           
  2236                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  2237  001EC6  0E00               	movlw	0
  2238  001EC8  6E1D               	movwf	pad@i+1,c
  2239  001ECA  0E00               	movlw	0
  2240  001ECC  6E1C               	movwf	pad@i,c
  2241                           
  2242                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2243  001ECE  D00C               	goto	l1970
  2244  001ED0                     l1966:
  2245                           
  2246                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  2247  001ED0  0E00               	movlw	0
  2248  001ED2  6E06               	movwf	fputc@c+1,c
  2249  001ED4  0E20               	movlw	32
  2250  001ED6  6E05               	movwf	fputc@c,c
  2251  001ED8  C015  F007         	movff	pad@fp,fputc@fp
  2252  001EDC  C016  F008         	movff	pad@fp+1,fputc@fp+1
  2253  001EE0  ECDC  F00F         	call	_fputc	;wreg free
  2254                           
  2255                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  2256  001EE4  4A1C               	infsnz	pad@i,f,c
  2257  001EE6  2A1D               	incf	pad@i+1,f,c
  2258  001EE8                     l1970:
  2259                           
  2260                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2261  001EE8  501E               	movf	pad@w,w,c
  2262  001EEA  5C1C               	subwf	pad@i,w,c
  2263  001EEC  501D               	movf	pad@i+1,w,c
  2264  001EEE  0A80               	xorlw	128
  2265  001EF0  6E1B               	movwf	??_pad& (0+255),c
  2266  001EF2  501F               	movf	pad@w+1,w,c
  2267  001EF4  0A80               	xorlw	128
  2268  001EF6  581B               	subwfb	??_pad& (0+255),w,c
  2269  001EF8  A0D8               	btfss	status,0,c
  2270  001EFA  D7EA               	goto	l1966
  2271                           
  2272                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  2273  001EFC  B07A               	btfsc	_flags,0,c
  2274  001EFE  D00A               	goto	l1974
  2275                           
  2276                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  2277  001F00  C017  F00E         	movff	pad@buf,fputs@s
  2278  001F04  C018  F00F         	movff	pad@buf+1,fputs@s+1
  2279  001F08  C015  F010         	movff	pad@fp,fputs@fp
  2280  001F0C  C016  F011         	movff	pad@fp+1,fputs@fp+1
  2281  001F10  EC70  F010         	call	_fputs	;wreg free
  2282  001F14                     l1974:
  2283                           
  2284                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  2285  001F14  C017  F001         	movff	pad@buf,strlen@s
  2286  001F18  C018  F002         	movff	pad@buf+1,strlen@s+1
  2287  001F1C  ECBC  F010         	call	_strlen	;wreg free
  2288  001F20  501E               	movf	pad@w,w,c
  2289  001F22  2401               	addwf	?_strlen,w,c
  2290  001F24  6E15               	movwf	?_pad,c
  2291  001F26  501F               	movf	pad@w+1,w,c
  2292  001F28  2002               	addwfc	?_strlen+1,w,c
  2293  001F2A  6E16               	movwf	?_pad+1,c
  2294  001F2C  0012               	return		;funcret
  2295  001F2E                     __end_of_pad:
  2296                           	opt callstack 0
  2297                           
  2298 ;; *************** function _strlen *****************
  2299 ;; Defined at:
  2300 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  2301 ;; Parameters:    Size  Location     Type
  2302 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2303 ;;		 -> dbuf(32), 
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;  a               2    2[COMRAM] PTR const unsigned char 
  2306 ;;		 -> dbuf(32), 
  2307 ;; Return value:  Size  Location     Type
  2308 ;;                  2    0[COMRAM] unsigned int 
  2309 ;; Registers used:
  2310 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2317 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2319 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;Total ram usage:        4 bytes
  2321 ;; Hardware stack levels used:    1
  2322 ;; This function calls:
  2323 ;;		Nothing
  2324 ;; This function is called by:
  2325 ;;		_pad
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text10
  2330  002178                     __ptext10:
  2331                           	opt callstack 0
  2332  002178                     _strlen:
  2333                           	opt callstack 24
  2334                           
  2335                           ;incstack = 0
  2336  002178  C001  F003         	movff	strlen@s,strlen@a
  2337  00217C  C002  F004         	movff	strlen@s+1,strlen@a+1
  2338  002180  D002               	goto	l1950
  2339  002182                     l1948:
  2340  002182  4A01               	infsnz	strlen@s,f,c
  2341  002184  2A02               	incf	strlen@s+1,f,c
  2342  002186                     l1950:
  2343  002186  C001  FFD9         	movff	strlen@s,fsr2l
  2344  00218A  C002  FFDA         	movff	strlen@s+1,fsr2h
  2345  00218E  50DF               	movf	indf2,w,c
  2346  002190  A4D8               	btfss	status,2,c
  2347  002192  D7F7               	goto	l1948
  2348  002194  5003               	movf	strlen@a,w,c
  2349  002196  5C01               	subwf	strlen@s,w,c
  2350  002198  6E01               	movwf	?_strlen,c
  2351  00219A  5004               	movf	strlen@a+1,w,c
  2352  00219C  5802               	subwfb	strlen@s+1,w,c
  2353  00219E  6E02               	movwf	?_strlen+1,c
  2354  0021A0  0012               	return		;funcret
  2355  0021A2                     __end_of_strlen:
  2356                           	opt callstack 0
  2357                           
  2358 ;; *************** function _fputs *****************
  2359 ;; Defined at:
  2360 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;  s               2   13[COMRAM] PTR const unsigned char 
  2363 ;;		 -> dbuf(32), 
  2364 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  2365 ;;		 -> NULL(0), 
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  i               2   18[COMRAM] int 
  2368 ;;  c               1   17[COMRAM] unsigned char 
  2369 ;; Return value:  Size  Location     Type
  2370 ;;                  2   13[COMRAM] int 
  2371 ;; Registers used:
  2372 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2373 ;; Tracked objects:
  2374 ;;		On entry : 0/0
  2375 ;;		On exit  : 0/0
  2376 ;;		Unchanged: 0/0
  2377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2378 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2379 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2381 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2382 ;;Total ram usage:        7 bytes
  2383 ;; Hardware stack levels used:    1
  2384 ;; Hardware stack levels required when called:    5
  2385 ;; This function calls:
  2386 ;;		_fputc
  2387 ;; This function is called by:
  2388 ;;		_pad
  2389 ;; This function uses a non-reentrant model
  2390 ;;
  2391                           
  2392                           	psect	text11
  2393  0020E0                     __ptext11:
  2394                           	opt callstack 0
  2395  0020E0                     _fputs:
  2396                           	opt callstack 19
  2397                           
  2398                           ;incstack = 0
  2399  0020E0  0E00               	movlw	0
  2400  0020E2  6E14               	movwf	fputs@i+1,c
  2401  0020E4  0E00               	movlw	0
  2402  0020E6  6E13               	movwf	fputs@i,c
  2403  0020E8  D00B               	goto	l1944
  2404  0020EA                     l1940:
  2405  0020EA  C012  F005         	movff	fputs@c,fputc@c
  2406  0020EE  6A06               	clrf	fputc@c+1,c
  2407  0020F0  C010  F007         	movff	fputs@fp,fputc@fp
  2408  0020F4  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  2409  0020F8  ECDC  F00F         	call	_fputc	;wreg free
  2410  0020FC  4A13               	infsnz	fputs@i,f,c
  2411  0020FE  2A14               	incf	fputs@i+1,f,c
  2412  002100                     l1944:
  2413  002100  5013               	movf	fputs@i,w,c
  2414  002102  240E               	addwf	fputs@s,w,c
  2415  002104  6ED9               	movwf	fsr2l,c
  2416  002106  5014               	movf	fputs@i+1,w,c
  2417  002108  200F               	addwfc	fputs@s+1,w,c
  2418  00210A  6EDA               	movwf	fsr2h,c
  2419  00210C  50DF               	movf	indf2,w,c
  2420  00210E  6E12               	movwf	fputs@c,c
  2421  002110  5012               	movf	fputs@c,w,c
  2422  002112  B4D8               	btfsc	status,2,c
  2423  002114  0012               	return	
  2424  002116  D7E9               	goto	l1940
  2425  002118                     __end_of_fputs:
  2426                           	opt callstack 0
  2427                           
  2428 ;; *************** function _fputc *****************
  2429 ;; Defined at:
  2430 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  2431 ;; Parameters:    Size  Location     Type
  2432 ;;  c               2    4[COMRAM] int 
  2433 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  2434 ;;		 -> NULL(0), 
  2435 ;; Auto vars:     Size  Location     Type
  2436 ;;		None
  2437 ;; Return value:  Size  Location     Type
  2438 ;;                  2    4[COMRAM] int 
  2439 ;; Registers used:
  2440 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2441 ;; Tracked objects:
  2442 ;;		On entry : 0/0
  2443 ;;		On exit  : 0/0
  2444 ;;		Unchanged: 0/0
  2445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2446 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2448 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2449 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2450 ;;Total ram usage:        9 bytes
  2451 ;; Hardware stack levels used:    1
  2452 ;; Hardware stack levels required when called:    4
  2453 ;; This function calls:
  2454 ;;		_putch
  2455 ;; This function is called by:
  2456 ;;		_pad
  2457 ;;		_vfpfcnvrt
  2458 ;;		_fputs
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462                           	psect	text12
  2463  001FB8                     __ptext12:
  2464                           	opt callstack 0
  2465  001FB8                     _fputc:
  2466                           	opt callstack 22
  2467                           
  2468                           ;incstack = 0
  2469  001FB8  5007               	movf	fputc@fp,w,c
  2470  001FBA  1008               	iorwf	fputc@fp+1,w,c
  2471  001FBC  B4D8               	btfsc	status,2,c
  2472  001FBE  D004               	goto	u840
  2473  001FC0  5007               	movf	fputc@fp,w,c
  2474  001FC2  1008               	iorwf	fputc@fp+1,w,c
  2475  001FC4  A4D8               	btfss	status,2,c
  2476  001FC6  D004               	goto	l1930
  2477  001FC8                     u840:
  2478  001FC8  5005               	movf	fputc@c,w,c
  2479  001FCA  EC20  F011         	call	_putch
  2480  001FCE  0012               	return	
  2481  001FD0                     l1930:
  2482  001FD0  EE20 F004          	lfsr	2,4
  2483  001FD4  5007               	movf	fputc@fp,w,c
  2484  001FD6  26D9               	addwf	fsr2l,f,c
  2485  001FD8  5008               	movf	fputc@fp+1,w,c
  2486  001FDA  22DA               	addwfc	fsr2h,f,c
  2487  001FDC  50DE               	movf	postinc2,w,c
  2488  001FDE  10DE               	iorwf	postinc2,w,c
  2489  001FE0  B4D8               	btfsc	status,2,c
  2490  001FE2  D016               	goto	u860
  2491  001FE4  EE20 F004          	lfsr	2,4
  2492  001FE8  5007               	movf	fputc@fp,w,c
  2493  001FEA  26D9               	addwf	fsr2l,f,c
  2494  001FEC  5008               	movf	fputc@fp+1,w,c
  2495  001FEE  22DA               	addwfc	fsr2h,f,c
  2496  001FF0  EE10 F002          	lfsr	1,2
  2497  001FF4  5007               	movf	fputc@fp,w,c
  2498  001FF6  26E1               	addwf	fsr1l,f,c
  2499  001FF8  5008               	movf	fputc@fp+1,w,c
  2500  001FFA  22E2               	addwfc	fsr1h,f,c
  2501  001FFC  50DE               	movf	postinc2,w,c
  2502  001FFE  5CE6               	subwf	postinc1,w,c
  2503  002000  50E6               	movf	postinc1,w,c
  2504  002002  0A80               	xorlw	128
  2505  002004  6E0D               	movwf	(??_fputc+4)& (0+255),c
  2506  002006  50DE               	movf	postinc2,w,c
  2507  002008  0A80               	xorlw	128
  2508  00200A  580D               	subwfb	(??_fputc+4)& (0+255),w,c
  2509  00200C  B0D8               	btfsc	status,0,c
  2510  00200E  0012               	return	
  2511  002010                     u860:
  2512  002010  EE20 F002          	lfsr	2,2
  2513  002014  5007               	movf	fputc@fp,w,c
  2514  002016  26D9               	addwf	fsr2l,f,c
  2515  002018  5008               	movf	fputc@fp+1,w,c
  2516  00201A  22DA               	addwfc	fsr2h,f,c
  2517  00201C  2ADE               	incf	postinc2,f,c
  2518  00201E  0E00               	movlw	0
  2519  002020  22DD               	addwfc	postdec2,f,c
  2520  002022  0012               	return		;funcret
  2521  002024                     __end_of_fputc:
  2522                           	opt callstack 0
  2523                           
  2524 ;; *************** function _putch *****************
  2525 ;; Defined at:
  2526 ;;		line 102 in file "lcd.c"
  2527 ;; Parameters:    Size  Location     Type
  2528 ;;  data            1    wreg     unsigned char 
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;  data            1    3[COMRAM] unsigned char 
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  1    wreg      void 
  2533 ;; Registers used:
  2534 ;;		wreg, status,2, status,0, cstack
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2541 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2543 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2544 ;;Total ram usage:        1 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    3
  2547 ;; This function calls:
  2548 ;;		_send_byte
  2549 ;; This function is called by:
  2550 ;;		_fputc
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           	psect	text13
  2555  002240                     __ptext13:
  2556                           	opt callstack 0
  2557  002240                     _putch:
  2558                           	opt callstack 22
  2559                           
  2560                           ;incstack = 0
  2561                           ;putch@data stored from wreg
  2562  002240  6E04               	movwf	putch@data,c
  2563                           
  2564                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
  2565  002242  848C               	bsf	3980,2,c	;volatile
  2566                           
  2567                           ;lcd.c: 104:     send_byte((unsigned char)data);
  2568  002244  5004               	movf	putch@data,w,c
  2569  002246  EC17  F011         	call	_send_byte
  2570  00224A  0012               	return		;funcret
  2571  00224C                     __end_of_putch:
  2572                           	opt callstack 0
  2573                           
  2574 ;; *************** function _abs *****************
  2575 ;; Defined at:
  2576 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2577 ;; Parameters:    Size  Location     Type
  2578 ;;  a               2   18[COMRAM] int 
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;		None
  2581 ;; Return value:  Size  Location     Type
  2582 ;;                  2   18[COMRAM] int 
  2583 ;; Registers used:
  2584 ;;		wreg, status,2, status,0
  2585 ;; Tracked objects:
  2586 ;;		On entry : 0/0
  2587 ;;		On exit  : 0/0
  2588 ;;		Unchanged: 0/0
  2589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2590 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;Total ram usage:        4 bytes
  2595 ;; Hardware stack levels used:    1
  2596 ;; This function calls:
  2597 ;;		Nothing
  2598 ;; This function is called by:
  2599 ;;		_dtoa
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text14
  2604  002118                     __ptext14:
  2605                           	opt callstack 0
  2606  002118                     _abs:
  2607                           	opt callstack 25
  2608                           
  2609                           ;incstack = 0
  2610  002118  BE14               	btfsc	abs@a+1,7,c
  2611  00211A  D005               	goto	u930
  2612  00211C  5014               	movf	abs@a+1,w,c
  2613  00211E  E110               	bnz	l1010
  2614  002120  0413               	decf	abs@a,w,c
  2615  002122  B0D8               	btfsc	status,0,c
  2616  002124  D00D               	goto	l1010
  2617  002126                     u930:
  2618  002126  C013  F015         	movff	abs@a,??_abs
  2619  00212A  C014  F016         	movff	abs@a+1,??_abs+1
  2620  00212E  1E15               	comf	??_abs,f,c
  2621  002130  1E16               	comf	??_abs+1,f,c
  2622  002132  4A15               	infsnz	??_abs,f,c
  2623  002134  2A16               	incf	??_abs+1,f,c
  2624  002136  C015  F013         	movff	??_abs,?_abs
  2625  00213A  C016  F014         	movff	??_abs+1,?_abs+1
  2626  00213E  0012               	return	
  2627  002140                     l1010:
  2628  002140  C013  F013         	movff	abs@a,?_abs
  2629  002144  C014  F014         	movff	abs@a+1,?_abs+1
  2630  002148  0012               	return		;funcret
  2631  00214A                     __end_of_abs:
  2632                           	opt callstack 0
  2633                           
  2634 ;; *************** function ___aomod *****************
  2635 ;; Defined at:
  2636 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  dividend        8    0[COMRAM] long long 
  2639 ;;  divisor         8    8[COMRAM] long long 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  sign            1   17[COMRAM] unsigned char 
  2642 ;;  counter         1   16[COMRAM] unsigned char 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  8    0[COMRAM] long long 
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2652 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;Total ram usage:       18 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; This function calls:
  2659 ;;		Nothing
  2660 ;; This function is called by:
  2661 ;;		_dtoa
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text15
  2666  00183A                     __ptext15:
  2667                           	opt callstack 0
  2668  00183A                     ___aomod:
  2669                           	opt callstack 25
  2670                           
  2671                           ;incstack = 0
  2672  00183A  0E00               	movlw	0
  2673  00183C  6E12               	movwf	___aomod@sign,c
  2674  00183E  AE08               	btfss	___aomod@dividend+7,7,c
  2675  001840  D012               	goto	l2034
  2676  001842  1E08               	comf	___aomod@dividend+7,f,c
  2677  001844  1E07               	comf	___aomod@dividend+6,f,c
  2678  001846  1E06               	comf	___aomod@dividend+5,f,c
  2679  001848  1E05               	comf	___aomod@dividend+4,f,c
  2680  00184A  1E04               	comf	___aomod@dividend+3,f,c
  2681  00184C  1E03               	comf	___aomod@dividend+2,f,c
  2682  00184E  1E02               	comf	___aomod@dividend+1,f,c
  2683  001850  6C01               	negf	___aomod@dividend,c
  2684  001852  0E00               	movlw	0
  2685  001854  2202               	addwfc	___aomod@dividend+1,f,c
  2686  001856  2203               	addwfc	___aomod@dividend+2,f,c
  2687  001858  2204               	addwfc	___aomod@dividend+3,f,c
  2688  00185A  2205               	addwfc	___aomod@dividend+4,f,c
  2689  00185C  2206               	addwfc	___aomod@dividend+5,f,c
  2690  00185E  2207               	addwfc	___aomod@dividend+6,f,c
  2691  001860  2208               	addwfc	___aomod@dividend+7,f,c
  2692  001862  0E01               	movlw	1
  2693  001864  6E12               	movwf	___aomod@sign,c
  2694  001866                     l2034:
  2695  001866  AE10               	btfss	___aomod@divisor+7,7,c
  2696  001868  D010               	goto	l2038
  2697  00186A  1E10               	comf	___aomod@divisor+7,f,c
  2698  00186C  1E0F               	comf	___aomod@divisor+6,f,c
  2699  00186E  1E0E               	comf	___aomod@divisor+5,f,c
  2700  001870  1E0D               	comf	___aomod@divisor+4,f,c
  2701  001872  1E0C               	comf	___aomod@divisor+3,f,c
  2702  001874  1E0B               	comf	___aomod@divisor+2,f,c
  2703  001876  1E0A               	comf	___aomod@divisor+1,f,c
  2704  001878  6C09               	negf	___aomod@divisor,c
  2705  00187A  0E00               	movlw	0
  2706  00187C  220A               	addwfc	___aomod@divisor+1,f,c
  2707  00187E  220B               	addwfc	___aomod@divisor+2,f,c
  2708  001880  220C               	addwfc	___aomod@divisor+3,f,c
  2709  001882  220D               	addwfc	___aomod@divisor+4,f,c
  2710  001884  220E               	addwfc	___aomod@divisor+5,f,c
  2711  001886  220F               	addwfc	___aomod@divisor+6,f,c
  2712  001888  2210               	addwfc	___aomod@divisor+7,f,c
  2713  00188A                     l2038:
  2714  00188A  5009               	movf	___aomod@divisor,w,c
  2715  00188C  100A               	iorwf	___aomod@divisor+1,w,c
  2716  00188E  100B               	iorwf	___aomod@divisor+2,w,c
  2717  001890  100C               	iorwf	___aomod@divisor+3,w,c
  2718  001892  100D               	iorwf	___aomod@divisor+4,w,c
  2719  001894  100E               	iorwf	___aomod@divisor+5,w,c
  2720  001896  100F               	iorwf	___aomod@divisor+6,w,c
  2721  001898  1010               	iorwf	___aomod@divisor+7,w,c
  2722  00189A  B4D8               	btfsc	status,2,c
  2723  00189C  D03C               	goto	l2054
  2724  00189E  0E01               	movlw	1
  2725  0018A0  6E11               	movwf	___aomod@counter,c
  2726  0018A2  D00A               	goto	l2044
  2727  0018A4                     l2042:
  2728  0018A4  90D8               	bcf	status,0,c
  2729  0018A6  3609               	rlcf	___aomod@divisor,f,c
  2730  0018A8  360A               	rlcf	___aomod@divisor+1,f,c
  2731  0018AA  360B               	rlcf	___aomod@divisor+2,f,c
  2732  0018AC  360C               	rlcf	___aomod@divisor+3,f,c
  2733  0018AE  360D               	rlcf	___aomod@divisor+4,f,c
  2734  0018B0  360E               	rlcf	___aomod@divisor+5,f,c
  2735  0018B2  360F               	rlcf	___aomod@divisor+6,f,c
  2736  0018B4  3610               	rlcf	___aomod@divisor+7,f,c
  2737  0018B6  2A11               	incf	___aomod@counter,f,c
  2738  0018B8                     l2044:
  2739  0018B8  AE10               	btfss	___aomod@divisor+7,7,c
  2740  0018BA  D7F4               	goto	l2042
  2741  0018BC                     u1040:
  2742  0018BC  5009               	movf	___aomod@divisor,w,c
  2743  0018BE  5C01               	subwf	___aomod@dividend,w,c
  2744  0018C0  500A               	movf	___aomod@divisor+1,w,c
  2745  0018C2  5802               	subwfb	___aomod@dividend+1,w,c
  2746  0018C4  500B               	movf	___aomod@divisor+2,w,c
  2747  0018C6  5803               	subwfb	___aomod@dividend+2,w,c
  2748  0018C8  500C               	movf	___aomod@divisor+3,w,c
  2749  0018CA  5804               	subwfb	___aomod@dividend+3,w,c
  2750  0018CC  500D               	movf	___aomod@divisor+4,w,c
  2751  0018CE  5805               	subwfb	___aomod@dividend+4,w,c
  2752  0018D0  500E               	movf	___aomod@divisor+5,w,c
  2753  0018D2  5806               	subwfb	___aomod@dividend+5,w,c
  2754  0018D4  500F               	movf	___aomod@divisor+6,w,c
  2755  0018D6  5807               	subwfb	___aomod@dividend+6,w,c
  2756  0018D8  5010               	movf	___aomod@divisor+7,w,c
  2757  0018DA  5808               	subwfb	___aomod@dividend+7,w,c
  2758  0018DC  A0D8               	btfss	status,0,c
  2759  0018DE  D010               	goto	l2050
  2760  0018E0  5009               	movf	___aomod@divisor,w,c
  2761  0018E2  5E01               	subwf	___aomod@dividend,f,c
  2762  0018E4  500A               	movf	___aomod@divisor+1,w,c
  2763  0018E6  5A02               	subwfb	___aomod@dividend+1,f,c
  2764  0018E8  500B               	movf	___aomod@divisor+2,w,c
  2765  0018EA  5A03               	subwfb	___aomod@dividend+2,f,c
  2766  0018EC  500C               	movf	___aomod@divisor+3,w,c
  2767  0018EE  5A04               	subwfb	___aomod@dividend+3,f,c
  2768  0018F0  500D               	movf	___aomod@divisor+4,w,c
  2769  0018F2  5A05               	subwfb	___aomod@dividend+4,f,c
  2770  0018F4  500E               	movf	___aomod@divisor+5,w,c
  2771  0018F6  5A06               	subwfb	___aomod@dividend+5,f,c
  2772  0018F8  500F               	movf	___aomod@divisor+6,w,c
  2773  0018FA  5A07               	subwfb	___aomod@dividend+6,f,c
  2774  0018FC  5010               	movf	___aomod@divisor+7,w,c
  2775  0018FE  5A08               	subwfb	___aomod@dividend+7,f,c
  2776  001900                     l2050:
  2777  001900  90D8               	bcf	status,0,c
  2778  001902  3210               	rrcf	___aomod@divisor+7,f,c
  2779  001904  320F               	rrcf	___aomod@divisor+6,f,c
  2780  001906  320E               	rrcf	___aomod@divisor+5,f,c
  2781  001908  320D               	rrcf	___aomod@divisor+4,f,c
  2782  00190A  320C               	rrcf	___aomod@divisor+3,f,c
  2783  00190C  320B               	rrcf	___aomod@divisor+2,f,c
  2784  00190E  320A               	rrcf	___aomod@divisor+1,f,c
  2785  001910  3209               	rrcf	___aomod@divisor,f,c
  2786  001912  2E11               	decfsz	___aomod@counter,f,c
  2787  001914  D7D3               	goto	u1040
  2788  001916                     l2054:
  2789  001916  5012               	movf	___aomod@sign,w,c
  2790  001918  B4D8               	btfsc	status,2,c
  2791  00191A  D010               	goto	l2058
  2792  00191C  1E08               	comf	___aomod@dividend+7,f,c
  2793  00191E  1E07               	comf	___aomod@dividend+6,f,c
  2794  001920  1E06               	comf	___aomod@dividend+5,f,c
  2795  001922  1E05               	comf	___aomod@dividend+4,f,c
  2796  001924  1E04               	comf	___aomod@dividend+3,f,c
  2797  001926  1E03               	comf	___aomod@dividend+2,f,c
  2798  001928  1E02               	comf	___aomod@dividend+1,f,c
  2799  00192A  6C01               	negf	___aomod@dividend,c
  2800  00192C  0E00               	movlw	0
  2801  00192E  2202               	addwfc	___aomod@dividend+1,f,c
  2802  001930  2203               	addwfc	___aomod@dividend+2,f,c
  2803  001932  2204               	addwfc	___aomod@dividend+3,f,c
  2804  001934  2205               	addwfc	___aomod@dividend+4,f,c
  2805  001936  2206               	addwfc	___aomod@dividend+5,f,c
  2806  001938  2207               	addwfc	___aomod@dividend+6,f,c
  2807  00193A  2208               	addwfc	___aomod@dividend+7,f,c
  2808  00193C                     l2058:
  2809  00193C  C001  F001         	movff	___aomod@dividend,?___aomod
  2810  001940  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2811  001944  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2812  001948  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2813  00194C  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2814  001950  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2815  001954  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2816  001958  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2817  00195C  0012               	return		;funcret
  2818  00195E                     __end_of___aomod:
  2819                           	opt callstack 0
  2820                           
  2821 ;; *************** function ___aodiv *****************
  2822 ;; Defined at:
  2823 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2824 ;; Parameters:    Size  Location     Type
  2825 ;;  dividend        8    0[COMRAM] long long 
  2826 ;;  divisor         8    8[COMRAM] long long 
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;  quotient        8   18[COMRAM] long long 
  2829 ;;  sign            1   17[COMRAM] unsigned char 
  2830 ;;  counter         1   16[COMRAM] unsigned char 
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  8    0[COMRAM] long long 
  2833 ;; Registers used:
  2834 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2840 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;Total ram usage:       26 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; This function calls:
  2847 ;;		Nothing
  2848 ;; This function is called by:
  2849 ;;		_dtoa
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           	psect	text16
  2854  0016F2                     __ptext16:
  2855                           	opt callstack 0
  2856  0016F2                     ___aodiv:
  2857                           	opt callstack 25
  2858                           
  2859                           ;incstack = 0
  2860  0016F2  0E00               	movlw	0
  2861  0016F4  6E12               	movwf	___aodiv@sign,c
  2862  0016F6  AE10               	btfss	___aodiv@divisor+7,7,c
  2863  0016F8  D012               	goto	l1990
  2864  0016FA  1E10               	comf	___aodiv@divisor+7,f,c
  2865  0016FC  1E0F               	comf	___aodiv@divisor+6,f,c
  2866  0016FE  1E0E               	comf	___aodiv@divisor+5,f,c
  2867  001700  1E0D               	comf	___aodiv@divisor+4,f,c
  2868  001702  1E0C               	comf	___aodiv@divisor+3,f,c
  2869  001704  1E0B               	comf	___aodiv@divisor+2,f,c
  2870  001706  1E0A               	comf	___aodiv@divisor+1,f,c
  2871  001708  6C09               	negf	___aodiv@divisor,c
  2872  00170A  0E00               	movlw	0
  2873  00170C  220A               	addwfc	___aodiv@divisor+1,f,c
  2874  00170E  220B               	addwfc	___aodiv@divisor+2,f,c
  2875  001710  220C               	addwfc	___aodiv@divisor+3,f,c
  2876  001712  220D               	addwfc	___aodiv@divisor+4,f,c
  2877  001714  220E               	addwfc	___aodiv@divisor+5,f,c
  2878  001716  220F               	addwfc	___aodiv@divisor+6,f,c
  2879  001718  2210               	addwfc	___aodiv@divisor+7,f,c
  2880  00171A  0E01               	movlw	1
  2881  00171C  6E12               	movwf	___aodiv@sign,c
  2882  00171E                     l1990:
  2883  00171E  AE08               	btfss	___aodiv@dividend+7,7,c
  2884  001720  D012               	goto	l1996
  2885  001722  1E08               	comf	___aodiv@dividend+7,f,c
  2886  001724  1E07               	comf	___aodiv@dividend+6,f,c
  2887  001726  1E06               	comf	___aodiv@dividend+5,f,c
  2888  001728  1E05               	comf	___aodiv@dividend+4,f,c
  2889  00172A  1E04               	comf	___aodiv@dividend+3,f,c
  2890  00172C  1E03               	comf	___aodiv@dividend+2,f,c
  2891  00172E  1E02               	comf	___aodiv@dividend+1,f,c
  2892  001730  6C01               	negf	___aodiv@dividend,c
  2893  001732  0E00               	movlw	0
  2894  001734  2202               	addwfc	___aodiv@dividend+1,f,c
  2895  001736  2203               	addwfc	___aodiv@dividend+2,f,c
  2896  001738  2204               	addwfc	___aodiv@dividend+3,f,c
  2897  00173A  2205               	addwfc	___aodiv@dividend+4,f,c
  2898  00173C  2206               	addwfc	___aodiv@dividend+5,f,c
  2899  00173E  2207               	addwfc	___aodiv@dividend+6,f,c
  2900  001740  2208               	addwfc	___aodiv@dividend+7,f,c
  2901  001742  0E01               	movlw	1
  2902  001744  1A12               	xorwf	___aodiv@sign,f,c
  2903  001746                     l1996:
  2904  001746  EE20  F013         	lfsr	2,___aodiv@quotient
  2905  00174A  0E07               	movlw	7
  2906  00174C                     u961:
  2907  00174C  6ADE               	clrf	postinc2,c
  2908  00174E  06E8               	decf	wreg,f,c
  2909  001750  E2FD               	bc	u961
  2910  001752  5009               	movf	___aodiv@divisor,w,c
  2911  001754  100A               	iorwf	___aodiv@divisor+1,w,c
  2912  001756  100B               	iorwf	___aodiv@divisor+2,w,c
  2913  001758  100C               	iorwf	___aodiv@divisor+3,w,c
  2914  00175A  100D               	iorwf	___aodiv@divisor+4,w,c
  2915  00175C  100E               	iorwf	___aodiv@divisor+5,w,c
  2916  00175E  100F               	iorwf	___aodiv@divisor+6,w,c
  2917  001760  1010               	iorwf	___aodiv@divisor+7,w,c
  2918  001762  B4D8               	btfsc	status,2,c
  2919  001764  D046               	goto	l2018
  2920  001766  0E01               	movlw	1
  2921  001768  6E11               	movwf	___aodiv@counter,c
  2922  00176A  D00A               	goto	l2004
  2923  00176C                     l2002:
  2924  00176C  90D8               	bcf	status,0,c
  2925  00176E  3609               	rlcf	___aodiv@divisor,f,c
  2926  001770  360A               	rlcf	___aodiv@divisor+1,f,c
  2927  001772  360B               	rlcf	___aodiv@divisor+2,f,c
  2928  001774  360C               	rlcf	___aodiv@divisor+3,f,c
  2929  001776  360D               	rlcf	___aodiv@divisor+4,f,c
  2930  001778  360E               	rlcf	___aodiv@divisor+5,f,c
  2931  00177A  360F               	rlcf	___aodiv@divisor+6,f,c
  2932  00177C  3610               	rlcf	___aodiv@divisor+7,f,c
  2933  00177E  2A11               	incf	___aodiv@counter,f,c
  2934  001780                     l2004:
  2935  001780  AE10               	btfss	___aodiv@divisor+7,7,c
  2936  001782  D7F4               	goto	l2002
  2937  001784                     u980:
  2938  001784  90D8               	bcf	status,0,c
  2939  001786  3613               	rlcf	___aodiv@quotient,f,c
  2940  001788  3614               	rlcf	___aodiv@quotient+1,f,c
  2941  00178A  3615               	rlcf	___aodiv@quotient+2,f,c
  2942  00178C  3616               	rlcf	___aodiv@quotient+3,f,c
  2943  00178E  3617               	rlcf	___aodiv@quotient+4,f,c
  2944  001790  3618               	rlcf	___aodiv@quotient+5,f,c
  2945  001792  3619               	rlcf	___aodiv@quotient+6,f,c
  2946  001794  361A               	rlcf	___aodiv@quotient+7,f,c
  2947  001796  5009               	movf	___aodiv@divisor,w,c
  2948  001798  5C01               	subwf	___aodiv@dividend,w,c
  2949  00179A  500A               	movf	___aodiv@divisor+1,w,c
  2950  00179C  5802               	subwfb	___aodiv@dividend+1,w,c
  2951  00179E  500B               	movf	___aodiv@divisor+2,w,c
  2952  0017A0  5803               	subwfb	___aodiv@dividend+2,w,c
  2953  0017A2  500C               	movf	___aodiv@divisor+3,w,c
  2954  0017A4  5804               	subwfb	___aodiv@dividend+3,w,c
  2955  0017A6  500D               	movf	___aodiv@divisor+4,w,c
  2956  0017A8  5805               	subwfb	___aodiv@dividend+4,w,c
  2957  0017AA  500E               	movf	___aodiv@divisor+5,w,c
  2958  0017AC  5806               	subwfb	___aodiv@dividend+5,w,c
  2959  0017AE  500F               	movf	___aodiv@divisor+6,w,c
  2960  0017B0  5807               	subwfb	___aodiv@dividend+6,w,c
  2961  0017B2  5010               	movf	___aodiv@divisor+7,w,c
  2962  0017B4  5808               	subwfb	___aodiv@dividend+7,w,c
  2963  0017B6  A0D8               	btfss	status,0,c
  2964  0017B8  D011               	goto	l2014
  2965  0017BA  5009               	movf	___aodiv@divisor,w,c
  2966  0017BC  5E01               	subwf	___aodiv@dividend,f,c
  2967  0017BE  500A               	movf	___aodiv@divisor+1,w,c
  2968  0017C0  5A02               	subwfb	___aodiv@dividend+1,f,c
  2969  0017C2  500B               	movf	___aodiv@divisor+2,w,c
  2970  0017C4  5A03               	subwfb	___aodiv@dividend+2,f,c
  2971  0017C6  500C               	movf	___aodiv@divisor+3,w,c
  2972  0017C8  5A04               	subwfb	___aodiv@dividend+3,f,c
  2973  0017CA  500D               	movf	___aodiv@divisor+4,w,c
  2974  0017CC  5A05               	subwfb	___aodiv@dividend+4,f,c
  2975  0017CE  500E               	movf	___aodiv@divisor+5,w,c
  2976  0017D0  5A06               	subwfb	___aodiv@dividend+5,f,c
  2977  0017D2  500F               	movf	___aodiv@divisor+6,w,c
  2978  0017D4  5A07               	subwfb	___aodiv@dividend+6,f,c
  2979  0017D6  5010               	movf	___aodiv@divisor+7,w,c
  2980  0017D8  5A08               	subwfb	___aodiv@dividend+7,f,c
  2981  0017DA  8013               	bsf	___aodiv@quotient,0,c
  2982  0017DC                     l2014:
  2983  0017DC  90D8               	bcf	status,0,c
  2984  0017DE  3210               	rrcf	___aodiv@divisor+7,f,c
  2985  0017E0  320F               	rrcf	___aodiv@divisor+6,f,c
  2986  0017E2  320E               	rrcf	___aodiv@divisor+5,f,c
  2987  0017E4  320D               	rrcf	___aodiv@divisor+4,f,c
  2988  0017E6  320C               	rrcf	___aodiv@divisor+3,f,c
  2989  0017E8  320B               	rrcf	___aodiv@divisor+2,f,c
  2990  0017EA  320A               	rrcf	___aodiv@divisor+1,f,c
  2991  0017EC  3209               	rrcf	___aodiv@divisor,f,c
  2992  0017EE  2E11               	decfsz	___aodiv@counter,f,c
  2993  0017F0  D7C9               	goto	u980
  2994  0017F2                     l2018:
  2995  0017F2  5012               	movf	___aodiv@sign,w,c
  2996  0017F4  B4D8               	btfsc	status,2,c
  2997  0017F6  D010               	goto	l2022
  2998  0017F8  1E1A               	comf	___aodiv@quotient+7,f,c
  2999  0017FA  1E19               	comf	___aodiv@quotient+6,f,c
  3000  0017FC  1E18               	comf	___aodiv@quotient+5,f,c
  3001  0017FE  1E17               	comf	___aodiv@quotient+4,f,c
  3002  001800  1E16               	comf	___aodiv@quotient+3,f,c
  3003  001802  1E15               	comf	___aodiv@quotient+2,f,c
  3004  001804  1E14               	comf	___aodiv@quotient+1,f,c
  3005  001806  6C13               	negf	___aodiv@quotient,c
  3006  001808  0E00               	movlw	0
  3007  00180A  2214               	addwfc	___aodiv@quotient+1,f,c
  3008  00180C  2215               	addwfc	___aodiv@quotient+2,f,c
  3009  00180E  2216               	addwfc	___aodiv@quotient+3,f,c
  3010  001810  2217               	addwfc	___aodiv@quotient+4,f,c
  3011  001812  2218               	addwfc	___aodiv@quotient+5,f,c
  3012  001814  2219               	addwfc	___aodiv@quotient+6,f,c
  3013  001816  221A               	addwfc	___aodiv@quotient+7,f,c
  3014  001818                     l2022:
  3015  001818  C013  F001         	movff	___aodiv@quotient,?___aodiv
  3016  00181C  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  3017  001820  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  3018  001824  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  3019  001828  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  3020  00182C  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  3021  001830  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  3022  001834  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  3023  001838  0012               	return		;funcret
  3024  00183A                     __end_of___aodiv:
  3025                           	opt callstack 0
  3026                           
  3027 ;; *************** function _full_drive *****************
  3028 ;; Defined at:
  3029 ;;		line 593 in file "main.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;  direction       1    wreg     unsigned char 
  3032 ;;  stepper_no      2    0[COMRAM] int 
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;  direction       1    3[COMRAM] unsigned char 
  3035 ;; Return value:  Size  Location     Type
  3036 ;;                  1    wreg      void 
  3037 ;; Registers used:
  3038 ;;		wreg, status,2, status,0
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3044 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;Total ram usage:        4 bytes
  3049 ;; Hardware stack levels used:    1
  3050 ;; This function calls:
  3051 ;;		Nothing
  3052 ;; This function is called by:
  3053 ;;		_stepper
  3054 ;;		_stepper2
  3055 ;;		_stepper2_back
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           	psect	text17
  3060  001058                     __ptext17:
  3061                           	opt callstack 0
  3062  001058                     _full_drive:
  3063                           	opt callstack 29
  3064                           
  3065                           ;incstack = 0
  3066                           ;full_drive@direction stored from wreg
  3067  001058  6E04               	movwf	full_drive@direction,c
  3068                           
  3069                           ;main.c: 594:     if (stepper_no == 1){
  3070  00105A  0401               	decf	full_drive@stepper_no,w,c
  3071  00105C  1002               	iorwf	full_drive@stepper_no+1,w,c
  3072  00105E  A4D8               	btfss	status,2,c
  3073  001060  D06A               	goto	l2306
  3074                           
  3075                           ;main.c: 595:         if (direction == 1){
  3076  001062  0404               	decf	full_drive@direction,w,c
  3077  001064  A4D8               	btfss	status,2,c
  3078  001066  D032               	goto	l2290
  3079                           
  3080                           ;main.c: 596:             LATA = 0b00000011;
  3081  001068  0E03               	movlw	3
  3082  00106A  6E89               	movwf	3977,c	;volatile
  3083                           
  3084                           ;main.c: 597:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3085  00106C  0E21               	movlw	33
  3086  00106E  6E03               	movwf	??_full_drive& (0+255),c
  3087  001070  0E76               	movlw	118
  3088  001072                     u1697:
  3089  001072  2EE8               	decfsz	wreg,f,c
  3090  001074  D7FE               	bra	u1697
  3091  001076  2E03               	decfsz	??_full_drive& (0+255),f,c
  3092  001078  D7FC               	bra	u1697
  3093  00107A  D000               	nop2	
  3094                           
  3095                           ;main.c: 598:             LATA = 0b00000110;
  3096  00107C  0E06               	movlw	6
  3097  00107E  6E89               	movwf	3977,c	;volatile
  3098                           
  3099                           ;main.c: 599:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3100  001080  0E21               	movlw	33
  3101  001082  6E03               	movwf	??_full_drive& (0+255),c
  3102  001084  0E76               	movlw	118
  3103  001086                     u1707:
  3104  001086  2EE8               	decfsz	wreg,f,c
  3105  001088  D7FE               	bra	u1707
  3106  00108A  2E03               	decfsz	??_full_drive& (0+255),f,c
  3107  00108C  D7FC               	bra	u1707
  3108  00108E  D000               	nop2	
  3109                           
  3110                           ;main.c: 600:             LATA = 0b00001100;
  3111  001090  0E0C               	movlw	12
  3112  001092  6E89               	movwf	3977,c	;volatile
  3113                           
  3114                           ;main.c: 601:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3115  001094  0E21               	movlw	33
  3116  001096  6E03               	movwf	??_full_drive& (0+255),c
  3117  001098  0E76               	movlw	118
  3118  00109A                     u1717:
  3119  00109A  2EE8               	decfsz	wreg,f,c
  3120  00109C  D7FE               	bra	u1717
  3121  00109E  2E03               	decfsz	??_full_drive& (0+255),f,c
  3122  0010A0  D7FC               	bra	u1717
  3123  0010A2  D000               	nop2	
  3124                           
  3125                           ;main.c: 602:             LATA = 0b00001001;
  3126  0010A4  0E09               	movlw	9
  3127  0010A6  6E89               	movwf	3977,c	;volatile
  3128                           
  3129                           ;main.c: 603:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3130  0010A8  0E21               	movlw	33
  3131  0010AA  6E03               	movwf	??_full_drive& (0+255),c
  3132  0010AC  0E76               	movlw	118
  3133  0010AE                     u1727:
  3134  0010AE  2EE8               	decfsz	wreg,f,c
  3135  0010B0  D7FE               	bra	u1727
  3136  0010B2  2E03               	decfsz	??_full_drive& (0+255),f,c
  3137  0010B4  D7FC               	bra	u1727
  3138  0010B6  D000               	nop2	
  3139                           
  3140                           ;main.c: 604:             LATA = 0b00000011;
  3141  0010B8  0E03               	movlw	3
  3142  0010BA  6E89               	movwf	3977,c	;volatile
  3143                           
  3144                           ;main.c: 605:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3145  0010BC  0E21               	movlw	33
  3146  0010BE  6E03               	movwf	??_full_drive& (0+255),c
  3147  0010C0  0E76               	movlw	118
  3148  0010C2                     u1737:
  3149  0010C2  2EE8               	decfsz	wreg,f,c
  3150  0010C4  D7FE               	bra	u1737
  3151  0010C6  2E03               	decfsz	??_full_drive& (0+255),f,c
  3152  0010C8  D7FC               	bra	u1737
  3153  0010CA  D000               	nop2	
  3154  0010CC                     l2290:
  3155                           
  3156                           ;main.c: 607:         if (direction == 0){
  3157  0010CC  5004               	movf	full_drive@direction,w,c
  3158  0010CE  A4D8               	btfss	status,2,c
  3159  0010D0  D032               	goto	l2306
  3160                           
  3161                           ;main.c: 608:             LATA = 0b00001001;
  3162  0010D2  0E09               	movlw	9
  3163  0010D4  6E89               	movwf	3977,c	;volatile
  3164                           
  3165                           ;main.c: 609:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3166  0010D6  0E21               	movlw	33
  3167  0010D8  6E03               	movwf	??_full_drive& (0+255),c
  3168  0010DA  0E76               	movlw	118
  3169  0010DC                     u1747:
  3170  0010DC  2EE8               	decfsz	wreg,f,c
  3171  0010DE  D7FE               	bra	u1747
  3172  0010E0  2E03               	decfsz	??_full_drive& (0+255),f,c
  3173  0010E2  D7FC               	bra	u1747
  3174  0010E4  D000               	nop2	
  3175                           
  3176                           ;main.c: 610:             LATA = 0b00001100;
  3177  0010E6  0E0C               	movlw	12
  3178  0010E8  6E89               	movwf	3977,c	;volatile
  3179                           
  3180                           ;main.c: 611:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3181  0010EA  0E21               	movlw	33
  3182  0010EC  6E03               	movwf	??_full_drive& (0+255),c
  3183  0010EE  0E76               	movlw	118
  3184  0010F0                     u1757:
  3185  0010F0  2EE8               	decfsz	wreg,f,c
  3186  0010F2  D7FE               	bra	u1757
  3187  0010F4  2E03               	decfsz	??_full_drive& (0+255),f,c
  3188  0010F6  D7FC               	bra	u1757
  3189  0010F8  D000               	nop2	
  3190                           
  3191                           ;main.c: 612:             LATA = 0b00000110;
  3192  0010FA  0E06               	movlw	6
  3193  0010FC  6E89               	movwf	3977,c	;volatile
  3194                           
  3195                           ;main.c: 613:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3196  0010FE  0E21               	movlw	33
  3197  001100  6E03               	movwf	??_full_drive& (0+255),c
  3198  001102  0E76               	movlw	118
  3199  001104                     u1767:
  3200  001104  2EE8               	decfsz	wreg,f,c
  3201  001106  D7FE               	bra	u1767
  3202  001108  2E03               	decfsz	??_full_drive& (0+255),f,c
  3203  00110A  D7FC               	bra	u1767
  3204  00110C  D000               	nop2	
  3205                           
  3206                           ;main.c: 614:             LATA = 0b00000011;
  3207  00110E  0E03               	movlw	3
  3208  001110  6E89               	movwf	3977,c	;volatile
  3209                           
  3210                           ;main.c: 615:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3211  001112  0E21               	movlw	33
  3212  001114  6E03               	movwf	??_full_drive& (0+255),c
  3213  001116  0E76               	movlw	118
  3214  001118                     u1777:
  3215  001118  2EE8               	decfsz	wreg,f,c
  3216  00111A  D7FE               	bra	u1777
  3217  00111C  2E03               	decfsz	??_full_drive& (0+255),f,c
  3218  00111E  D7FC               	bra	u1777
  3219  001120  D000               	nop2	
  3220                           
  3221                           ;main.c: 616:             LATA = 0b00001001;
  3222  001122  0E09               	movlw	9
  3223  001124  6E89               	movwf	3977,c	;volatile
  3224                           
  3225                           ;main.c: 617:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3226  001126  0E21               	movlw	33
  3227  001128  6E03               	movwf	??_full_drive& (0+255),c
  3228  00112A  0E76               	movlw	118
  3229  00112C                     u1787:
  3230  00112C  2EE8               	decfsz	wreg,f,c
  3231  00112E  D7FE               	bra	u1787
  3232  001130  2E03               	decfsz	??_full_drive& (0+255),f,c
  3233  001132  D7FC               	bra	u1787
  3234  001134  D000               	nop2	
  3235  001136                     l2306:
  3236                           
  3237                           ;main.c: 620:     if (stepper_no == 2){
  3238  001136  0E02               	movlw	2
  3239  001138  1801               	xorwf	full_drive@stepper_no,w,c
  3240  00113A  1002               	iorwf	full_drive@stepper_no+1,w,c
  3241  00113C  A4D8               	btfss	status,2,c
  3242  00113E  D074               	goto	l2384
  3243                           
  3244                           ;main.c: 621:         if (direction == 1){
  3245  001140  0404               	decf	full_drive@direction,w,c
  3246  001142  A4D8               	btfss	status,2,c
  3247  001144  D037               	goto	l2346
  3248                           
  3249                           ;main.c: 622:             LATCbits.LATC0 = 1;
  3250  001146  808B               	bsf	3979,0,c	;volatile
  3251                           
  3252                           ;main.c: 623:             LATEbits.LATE0 = 1;
  3253  001148  808D               	bsf	3981,0,c	;volatile
  3254                           
  3255                           ;main.c: 624:             LATEbits.LATE1 = 0;
  3256  00114A  928D               	bcf	3981,1,c	;volatile
  3257                           
  3258                           ;main.c: 625:             LATEbits.LATE2 = 0;
  3259  00114C  948D               	bcf	3981,2,c	;volatile
  3260                           
  3261                           ;main.c: 626:             _delay((unsigned long)((4)*(10000000/4000.0)));
  3262  00114E  0E0D               	movlw	13
  3263  001150  6E03               	movwf	??_full_drive& (0+255),c
  3264  001152  0EFC               	movlw	252
  3265  001154                     u1797:
  3266  001154  2EE8               	decfsz	wreg,f,c
  3267  001156  D7FE               	bra	u1797
  3268  001158  2E03               	decfsz	??_full_drive& (0+255),f,c
  3269  00115A  D7FC               	bra	u1797
  3270                           
  3271                           ;main.c: 627:             LATCbits.LATC0 = 0;
  3272  00115C  908B               	bcf	3979,0,c	;volatile
  3273                           
  3274                           ;main.c: 628:             LATEbits.LATE0 = 1;
  3275  00115E  808D               	bsf	3981,0,c	;volatile
  3276                           
  3277                           ;main.c: 629:             LATEbits.LATE1 = 1;
  3278  001160  828D               	bsf	3981,1,c	;volatile
  3279                           
  3280                           ;main.c: 630:             LATEbits.LATE2 = 0;
  3281  001162  948D               	bcf	3981,2,c	;volatile
  3282                           
  3283                           ;main.c: 631:             _delay((unsigned long)((4)*(10000000/4000.0)));
  3284  001164  0E0D               	movlw	13
  3285  001166  6E03               	movwf	??_full_drive& (0+255),c
  3286  001168  0EFC               	movlw	252
  3287  00116A                     u1807:
  3288  00116A  2EE8               	decfsz	wreg,f,c
  3289  00116C  D7FE               	bra	u1807
  3290  00116E  2E03               	decfsz	??_full_drive& (0+255),f,c
  3291  001170  D7FC               	bra	u1807
  3292                           
  3293                           ;main.c: 632:             LATCbits.LATC0 = 0;
  3294  001172  908B               	bcf	3979,0,c	;volatile
  3295                           
  3296                           ;main.c: 633:             LATEbits.LATE0 = 0;
  3297  001174  908D               	bcf	3981,0,c	;volatile
  3298                           
  3299                           ;main.c: 634:             LATEbits.LATE1 = 1;
  3300  001176  828D               	bsf	3981,1,c	;volatile
  3301                           
  3302                           ;main.c: 635:             LATEbits.LATE2 = 1;
  3303  001178  848D               	bsf	3981,2,c	;volatile
  3304                           
  3305                           ;main.c: 636:             _delay((unsigned long)((4)*(10000000/4000.0)));
  3306  00117A  0E0D               	movlw	13
  3307  00117C  6E03               	movwf	??_full_drive& (0+255),c
  3308  00117E  0EFC               	movlw	252
  3309  001180                     u1817:
  3310  001180  2EE8               	decfsz	wreg,f,c
  3311  001182  D7FE               	bra	u1817
  3312  001184  2E03               	decfsz	??_full_drive& (0+255),f,c
  3313  001186  D7FC               	bra	u1817
  3314                           
  3315                           ;main.c: 637:             LATCbits.LATC0 = 1;
  3316  001188  808B               	bsf	3979,0,c	;volatile
  3317                           
  3318                           ;main.c: 638:             LATEbits.LATE0 = 0;
  3319  00118A  908D               	bcf	3981,0,c	;volatile
  3320                           
  3321                           ;main.c: 639:             LATEbits.LATE1 = 0;
  3322  00118C  928D               	bcf	3981,1,c	;volatile
  3323                           
  3324                           ;main.c: 640:             LATEbits.LATE2 = 1;
  3325  00118E  848D               	bsf	3981,2,c	;volatile
  3326                           
  3327                           ;main.c: 641:             _delay((unsigned long)((4)*(10000000/4000.0)));
  3328  001190  0E0D               	movlw	13
  3329  001192  6E03               	movwf	??_full_drive& (0+255),c
  3330  001194  0EFC               	movlw	252
  3331  001196                     u1827:
  3332  001196  2EE8               	decfsz	wreg,f,c
  3333  001198  D7FE               	bra	u1827
  3334  00119A  2E03               	decfsz	??_full_drive& (0+255),f,c
  3335  00119C  D7FC               	bra	u1827
  3336                           
  3337                           ;main.c: 642:             LATCbits.LATC0 = 1;
  3338  00119E  808B               	bsf	3979,0,c	;volatile
  3339                           
  3340                           ;main.c: 643:             LATEbits.LATE0 = 1;
  3341  0011A0  808D               	bsf	3981,0,c	;volatile
  3342                           
  3343                           ;main.c: 644:             LATEbits.LATE1 = 0;
  3344  0011A2  928D               	bcf	3981,1,c	;volatile
  3345                           
  3346                           ;main.c: 645:             LATEbits.LATE2 = 0;
  3347  0011A4  948D               	bcf	3981,2,c	;volatile
  3348                           
  3349                           ;main.c: 646:             _delay((unsigned long)((4)*(10000000/4000.0)));
  3350  0011A6  0E0D               	movlw	13
  3351  0011A8  6E03               	movwf	??_full_drive& (0+255),c
  3352  0011AA  0EFC               	movlw	252
  3353  0011AC                     u1837:
  3354  0011AC  2EE8               	decfsz	wreg,f,c
  3355  0011AE  D7FE               	bra	u1837
  3356  0011B0  2E03               	decfsz	??_full_drive& (0+255),f,c
  3357  0011B2  D7FC               	bra	u1837
  3358  0011B4                     l2346:
  3359                           
  3360                           ;main.c: 648:         if (direction == 0){
  3361  0011B4  5004               	movf	full_drive@direction,w,c
  3362  0011B6  A4D8               	btfss	status,2,c
  3363  0011B8  D037               	goto	l2384
  3364                           
  3365                           ;main.c: 649:             LATCbits.LATC0 = 1;
  3366  0011BA  808B               	bsf	3979,0,c	;volatile
  3367                           
  3368                           ;main.c: 650:             LATEbits.LATE0 = 0;
  3369  0011BC  908D               	bcf	3981,0,c	;volatile
  3370                           
  3371                           ;main.c: 651:             LATEbits.LATE1 = 0;
  3372  0011BE  928D               	bcf	3981,1,c	;volatile
  3373                           
  3374                           ;main.c: 652:             LATEbits.LATE2 = 1;
  3375  0011C0  848D               	bsf	3981,2,c	;volatile
  3376                           
  3377                           ;main.c: 653:             _delay((unsigned long)((4)*(10000000/4000.0)));
  3378  0011C2  0E0D               	movlw	13
  3379  0011C4  6E03               	movwf	??_full_drive& (0+255),c
  3380  0011C6  0EFC               	movlw	252
  3381  0011C8                     u1847:
  3382  0011C8  2EE8               	decfsz	wreg,f,c
  3383  0011CA  D7FE               	bra	u1847
  3384  0011CC  2E03               	decfsz	??_full_drive& (0+255),f,c
  3385  0011CE  D7FC               	bra	u1847
  3386                           
  3387                           ;main.c: 654:             LATCbits.LATC0 = 0;
  3388  0011D0  908B               	bcf	3979,0,c	;volatile
  3389                           
  3390                           ;main.c: 655:             LATEbits.LATE0 = 0;
  3391  0011D2  908D               	bcf	3981,0,c	;volatile
  3392                           
  3393                           ;main.c: 656:             LATEbits.LATE1 = 1;
  3394  0011D4  828D               	bsf	3981,1,c	;volatile
  3395                           
  3396                           ;main.c: 657:             LATEbits.LATE2 = 1;
  3397  0011D6  848D               	bsf	3981,2,c	;volatile
  3398                           
  3399                           ;main.c: 658:             _delay((unsigned long)((4)*(10000000/4000.0)));
  3400  0011D8  0E0D               	movlw	13
  3401  0011DA  6E03               	movwf	??_full_drive& (0+255),c
  3402  0011DC  0EFC               	movlw	252
  3403  0011DE                     u1857:
  3404  0011DE  2EE8               	decfsz	wreg,f,c
  3405  0011E0  D7FE               	bra	u1857
  3406  0011E2  2E03               	decfsz	??_full_drive& (0+255),f,c
  3407  0011E4  D7FC               	bra	u1857
  3408                           
  3409                           ;main.c: 659:             LATCbits.LATC0 = 0;
  3410  0011E6  908B               	bcf	3979,0,c	;volatile
  3411                           
  3412                           ;main.c: 660:             LATEbits.LATE0 = 1;
  3413  0011E8  808D               	bsf	3981,0,c	;volatile
  3414                           
  3415                           ;main.c: 661:             LATEbits.LATE1 = 1;
  3416  0011EA  828D               	bsf	3981,1,c	;volatile
  3417                           
  3418                           ;main.c: 662:             LATEbits.LATE2 = 0;
  3419  0011EC  948D               	bcf	3981,2,c	;volatile
  3420                           
  3421                           ;main.c: 663:             _delay((unsigned long)((4)*(10000000/4000.0)));
  3422  0011EE  0E0D               	movlw	13
  3423  0011F0  6E03               	movwf	??_full_drive& (0+255),c
  3424  0011F2  0EFC               	movlw	252
  3425  0011F4                     u1867:
  3426  0011F4  2EE8               	decfsz	wreg,f,c
  3427  0011F6  D7FE               	bra	u1867
  3428  0011F8  2E03               	decfsz	??_full_drive& (0+255),f,c
  3429  0011FA  D7FC               	bra	u1867
  3430                           
  3431                           ;main.c: 664:             LATCbits.LATC0 = 1;
  3432  0011FC  808B               	bsf	3979,0,c	;volatile
  3433                           
  3434                           ;main.c: 665:             LATEbits.LATE0 = 1;
  3435  0011FE  808D               	bsf	3981,0,c	;volatile
  3436                           
  3437                           ;main.c: 666:             LATEbits.LATE1 = 0;
  3438  001200  928D               	bcf	3981,1,c	;volatile
  3439                           
  3440                           ;main.c: 667:             LATEbits.LATE2 = 0;
  3441  001202  948D               	bcf	3981,2,c	;volatile
  3442                           
  3443                           ;main.c: 668:             _delay((unsigned long)((4)*(10000000/4000.0)));
  3444  001204  0E0D               	movlw	13
  3445  001206  6E03               	movwf	??_full_drive& (0+255),c
  3446  001208  0EFC               	movlw	252
  3447  00120A                     u1877:
  3448  00120A  2EE8               	decfsz	wreg,f,c
  3449  00120C  D7FE               	bra	u1877
  3450  00120E  2E03               	decfsz	??_full_drive& (0+255),f,c
  3451  001210  D7FC               	bra	u1877
  3452                           
  3453                           ;main.c: 669:             LATCbits.LATC0 = 1;
  3454  001212  808B               	bsf	3979,0,c	;volatile
  3455                           
  3456                           ;main.c: 670:             LATEbits.LATE0 = 0;
  3457  001214  908D               	bcf	3981,0,c	;volatile
  3458                           
  3459                           ;main.c: 671:             LATEbits.LATE1 = 0;
  3460  001216  928D               	bcf	3981,1,c	;volatile
  3461                           
  3462                           ;main.c: 672:             LATEbits.LATE2 = 1;
  3463  001218  848D               	bsf	3981,2,c	;volatile
  3464                           
  3465                           ;main.c: 673:             _delay((unsigned long)((4)*(10000000/4000.0)));
  3466  00121A  0E0D               	movlw	13
  3467  00121C  6E03               	movwf	??_full_drive& (0+255),c
  3468  00121E  0EFC               	movlw	252
  3469  001220                     u1887:
  3470  001220  2EE8               	decfsz	wreg,f,c
  3471  001222  D7FE               	bra	u1887
  3472  001224  2E03               	decfsz	??_full_drive& (0+255),f,c
  3473  001226  D7FC               	bra	u1887
  3474  001228                     l2384:
  3475                           
  3476                           ;main.c: 676:     if (stepper_no == 3){
  3477  001228  0E03               	movlw	3
  3478  00122A  1801               	xorwf	full_drive@stepper_no,w,c
  3479  00122C  1002               	iorwf	full_drive@stepper_no+1,w,c
  3480  00122E  A4D8               	btfss	status,2,c
  3481  001230  0012               	return	
  3482                           
  3483                           ;main.c: 677:         if (direction == 0){
  3484  001232  5004               	movf	full_drive@direction,w,c
  3485  001234  A4D8               	btfss	status,2,c
  3486  001236  D03C               	goto	l2424
  3487                           
  3488                           ;main.c: 678:             LATCbits.LATC5 = 1;
  3489  001238  8A8B               	bsf	3979,5,c	;volatile
  3490                           
  3491                           ;main.c: 679:             LATCbits.LATC6 = 0;
  3492  00123A  9C8B               	bcf	3979,6,c	;volatile
  3493                           
  3494                           ;main.c: 680:             LATCbits.LATC7 = 0;
  3495  00123C  9E8B               	bcf	3979,7,c	;volatile
  3496                           
  3497                           ;main.c: 681:             LATAbits.LATA5 = 1;
  3498  00123E  8A89               	bsf	3977,5,c	;volatile
  3499                           
  3500                           ;main.c: 682:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3501  001240  0E21               	movlw	33
  3502  001242  6E03               	movwf	??_full_drive& (0+255),c
  3503  001244  0E76               	movlw	118
  3504  001246                     u1897:
  3505  001246  2EE8               	decfsz	wreg,f,c
  3506  001248  D7FE               	bra	u1897
  3507  00124A  2E03               	decfsz	??_full_drive& (0+255),f,c
  3508  00124C  D7FC               	bra	u1897
  3509  00124E  D000               	nop2	
  3510                           
  3511                           ;main.c: 683:             LATCbits.LATC5 = 1;
  3512  001250  8A8B               	bsf	3979,5,c	;volatile
  3513                           
  3514                           ;main.c: 684:             LATCbits.LATC6 = 1;
  3515  001252  8C8B               	bsf	3979,6,c	;volatile
  3516                           
  3517                           ;main.c: 685:             LATCbits.LATC7 = 0;
  3518  001254  9E8B               	bcf	3979,7,c	;volatile
  3519                           
  3520                           ;main.c: 686:             LATAbits.LATA5 = 0;
  3521  001256  9A89               	bcf	3977,5,c	;volatile
  3522                           
  3523                           ;main.c: 687:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3524  001258  0E21               	movlw	33
  3525  00125A  6E03               	movwf	??_full_drive& (0+255),c
  3526  00125C  0E76               	movlw	118
  3527  00125E                     u1907:
  3528  00125E  2EE8               	decfsz	wreg,f,c
  3529  001260  D7FE               	bra	u1907
  3530  001262  2E03               	decfsz	??_full_drive& (0+255),f,c
  3531  001264  D7FC               	bra	u1907
  3532  001266  D000               	nop2	
  3533                           
  3534                           ;main.c: 688:             LATCbits.LATC5 = 0;
  3535  001268  9A8B               	bcf	3979,5,c	;volatile
  3536                           
  3537                           ;main.c: 689:             LATCbits.LATC6 = 1;
  3538  00126A  8C8B               	bsf	3979,6,c	;volatile
  3539                           
  3540                           ;main.c: 690:             LATCbits.LATC7 = 1;
  3541  00126C  8E8B               	bsf	3979,7,c	;volatile
  3542                           
  3543                           ;main.c: 691:             LATAbits.LATA5 = 0;
  3544  00126E  9A89               	bcf	3977,5,c	;volatile
  3545                           
  3546                           ;main.c: 692:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3547  001270  0E21               	movlw	33
  3548  001272  6E03               	movwf	??_full_drive& (0+255),c
  3549  001274  0E76               	movlw	118
  3550  001276                     u1917:
  3551  001276  2EE8               	decfsz	wreg,f,c
  3552  001278  D7FE               	bra	u1917
  3553  00127A  2E03               	decfsz	??_full_drive& (0+255),f,c
  3554  00127C  D7FC               	bra	u1917
  3555  00127E  D000               	nop2	
  3556                           
  3557                           ;main.c: 693:             LATCbits.LATC5 = 0;
  3558  001280  9A8B               	bcf	3979,5,c	;volatile
  3559                           
  3560                           ;main.c: 694:             LATCbits.LATC6 = 0;
  3561  001282  9C8B               	bcf	3979,6,c	;volatile
  3562                           
  3563                           ;main.c: 695:             LATCbits.LATC7 = 1;
  3564  001284  8E8B               	bsf	3979,7,c	;volatile
  3565                           
  3566                           ;main.c: 696:             LATAbits.LATA5 = 1;
  3567  001286  8A89               	bsf	3977,5,c	;volatile
  3568                           
  3569                           ;main.c: 697:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3570  001288  0E21               	movlw	33
  3571  00128A  6E03               	movwf	??_full_drive& (0+255),c
  3572  00128C  0E76               	movlw	118
  3573  00128E                     u1927:
  3574  00128E  2EE8               	decfsz	wreg,f,c
  3575  001290  D7FE               	bra	u1927
  3576  001292  2E03               	decfsz	??_full_drive& (0+255),f,c
  3577  001294  D7FC               	bra	u1927
  3578  001296  D000               	nop2	
  3579                           
  3580                           ;main.c: 698:             LATCbits.LATC5 = 1;
  3581  001298  8A8B               	bsf	3979,5,c	;volatile
  3582                           
  3583                           ;main.c: 699:             LATCbits.LATC6 = 0;
  3584  00129A  9C8B               	bcf	3979,6,c	;volatile
  3585                           
  3586                           ;main.c: 700:             LATCbits.LATC7 = 0;
  3587  00129C  9E8B               	bcf	3979,7,c	;volatile
  3588                           
  3589                           ;main.c: 701:             LATAbits.LATA5 = 1;
  3590  00129E  8A89               	bsf	3977,5,c	;volatile
  3591                           
  3592                           ;main.c: 702:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3593  0012A0  0E21               	movlw	33
  3594  0012A2  6E03               	movwf	??_full_drive& (0+255),c
  3595  0012A4  0E76               	movlw	118
  3596  0012A6                     u1937:
  3597  0012A6  2EE8               	decfsz	wreg,f,c
  3598  0012A8  D7FE               	bra	u1937
  3599  0012AA  2E03               	decfsz	??_full_drive& (0+255),f,c
  3600  0012AC  D7FC               	bra	u1937
  3601  0012AE  D000               	nop2	
  3602  0012B0                     l2424:
  3603                           
  3604                           ;main.c: 704:         if (direction == 1){
  3605  0012B0  0404               	decf	full_drive@direction,w,c
  3606  0012B2  A4D8               	btfss	status,2,c
  3607  0012B4  0012               	return	
  3608                           
  3609                           ;main.c: 705:             LATCbits.LATC5 = 1;
  3610  0012B6  8A8B               	bsf	3979,5,c	;volatile
  3611                           
  3612                           ;main.c: 706:             LATCbits.LATC6 = 1;
  3613  0012B8  8C8B               	bsf	3979,6,c	;volatile
  3614                           
  3615                           ;main.c: 707:             LATCbits.LATC7 = 0;
  3616  0012BA  9E8B               	bcf	3979,7,c	;volatile
  3617                           
  3618                           ;main.c: 708:             LATAbits.LATA5 = 0;
  3619  0012BC  9A89               	bcf	3977,5,c	;volatile
  3620                           
  3621                           ;main.c: 709:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3622  0012BE  0E21               	movlw	33
  3623  0012C0  6E03               	movwf	??_full_drive& (0+255),c
  3624  0012C2  0E76               	movlw	118
  3625  0012C4                     u1947:
  3626  0012C4  2EE8               	decfsz	wreg,f,c
  3627  0012C6  D7FE               	bra	u1947
  3628  0012C8  2E03               	decfsz	??_full_drive& (0+255),f,c
  3629  0012CA  D7FC               	bra	u1947
  3630  0012CC  D000               	nop2	
  3631                           
  3632                           ;main.c: 710:             LATCbits.LATC5 = 0;
  3633  0012CE  9A8B               	bcf	3979,5,c	;volatile
  3634                           
  3635                           ;main.c: 711:             LATCbits.LATC6 = 1;
  3636  0012D0  8C8B               	bsf	3979,6,c	;volatile
  3637                           
  3638                           ;main.c: 712:             LATCbits.LATC7 = 1;
  3639  0012D2  8E8B               	bsf	3979,7,c	;volatile
  3640                           
  3641                           ;main.c: 713:             LATAbits.LATA5 = 0;
  3642  0012D4  9A89               	bcf	3977,5,c	;volatile
  3643                           
  3644                           ;main.c: 714:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3645  0012D6  0E21               	movlw	33
  3646  0012D8  6E03               	movwf	??_full_drive& (0+255),c
  3647  0012DA  0E76               	movlw	118
  3648  0012DC                     u1957:
  3649  0012DC  2EE8               	decfsz	wreg,f,c
  3650  0012DE  D7FE               	bra	u1957
  3651  0012E0  2E03               	decfsz	??_full_drive& (0+255),f,c
  3652  0012E2  D7FC               	bra	u1957
  3653  0012E4  D000               	nop2	
  3654                           
  3655                           ;main.c: 715:             LATCbits.LATC5 = 0;
  3656  0012E6  9A8B               	bcf	3979,5,c	;volatile
  3657                           
  3658                           ;main.c: 716:             LATCbits.LATC6 = 0;
  3659  0012E8  9C8B               	bcf	3979,6,c	;volatile
  3660                           
  3661                           ;main.c: 717:             LATCbits.LATC7 = 1;
  3662  0012EA  8E8B               	bsf	3979,7,c	;volatile
  3663                           
  3664                           ;main.c: 718:             LATAbits.LATA5 = 1;
  3665  0012EC  8A89               	bsf	3977,5,c	;volatile
  3666                           
  3667                           ;main.c: 719:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3668  0012EE  0E21               	movlw	33
  3669  0012F0  6E03               	movwf	??_full_drive& (0+255),c
  3670  0012F2  0E76               	movlw	118
  3671  0012F4                     u1967:
  3672  0012F4  2EE8               	decfsz	wreg,f,c
  3673  0012F6  D7FE               	bra	u1967
  3674  0012F8  2E03               	decfsz	??_full_drive& (0+255),f,c
  3675  0012FA  D7FC               	bra	u1967
  3676  0012FC  D000               	nop2	
  3677                           
  3678                           ;main.c: 720:             LATCbits.LATC5 = 1;
  3679  0012FE  8A8B               	bsf	3979,5,c	;volatile
  3680                           
  3681                           ;main.c: 721:             LATCbits.LATC6 = 0;
  3682  001300  9C8B               	bcf	3979,6,c	;volatile
  3683                           
  3684                           ;main.c: 722:             LATCbits.LATC7 = 0;
  3685  001302  9E8B               	bcf	3979,7,c	;volatile
  3686                           
  3687                           ;main.c: 723:             LATAbits.LATA5 = 1;
  3688  001304  8A89               	bsf	3977,5,c	;volatile
  3689                           
  3690                           ;main.c: 724:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3691  001306  0E21               	movlw	33
  3692  001308  6E03               	movwf	??_full_drive& (0+255),c
  3693  00130A  0E76               	movlw	118
  3694  00130C                     u1977:
  3695  00130C  2EE8               	decfsz	wreg,f,c
  3696  00130E  D7FE               	bra	u1977
  3697  001310  2E03               	decfsz	??_full_drive& (0+255),f,c
  3698  001312  D7FC               	bra	u1977
  3699  001314  D000               	nop2	
  3700                           
  3701                           ;main.c: 725:             LATCbits.LATC5 = 1;
  3702  001316  8A8B               	bsf	3979,5,c	;volatile
  3703                           
  3704                           ;main.c: 726:             LATCbits.LATC6 = 1;
  3705  001318  8C8B               	bsf	3979,6,c	;volatile
  3706                           
  3707                           ;main.c: 727:             LATCbits.LATC7 = 0;
  3708  00131A  9E8B               	bcf	3979,7,c	;volatile
  3709                           
  3710                           ;main.c: 728:             LATAbits.LATA5 = 0;
  3711  00131C  9A89               	bcf	3977,5,c	;volatile
  3712                           
  3713                           ;main.c: 729:             _delay((unsigned long)((10)*(10000000/4000.0)));
  3714  00131E  0E21               	movlw	33
  3715  001320  6E03               	movwf	??_full_drive& (0+255),c
  3716  001322  0E76               	movlw	118
  3717  001324                     u1987:
  3718  001324  2EE8               	decfsz	wreg,f,c
  3719  001326  D7FE               	bra	u1987
  3720  001328  2E03               	decfsz	??_full_drive& (0+255),f,c
  3721  00132A  D7FC               	bra	u1987
  3722  00132C  D000               	nop2	
  3723  00132E  0012               	return		;funcret
  3724  001330                     __end_of_full_drive:
  3725                           	opt callstack 0
  3726                           
  3727 ;; *************** function _servo *****************
  3728 ;; Defined at:
  3729 ;;		line 433 in file "main.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;		None
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;		None
  3734 ;; Return value:  Size  Location     Type
  3735 ;;                  1    wreg      void 
  3736 ;; Registers used:
  3737 ;;		wreg, status,2, status,0, cstack
  3738 ;; Tracked objects:
  3739 ;;		On entry : 0/0
  3740 ;;		On exit  : 0/0
  3741 ;;		Unchanged: 0/0
  3742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;Total ram usage:        2 bytes
  3748 ;; Hardware stack levels used:    1
  3749 ;; Hardware stack levels required when called:    1
  3750 ;; This function calls:
  3751 ;;		_servoRotate0
  3752 ;;		_servoRotate180
  3753 ;; This function is called by:
  3754 ;;		_main
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text18
  3759  001DFA                     __ptext18:
  3760                           	opt callstack 0
  3761  001DFA                     _servo:
  3762                           	opt callstack 29
  3763                           
  3764                           ;main.c: 435:   TRISC = 0;
  3765                           
  3766                           ;incstack = 0
  3767  001DFA  0E00               	movlw	0
  3768  001DFC  6E94               	movwf	3988,c	;volatile
  3769                           
  3770                           ;main.c: 436:   {;main.c: 438:     servoRotate0(1);
  3771  001DFE  0E00               	movlw	0
  3772  001E00  6E02               	movwf	servoRotate0@servo+1,c
  3773  001E02  0E01               	movlw	1
  3774  001E04  6E01               	movwf	servoRotate0@servo,c
  3775  001E06  EC26  F00E         	call	_servoRotate0	;wreg free
  3776                           
  3777                           ;main.c: 442:     servoRotate180(1);
  3778  001E0A  0E00               	movlw	0
  3779  001E0C  6E02               	movwf	servoRotate180@servo+1,c
  3780  001E0E  0E01               	movlw	1
  3781  001E10  6E01               	movwf	servoRotate180@servo,c
  3782  001E12  ECB8  F00D         	call	_servoRotate180	;wreg free
  3783                           
  3784                           ;main.c: 443:     _delay((unsigned long)((450)*(10000000/4000.0)));
  3785  001E16  0E06               	movlw	6
  3786  001E18  6E07               	movwf	(??_servo+1)& (0+255),c
  3787  001E1A  0EB6               	movlw	182
  3788  001E1C  6E06               	movwf	??_servo& (0+255),c
  3789  001E1E  0E04               	movlw	4
  3790  001E20                     u1997:
  3791  001E20  2EE8               	decfsz	wreg,f,c
  3792  001E22  D7FE               	bra	u1997
  3793  001E24  2E06               	decfsz	??_servo& (0+255),f,c
  3794  001E26  D7FC               	bra	u1997
  3795  001E28  2E07               	decfsz	(??_servo+1)& (0+255),f,c
  3796  001E2A  D7FA               	bra	u1997
  3797                           
  3798                           ;main.c: 444:     servoRotate0(1);
  3799  001E2C  0E00               	movlw	0
  3800  001E2E  6E02               	movwf	servoRotate0@servo+1,c
  3801  001E30  0E01               	movlw	1
  3802  001E32  6E01               	movwf	servoRotate0@servo,c
  3803  001E34  EC26  F00E         	call	_servoRotate0	;wreg free
  3804                           
  3805                           ;main.c: 446:     servoRotate180(2);
  3806  001E38  0E00               	movlw	0
  3807  001E3A  6E02               	movwf	servoRotate180@servo+1,c
  3808  001E3C  0E02               	movlw	2
  3809  001E3E  6E01               	movwf	servoRotate180@servo,c
  3810  001E40  ECB8  F00D         	call	_servoRotate180	;wreg free
  3811                           
  3812                           ;main.c: 447:     servoRotate0(2);
  3813  001E44  0E00               	movlw	0
  3814  001E46  6E02               	movwf	servoRotate0@servo+1,c
  3815  001E48  0E02               	movlw	2
  3816  001E4A  6E01               	movwf	servoRotate0@servo,c
  3817  001E4C  EC26  F00E         	call	_servoRotate0	;wreg free
  3818                           
  3819                           ;main.c: 448:     servoRotate180(2);
  3820  001E50  0E00               	movlw	0
  3821  001E52  6E02               	movwf	servoRotate180@servo+1,c
  3822  001E54  0E02               	movlw	2
  3823  001E56  6E01               	movwf	servoRotate180@servo,c
  3824  001E58  ECB8  F00D         	call	_servoRotate180	;wreg free
  3825                           
  3826                           ;main.c: 450:     _delay((unsigned long)((100)*(10000000/4000.0)));
  3827  001E5C  0E02               	movlw	2
  3828  001E5E  6E07               	movwf	(??_servo+1)& (0+255),c
  3829  001E60  0E45               	movlw	69
  3830  001E62  6E06               	movwf	??_servo& (0+255),c
  3831  001E64  0EAA               	movlw	170
  3832  001E66                     u2007:
  3833  001E66  2EE8               	decfsz	wreg,f,c
  3834  001E68  D7FE               	bra	u2007
  3835  001E6A  2E06               	decfsz	??_servo& (0+255),f,c
  3836  001E6C  D7FC               	bra	u2007
  3837  001E6E  2E07               	decfsz	(??_servo+1)& (0+255),f,c
  3838  001E70  D7FA               	bra	u2007
  3839                           
  3840                           ;main.c: 451:         servoRotate0(3);
  3841  001E72  0E00               	movlw	0
  3842  001E74  6E02               	movwf	servoRotate0@servo+1,c
  3843  001E76  0E03               	movlw	3
  3844  001E78  6E01               	movwf	servoRotate0@servo,c
  3845  001E7A  EC26  F00E         	call	_servoRotate0	;wreg free
  3846                           
  3847                           ;main.c: 452:     servoRotate0(3);
  3848  001E7E  0E00               	movlw	0
  3849  001E80  6E02               	movwf	servoRotate0@servo+1,c
  3850  001E82  0E03               	movlw	3
  3851  001E84  6E01               	movwf	servoRotate0@servo,c
  3852  001E86  EC26  F00E         	call	_servoRotate0	;wreg free
  3853                           
  3854                           ;main.c: 453:     servoRotate180(3);
  3855  001E8A  0E00               	movlw	0
  3856  001E8C  6E02               	movwf	servoRotate180@servo+1,c
  3857  001E8E  0E03               	movlw	3
  3858  001E90  6E01               	movwf	servoRotate180@servo,c
  3859  001E92  ECB8  F00D         	call	_servoRotate180	;wreg free
  3860  001E96  0012               	return		;funcret
  3861  001E98                     __end_of_servo:
  3862                           	opt callstack 0
  3863                           
  3864 ;; *************** function _servoRotate180 *****************
  3865 ;; Defined at:
  3866 ;;		line 387 in file "main.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;  servo           2    0[COMRAM] int 
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;  i               2    3[COMRAM] unsigned int 
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  1    wreg      void 
  3873 ;; Registers used:
  3874 ;;		wreg, status,2, status,0
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3880 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3881 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3882 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3883 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3884 ;;Total ram usage:        5 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; This function calls:
  3887 ;;		Nothing
  3888 ;; This function is called by:
  3889 ;;		_servo
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893                           	psect	text19
  3894  001B70                     __ptext19:
  3895                           	opt callstack 0
  3896  001B70                     _servoRotate180:
  3897                           	opt callstack 29
  3898                           
  3899                           ;main.c: 387: void servoRotate180(int servo);main.c: 388: {;main.c: 389:   unsigned int 
      +                          i;;main.c: 390:     if (servo==1){
  3900                           
  3901                           ;incstack = 0
  3902  001B70  0401               	decf	servoRotate180@servo,w,c
  3903  001B72  1002               	iorwf	servoRotate180@servo+1,w,c
  3904  001B74  A4D8               	btfss	status,2,c
  3905  001B76  D024               	goto	u1340
  3906                           
  3907                           ;main.c: 391:     for(i=0;i<40;i++)
  3908  001B78  0E00               	movlw	0
  3909  001B7A  6E05               	movwf	servoRotate180@i+1,c
  3910  001B7C  0E00               	movlw	0
  3911  001B7E  6E04               	movwf	servoRotate180@i,c
  3912  001B80                     l93:
  3913                           
  3914                           ;main.c: 392:         {;main.c: 393:           RC1 = 1;
  3915  001B80  8282               	bsf	3970,1,c	;volatile
  3916                           
  3917                           ;main.c: 394:             RC2 = 1;
  3918  001B82  8482               	bsf	3970,2,c	;volatile
  3919                           
  3920                           ;main.c: 395:           _delay((unsigned long)((450)*(10000000/4000000.0)));
  3921  001B84  0EE1               	movlw	225
  3922  001B86                     u2017:
  3923  001B86  D000               	nop2	
  3924  001B88  2EE8               	decfsz	wreg,f,c
  3925  001B8A  D7FD               	bra	u2017
  3926                           
  3927                           ;main.c: 397:           RC2 =0;
  3928  001B8C  9482               	bcf	3970,2,c	;volatile
  3929                           
  3930                           ;main.c: 398:           _delay((unsigned long)((2100)*(10000000/4000000.0)));
  3931  001B8E  0E07               	movlw	7
  3932  001B90  6E03               	movwf	??_servoRotate180& (0+255),c
  3933  001B92  0ED0               	movlw	208
  3934  001B94                     u2027:
  3935  001B94  2EE8               	decfsz	wreg,f,c
  3936  001B96  D7FE               	bra	u2027
  3937  001B98  2E03               	decfsz	??_servoRotate180& (0+255),f,c
  3938  001B9A  D7FC               	bra	u2027
  3939  001B9C  D000               	nop2	
  3940                           
  3941                           ;main.c: 400:           RC1 = 0;
  3942  001B9E  9282               	bcf	3970,1,c	;volatile
  3943                           
  3944                           ;main.c: 401:           _delay((unsigned long)((13550)*(10000000/4000000.0)));
  3945  001BA0  0E2C               	movlw	44
  3946  001BA2  6E03               	movwf	??_servoRotate180& (0+255),c
  3947  001BA4  0EFD               	movlw	253
  3948  001BA6                     u2037:
  3949  001BA6  2EE8               	decfsz	wreg,f,c
  3950  001BA8  D7FE               	bra	u2037
  3951  001BAA  2E03               	decfsz	??_servoRotate180& (0+255),f,c
  3952  001BAC  D7FC               	bra	u2037
  3953  001BAE  D000               	nop2	
  3954                           
  3955                           ;main.c: 402:         }
  3956  001BB0  4A04               	infsnz	servoRotate180@i,f,c
  3957  001BB2  2A05               	incf	servoRotate180@i+1,f,c
  3958  001BB4  5005               	movf	servoRotate180@i+1,w,c
  3959  001BB6  E104               	bnz	u1340
  3960  001BB8  0E28               	movlw	40
  3961  001BBA  5C04               	subwf	servoRotate180@i,w,c
  3962  001BBC  A0D8               	btfss	status,0,c
  3963  001BBE  D7E0               	goto	l93
  3964  001BC0                     u1340:
  3965                           
  3966                           ;main.c: 404:   if (servo==2){
  3967  001BC0  0E02               	movlw	2
  3968  001BC2  1801               	xorwf	servoRotate180@servo,w,c
  3969  001BC4  1002               	iorwf	servoRotate180@servo+1,w,c
  3970  001BC6  A4D8               	btfss	status,2,c
  3971  001BC8  D01D               	goto	u1360
  3972                           
  3973                           ;main.c: 405:     for(i=0;i<40;i++)
  3974  001BCA  0E00               	movlw	0
  3975  001BCC  6E05               	movwf	servoRotate180@i+1,c
  3976  001BCE  0E00               	movlw	0
  3977  001BD0  6E04               	movwf	servoRotate180@i,c
  3978  001BD2                     l96:
  3979                           
  3980                           ;main.c: 406:           {;main.c: 408:     RD1 = 1;
  3981  001BD2  8283               	bsf	3971,1,c	;volatile
  3982                           
  3983                           ;main.c: 411:     _delay((unsigned long)((550)*(10000000/4000000.0)));
  3984  001BD4  0EC4               	movlw	196
  3985  001BD6                     u2047:
  3986  001BD6  D000               	nop2	
  3987  001BD8  D000               	nop2	
  3988  001BDA  2EE8               	decfsz	wreg,f,c
  3989  001BDC  D7FC               	bra	u2047
  3990  001BDE  D000               	nop2	
  3991  001BE0  F000               	nop	
  3992                           
  3993                           ;main.c: 413:     RD1 = 0;
  3994  001BE2  9283               	bcf	3971,1,c	;volatile
  3995                           
  3996                           ;main.c: 416:     _delay((unsigned long)((27050)*(10000000/4000000.0)));
  3997  001BE4  0E58               	movlw	88
  3998  001BE6  6E03               	movwf	??_servoRotate180& (0+255),c
  3999  001BE8  0ED2               	movlw	210
  4000  001BEA                     u2057:
  4001  001BEA  2EE8               	decfsz	wreg,f,c
  4002  001BEC  D7FE               	bra	u2057
  4003  001BEE  2E03               	decfsz	??_servoRotate180& (0+255),f,c
  4004  001BF0  D7FC               	bra	u2057
  4005  001BF2  F000               	nop	
  4006                           
  4007                           ;main.c: 417:           }
  4008  001BF4  4A04               	infsnz	servoRotate180@i,f,c
  4009  001BF6  2A05               	incf	servoRotate180@i+1,f,c
  4010  001BF8  5005               	movf	servoRotate180@i+1,w,c
  4011  001BFA  E104               	bnz	u1360
  4012  001BFC  0E28               	movlw	40
  4013  001BFE  5C04               	subwf	servoRotate180@i,w,c
  4014  001C00  A0D8               	btfss	status,0,c
  4015  001C02  D7E7               	goto	l96
  4016  001C04                     u1360:
  4017                           
  4018                           ;main.c: 419:     if (servo==3){
  4019  001C04  0E03               	movlw	3
  4020  001C06  1801               	xorwf	servoRotate180@servo,w,c
  4021  001C08  1002               	iorwf	servoRotate180@servo+1,w,c
  4022  001C0A  A4D8               	btfss	status,2,c
  4023  001C0C  0012               	return	
  4024                           
  4025                           ;main.c: 420:       for(i=0;i<40;i++)
  4026  001C0E  0E00               	movlw	0
  4027  001C10  6E05               	movwf	servoRotate180@i+1,c
  4028  001C12  0E00               	movlw	0
  4029  001C14  6E04               	movwf	servoRotate180@i,c
  4030  001C16                     l99:
  4031                           
  4032                           ;main.c: 421:         {;main.c: 422:         RD0 = 1;
  4033  001C16  8083               	bsf	3971,0,c	;volatile
  4034                           
  4035                           ;main.c: 424:         _delay((unsigned long)((2500)*(10000000/4000000.0)));
  4036  001C18  0E09               	movlw	9
  4037  001C1A  6E03               	movwf	??_servoRotate180& (0+255),c
  4038  001C1C  0E1C               	movlw	28
  4039  001C1E                     u2067:
  4040  001C1E  2EE8               	decfsz	wreg,f,c
  4041  001C20  D7FE               	bra	u2067
  4042  001C22  2E03               	decfsz	??_servoRotate180& (0+255),f,c
  4043  001C24  D7FC               	bra	u2067
  4044  001C26  D000               	nop2	
  4045                           
  4046                           ;main.c: 427:             RD0 = 0;
  4047  001C28  9083               	bcf	3971,0,c	;volatile
  4048                           
  4049                           ;main.c: 429:         _delay((unsigned long)((10500)*(10000000/4000000.0)));
  4050  001C2A  0E23               	movlw	35
  4051  001C2C  6E03               	movwf	??_servoRotate180& (0+255),c
  4052  001C2E  0E16               	movlw	22
  4053  001C30                     u2077:
  4054  001C30  2EE8               	decfsz	wreg,f,c
  4055  001C32  D7FE               	bra	u2077
  4056  001C34  2E03               	decfsz	??_servoRotate180& (0+255),f,c
  4057  001C36  D7FC               	bra	u2077
  4058                           
  4059                           ;main.c: 430:         }
  4060  001C38  4A04               	infsnz	servoRotate180@i,f,c
  4061  001C3A  2A05               	incf	servoRotate180@i+1,f,c
  4062  001C3C  5005               	movf	servoRotate180@i+1,w,c
  4063  001C3E  E105               	bnz	u1380
  4064  001C40  0E28               	movlw	40
  4065  001C42  5C04               	subwf	servoRotate180@i,w,c
  4066  001C44  B0D8               	btfsc	status,0,c
  4067  001C46  0012               	return	
  4068  001C48  D7E6               	goto	l99
  4069  001C4A                     u1380:
  4070  001C4A  0012               	return		;funcret
  4071  001C4C                     __end_of_servoRotate180:
  4072                           	opt callstack 0
  4073                           
  4074 ;; *************** function _servoRotate0 *****************
  4075 ;; Defined at:
  4076 ;;		line 343 in file "main.c"
  4077 ;; Parameters:    Size  Location     Type
  4078 ;;  servo           2    0[COMRAM] int 
  4079 ;; Auto vars:     Size  Location     Type
  4080 ;;  i               2    3[COMRAM] unsigned int 
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  1    wreg      void 
  4083 ;; Registers used:
  4084 ;;		wreg, status,2, status,0
  4085 ;; Tracked objects:
  4086 ;;		On entry : 0/0
  4087 ;;		On exit  : 0/0
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4092 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;Total ram usage:        5 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; This function calls:
  4097 ;;		Nothing
  4098 ;; This function is called by:
  4099 ;;		_servo
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           	psect	text20
  4104  001C4C                     __ptext20:
  4105                           	opt callstack 0
  4106  001C4C                     _servoRotate0:
  4107                           	opt callstack 29
  4108                           
  4109                           ;main.c: 344:     unsigned int i;;main.c: 345:     if (servo==1){
  4110                           
  4111                           ;incstack = 0
  4112  001C4C  0401               	decf	servoRotate0@servo,w,c
  4113  001C4E  1002               	iorwf	servoRotate0@servo+1,w,c
  4114  001C50  A4D8               	btfss	status,2,c
  4115  001C52  D023               	goto	u1280
  4116                           
  4117                           ;main.c: 346:       for(i=0;i<40;i++)
  4118  001C54  0E00               	movlw	0
  4119  001C56  6E05               	movwf	servoRotate0@i+1,c
  4120  001C58  0E00               	movlw	0
  4121  001C5A  6E04               	movwf	servoRotate0@i,c
  4122  001C5C                     l81:
  4123                           
  4124                           ;main.c: 347:           {;main.c: 348:             RC1 = 1;
  4125  001C5C  8282               	bsf	3970,1,c	;volatile
  4126                           
  4127                           ;main.c: 349:             RC2 = 1;
  4128  001C5E  8482               	bsf	3970,2,c	;volatile
  4129                           
  4130                           ;main.c: 350:             _delay((unsigned long)((1100)*(10000000/4000000.0)));
  4131  001C60  0E04               	movlw	4
  4132  001C62  6E03               	movwf	??_servoRotate0& (0+255),c
  4133  001C64  0E91               	movlw	145
  4134  001C66                     u2087:
  4135  001C66  2EE8               	decfsz	wreg,f,c
  4136  001C68  D7FE               	bra	u2087
  4137  001C6A  2E03               	decfsz	??_servoRotate0& (0+255),f,c
  4138  001C6C  D7FC               	bra	u2087
  4139  001C6E  F000               	nop	
  4140                           
  4141                           ;main.c: 351:             RC2 = 0;
  4142  001C70  9482               	bcf	3970,2,c	;volatile
  4143                           
  4144                           ;main.c: 352:             _delay((unsigned long)((300)*(10000000/4000000.0)));
  4145  001C72  0EFA               	movlw	250
  4146  001C74                     u2097:
  4147  001C74  2EE8               	decfsz	wreg,f,c
  4148  001C76  D7FE               	bra	u2097
  4149                           
  4150                           ;main.c: 353:             RC1 = 0;
  4151  001C78  9282               	bcf	3970,1,c	;volatile
  4152                           
  4153                           ;main.c: 357:             _delay((unsigned long)((18600)*(10000000/4000000.0)));
  4154  001C7A  0E3D               	movlw	61
  4155  001C7C  6E03               	movwf	??_servoRotate0& (0+255),c
  4156  001C7E  0E62               	movlw	98
  4157  001C80                     u2107:
  4158  001C80  2EE8               	decfsz	wreg,f,c
  4159  001C82  D7FE               	bra	u2107
  4160  001C84  2E03               	decfsz	??_servoRotate0& (0+255),f,c
  4161  001C86  D7FC               	bra	u2107
  4162  001C88  D000               	nop2	
  4163                           
  4164                           ;main.c: 358:           }
  4165  001C8A  4A04               	infsnz	servoRotate0@i,f,c
  4166  001C8C  2A05               	incf	servoRotate0@i+1,f,c
  4167  001C8E  5005               	movf	servoRotate0@i+1,w,c
  4168  001C90  E104               	bnz	u1280
  4169  001C92  0E28               	movlw	40
  4170  001C94  5C04               	subwf	servoRotate0@i,w,c
  4171  001C96  A0D8               	btfss	status,0,c
  4172  001C98  D7E1               	goto	l81
  4173  001C9A                     u1280:
  4174                           
  4175                           ;main.c: 360:     if (servo==2){
  4176  001C9A  0E02               	movlw	2
  4177  001C9C  1801               	xorwf	servoRotate0@servo,w,c
  4178  001C9E  1002               	iorwf	servoRotate0@servo+1,w,c
  4179  001CA0  A4D8               	btfss	status,2,c
  4180  001CA2  D01D               	goto	u1300
  4181                           
  4182                           ;main.c: 361:       for(i=0;i<40;i++)
  4183  001CA4  0E00               	movlw	0
  4184  001CA6  6E05               	movwf	servoRotate0@i+1,c
  4185  001CA8  0E00               	movlw	0
  4186  001CAA  6E04               	movwf	servoRotate0@i,c
  4187  001CAC                     l84:
  4188                           
  4189                           ;main.c: 362:         {;main.c: 364:         RD1 = 1;
  4190  001CAC  8283               	bsf	3971,1,c	;volatile
  4191                           
  4192                           ;main.c: 367:           _delay((unsigned long)((1000)*(10000000/4000000.0)));
  4193  001CAE  0E04               	movlw	4
  4194  001CB0  6E03               	movwf	??_servoRotate0& (0+255),c
  4195  001CB2  0E3E               	movlw	62
  4196  001CB4                     u2117:
  4197  001CB4  2EE8               	decfsz	wreg,f,c
  4198  001CB6  D7FE               	bra	u2117
  4199  001CB8  2E03               	decfsz	??_servoRotate0& (0+255),f,c
  4200  001CBA  D7FC               	bra	u2117
  4201                           
  4202                           ;main.c: 369:         RD1 = 0;
  4203  001CBC  9283               	bcf	3971,1,c	;volatile
  4204                           
  4205                           ;main.c: 372:           _delay((unsigned long)((19000)*(10000000/4000000.0)));
  4206  001CBE  0E3E               	movlw	62
  4207  001CC0  6E03               	movwf	??_servoRotate0& (0+255),c
  4208  001CC2  0EAF               	movlw	175
  4209  001CC4                     u2127:
  4210  001CC4  2EE8               	decfsz	wreg,f,c
  4211  001CC6  D7FE               	bra	u2127
  4212  001CC8  2E03               	decfsz	??_servoRotate0& (0+255),f,c
  4213  001CCA  D7FC               	bra	u2127
  4214  001CCC  F000               	nop	
  4215                           
  4216                           ;main.c: 373:         }
  4217  001CCE  4A04               	infsnz	servoRotate0@i,f,c
  4218  001CD0  2A05               	incf	servoRotate0@i+1,f,c
  4219  001CD2  5005               	movf	servoRotate0@i+1,w,c
  4220  001CD4  E104               	bnz	u1300
  4221  001CD6  0E28               	movlw	40
  4222  001CD8  5C04               	subwf	servoRotate0@i,w,c
  4223  001CDA  A0D8               	btfss	status,0,c
  4224  001CDC  D7E7               	goto	l84
  4225  001CDE                     u1300:
  4226                           
  4227                           ;main.c: 375:     if (servo==3){
  4228  001CDE  0E03               	movlw	3
  4229  001CE0  1801               	xorwf	servoRotate0@servo,w,c
  4230  001CE2  1002               	iorwf	servoRotate0@servo+1,w,c
  4231  001CE4  A4D8               	btfss	status,2,c
  4232  001CE6  0012               	return	
  4233                           
  4234                           ;main.c: 376:       for(i=0;i<40;i++)
  4235  001CE8  0E00               	movlw	0
  4236  001CEA  6E05               	movwf	servoRotate0@i+1,c
  4237  001CEC  0E00               	movlw	0
  4238  001CEE  6E04               	movwf	servoRotate0@i,c
  4239  001CF0                     l87:
  4240                           
  4241                           ;main.c: 377:         {;main.c: 378:         RD0 = 1;
  4242  001CF0  8083               	bsf	3971,0,c	;volatile
  4243                           
  4244                           ;main.c: 379:         _delay((unsigned long)((2000)*(10000000/4000000.0)));
  4245  001CF2  0E07               	movlw	7
  4246  001CF4  6E03               	movwf	??_servoRotate0& (0+255),c
  4247  001CF6  0E7D               	movlw	125
  4248  001CF8                     u2137:
  4249  001CF8  2EE8               	decfsz	wreg,f,c
  4250  001CFA  D7FE               	bra	u2137
  4251  001CFC  2E03               	decfsz	??_servoRotate0& (0+255),f,c
  4252  001CFE  D7FC               	bra	u2137
  4253  001D00  F000               	nop	
  4254                           
  4255                           ;main.c: 382:         RD0 = 0;
  4256  001D02  9083               	bcf	3971,0,c	;volatile
  4257                           
  4258                           ;main.c: 383:         _delay((unsigned long)((11000)*(10000000/4000000.0)));
  4259  001D04  0E24               	movlw	36
  4260  001D06  6E03               	movwf	??_servoRotate0& (0+255),c
  4261  001D08  0EB6               	movlw	182
  4262  001D0A                     u2147:
  4263  001D0A  2EE8               	decfsz	wreg,f,c
  4264  001D0C  D7FE               	bra	u2147
  4265  001D0E  2E03               	decfsz	??_servoRotate0& (0+255),f,c
  4266  001D10  D7FC               	bra	u2147
  4267                           
  4268                           ;main.c: 384:         }
  4269  001D12  4A04               	infsnz	servoRotate0@i,f,c
  4270  001D14  2A05               	incf	servoRotate0@i+1,f,c
  4271  001D16  5005               	movf	servoRotate0@i+1,w,c
  4272  001D18  E105               	bnz	u1320
  4273  001D1A  0E28               	movlw	40
  4274  001D1C  5C04               	subwf	servoRotate0@i,w,c
  4275  001D1E  B0D8               	btfsc	status,0,c
  4276  001D20  0012               	return	
  4277  001D22  D7E6               	goto	l87
  4278  001D24                     u1320:
  4279  001D24  0012               	return		;funcret
  4280  001D26                     __end_of_servoRotate0:
  4281                           	opt callstack 0
  4282                           
  4283 ;; *************** function _initLCD *****************
  4284 ;; Defined at:
  4285 ;;		line 69 in file "lcd.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;		None
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;		None
  4290 ;; Return value:  Size  Location     Type
  4291 ;;                  1    wreg      void 
  4292 ;; Registers used:
  4293 ;;		wreg, status,2, status,0, cstack
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;Total ram usage:        1 bytes
  4304 ;; Hardware stack levels used:    1
  4305 ;; Hardware stack levels required when called:    4
  4306 ;; This function calls:
  4307 ;;		_lcdInst
  4308 ;;		_send_byte
  4309 ;;		_send_nibble
  4310 ;; This function is called by:
  4311 ;;		_main
  4312 ;;		_timer_main
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316                           	psect	text21
  4317  002024                     __ptext21:
  4318                           	opt callstack 0
  4319  002024                     _initLCD:
  4320                           	opt callstack 26
  4321                           
  4322                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
  4323                           
  4324                           ;incstack = 0
  4325  002024  0E31               	movlw	49
  4326  002026  6E05               	movwf	??_initLCD& (0+255),c
  4327  002028  0EB2               	movlw	178
  4328  00202A                     u2157:
  4329  00202A  2EE8               	decfsz	wreg,f,c
  4330  00202C  D7FE               	bra	u2157
  4331  00202E  2E05               	decfsz	??_initLCD& (0+255),f,c
  4332  002030  D7FC               	bra	u2157
  4333  002032  D000               	nop2	
  4334                           
  4335                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
  4336  002034  948C               	bcf	3980,2,c	;volatile
  4337                           
  4338                           ;lcd.c: 74:     send_nibble(0b0011);
  4339  002036  0E03               	movlw	3
  4340  002038  EC0C  F011         	call	_send_nibble
  4341                           
  4342                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
  4343  00203C  0E11               	movlw	17
  4344  00203E  6E05               	movwf	??_initLCD& (0+255),c
  4345  002040  0E3A               	movlw	58
  4346  002042                     u2167:
  4347  002042  2EE8               	decfsz	wreg,f,c
  4348  002044  D7FE               	bra	u2167
  4349  002046  2E05               	decfsz	??_initLCD& (0+255),f,c
  4350  002048  D7FC               	bra	u2167
  4351  00204A  D000               	nop2	
  4352                           
  4353                           ;lcd.c: 76:     send_nibble(0b0011);
  4354  00204C  0E03               	movlw	3
  4355  00204E  EC0C  F011         	call	_send_nibble
  4356                           
  4357                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  4358  002052  0E7D               	movlw	125
  4359  002054                     u2177:
  4360  002054  2EE8               	decfsz	wreg,f,c
  4361  002056  D7FE               	bra	u2177
  4362                           
  4363                           ;lcd.c: 78:     send_byte(0b00110010);
  4364  002058  0E32               	movlw	50
  4365  00205A  EC17  F011         	call	_send_byte
  4366                           
  4367                           ;lcd.c: 80:     send_byte(0b00101000);
  4368  00205E  0E28               	movlw	40
  4369  002060  EC17  F011         	call	_send_byte
  4370                           
  4371                           ;lcd.c: 81:     send_byte(0b00001000);
  4372  002064  0E08               	movlw	8
  4373  002066  EC17  F011         	call	_send_byte
  4374                           
  4375                           ;lcd.c: 82:     send_byte(0b00000001);
  4376  00206A  0E01               	movlw	1
  4377  00206C  EC17  F011         	call	_send_byte
  4378                           
  4379                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
  4380  002070  0E11               	movlw	17
  4381  002072  6E05               	movwf	??_initLCD& (0+255),c
  4382  002074  0E3A               	movlw	58
  4383  002076                     u2187:
  4384  002076  2EE8               	decfsz	wreg,f,c
  4385  002078  D7FE               	bra	u2187
  4386  00207A  2E05               	decfsz	??_initLCD& (0+255),f,c
  4387  00207C  D7FC               	bra	u2187
  4388  00207E  D000               	nop2	
  4389                           
  4390                           ;lcd.c: 84:     send_byte(0b00000110);
  4391  002080  0E06               	movlw	6
  4392  002082  EC17  F011         	call	_send_byte
  4393                           
  4394                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  4395  002086  0E0F               	movlw	15
  4396  002088  EC26  F011         	call	_lcdInst
  4397  00208C  0012               	return		;funcret
  4398  00208E                     __end_of_initLCD:
  4399                           	opt callstack 0
  4400                           
  4401 ;; *************** function _lcdInst *****************
  4402 ;; Defined at:
  4403 ;;		line 64 in file "lcd.c"
  4404 ;; Parameters:    Size  Location     Type
  4405 ;;  data            1    wreg     unsigned char 
  4406 ;; Auto vars:     Size  Location     Type
  4407 ;;  data            1    3[COMRAM] unsigned char 
  4408 ;; Return value:  Size  Location     Type
  4409 ;;                  1    wreg      void 
  4410 ;; Registers used:
  4411 ;;		wreg, status,2, status,0, cstack
  4412 ;; Tracked objects:
  4413 ;;		On entry : 0/0
  4414 ;;		On exit  : 0/0
  4415 ;;		Unchanged: 0/0
  4416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4418 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4420 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;Total ram usage:        1 bytes
  4422 ;; Hardware stack levels used:    1
  4423 ;; Hardware stack levels required when called:    3
  4424 ;; This function calls:
  4425 ;;		_send_byte
  4426 ;; This function is called by:
  4427 ;;		_main
  4428 ;;		_stepper
  4429 ;;		_stepper2
  4430 ;;		_stepper2_back
  4431 ;;		_initLCD
  4432 ;;		_lcd_shift_cursor
  4433 ;;		_lcd_shift_display
  4434 ;; This function uses a non-reentrant model
  4435 ;;
  4436                           
  4437                           	psect	text22
  4438  00224C                     __ptext22:
  4439                           	opt callstack 0
  4440  00224C                     _lcdInst:
  4441                           	opt callstack 26
  4442                           
  4443                           ;incstack = 0
  4444                           ;lcdInst@data stored from wreg
  4445  00224C  6E04               	movwf	lcdInst@data,c
  4446                           
  4447                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
  4448  00224E  948C               	bcf	3980,2,c	;volatile
  4449                           
  4450                           ;lcd.c: 66:     send_byte(data);
  4451  002250  5004               	movf	lcdInst@data,w,c
  4452  002252  EC17  F011         	call	_send_byte
  4453  002256  0012               	return		;funcret
  4454  002258                     __end_of_lcdInst:
  4455                           	opt callstack 0
  4456                           
  4457 ;; *************** function _send_byte *****************
  4458 ;; Defined at:
  4459 ;;		line 55 in file "lcd.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;  data            1    wreg     unsigned char 
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;  data            1    2[COMRAM] unsigned char 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  1    wreg      void 
  4466 ;; Registers used:
  4467 ;;		wreg, status,2, status,0, cstack
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4477 ;;Total ram usage:        1 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; Hardware stack levels required when called:    2
  4480 ;; This function calls:
  4481 ;;		_send_nibble
  4482 ;; This function is called by:
  4483 ;;		_lcdInst
  4484 ;;		_initLCD
  4485 ;;		_putch
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           	psect	text23
  4490  00222E                     __ptext23:
  4491                           	opt callstack 0
  4492  00222E                     _send_byte:
  4493                           	opt callstack 22
  4494                           
  4495                           ;incstack = 0
  4496                           ;send_byte@data stored from wreg
  4497  00222E  6E03               	movwf	send_byte@data,c
  4498                           
  4499                           ;lcd.c: 57:     send_nibble(data >> 4);
  4500  002230  3803               	swapf	send_byte@data,w,c
  4501  002232  0B0F               	andlw	15
  4502  002234  EC0C  F011         	call	_send_nibble
  4503                           
  4504                           ;lcd.c: 60:     send_nibble(data);
  4505  002238  5003               	movf	send_byte@data,w,c
  4506  00223A  EC0C  F011         	call	_send_nibble
  4507  00223E  0012               	return		;funcret
  4508  002240                     __end_of_send_byte:
  4509                           	opt callstack 0
  4510                           
  4511 ;; *************** function _send_nibble *****************
  4512 ;; Defined at:
  4513 ;;		line 44 in file "lcd.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  data            1    wreg     unsigned char 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;  data            1    1[COMRAM] unsigned char 
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  1    wreg      void 
  4520 ;; Registers used:
  4521 ;;		wreg, status,2, status,0, cstack
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4530 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;Total ram usage:        1 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; Hardware stack levels required when called:    1
  4534 ;; This function calls:
  4535 ;;		_pulse_e
  4536 ;; This function is called by:
  4537 ;;		_send_byte
  4538 ;;		_initLCD
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           	psect	text24
  4543  002218                     __ptext24:
  4544                           	opt callstack 0
  4545  002218                     _send_nibble:
  4546                           	opt callstack 22
  4547                           
  4548                           ;incstack = 0
  4549                           ;send_nibble@data stored from wreg
  4550  002218  6E02               	movwf	send_nibble@data,c
  4551                           
  4552                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
  4553  00221A  508C               	movf	3980,w,c	;volatile
  4554  00221C  0B0F               	andlw	15
  4555  00221E  6E8C               	movwf	3980,c	;volatile
  4556                           
  4557                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
  4558  002220  3802               	swapf	send_nibble@data,w,c
  4559  002222  0BF0               	andlw	240
  4560  002224  108C               	iorwf	3980,w,c	;volatile
  4561  002226  6E8C               	movwf	3980,c	;volatile
  4562                           
  4563                           ;lcd.c: 48:     pulse_e();
  4564  002228  ECD1  F010         	call	_pulse_e	;wreg free
  4565  00222C  0012               	return		;funcret
  4566  00222E                     __end_of_send_nibble:
  4567                           	opt callstack 0
  4568                           
  4569 ;; *************** function _pulse_e *****************
  4570 ;; Defined at:
  4571 ;;		line 28 in file "lcd.c"
  4572 ;; Parameters:    Size  Location     Type
  4573 ;;		None
  4574 ;; Auto vars:     Size  Location     Type
  4575 ;;  interruptSta    1    0[COMRAM] unsigned char 
  4576 ;; Return value:  Size  Location     Type
  4577 ;;                  1    wreg      void 
  4578 ;; Registers used:
  4579 ;;		wreg
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/0
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4586 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;Total ram usage:        1 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; This function calls:
  4592 ;;		Nothing
  4593 ;; This function is called by:
  4594 ;;		_send_nibble
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           	psect	text25
  4599  0021A2                     __ptext25:
  4600                           	opt callstack 0
  4601  0021A2                     _pulse_e:
  4602                           	opt callstack 22
  4603                           
  4604                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
  4605                           
  4606                           ;incstack = 0
  4607  0021A2  0E00               	movlw	0
  4608  0021A4  BEF2               	btfsc	4082,7,c	;volatile
  4609  0021A6  0E01               	movlw	1
  4610  0021A8  6E01               	movwf	pulse_e@interruptState,c
  4611                           
  4612                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
  4613  0021AA  9EF2               	bcf	4082,7,c	;volatile
  4614                           
  4615                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
  4616  0021AC  868C               	bsf	3980,3,c	;volatile
  4617                           
  4618                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  4619  0021AE  0E14               	movlw	20
  4620  0021B0                     u2197:
  4621  0021B0  2EE8               	decfsz	wreg,f,c
  4622  0021B2  D7FE               	bra	u2197
  4623  0021B4  D000               	nop2	
  4624                           
  4625                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
  4626  0021B6  968C               	bcf	3980,3,c	;volatile
  4627                           
  4628                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  4629  0021B8  0E53               	movlw	83
  4630  0021BA                     u2207:
  4631  0021BA  2EE8               	decfsz	wreg,f,c
  4632  0021BC  D7FE               	bra	u2207
  4633  0021BE  F000               	nop	
  4634                           
  4635                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
  4636  0021C0  B001               	btfsc	pulse_e@interruptState,0,c
  4637  0021C2  D002               	bra	u825
  4638  0021C4  9EF2               	bcf	4082,7,c	;volatile
  4639  0021C6  D001               	bra	u826
  4640  0021C8                     u825:
  4641  0021C8  8EF2               	bsf	4082,7,c	;volatile
  4642  0021CA                     u826:
  4643  0021CA  0012               	return		;funcret
  4644  0021CC                     __end_of_pulse_e:
  4645                           	opt callstack 0
  4646                           
  4647                           	psect	rparam
  4648  0000                     tosu	equ	0xFFF
  4649                           tosh	equ	0xFFE
  4650                           tosl	equ	0xFFD
  4651                           stkptr	equ	0xFFC
  4652                           pclatu	equ	0xFFB
  4653                           pclath	equ	0xFFA
  4654                           pcl	equ	0xFF9
  4655                           tblptru	equ	0xFF8
  4656                           tblptrh	equ	0xFF7
  4657                           tblptrl	equ	0xFF6
  4658                           tablat	equ	0xFF5
  4659                           prodh	equ	0xFF4
  4660                           prodl	equ	0xFF3
  4661                           indf0	equ	0xFEF
  4662                           postinc0	equ	0xFEE
  4663                           postdec0	equ	0xFED
  4664                           preinc0	equ	0xFEC
  4665                           plusw0	equ	0xFEB
  4666                           fsr0h	equ	0xFEA
  4667                           fsr0l	equ	0xFE9
  4668                           wreg	equ	0xFE8
  4669                           indf1	equ	0xFE7
  4670                           postinc1	equ	0xFE6
  4671                           postdec1	equ	0xFE5
  4672                           preinc1	equ	0xFE4
  4673                           plusw1	equ	0xFE3
  4674                           fsr1h	equ	0xFE2
  4675                           fsr1l	equ	0xFE1
  4676                           bsr	equ	0xFE0
  4677                           indf2	equ	0xFDF
  4678                           postinc2	equ	0xFDE
  4679                           postdec2	equ	0xFDD
  4680                           preinc2	equ	0xFDC
  4681                           plusw2	equ	0xFDB
  4682                           fsr2h	equ	0xFDA
  4683                           fsr2l	equ	0xFD9
  4684                           status	equ	0xFD8


Data Sizes:
    Strings     79
    Constant    6
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    115     127
    BANK0           128      0      43
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_16(CODE[10]), STR_15(CODE[14]), STR_14(CODE[6]), STR_13(CODE[10]), 
		 -> STR_12(CODE[10]), STR_11(CODE[14]), STR_10(CODE[6]), STR_9(CODE[10]), 
		 -> STR_8(CODE[11]), STR_7(CODE[10]), STR_6(CODE[14]), STR_5(CODE[6]), 
		 -> STR_4(CODE[11]), STR_3(CODE[13]), STR_2(CODE[14]), STR_1(CODE[10]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S1115_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_16(CODE[10]), STR_15(CODE[14]), STR_14(CODE[6]), STR_13(CODE[10]), 
		 -> STR_12(CODE[10]), STR_11(CODE[14]), STR_10(CODE[6]), STR_9(CODE[10]), 
		 -> STR_8(CODE[11]), STR_7(CODE[10]), STR_6(CODE[14]), STR_5(CODE[6]), 
		 -> STR_4(CODE[11]), STR_3(CODE[13]), STR_2(CODE[14]), STR_1(CODE[10]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 14
		 -> STR_16(CODE[10]), STR_15(CODE[14]), STR_14(CODE[6]), STR_13(CODE[10]), 
		 -> STR_12(CODE[10]), STR_11(CODE[14]), STR_10(CODE[6]), STR_9(CODE[10]), 
		 -> STR_8(CODE[11]), STR_7(CODE[10]), STR_6(CODE[14]), STR_5(CODE[6]), 
		 -> STR_4(CODE[11]), STR_3(CODE[13]), STR_2(CODE[14]), STR_1(CODE[10]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_stepper2
    _stepper2_back->_printf
    _stepper2->_printf
    _stepper->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_send_byte
    _abs->___aomod
    _servo->_servoRotate0
    _servo->_servoRotate180
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   33956
                                            113 COMRAM     2     2      0
                            _initLCD
                            _lcdInst
                             _printf
                              _servo
                            _stepper
                           _stepper2
                      _stepper2_back
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _stepper2_back                                        6     6      0    8237
                                             99 COMRAM     6     6      0
                         _full_drive
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _stepper2                                            14    12      2    8524
                                             99 COMRAM    14    12      2
                         _full_drive
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _stepper                                              5     5      0    8237
                                             99 COMRAM     5     5      0
                         _full_drive
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     4      4    7510
                                             91 COMRAM     8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     2      6    6240
                                             83 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           42    36      6    5886
                                             67 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                36    26     10    4448
                                             31 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                 11     5      6    2799
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                7     3      4    1280
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4     879
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (2) _full_drive                                           4     2      2     502
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _servo                                                2     2      0    1092
                                              5 COMRAM     2     2      0
                       _servoRotate0
                     _servoRotate180
 ---------------------------------------------------------------------------------
 (2) _servoRotate180                                       5     3      2     508
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _servoRotate0                                         5     3      2     584
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     245
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (7) _send_byte                                            1     1      0      89
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (8) _send_nibble                                          1     1      0      45
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (9) _pulse_e                                              1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _fputc
           _putch
             _send_byte
               _send_nibble
                 _pulse_e
   _servo
     _servoRotate0
     _servoRotate180
   _stepper
     _full_drive
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
   _stepper2
     _full_drive
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
   _stepper2_back
     _full_drive
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _printf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
   _system_init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      2B       5       33.6%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     73      7F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AA      34        0.0%
DATA                 0      0      AA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 08 02:44:45 2019

                        l81 1C5C                          l84 1CAC                          l93 1B80  
                        l87 1CF0                          l96 1BD2                          l99 1C16  
               __CFG_CPD$ON 000000         servoRotate180@servo 0001                 __CFG_BORV$3 000000  
         stepper2@direction 0071               servoRotate0@i 0004                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000  
               __CFG_OSC$HS 000000         __end_of_system_init 2178                         l300 13AA  
                       l287 1EC6                         l298 13A2                __CFG_CPB$OFF 000000  
                       _RC1 007C11                         _RC2 007C12                         _RD0 007C18  
                       _RD1 007C19                         u840 1FC8                         u825 21C8  
                       u826 21CA                         u930 2126                         u860 2010  
                       u961 174C                         u980 1784      __size_of_stepper2_back 008A  
                       _abs 2118                         _cnt 0087                         _pad 1E98  
            stepper2_back@i 0068                         wreg 000FE8                __CFG_IESO$ON 000000  
              __CFG_LVP$OFF 000000                __CFG_WDT$OFF 000000                        l1010 2140  
                      l2002 176C                        ?_abs 0013                        l2004 1780  
                      l2022 1818                        l2014 17DC                        l2120 1548  
                      l2018 17F2                        l2050 1900                        l2042 18A4  
                      l2034 1866                        l2044 18B8                        l2116 1530  
                      l2054 1916                        l2038 188A                        l2142 1660  
                      l2152 16A6                        l2306 1136                        l2058 193C  
                      l2082 13C4                        l2170 20A0                        l2068 1386  
                      l2148 169C                        l2172 20C4                        l2086 13D4  
                      l2158 16BE                        l2502 1D80                        l2424 12B0  
                      l2096 14CC                        l2512 1DBC                        l2346 11B4  
                      l2290 10CC                        l2540 19C2                        l2524 1968  
                      l2550 1A00                        l2384 1228                        l2544 19D4  
                      l1930 1FD0                        l2554 1A10                        l1940 20EA  
                      l2484 1D2E                        l1950 2186                        l2558 1A22  
                      l1944 2100                        l1960 1EB0                        l2584 1F7C  
                      l1970 1EE8                        l1948 2182                        l1964 1EBE  
                      l1990 171E                        l1974 1F14                        l1966 1ED0  
                      ?_pad 0015                        l1996 1746                        STR_1 1046  
                      STR_2 1015                        STR_3 1023                        STR_4 1030  
                      STR_5 1050                        STR_6 1007                        STR_7 1046  
                      STR_8 103B                        STR_9 1046                        u1110 1398  
                      u1040 18BC                        u1200 151A                        u1130 13BE  
                      u1300 1CDE                        u1140 14DA                        u1070 1358  
                      u2007 1E66                        u1320 1D24                        u1160 14FC  
                      u1080 135A                        u1240 15E2                        u2017 1B86  
                      u1161 14FA                        u1170 150A                        u2107 1C80  
                      u2027 1B94                        u1340 1BC0                        u1180 150E  
                      u1500 1976                        u2117 1CB4                        u2037 1BA6  
                      u1501 1974                        _LATA 000F89                        _LATB 000F8A  
                      u2207 21BA                        u2127 1CC4                        u2047 1BD6  
                      _LATC 000F8B                        u1280 1C9A                        u1360 1C04  
                      _LATD 000F8C                        u2137 1CF8                        u2057 1BEA  
                      _LATE 000F8D                        u2147 1D0A                        u2067 1C1E  
                      u1380 1C4A                        u2157 202A                        u2077 1C30  
                      u1550 1F9E                        u2167 2042                        u2087 1C66  
                      u1607 1AA4                        u1480 1D3C                        u2177 2054  
                      u2097 1C74                        u1617 1AC6                        u1490 1DA2  
                      u2187 2076                        u1707 1086                        u1627 1B08  
                      u2197 21B0                        u1717 109A                        u1637 1B2E  
                      u1807 116A                        u1727 10AE                        u1647 1B4E  
                      u1817 1180                        u1737 10C2                        u1657 1F44  
                      u1907 125E                        u1827 1196                        u1747 10DC  
                      u1667 1982                        u1917 1276                        u1837 11AC  
                      u1757 10F0                        u1677 1D48                        u1597 1A7C  
                      u1927 128E                        u1847 11C8                        u1767 1104  
                      u1687 1DC8                        u1937 12A6                        u1857 11DE  
                      u1777 1118                        u1697 1072                        u1947 12C4  
                      u1867 11F4                        u1787 112C                        u1957 12DC  
                      u1877 120A                        u1797 1154                        u1967 12F4  
                      u1887 1220                        u1977 130C                        u1897 1246  
                      u1987 1324                        u1997 1E20                        abs@a 0013  
                      _dbuf 008B                        _main 1A68                        _dtoa 1330  
                      _prec 0078                        _time 0080                        _nout 0074  
                      pad@i 001C                        pad@p 0019                        fsr1h 000FE2  
                      fsr2h 000FDA                        indf2 000FDF                        fsr1l 000FE1  
                      pad@w 001E                        fsr2l 000FD9                        start 0000  
           servoRotate180@i 0004               __CFG_MCLRE$ON 000000                ___param_bank 000000  
                     ??_abs 0015                       ??_pad 001B             __end_of___aodiv 183A  
                     ?_main 0001                       ?_dtoa 0020             __end_of___aomod 195E  
                     STR_10 1050                       STR_11 1007                       STR_12 1046  
                     STR_13 1046                       STR_14 1050                       STR_15 1007  
                     STR_16 1046                vfpfcnvrt@fmt 0046                       _TMR0H 000FD7  
                     _TMR0L 000FD6                       _TRISA 000F92                       _TRISB 000F93  
                     _TRISC 000F94                       _TRISD 000F95                       _TRISE 000F96  
             __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000  
             __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000             __end_of_lcdInst 2258  
            __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000  
            __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000  
             __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000             __end_of_initLCD 208E  
            __CFG_EBTRB$OFF 000000                       _flags 007A                       _fputc 1FB8  
                     _fputs 20E0                       _servo 1DFA                       pad@fp 0015  
                     _width 0076                       _putch 2240                       dtoa@d 0022  
                     dtoa@i 0042                       dtoa@n 003A                       dtoa@p 0034  
                     dtoa@s 0038                       dtoa@w 0036                       tablat 000FF5  
           send_nibble@data 0002             __end_of_pulse_e 21CC                       status 000FD8  
           __end_of_stepper 1DFA               _stepper2_back 1F2E            ??_servoRotate180 0003  
            __CFG_PBADEN$ON 000000             __initialization 21CC                 _system_init 214A  
              __end_of_main 1B70                __end_of_dtoa 1572                      ??_main 0072  
                    ??_dtoa 002A               __activetblptr 000001                      _ADCON1 000FC1  
              ?_send_nibble 0001                      ?_fputc 0005                      ?_fputs 000E  
                    ?_servo 0001                      ?_putch 0001          stepper2@steps2_adj 0064  
            ?_stepper2_back 0001                      _SSPADD 000FC8                      _SSPBUF 000FC9  
            __CFG_XINST$OFF 000000                vfprintf@cfmt 005A                   ??___aodiv 0011  
                 ??___aomod 0011              __CFG_STVREN$ON 000000                      clear_0 21D2  
                    clear_1 21DE                   ??_lcdInst 0004                      _printf 21F2  
                    pad@buf 0017                      dtoa@fp 0020                      _strlen 2178  
                 ??_initLCD 0005                      fputc@c 0005                      fputs@c 0012  
                    fputs@i 0013                      fputs@s 000E                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
          __end_of_vfprintf 20E0                   ??_pulse_e 0001            __end_of_stepper2 1A68  
                 ??_stepper 0064       pulse_e@interruptState 0001                  __accesstop 0080  
   __end_of__initialization 21E4               ___rparam_used 000001         full_drive@direction 0004  
            __pcstackCOMRAM 0001               __end_of_fputc 2024               __end_of_fputs 2118  
             __end_of_servo 1E98           servoRotate0@servo 0001               __end_of_putch 224C  
                   ??_fputc 0009                     ??_fputs 0012                     ??_servo 0006  
                   ??_putch 0004             ??_stepper2_back 0064                  __pbssBANK0 0080  
        __size_of_send_byte 0012                     ?_printf 005C      stepper2_back@direction 0065  
                   ?_strlen 0001          __size_of_vfpfcnvrt 0180                     _SSPCON1 000FC6  
                   _SSPCON2 000FC5                     _SSPSTAT 000FC7        __size_of_send_nibble 0016  
                   __Hparam 0000                     __Lparam 0000                ?_system_init 0001  
                   ___aodiv 16F2                     ___aomod 183A                   ?_vfprintf 0054  
              __psmallconst 1000                   ?_stepper2 0064                     _act_cnt 007E  
                   __pcinit 21CC                  _full_drive 1058                     __ramtop 1000  
                   _lcdInst 224C                     __ptext0 1A68                     __ptext1 214A  
                   __ptext2 1F2E                     __ptext3 195E                     __ptext4 1D26  
                   __ptext5 21F2                     __ptext6 208E                     __ptext7 1572  
                   __ptext8 1330                     __ptext9 1E98             __size_of_printf 0026  
                 _T0CONbits 000FD5             __size_of_strlen 002A                     _initLCD 2024  
              __size_of_abs 0032                __size_of_pad 0096                     _pulse_e 21A2  
                   _stepper 1D26        end_of_initialization 21E4       __end_of_LCD_SIZE_HORZ 1006  
         __end_of_send_byte 2240       __end_of_LCD_SIZE_VERT 1005                     fputc@fp 0007  
                   fputs@fp 0010           __end_of_vfpfcnvrt 16F2               ?_servoRotate0 0001  
                   postdec2 000FDD                     postinc0 000FEE                     postinc1 000FE6  
                   postinc2 000FDE                  ??_vfprintf 005A                  ??_stepper2 0066  
                   strlen@a 0003                     strlen@s 0001               stepper2@i_229 006D  
                 _TRISCbits 000F94                  _steps2_adj 007C               send_byte@data 0003  
            ??_servoRotate0 0003                 vfpfcnvrt@ap 0048                 vfpfcnvrt@fp 0044  
               vfpfcnvrt@ll 004C                 ?_full_drive 0001     __size_of_servoRotate180 00DC  
            __end_of_printf 2218              __end_of_strlen 21A2         start_initialization 21CC  
               __end_of_abs 214A                 __end_of_pad 1F2E       stepper2@count_stepper 006F  
               vfprintf@fmt 0056            __CFG_LPT1OSC$OFF 000000        __size_of_system_init 002E  
                  ??_printf 0060                    ??_strlen 0003                 __pbssCOMRAM 0074  
          ___aodiv@dividend 0001       __end_of_stepper2_back 1FB8         __size_of_full_drive 02D8  
         __CFG_CCP2MX$PORTC 000000                    ?___aodiv 0001                    ?___aomod 0001  
          ___aodiv@quotient 0013                    ?_lcdInst 0001           __size_of_vfprintf 0052  
         __size_of_stepper2 010A        full_drive@stepper_no 0001                    ?_initLCD 0001  
               __smallconst 1000        __end_of_servoRotate0 1D26               ??_send_nibble 0002  
                  ?_pulse_e 0001                    ?_stepper 0001              __size_of_fputc 006C  
            __size_of_fputs 0038              __size_of_servo 009E              __size_of_putch 000C  
                  _LATAbits 000F89                    _LATCbits 000F8B                    _LATDbits 000F8C  
                  _LATEbits 000F8D                   _send_byte 222E              _LCD_LINE1_ADDR 1003  
            _LCD_LINE2_ADDR 1006              _LCD_LINE3_ADDR 1002              _LCD_LINE4_ADDR 1001  
          __CFG_WDTPS$32768 000000  stepper2_back@count_stepper 0066              _servoRotate180 1B70  
                 _vfpfcnvrt 1572      __end_of_LCD_LINE1_ADDR 1004      __end_of_LCD_LINE2_ADDR 1007  
    __end_of_LCD_LINE3_ADDR 1003      __end_of_LCD_LINE4_ADDR 1002         __end_of_send_nibble 222E  
                ?_send_byte 0001                    __Hrparam 0000                  vfprintf@ap 0058  
                  __Lrparam 0000                  vfprintf@fp 0054                __Lsmallconst 1000  
        __CFG_BOREN$SBORDIS 000000      __end_of_servoRotate180 1C4C            __size_of___aodiv 0148  
          __size_of___aomod 0124                ??_full_drive 0003                  ?_vfpfcnvrt 0044  
           ___aodiv@divisor 0009             ___aodiv@counter 0011            __size_of_lcdInst 000C  
          __size_of_initLCD 006A                    _dtoa$654 0032                    __ptext10 2178  
                  __ptext11 20E0                    __ptext20 1C4C                    __ptext12 1FB8  
                  __ptext21 2024                    __ptext13 2240                    __ptext22 224C  
                  __ptext14 2118                    __ptext23 222E                    __ptext15 183A  
                  __ptext24 2218                    __ptext16 16F2                    __ptext25 21A2  
                  __ptext17 1058                    __ptext18 1DFA                    __ptext19 1B70  
          __size_of_pulse_e 002A            __size_of_stepper 00D4               __size_of_main 0108  
             __size_of_dtoa 0242          __end_of_full_drive 1330             ?_servoRotate180 0001  
                  _vfprintf 208E                    _stepper2 195E                   printf@fmt 005C  
          ___aomod@dividend 0001       __size_of_servoRotate0 00DA                   putch@data 0004  
                _INTCONbits 000FF2                   stepper2@i 006B                 _send_nibble 2218  
             _LCD_SIZE_HORZ 1005               _LCD_SIZE_VERT 1004                 ??_send_byte 0003  
             ??_system_init 0001                _servoRotate0 1C4C                    printf@ap 0062  
           ___aomod@divisor 0009                 ??_vfpfcnvrt 004A                 lcdInst@data 0004  
           ___aomod@counter 0011                    stepper@i 0065                 _SSPCON1bits 000FC6  
               _SSPCON2bits 000FC5                 _timer_count 0089                ___aodiv@sign 0012  
              ___aomod@sign 0012        stepper@count_stepper 0067  
