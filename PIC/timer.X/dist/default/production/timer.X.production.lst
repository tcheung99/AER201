

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Mar 11 11:17:42 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,inline
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,inline
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           ; Version 2.05
    42                           ; Generated 20/12/2018 GMT
    43                           ; 
    44                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F4620 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	smallconst
    77  001000                     __psmallconst:
    78                           	opt callstack 0
    79  001000  00                 	db	0
    80  001001                     _LCD_LINE4_ADDR:
    81                           	opt callstack 0
    82  001001  50                 	db	80
    83  001002                     __end_of_LCD_LINE4_ADDR:
    84                           	opt callstack 0
    85  001002                     _LCD_LINE3_ADDR:
    86                           	opt callstack 0
    87  001002  10                 	db	16
    88  001003                     __end_of_LCD_LINE3_ADDR:
    89                           	opt callstack 0
    90  001003                     _LCD_LINE1_ADDR:
    91                           	opt callstack 0
    92  001003  00                 	db	0
    93  001004                     __end_of_LCD_LINE1_ADDR:
    94                           	opt callstack 0
    95  001004                     _LCD_SIZE_VERT:
    96                           	opt callstack 0
    97  001004  04                 	db	4
    98  001005                     __end_of_LCD_SIZE_VERT:
    99                           	opt callstack 0
   100  001005                     _LCD_SIZE_HORZ:
   101                           	opt callstack 0
   102  001005  10                 	db	16
   103  001006                     __end_of_LCD_SIZE_HORZ:
   104                           	opt callstack 0
   105  001006                     _LCD_LINE2_ADDR:
   106                           	opt callstack 0
   107  001006  40                 	db	64
   108  001007                     __end_of_LCD_LINE2_ADDR:
   109                           	opt callstack 0
   110  0000                     _SSPBUF	set	4041
   111  0000                     _SSPCON2bits	set	4037
   112  0000                     _SSPCON1	set	4038
   113  0000                     _SSPADD	set	4040
   114  0000                     _TRISCbits	set	3988
   115  0000                     _SSPCON1bits	set	4038
   116  0000                     _SSPCON2	set	4037
   117  0000                     _SSPSTAT	set	4039
   118  0000                     _LATDbits	set	3980
   119  0000                     _LATD	set	3980
   120  0000                     _TRISD	set	3989
   121  0000                     _INTCONbits	set	4082
   122  0000                     _TMR0L	set	4054
   123  0000                     _TMR0H	set	4055
   124  0000                     _T0CONbits	set	4053
   125  001007                     STR_1:
   126  001007  74                 	db	116	;'t'
   127  001008  69                 	db	105	;'i'
   128  001009  6D                 	db	109	;'m'
   129  00100A  65                 	db	101	;'e'
   130  00100B  00                 	db	0
   131  00100C                     STR_2:
   132  00100C  25                 	db	37
   133  00100D  64                 	db	100	;'d'
   134  00100E  00                 	db	0
   135                           
   136                           ; #config settings
   137  00100F  00                 	db	0	; dummy byte at the end
   138  0000                     
   139                           	psect	cinit
   140  0019D0                     __pcinit:
   141                           	opt callstack 0
   142  0019D0                     start_initialization:
   143                           	opt callstack 0
   144  0019D0                     __initialization:
   145                           	opt callstack 0
   146                           
   147                           ; Clear objects allocated to BANK0 (34 bytes)
   148  0019D0  EE00  F080         	lfsr	0,__pbssBANK0
   149  0019D4  0E22               	movlw	34
   150  0019D6                     clear_0:
   151  0019D6  6AEE               	clrf	postinc0,c
   152  0019D8  06E8               	decf	wreg,f,c
   153  0019DA  E1FD               	bnz	clear_0
   154                           
   155                           ; Clear objects allocated to COMRAM (10 bytes)
   156  0019DC  EE00  F06D         	lfsr	0,__pbssCOMRAM
   157  0019E0  0E0A               	movlw	10
   158  0019E2                     clear_1:
   159  0019E2  6AEE               	clrf	postinc0,c
   160  0019E4  06E8               	decf	wreg,f,c
   161  0019E6  E1FD               	bnz	clear_1
   162  0019E8                     end_of_initialization:
   163                           	opt callstack 0
   164  0019E8                     __end_of__initialization:
   165                           	opt callstack 0
   166  0019E8  9077               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   167  0019EA  9277               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   168  0019EC  0E00               	movlw	low (__Lsmallconst shr (0+16))
   169  0019EE  6EF8               	movwf	tblptru,c
   170  0019F0  0E10               	movlw	high __Lsmallconst
   171  0019F2  6EF7               	movwf	tblptrh,c
   172  0019F4  0100               	movlb	0
   173  0019F6  EF58  F00D         	goto	_main	;jump to C main() function
   174                           
   175                           	psect	bssCOMRAM
   176  00006D                     __pbssCOMRAM:
   177                           	opt callstack 0
   178  00006D                     _nout:
   179                           	opt callstack 0
   180  00006D                     	ds	2
   181  00006F                     _width:
   182                           	opt callstack 0
   183  00006F                     	ds	2
   184  000071                     _prec:
   185                           	opt callstack 0
   186  000071                     	ds	2
   187  000073                     _flags:
   188                           	opt callstack 0
   189  000073                     	ds	2
   190  000075                     _cnt:
   191                           	opt callstack 0
   192  000075                     	ds	2
   193                           
   194                           	psect	bssBANK0
   195  000080                     __pbssBANK0:
   196                           	opt callstack 0
   197  000080                     _count:
   198                           	opt callstack 0
   199  000080                     	ds	2
   200  000082                     _dbuf:
   201                           	opt callstack 0
   202  000082                     	ds	32
   203                           
   204                           	psect	cstackBANK0
   205  0000A2                     __pcstackBANK0:
   206                           	opt callstack 0
   207  0000A2                     pulse_e@interruptState:
   208                           	opt callstack 0
   209                           
   210                           ; 1 bytes @ 0x0
   211  0000A2                     	ds	1
   212  0000A3                     send_nibble@data:
   213                           	opt callstack 0
   214                           
   215                           ; 1 bytes @ 0x1
   216  0000A3                     	ds	1
   217  0000A4                     send_byte@data:
   218                           	opt callstack 0
   219                           
   220                           ; 1 bytes @ 0x2
   221  0000A4                     	ds	1
   222  0000A5                     lcdInst@data:
   223                           	opt callstack 0
   224                           
   225                           ; 1 bytes @ 0x3
   226  0000A5                     	ds	1
   227  0000A6                     ??_initLCD:
   228                           
   229                           ; 1 bytes @ 0x4
   230  0000A6                     	ds	1
   231  0000A7                     
   232                           ; 1 bytes @ 0x5
   233                           
   234                           	psect	cstackCOMRAM
   235  000001                     __pcstackCOMRAM:
   236                           	opt callstack 0
   237  000001                     ?_strlen:
   238                           	opt callstack 0
   239  000001                     ?___awdiv:
   240                           	opt callstack 0
   241  000001                     ?___aodiv:
   242                           	opt callstack 0
   243  000001                     ?___aomod:
   244                           	opt callstack 0
   245  000001                     i2pulse_e@interruptState:
   246                           	opt callstack 0
   247  000001                     ___awdiv@dividend:
   248                           	opt callstack 0
   249  000001                     strlen@s:
   250                           	opt callstack 0
   251  000001                     ___aodiv@dividend:
   252                           	opt callstack 0
   253  000001                     ___aomod@dividend:
   254                           	opt callstack 0
   255                           
   256                           ; 8 bytes @ 0x0
   257  000001                     	ds	1
   258  000002                     i2send_nibble@data:
   259                           	opt callstack 0
   260                           
   261                           ; 1 bytes @ 0x1
   262  000002                     	ds	1
   263  000003                     i2send_byte@data:
   264                           	opt callstack 0
   265  000003                     ___awdiv@divisor:
   266                           	opt callstack 0
   267  000003                     strlen@a:
   268                           	opt callstack 0
   269                           
   270                           ; 2 bytes @ 0x2
   271  000003                     	ds	1
   272  000004                     putch@data:
   273                           	opt callstack 0
   274  000004                     i2lcdInst@data:
   275                           	opt callstack 0
   276                           
   277                           ; 1 bytes @ 0x3
   278  000004                     	ds	1
   279  000005                     ___awdiv@counter:
   280                           	opt callstack 0
   281  000005                     fputc@c:
   282                           	opt callstack 0
   283                           
   284                           ; 2 bytes @ 0x4
   285  000005                     	ds	1
   286  000006                     ___awdiv@sign:
   287                           	opt callstack 0
   288                           
   289                           ; 1 bytes @ 0x5
   290  000006                     	ds	1
   291  000007                     ___awdiv@quotient:
   292                           	opt callstack 0
   293  000007                     fputc@fp:
   294                           	opt callstack 0
   295                           
   296                           ; 2 bytes @ 0x6
   297  000007                     	ds	2
   298  000009                     ??_fputc:
   299  000009                     ___aodiv@divisor:
   300                           	opt callstack 0
   301  000009                     ___aomod@divisor:
   302                           	opt callstack 0
   303                           
   304                           ; 8 bytes @ 0x8
   305  000009                     	ds	5
   306  00000E                     fputs@s:
   307                           	opt callstack 0
   308                           
   309                           ; 2 bytes @ 0xD
   310  00000E                     	ds	2
   311  000010                     fputs@fp:
   312                           	opt callstack 0
   313                           
   314                           ; 2 bytes @ 0xF
   315  000010                     	ds	1
   316  000011                     ___aodiv@counter:
   317                           	opt callstack 0
   318  000011                     ___aomod@counter:
   319                           	opt callstack 0
   320                           
   321                           ; 1 bytes @ 0x10
   322  000011                     	ds	1
   323  000012                     ___aodiv@sign:
   324                           	opt callstack 0
   325  000012                     ___aomod@sign:
   326                           	opt callstack 0
   327  000012                     fputs@c:
   328                           	opt callstack 0
   329                           
   330                           ; 1 bytes @ 0x11
   331  000012                     	ds	1
   332  000013                     ?_abs:
   333                           	opt callstack 0
   334  000013                     abs@a:
   335                           	opt callstack 0
   336  000013                     fputs@i:
   337                           	opt callstack 0
   338  000013                     ___aodiv@quotient:
   339                           	opt callstack 0
   340                           
   341                           ; 8 bytes @ 0x12
   342  000013                     	ds	2
   343  000015                     ??_abs:
   344  000015                     ?_pad:
   345                           	opt callstack 0
   346  000015                     pad@fp:
   347                           	opt callstack 0
   348                           
   349                           ; 2 bytes @ 0x14
   350  000015                     	ds	2
   351  000017                     pad@buf:
   352                           	opt callstack 0
   353                           
   354                           ; 2 bytes @ 0x16
   355  000017                     	ds	2
   356  000019                     pad@p:
   357                           	opt callstack 0
   358                           
   359                           ; 2 bytes @ 0x18
   360  000019                     	ds	2
   361  00001B                     ??_pad:
   362                           
   363                           ; 1 bytes @ 0x1A
   364  00001B                     	ds	1
   365  00001C                     pad@i:
   366                           	opt callstack 0
   367                           
   368                           ; 2 bytes @ 0x1B
   369  00001C                     	ds	2
   370  00001E                     pad@w:
   371                           	opt callstack 0
   372                           
   373                           ; 2 bytes @ 0x1D
   374  00001E                     	ds	2
   375  000020                     ?_dtoa:
   376                           	opt callstack 0
   377  000020                     dtoa@fp:
   378                           	opt callstack 0
   379                           
   380                           ; 2 bytes @ 0x1F
   381  000020                     	ds	2
   382  000022                     dtoa@d:
   383                           	opt callstack 0
   384                           
   385                           ; 8 bytes @ 0x21
   386  000022                     	ds	8
   387  00002A                     ??_dtoa:
   388                           
   389                           ; 1 bytes @ 0x29
   390  00002A                     	ds	8
   391  000032                     _dtoa$471:
   392                           	opt callstack 0
   393                           
   394                           ; 2 bytes @ 0x31
   395  000032                     	ds	2
   396  000034                     dtoa@p:
   397                           	opt callstack 0
   398                           
   399                           ; 2 bytes @ 0x33
   400  000034                     	ds	2
   401  000036                     dtoa@w:
   402                           	opt callstack 0
   403                           
   404                           ; 2 bytes @ 0x35
   405  000036                     	ds	2
   406  000038                     dtoa@s:
   407                           	opt callstack 0
   408                           
   409                           ; 2 bytes @ 0x37
   410  000038                     	ds	2
   411  00003A                     dtoa@n:
   412                           	opt callstack 0
   413                           
   414                           ; 8 bytes @ 0x39
   415  00003A                     	ds	8
   416  000042                     dtoa@i:
   417                           	opt callstack 0
   418                           
   419                           ; 2 bytes @ 0x41
   420  000042                     	ds	2
   421  000044                     ?_vfpfcnvrt:
   422                           	opt callstack 0
   423  000044                     vfpfcnvrt@fp:
   424                           	opt callstack 0
   425                           
   426                           ; 2 bytes @ 0x43
   427  000044                     	ds	2
   428  000046                     vfpfcnvrt@fmt:
   429                           	opt callstack 0
   430                           
   431                           ; 2 bytes @ 0x45
   432  000046                     	ds	2
   433  000048                     vfpfcnvrt@ap:
   434                           	opt callstack 0
   435                           
   436                           ; 2 bytes @ 0x47
   437  000048                     	ds	2
   438  00004A                     ??_vfpfcnvrt:
   439                           
   440                           ; 1 bytes @ 0x49
   441  00004A                     	ds	2
   442  00004C                     vfpfcnvrt@ll:
   443                           	opt callstack 0
   444                           
   445                           ; 8 bytes @ 0x4B
   446  00004C                     	ds	8
   447  000054                     ?_vfprintf:
   448                           	opt callstack 0
   449  000054                     vfprintf@fp:
   450                           	opt callstack 0
   451                           
   452                           ; 2 bytes @ 0x53
   453  000054                     	ds	2
   454  000056                     vfprintf@fmt:
   455                           	opt callstack 0
   456                           
   457                           ; 2 bytes @ 0x55
   458  000056                     	ds	2
   459  000058                     vfprintf@ap:
   460                           	opt callstack 0
   461                           
   462                           ; 2 bytes @ 0x57
   463  000058                     	ds	2
   464  00005A                     vfprintf@cfmt:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0x59
   468  00005A                     	ds	2
   469  00005C                     ?_printf:
   470                           	opt callstack 0
   471  00005C                     printf@fmt:
   472                           	opt callstack 0
   473                           
   474                           ; 2 bytes @ 0x5B
   475  00005C                     	ds	4
   476  000060                     
   477                           ; 1 bytes @ 0x5F
   478  000060                     	ds	2
   479  000062                     printf@ap:
   480                           	opt callstack 0
   481                           
   482                           ; 2 bytes @ 0x61
   483  000062                     	ds	2
   484  000064                     ??_SW_ISR:
   485                           
   486                           ; 1 bytes @ 0x63
   487  000064                     	ds	9
   488                           
   489 ;;
   490 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   491 ;;
   492 ;; *************** function _main *****************
   493 ;; Defined at:
   494 ;;		line 41 in file "main.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;		None
   497 ;; Auto vars:     Size  Location     Type
   498 ;;		None
   499 ;; Return value:  Size  Location     Type
   500 ;;                  1    wreg      void 
   501 ;; Registers used:
   502 ;;		wreg, status,2, status,0, cstack
   503 ;; Tracked objects:
   504 ;;		On entry : 0/0
   505 ;;		On exit  : 0/0
   506 ;;		Unchanged: 0/0
   507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   512 ;;Total ram usage:        0 bytes
   513 ;; Hardware stack levels required when called:   17
   514 ;; This function calls:
   515 ;;		_TIMER_INIT
   516 ;;		_initLCD
   517 ;; This function is called by:
   518 ;;		Startup code after reset
   519 ;; This function uses a non-reentrant model
   520 ;;
   521                           
   522                           	psect	text0
   523  001AB0                     __ptext0:
   524                           	opt callstack 0
   525  001AB0                     _main:
   526                           	opt callstack 14
   527                           
   528                           ;main.c: 42: void __attribute__((picinterrupt(("")))) SW_ISR( void ){
   529                           
   530                           ;incstack = 0
   531  001AB0  0E00               	movlw	0
   532  001AB2  6E95               	movwf	3989,c	;volatile
   533                           
   534                           ;main.c: 43:     INTCONbits.TMR0IF = 0;
   535  001AB4  0E00               	movlw	0
   536  001AB6  6E8C               	movwf	3980,c	;volatile
   537                           
   538                           ;main.c: 44:     TMR0H = (65536ul - (((10000000 / (4ul))/(64ul))/2ul)) >> 8;
   539  001AB8  EC05  F00C         	call	_initLCD	;wreg free
   540                           
   541                           ;main.c: 47:     LATDbits.LATD7 ^= 1u;
   542  001ABC  EC3A  F00D         	call	_TIMER_INIT	;wreg free
   543                           
   544                           ;main.c: 48:     cnt++;
   545  001AC0  0100               	movlb	0	; () banked
   546  001AC2  4B80               	infsnz	_count& (0+255),f,b
   547  001AC4  2B81               	incf	(_count+1)& (0+255),f,b
   548  001AC6                     l36:
   549                           
   550                           ;main.c: 50:     printf("time");
   551  001AC6  D7FF               	goto	l36
   552  001AC8                     __end_of_main:
   553                           	opt callstack 0
   554                           
   555 ;; *************** function _initLCD *****************
   556 ;; Defined at:
   557 ;;		line 69 in file "lcd.c"
   558 ;; Parameters:    Size  Location     Type
   559 ;;		None
   560 ;; Auto vars:     Size  Location     Type
   561 ;;		None
   562 ;; Return value:  Size  Location     Type
   563 ;;                  1    wreg      void 
   564 ;; Registers used:
   565 ;;		wreg, status,2, status,0, cstack
   566 ;; Tracked objects:
   567 ;;		On entry : 0/0
   568 ;;		On exit  : 0/0
   569 ;;		Unchanged: 0/0
   570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   573 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   574 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   575 ;;Total ram usage:        1 bytes
   576 ;; Hardware stack levels used:    1
   577 ;; Hardware stack levels required when called:   16
   578 ;; This function calls:
   579 ;;		_lcdInst
   580 ;;		_send_byte
   581 ;;		_send_nibble
   582 ;; This function is called by:
   583 ;;		_main
   584 ;; This function uses a non-reentrant model
   585 ;;
   586                           
   587                           	psect	text1
   588  00180A                     __ptext1:
   589                           	opt callstack 0
   590  00180A                     _initLCD:
   591                           	opt callstack 14
   592                           
   593                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
   594                           
   595                           ;incstack = 0
   596  00180A  0E31               	movlw	49
   597  00180C  0100               	movlb	0	; () banked
   598  00180E  6FA6               	movwf	??_initLCD& (0+255),b
   599  001810  0EB2               	movlw	178
   600  001812                     u1157:
   601  001812  2EE8               	decfsz	wreg,f,c
   602  001814  D7FE               	bra	u1157
   603  001816  2FA6               	decfsz	??_initLCD& (0+255),f,b
   604  001818  D7FC               	bra	u1157
   605  00181A  F000               	nop	
   606                           
   607                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
   608  00181C  948C               	bcf	3980,2,c	;volatile
   609                           
   610                           ;lcd.c: 74:     send_nibble(0b0011);
   611  00181E  0E03               	movlw	3
   612  001820  EC4B  F00D         	call	_send_nibble
   613                           
   614                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
   615  001824  0E11               	movlw	17
   616  001826  0100               	movlb	0	; () banked
   617  001828  6FA6               	movwf	??_initLCD& (0+255),b
   618  00182A  0E3A               	movlw	58
   619  00182C                     u1167:
   620  00182C  2EE8               	decfsz	wreg,f,c
   621  00182E  D7FE               	bra	u1167
   622  001830  2FA6               	decfsz	??_initLCD& (0+255),f,b
   623  001832  D7FC               	bra	u1167
   624  001834  F000               	nop	
   625                           
   626                           ;lcd.c: 76:     send_nibble(0b0011);
   627  001836  0E03               	movlw	3
   628  001838  EC4B  F00D         	call	_send_nibble
   629                           
   630                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
   631  00183C  0E7D               	movlw	125
   632  00183E                     u1177:
   633  00183E  2EE8               	decfsz	wreg,f,c
   634  001840  D7FE               	bra	u1177
   635                           
   636                           ;lcd.c: 78:     send_byte(0b00110010);
   637  001842  0E32               	movlw	50
   638  001844  EC64  F00D         	call	_send_byte
   639                           
   640                           ;lcd.c: 80:     send_byte(0b00101000);
   641  001848  0E28               	movlw	40
   642  00184A  EC64  F00D         	call	_send_byte
   643                           
   644                           ;lcd.c: 81:     send_byte(0b00001000);
   645  00184E  0E08               	movlw	8
   646  001850  EC64  F00D         	call	_send_byte
   647                           
   648                           ;lcd.c: 82:     send_byte(0b00000001);
   649  001854  0E01               	movlw	1
   650  001856  EC64  F00D         	call	_send_byte
   651                           
   652                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
   653  00185A  0E11               	movlw	17
   654  00185C  0100               	movlb	0	; () banked
   655  00185E  6FA6               	movwf	??_initLCD& (0+255),b
   656  001860  0E3A               	movlw	58
   657  001862                     u1187:
   658  001862  2EE8               	decfsz	wreg,f,c
   659  001864  D7FE               	bra	u1187
   660  001866  2FA6               	decfsz	??_initLCD& (0+255),f,b
   661  001868  D7FC               	bra	u1187
   662  00186A  F000               	nop	
   663                           
   664                           ;lcd.c: 84:     send_byte(0b00000110);
   665  00186C  0E06               	movlw	6
   666  00186E  EC64  F00D         	call	_send_byte
   667                           
   668                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
   669  001872  0E0F               	movlw	15
   670  001874  EC84  F00D         	call	_lcdInst
   671  001878  0012               	return		;funcret
   672  00187A                     __end_of_initLCD:
   673                           	opt callstack 0
   674                           
   675 ;; *************** function _lcdInst *****************
   676 ;; Defined at:
   677 ;;		line 64 in file "lcd.c"
   678 ;; Parameters:    Size  Location     Type
   679 ;;  data            1    wreg     unsigned char 
   680 ;; Auto vars:     Size  Location     Type
   681 ;;  data            1    3[BANK0 ] unsigned char 
   682 ;; Return value:  Size  Location     Type
   683 ;;                  1    wreg      void 
   684 ;; Registers used:
   685 ;;		wreg, status,2, status,0, cstack
   686 ;; Tracked objects:
   687 ;;		On entry : 0/0
   688 ;;		On exit  : 0/0
   689 ;;		Unchanged: 0/0
   690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   694 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   695 ;;Total ram usage:        1 bytes
   696 ;; Hardware stack levels used:    1
   697 ;; Hardware stack levels required when called:   15
   698 ;; This function calls:
   699 ;;		_send_byte
   700 ;; This function is called by:
   701 ;;		_initLCD
   702 ;;		_lcd_shift_cursor
   703 ;;		_lcd_shift_display
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           	psect	text2
   708  001B08                     __ptext2:
   709                           	opt callstack 0
   710  001B08                     _lcdInst:
   711                           	opt callstack 14
   712                           
   713                           ;incstack = 0
   714                           ;lcdInst@data stored from wreg
   715  001B08  0100               	movlb	0	; () banked
   716  001B0A  6FA5               	movwf	lcdInst@data& (0+255),b
   717                           
   718                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
   719  001B0C  948C               	bcf	3980,2,c	;volatile
   720                           
   721                           ;lcd.c: 66:     send_byte(data);
   722  001B0E  0100               	movlb	0	; () banked
   723  001B10  51A5               	movf	lcdInst@data& (0+255),w,b
   724  001B12  EC64  F00D         	call	_send_byte
   725  001B16  0012               	return		;funcret
   726  001B18                     __end_of_lcdInst:
   727                           	opt callstack 0
   728                           
   729 ;; *************** function _send_byte *****************
   730 ;; Defined at:
   731 ;;		line 55 in file "lcd.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;  data            1    wreg     unsigned char 
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  data            1    2[BANK0 ] unsigned char 
   736 ;; Return value:  Size  Location     Type
   737 ;;                  1    wreg      void 
   738 ;; Registers used:
   739 ;;		wreg, status,2, status,0, cstack
   740 ;; Tracked objects:
   741 ;;		On entry : 0/0
   742 ;;		On exit  : 0/0
   743 ;;		Unchanged: 0/0
   744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   748 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   749 ;;Total ram usage:        1 bytes
   750 ;; Hardware stack levels used:    1
   751 ;; Hardware stack levels required when called:   14
   752 ;; This function calls:
   753 ;;		_send_nibble
   754 ;; This function is called by:
   755 ;;		_lcdInst
   756 ;;		_initLCD
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           	psect	text3
   761  001AC8                     __ptext3:
   762                           	opt callstack 0
   763  001AC8                     _send_byte:
   764                           	opt callstack 15
   765                           
   766                           ;incstack = 0
   767                           ;send_byte@data stored from wreg
   768  001AC8  0100               	movlb	0	; () banked
   769  001ACA  6FA4               	movwf	send_byte@data& (0+255),b
   770                           
   771                           ;lcd.c: 57:     send_nibble(data >> 4);
   772  001ACC  0100               	movlb	0	; () banked
   773  001ACE  39A4               	swapf	send_byte@data& (0+255),w,b
   774  001AD0  0B0F               	andlw	15
   775  001AD2  EC4B  F00D         	call	_send_nibble
   776                           
   777                           ;lcd.c: 60:     send_nibble(data);
   778  001AD6  0100               	movlb	0	; () banked
   779  001AD8  51A4               	movf	send_byte@data& (0+255),w,b
   780  001ADA  EC4B  F00D         	call	_send_nibble
   781  001ADE  0012               	return		;funcret
   782  001AE0                     __end_of_send_byte:
   783                           	opt callstack 0
   784                           
   785 ;; *************** function _send_nibble *****************
   786 ;; Defined at:
   787 ;;		line 44 in file "lcd.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  data            1    wreg     unsigned char 
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  data            1    1[BANK0 ] unsigned char 
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      void 
   794 ;; Registers used:
   795 ;;		wreg, status,2, status,0, cstack
   796 ;; Tracked objects:
   797 ;;		On entry : 0/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   802 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   804 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   805 ;;Total ram usage:        1 bytes
   806 ;; Hardware stack levels used:    1
   807 ;; Hardware stack levels required when called:   13
   808 ;; This function calls:
   809 ;;		_pulse_e
   810 ;; This function is called by:
   811 ;;		_send_byte
   812 ;;		_initLCD
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           	psect	text4
   817  001A96                     __ptext4:
   818                           	opt callstack 0
   819  001A96                     _send_nibble:
   820                           	opt callstack 16
   821                           
   822                           ;incstack = 0
   823                           ;send_nibble@data stored from wreg
   824  001A96  0100               	movlb	0	; () banked
   825  001A98  6FA3               	movwf	send_nibble@data& (0+255),b
   826                           
   827                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
   828  001A9A  508C               	movf	3980,w,c	;volatile
   829  001A9C  0B0F               	andlw	15
   830  001A9E  6E8C               	movwf	3980,c	;volatile
   831                           
   832                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
   833  001AA0  0100               	movlb	0	; () banked
   834  001AA2  39A3               	swapf	send_nibble@data& (0+255),w,b
   835  001AA4  0BF0               	andlw	240
   836  001AA6  108C               	iorwf	3980,w,c	;volatile
   837  001AA8  6E8C               	movwf	3980,c	;volatile
   838                           
   839                           ; BSR set to: 0
   840                           ;lcd.c: 48:     pulse_e();
   841  001AAA  ECD1  F00C         	call	_pulse_e	;wreg free
   842  001AAE  0012               	return		;funcret
   843  001AB0                     __end_of_send_nibble:
   844                           	opt callstack 0
   845                           
   846 ;; *************** function _pulse_e *****************
   847 ;; Defined at:
   848 ;;		line 28 in file "lcd.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;		None
   851 ;; Auto vars:     Size  Location     Type
   852 ;;  interruptSta    1    0[BANK0 ] unsigned char 
   853 ;; Return value:  Size  Location     Type
   854 ;;                  1    wreg      void 
   855 ;; Registers used:
   856 ;;		wreg
   857 ;; Tracked objects:
   858 ;;		On entry : 0/0
   859 ;;		On exit  : 0/0
   860 ;;		Unchanged: 0/0
   861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   863 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   865 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   866 ;;Total ram usage:        1 bytes
   867 ;; Hardware stack levels used:    1
   868 ;; Hardware stack levels required when called:   12
   869 ;; This function calls:
   870 ;;		Nothing
   871 ;; This function is called by:
   872 ;;		_send_nibble
   873 ;; This function uses a non-reentrant model
   874 ;;
   875                           
   876                           	psect	text5
   877  0019A2                     __ptext5:
   878                           	opt callstack 0
   879  0019A2                     _pulse_e:
   880                           	opt callstack 16
   881                           
   882                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
   883                           
   884                           ;incstack = 0
   885  0019A2  0E00               	movlw	0
   886  0019A4  BEF2               	btfsc	4082,7,c	;volatile
   887  0019A6  0E01               	movlw	1
   888  0019A8  0100               	movlb	0	; () banked
   889  0019AA  6FA2               	movwf	pulse_e@interruptState& (0+255),b
   890                           
   891                           ; BSR set to: 0
   892                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
   893  0019AC  9EF2               	bcf	4082,7,c	;volatile
   894                           
   895                           ; BSR set to: 0
   896                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
   897  0019AE  868C               	bsf	3980,3,c	;volatile
   898                           
   899                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
   900  0019B0  0E14               	movlw	20
   901  0019B2                     u1197:
   902  0019B2  2EE8               	decfsz	wreg,f,c
   903  0019B4  D7FE               	bra	u1197
   904  0019B6  D000               	nop2	
   905                           
   906                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
   907  0019B8  968C               	bcf	3980,3,c	;volatile
   908                           
   909                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
   910  0019BA  0E53               	movlw	83
   911  0019BC                     u1207:
   912  0019BC  2EE8               	decfsz	wreg,f,c
   913  0019BE  D7FE               	bra	u1207
   914  0019C0  F000               	nop	
   915                           
   916                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
   917  0019C2  0100               	movlb	0	; () banked
   918  0019C4  B1A2               	btfsc	pulse_e@interruptState& (0+255),0,b
   919  0019C6  D002               	bra	u675
   920  0019C8  9EF2               	bcf	4082,7,c	;volatile
   921  0019CA  D001               	bra	u676
   922  0019CC                     u675:
   923  0019CC  8EF2               	bsf	4082,7,c	;volatile
   924  0019CE                     u676:
   925  0019CE  0012               	return		;funcret
   926  0019D0                     __end_of_pulse_e:
   927                           	opt callstack 0
   928                           
   929 ;; *************** function _TIMER_INIT *****************
   930 ;; Defined at:
   931 ;;		line 26 in file "main.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;		None
   934 ;; Auto vars:     Size  Location     Type
   935 ;;		None
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      void 
   938 ;; Registers used:
   939 ;;		wreg, status,2
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   949 ;;Total ram usage:        0 bytes
   950 ;; Hardware stack levels used:    1
   951 ;; Hardware stack levels required when called:   12
   952 ;; This function calls:
   953 ;;		Nothing
   954 ;; This function is called by:
   955 ;;		_main
   956 ;; This function uses a non-reentrant model
   957 ;;
   958                           
   959                           	psect	text6
   960  001A74                     __ptext6:
   961                           	opt callstack 0
   962  001A74                     _TIMER_INIT:
   963                           	opt callstack 18
   964                           
   965                           ;main.c: 27:     INTCONbits.PEIE = 1;
   966                           
   967                           ;incstack = 0
   968  001A74  9ED5               	bcf	4053,7,c	;volatile
   969                           
   970                           ;main.c: 28: }
   971  001A76  9CD5               	bcf	4053,6,c	;volatile
   972                           
   973                           ;main.c: 29: 
   974  001A78  9AD5               	bcf	4053,5,c	;volatile
   975                           
   976                           ;main.c: 30: void main( void ){
   977  001A7A  96D5               	bcf	4053,3,c	;volatile
   978                           
   979                           ;main.c: 31:     TRISD = 0x00;
   980  001A7C  50D5               	movf	4053,w,c	;volatile
   981  001A7E  0BF8               	andlw	-8
   982  001A80  0905               	iorlw	5
   983  001A82  6ED5               	movwf	4053,c	;volatile
   984                           
   985                           ;main.c: 32:     LATD = 0x00;
   986  001A84  0EB3               	movlw	179
   987  001A86  6ED7               	movwf	4055,c	;volatile
   988                           
   989                           ;main.c: 33:     initLCD();
   990  001A88  0EB5               	movlw	181
   991  001A8A  6ED6               	movwf	4054,c	;volatile
   992                           
   993                           ;main.c: 34: 
   994  001A8C  8ED5               	bsf	4053,7,c	;volatile
   995                           
   996                           ;main.c: 35: 
   997  001A8E  8AF2               	bsf	4082,5,c	;volatile
   998                           
   999                           ;main.c: 37:     count++;
  1000  001A90  8EF2               	bsf	4082,7,c	;volatile
  1001                           
  1002                           ;main.c: 38:     while (1){
  1003  001A92  8CF2               	bsf	4082,6,c	;volatile
  1004  001A94  0012               	return		;funcret
  1005  001A96                     __end_of_TIMER_INIT:
  1006                           	opt callstack 0
  1007                           
  1008 ;; *************** function _SW_ISR *****************
  1009 ;; Defined at:
  1010 ;;		line 53 in file "main.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;		None
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;		None
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  1    wreg      void 
  1017 ;; Registers used:
  1018 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1026 ;;      Temps:          9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1027 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1028 ;;Total ram usage:        9 bytes
  1029 ;; Hardware stack levels used:    1
  1030 ;; Hardware stack levels required when called:   11
  1031 ;; This function calls:
  1032 ;;		___awdiv
  1033 ;;		_printf
  1034 ;;		i2_lcdInst
  1035 ;; This function is called by:
  1036 ;;		Interrupt level 2
  1037 ;; This function uses a non-reentrant model
  1038 ;;
  1039                           
  1040                           	psect	intcode
  1041  000008                     __pintcode:
  1042                           	opt callstack 0
  1043  000008                     _SW_ISR:
  1044                           	opt callstack 14
  1045                           
  1046                           ;incstack = 0
  1047  000008  8277               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1048  00000A  ED1F  F00B         	call	int_func,f	;refresh shadow registers
  1049                           
  1050                           	psect	intcode_body
  1051  00163E                     __pintcode_body:
  1052                           	opt callstack 14
  1053  00163E                     int_func:
  1054                           	opt callstack 14
  1055  00163E  0006               	pop		; remove dummy address from shadow register refresh
  1056  001640  CFE1 F065          	movff	fsr1l,??_SW_ISR+1
  1057  001644  CFE2 F066          	movff	fsr1h,??_SW_ISR+2
  1058  001648  CFD9 F067          	movff	fsr2l,??_SW_ISR+3
  1059  00164C  CFDA F068          	movff	fsr2h,??_SW_ISR+4
  1060  001650  CFF6 F069          	movff	tblptrl,??_SW_ISR+5
  1061  001654  CFF7 F06A          	movff	tblptrh,??_SW_ISR+6
  1062  001658  CFF8 F06B          	movff	tblptru,??_SW_ISR+7
  1063  00165C  CFF5 F06C          	movff	tablat,??_SW_ISR+8
  1064                           
  1065                           ;main.c: 54:     }
  1066  001660  94F2               	bcf	4082,2,c	;volatile
  1067                           
  1068                           ;main.c: 55: 
  1069  001662  0EB3               	movlw	179
  1070  001664  6ED7               	movwf	4055,c	;volatile
  1071                           
  1072                           ;main.c: 56: }
  1073  001666  0EB5               	movlw	181
  1074  001668  6ED6               	movwf	4054,c	;volatile
  1075  00166A  7E8C               	btg	3980,7,c	;volatile
  1076  00166C  4A75               	infsnz	_cnt,f,c
  1077  00166E  2A76               	incf	_cnt+1,f,c
  1078  001670  0E01               	movlw	1
  1079  001672  EC8C  F00D         	call	i2_lcdInst
  1080  001676  0E11               	movlw	17
  1081  001678  6E64               	movwf	??_SW_ISR& (0+255),c
  1082  00167A  0E3A               	movlw	58
  1083  00167C                     i2u121_47:
  1084  00167C  2EE8               	decfsz	wreg,f,c
  1085  00167E  D7FE               	bra	i2u121_47
  1086  001680  2E64               	decfsz	??_SW_ISR& (0+255),f,c
  1087  001682  D7FC               	bra	i2u121_47
  1088  001684  D000               	nop2	
  1089  001686  0E07               	movlw	low STR_1
  1090  001688  6E5C               	movwf	printf@fmt,c
  1091  00168A  0E10               	movlw	high STR_1
  1092  00168C  6E5D               	movwf	printf@fmt+1,c
  1093  00168E  EC27  F00D         	call	_printf	;wreg free
  1094  001692  0E06               	movlw	low _LCD_LINE2_ADDR
  1095  001694  6EF6               	movwf	tblptrl,c
  1096  001696                     	if	0	;There is only one active tblptr byte
  1097  001696                     	endif
  1098  001696                     	if	0	;There are less than 3 active tblptr bytes
  1099  001696                     	endif
  1100  001696  0008               	tblrd		*
  1101  001698  50F5               	movf	tablat,w,c
  1102  00169A  0980               	iorlw	128
  1103  00169C  EC8C  F00D         	call	i2_lcdInst
  1104  0016A0  B075               	btfsc	_cnt,0,c
  1105  0016A2  D014               	goto	i2l45
  1106  0016A4  0E0C               	movlw	low STR_2
  1107  0016A6  6E5C               	movwf	printf@fmt,c
  1108  0016A8  0E10               	movlw	high STR_2
  1109  0016AA  6E5D               	movwf	printf@fmt+1,c
  1110  0016AC  C075  F001         	movff	_cnt,___awdiv@dividend
  1111  0016B0  C076  F002         	movff	_cnt+1,___awdiv@dividend+1
  1112  0016B4  0E00               	movlw	0
  1113  0016B6  6E04               	movwf	___awdiv@divisor+1,c
  1114  0016B8  0E02               	movlw	2
  1115  0016BA  6E03               	movwf	___awdiv@divisor,c
  1116  0016BC  ECC3  F00B         	call	___awdiv	;wreg free
  1117  0016C0  C001  F05E         	movff	?___awdiv,?_printf+2
  1118  0016C4  C002  F05F         	movff	?___awdiv+1,?_printf+3
  1119  0016C8  EC27  F00D         	call	_printf	;wreg free
  1120  0016CC                     i2l45:
  1121  0016CC  C06C  FFF5         	movff	??_SW_ISR+8,tablat
  1122  0016D0  C06B  FFF8         	movff	??_SW_ISR+7,tblptru
  1123  0016D4  C06A  FFF7         	movff	??_SW_ISR+6,tblptrh
  1124  0016D8  C069  FFF6         	movff	??_SW_ISR+5,tblptrl
  1125  0016DC  C068  FFDA         	movff	??_SW_ISR+4,fsr2h
  1126  0016E0  C067  FFD9         	movff	??_SW_ISR+3,fsr2l
  1127  0016E4  C066  FFE2         	movff	??_SW_ISR+2,fsr1h
  1128  0016E8  C065  FFE1         	movff	??_SW_ISR+1,fsr1l
  1129  0016EC  9277               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1130  0016EE  0011               	retfie		f
  1131  0016F0                     __end_of_SW_ISR:
  1132                           	opt callstack 0
  1133                           
  1134 ;; *************** function i2_lcdInst *****************
  1135 ;; Defined at:
  1136 ;;		line 64 in file "lcd.c"
  1137 ;; Parameters:    Size  Location     Type
  1138 ;;  data            1    wreg     unsigned char 
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  data            1    3[COMRAM] unsigned char 
  1141 ;; Return value:  Size  Location     Type
  1142 ;;                  1    wreg      void 
  1143 ;; Registers used:
  1144 ;;		wreg, status,2, status,0, cstack
  1145 ;; Tracked objects:
  1146 ;;		On entry : 0/0
  1147 ;;		On exit  : 0/0
  1148 ;;		Unchanged: 0/0
  1149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1153 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1154 ;;Total ram usage:        1 bytes
  1155 ;; Hardware stack levels used:    1
  1156 ;; Hardware stack levels required when called:    3
  1157 ;; This function calls:
  1158 ;;		i2_send_byte
  1159 ;; This function is called by:
  1160 ;;		_SW_ISR
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164                           	psect	text8
  1165  001B18                     __ptext8:
  1166                           	opt callstack 0
  1167  001B18                     i2_lcdInst:
  1168                           	opt callstack 21
  1169                           
  1170                           ;incstack = 0
  1171                           ;i2lcdInst@data stored from wreg
  1172  001B18  6E04               	movwf	i2lcdInst@data,c
  1173                           
  1174                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
  1175  001B1A  948C               	bcf	3980,2,c	;volatile
  1176                           
  1177                           ;lcd.c: 66:     send_byte(data);
  1178  001B1C  5004               	movf	i2lcdInst@data,w,c
  1179  001B1E  EC7B  F00D         	call	i2_send_byte
  1180  001B22  0012               	return		;funcret
  1181  001B24                     __end_ofi2_lcdInst:
  1182                           	opt callstack 0
  1183                           
  1184 ;; *************** function _printf *****************
  1185 ;; Defined at:
  1186 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  1187 ;; Parameters:    Size  Location     Type
  1188 ;;  fmt             2   91[COMRAM] PTR const unsigned char 
  1189 ;;		 -> STR_2(3), STR_1(5), 
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;  ap              2   97[COMRAM] PTR void [1]
  1192 ;;		 -> ?_printf(2), 
  1193 ;;  ret             2    0        int 
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  2   91[COMRAM] int 
  1196 ;; Registers used:
  1197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1203 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1204 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1206 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1207 ;;Total ram usage:        8 bytes
  1208 ;; Hardware stack levels used:    1
  1209 ;; Hardware stack levels required when called:   10
  1210 ;; This function calls:
  1211 ;;		_vfprintf
  1212 ;; This function is called by:
  1213 ;;		_SW_ISR
  1214 ;; This function uses a non-reentrant model
  1215 ;;
  1216                           
  1217                           	psect	text9
  1218  001A4E                     __ptext9:
  1219                           	opt callstack 0
  1220  001A4E                     _printf:
  1221                           	opt callstack 14
  1222                           
  1223                           ;incstack = 0
  1224  001A4E  0E5E               	movlw	low (?_printf+2)
  1225  001A50  6E62               	movwf	printf@ap,c
  1226  001A52  0E00               	movlw	high (?_printf+2)
  1227  001A54  6E63               	movwf	printf@ap+1,c
  1228  001A56  0E00               	movlw	0
  1229  001A58  6E54               	movwf	vfprintf@fp,c
  1230  001A5A  0E00               	movlw	0
  1231  001A5C  6E55               	movwf	vfprintf@fp+1,c
  1232  001A5E  C05C  F056         	movff	printf@fmt,vfprintf@fmt
  1233  001A62  C05D  F057         	movff	printf@fmt+1,vfprintf@fmt+1
  1234  001A66  0E62               	movlw	low printf@ap
  1235  001A68  6E58               	movwf	vfprintf@ap,c
  1236  001A6A  0E00               	movlw	high printf@ap
  1237  001A6C  6E59               	movwf	vfprintf@ap+1,c
  1238  001A6E  EC73  F00C         	call	_vfprintf	;wreg free
  1239  001A72  0012               	return		;funcret
  1240  001A74                     __end_of_printf:
  1241                           	opt callstack 0
  1242                           
  1243 ;; *************** function _vfprintf *****************
  1244 ;; Defined at:
  1245 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1246 ;; Parameters:    Size  Location     Type
  1247 ;;  fp              2   83[COMRAM] PTR struct _IO_FILE
  1248 ;;		 -> NULL(0), 
  1249 ;;  fmt             2   85[COMRAM] PTR const unsigned char 
  1250 ;;		 -> STR_2(3), STR_1(5), 
  1251 ;;  ap              2   87[COMRAM] PTR PTR void 
  1252 ;;		 -> printf@ap(2), 
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;  cfmt            2   89[COMRAM] PTR unsigned char 
  1255 ;;		 -> STR_2(3), STR_1(5), 
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  2   83[COMRAM] int 
  1258 ;; Registers used:
  1259 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1265 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1266 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1268 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1269 ;;Total ram usage:        8 bytes
  1270 ;; Hardware stack levels used:    1
  1271 ;; Hardware stack levels required when called:    9
  1272 ;; This function calls:
  1273 ;;		_vfpfcnvrt
  1274 ;; This function is called by:
  1275 ;;		_printf
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278                           
  1279                           	psect	text10
  1280  0018E6                     __ptext10:
  1281                           	opt callstack 0
  1282  0018E6                     _vfprintf:
  1283                           	opt callstack 14
  1284                           
  1285                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1286                           
  1287                           ;incstack = 0
  1288  0018E6  C056  F05A         	movff	vfprintf@fmt,vfprintf@cfmt
  1289  0018EA  C057  F05B         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1290                           
  1291                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1292  0018EE  0E00               	movlw	0
  1293  0018F0  6E6E               	movwf	_nout+1,c
  1294  0018F2  0E00               	movlw	0
  1295  0018F4  6E6D               	movwf	_nout,c
  1296                           
  1297                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1298  0018F6  D012               	goto	i2l1679
  1299  0018F8                     i2l1677:
  1300                           
  1301                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1302  0018F8  C054  F044         	movff	vfprintf@fp,vfpfcnvrt@fp
  1303  0018FC  C055  F045         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1304  001900  0E5A               	movlw	low vfprintf@cfmt
  1305  001902  6E46               	movwf	vfpfcnvrt@fmt,c
  1306  001904  0E00               	movlw	high vfprintf@cfmt
  1307  001906  6E47               	movwf	vfpfcnvrt@fmt+1,c
  1308  001908  C058  F048         	movff	vfprintf@ap,vfpfcnvrt@ap
  1309  00190C  C059  F049         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1310  001910  EC29  F009         	call	_vfpfcnvrt	;wreg free
  1311  001914  5044               	movf	?_vfpfcnvrt,w,c
  1312  001916  266D               	addwf	_nout,f,c
  1313  001918  5045               	movf	?_vfpfcnvrt+1,w,c
  1314  00191A  226E               	addwfc	_nout+1,f,c
  1315  00191C                     i2l1679:
  1316                           
  1317                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1318  00191C  C05A  FFF6         	movff	vfprintf@cfmt,tblptrl
  1319  001920  C05B  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1320  001924                     	if	0	;tblptru may be non-zero
  1321  001924                     	endif
  1322  001924                     	if	0	;tblptru may be non-zero
  1323  001924                     	endif
  1324  001924  0008               	tblrd		*
  1325  001926  50F5               	movf	tablat,w,c
  1326  001928  0900               	iorlw	0
  1327  00192A  A4D8               	btfss	status,2,c
  1328  00192C  D7E5               	goto	i2l1677
  1329                           
  1330                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1331  00192E  C06D  F054         	movff	_nout,?_vfprintf
  1332  001932  C06E  F055         	movff	_nout+1,?_vfprintf+1
  1333  001936  0012               	return		;funcret
  1334  001938                     __end_of_vfprintf:
  1335                           	opt callstack 0
  1336                           
  1337 ;; *************** function _vfpfcnvrt *****************
  1338 ;; Defined at:
  1339 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;  fp              2   67[COMRAM] PTR struct _IO_FILE
  1342 ;;		 -> NULL(0), 
  1343 ;;  fmt             2   69[COMRAM] PTR PTR unsigned char 
  1344 ;;		 -> vfprintf@cfmt(2), 
  1345 ;;  ap              2   71[COMRAM] PTR PTR void 
  1346 ;;		 -> printf@ap(2), 
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;  ll              8   75[COMRAM] long long 
  1349 ;;  llu             8    0        unsigned long long 
  1350 ;;  f               4    0        unsigned long long 
  1351 ;;  vp              3    0        PTR void 
  1352 ;;  ct              3    0        unsigned char [3]
  1353 ;;  cp              3    0        PTR unsigned char 
  1354 ;;  i               2    0        int 
  1355 ;;  done            2    0        int 
  1356 ;;  c               1    0        unsigned char 
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  2   67[COMRAM] int 
  1359 ;; Registers used:
  1360 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1366 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1367 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1368 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1369 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1370 ;;Total ram usage:       16 bytes
  1371 ;; Hardware stack levels used:    1
  1372 ;; Hardware stack levels required when called:    8
  1373 ;; This function calls:
  1374 ;;		_dtoa
  1375 ;;		_fputc
  1376 ;; This function is called by:
  1377 ;;		_vfprintf
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text11
  1382  001252                     __ptext11:
  1383                           	opt callstack 0
  1384  001252                     _vfpfcnvrt:
  1385                           	opt callstack 14
  1386                           
  1387                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1388                           
  1389                           ;incstack = 0
  1390  001252  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1391  001256  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1392  00125A  CFDE FFF6          	movff	postinc2,tblptrl
  1393  00125E  CFDD FFF7          	movff	postdec2,tblptrh
  1394  001262                     	if	0	;tblptru may be non-zero
  1395  001262                     	endif
  1396  001262                     	if	0	;tblptru may be non-zero
  1397  001262                     	endif
  1398  001262  0008               	tblrd		*
  1399  001264  50F5               	movf	tablat,w,c
  1400  001266  0A25               	xorlw	37
  1401  001268  A4D8               	btfss	status,2,c
  1402  00126A  D099               	goto	i2l1661
  1403                           
  1404                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1405  00126C  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1406  001270  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1407  001274  2ADE               	incf	postinc2,f,c
  1408  001276  0E00               	movlw	0
  1409  001278  22DD               	addwfc	postdec2,f,c
  1410                           
  1411                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1412  00127A  0E00               	movlw	0
  1413  00127C  6E70               	movwf	_width+1,c
  1414  00127E  0E00               	movlw	0
  1415  001280  6E6F               	movwf	_width,c
  1416  001282  C06F  F073         	movff	_width,_flags
  1417  001286  C070  F074         	movff	_width+1,_flags+1
  1418                           
  1419                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1420  00128A  6871               	setf	_prec,c
  1421  00128C  6872               	setf	_prec+1,c
  1422                           
  1423                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1424  00128E  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1425  001292  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1426  001296  CFDE FFF6          	movff	postinc2,tblptrl
  1427  00129A  CFDD FFF7          	movff	postdec2,tblptrh
  1428  00129E                     	if	0	;tblptru may be non-zero
  1429  00129E                     	endif
  1430  00129E                     	if	0	;tblptru may be non-zero
  1431  00129E                     	endif
  1432  00129E  0008               	tblrd		*
  1433  0012A0  50F5               	movf	tablat,w,c
  1434  0012A2  0A64               	xorlw	100
  1435  0012A4  B4D8               	btfsc	status,2,c
  1436  0012A6  D00D               	goto	i2u103_40
  1437  0012A8  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1438  0012AC  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1439  0012B0  CFDE FFF6          	movff	postinc2,tblptrl
  1440  0012B4  CFDD FFF7          	movff	postdec2,tblptrh
  1441  0012B8                     	if	0	;tblptru may be non-zero
  1442  0012B8                     	endif
  1443  0012B8                     	if	0	;tblptru may be non-zero
  1444  0012B8                     	endif
  1445  0012B8  0008               	tblrd		*
  1446  0012BA  50F5               	movf	tablat,w,c
  1447  0012BC  0A69               	xorlw	105
  1448  0012BE  A4D8               	btfss	status,2,c
  1449  0012C0  D03F               	goto	i2l1645
  1450  0012C2                     i2u103_40:
  1451                           
  1452                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1453  0012C2  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1454  0012C6  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1455  0012CA  2ADE               	incf	postinc2,f,c
  1456  0012CC  0E00               	movlw	0
  1457  0012CE  22DD               	addwfc	postdec2,f,c
  1458                           
  1459                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1460  0012D0  C048  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1461  0012D4  C049  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1462  0012D8  CFDF F04A          	movff	indf2,??_vfpfcnvrt
  1463  0012DC  0E02               	movlw	2
  1464  0012DE  26DE               	addwf	postinc2,f,c
  1465  0012E0  CFDF F04B          	movff	indf2,??_vfpfcnvrt+1
  1466  0012E4  0E00               	movlw	0
  1467  0012E6  22DD               	addwfc	postdec2,f,c
  1468  0012E8  C04A  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1469  0012EC  C04B  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1470  0012F0  CFDE F04C          	movff	postinc2,vfpfcnvrt@ll
  1471  0012F4  CFDD F04D          	movff	postdec2,vfpfcnvrt@ll+1
  1472  0012F8  0E00               	movlw	0
  1473  0012FA  BE4D               	btfsc	vfpfcnvrt@ll+1,7,c
  1474  0012FC  0EFF               	movlw	-1
  1475  0012FE  6E4E               	movwf	vfpfcnvrt@ll+2,c
  1476  001300  6E4F               	movwf	vfpfcnvrt@ll+3,c
  1477  001302  6E50               	movwf	vfpfcnvrt@ll+4,c
  1478  001304  6E51               	movwf	vfpfcnvrt@ll+5,c
  1479  001306  6E52               	movwf	vfpfcnvrt@ll+6,c
  1480  001308  6E53               	movwf	vfpfcnvrt@ll+7,c
  1481                           
  1482                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1483  00130A  C044  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  1484  00130E  C045  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1485  001312  C04C  F022         	movff	vfpfcnvrt@ll,dtoa@d
  1486  001316  C04D  F023         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1487  00131A  C04E  F024         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1488  00131E  C04F  F025         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1489  001322  C050  F026         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1490  001326  C051  F027         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1491  00132A  C052  F028         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1492  00132E  C053  F029         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1493  001332  EC08  F008         	call	_dtoa	;wreg free
  1494  001336  C020  F044         	movff	?_dtoa,?_vfpfcnvrt
  1495  00133A  C021  F045         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1496  00133E  0012               	return	
  1497  001340                     i2l1645:
  1498                           
  1499                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1500  001340  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1501  001344  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1502  001348  CFDE FFF6          	movff	postinc2,tblptrl
  1503  00134C  CFDD FFF7          	movff	postdec2,tblptrh
  1504  001350                     	if	0	;tblptru may be non-zero
  1505  001350                     	endif
  1506  001350                     	if	0	;tblptru may be non-zero
  1507  001350                     	endif
  1508  001350  0008               	tblrd		*
  1509  001352  50F5               	movf	tablat,w,c
  1510  001354  0A25               	xorlw	37
  1511  001356  A4D8               	btfss	status,2,c
  1512  001358  D016               	goto	i2l1655
  1513                           
  1514                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1515  00135A  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1516  00135E  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1517  001362  2ADE               	incf	postinc2,f,c
  1518  001364  0E00               	movlw	0
  1519  001366  22DD               	addwfc	postdec2,f,c
  1520                           
  1521                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1522  001368  0E00               	movlw	0
  1523  00136A  6E06               	movwf	fputc@c+1,c
  1524  00136C  0E25               	movlw	37
  1525  00136E  6E05               	movwf	fputc@c,c
  1526  001370  C044  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1527  001374  C045  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1528  001378  EC3D  F00C         	call	_fputc	;wreg free
  1529  00137C                     i2l1651:
  1530                           
  1531                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1532  00137C  0E00               	movlw	0
  1533  00137E  6E45               	movwf	?_vfpfcnvrt+1,c
  1534  001380  0E01               	movlw	1
  1535  001382  6E44               	movwf	?_vfpfcnvrt,c
  1536  001384  0012               	return	
  1537  001386                     i2l1655:
  1538                           
  1539                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1540  001386  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1541  00138A  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1542  00138E  2ADE               	incf	postinc2,f,c
  1543  001390  0E00               	movlw	0
  1544  001392  22DD               	addwfc	postdec2,f,c
  1545                           
  1546                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1547  001394  0E00               	movlw	0
  1548  001396  6E45               	movwf	?_vfpfcnvrt+1,c
  1549  001398  0E00               	movlw	0
  1550  00139A  6E44               	movwf	?_vfpfcnvrt,c
  1551  00139C  0012               	return	
  1552  00139E                     i2l1661:
  1553                           
  1554                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1555  00139E  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1556  0013A2  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1557  0013A6  CFDE FFF6          	movff	postinc2,tblptrl
  1558  0013AA  CFDD FFF7          	movff	postdec2,tblptrh
  1559  0013AE                     	if	0	;tblptru may be non-zero
  1560  0013AE                     	endif
  1561  0013AE                     	if	0	;tblptru may be non-zero
  1562  0013AE                     	endif
  1563  0013AE  0008               	tblrd		*
  1564  0013B0  50F5               	movf	tablat,w,c
  1565  0013B2  6E05               	movwf	fputc@c,c
  1566  0013B4  6A06               	clrf	fputc@c+1,c
  1567  0013B6  C044  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1568  0013BA  C045  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1569  0013BE  EC3D  F00C         	call	_fputc	;wreg free
  1570                           
  1571                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1572  0013C2  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1573  0013C6  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1574  0013CA  2ADE               	incf	postinc2,f,c
  1575  0013CC  0E00               	movlw	0
  1576  0013CE  22DD               	addwfc	postdec2,f,c
  1577  0013D0  D7D5               	goto	i2l1651
  1578  0013D2                     __end_of_vfpfcnvrt:
  1579                           	opt callstack 0
  1580                           
  1581 ;; *************** function _dtoa *****************
  1582 ;; Defined at:
  1583 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1584 ;; Parameters:    Size  Location     Type
  1585 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  1586 ;;		 -> NULL(0), 
  1587 ;;  d               8   33[COMRAM] long long 
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;  n               8   57[COMRAM] long long 
  1590 ;;  i               2   65[COMRAM] int 
  1591 ;;  s               2   55[COMRAM] int 
  1592 ;;  w               2   53[COMRAM] int 
  1593 ;;  p               2   51[COMRAM] int 
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  2   31[COMRAM] int 
  1596 ;; Registers used:
  1597 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1603 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1604 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;Total ram usage:       36 bytes
  1608 ;; Hardware stack levels used:    1
  1609 ;; Hardware stack levels required when called:    7
  1610 ;; This function calls:
  1611 ;;		___aodiv
  1612 ;;		___aomod
  1613 ;;		_abs
  1614 ;;		_pad
  1615 ;; This function is called by:
  1616 ;;		_vfpfcnvrt
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           	psect	text12
  1621  001010                     __ptext12:
  1622                           	opt callstack 0
  1623  001010                     _dtoa:
  1624                           	opt callstack 14
  1625                           
  1626                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1627                           
  1628                           ;incstack = 0
  1629  001010  C022  F03A         	movff	dtoa@d,dtoa@n
  1630  001014  C023  F03B         	movff	dtoa@d+1,dtoa@n+1
  1631  001018  C024  F03C         	movff	dtoa@d+2,dtoa@n+2
  1632  00101C  C025  F03D         	movff	dtoa@d+3,dtoa@n+3
  1633  001020  C026  F03E         	movff	dtoa@d+4,dtoa@n+4
  1634  001024  C027  F03F         	movff	dtoa@d+5,dtoa@n+5
  1635  001028  C028  F040         	movff	dtoa@d+6,dtoa@n+6
  1636  00102C  C029  F041         	movff	dtoa@d+7,dtoa@n+7
  1637                           
  1638                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1639  001030  AE41               	btfss	dtoa@n+7,7,c
  1640  001032  D002               	goto	i2u86_40
  1641  001034  0E01               	movlw	1
  1642  001036  D001               	goto	i2u87_40
  1643  001038                     i2u86_40:
  1644  001038  0E00               	movlw	0
  1645  00103A                     i2u87_40:
  1646  00103A  6E38               	movwf	dtoa@s,c
  1647  00103C  6A39               	clrf	dtoa@s+1,c
  1648                           
  1649                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1650  00103E  5038               	movf	dtoa@s,w,c
  1651  001040  1039               	iorwf	dtoa@s+1,w,c
  1652  001042  B4D8               	btfsc	status,2,c
  1653  001044  D010               	goto	i2l1569
  1654                           
  1655                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1656  001046  1E41               	comf	dtoa@n+7,f,c
  1657  001048  1E40               	comf	dtoa@n+6,f,c
  1658  00104A  1E3F               	comf	dtoa@n+5,f,c
  1659  00104C  1E3E               	comf	dtoa@n+4,f,c
  1660  00104E  1E3D               	comf	dtoa@n+3,f,c
  1661  001050  1E3C               	comf	dtoa@n+2,f,c
  1662  001052  1E3B               	comf	dtoa@n+1,f,c
  1663  001054  6C3A               	negf	dtoa@n,c
  1664  001056  0E00               	movlw	0
  1665  001058  223B               	addwfc	dtoa@n+1,f,c
  1666  00105A  223C               	addwfc	dtoa@n+2,f,c
  1667  00105C  223D               	addwfc	dtoa@n+3,f,c
  1668  00105E  223E               	addwfc	dtoa@n+4,f,c
  1669  001060  223F               	addwfc	dtoa@n+5,f,c
  1670  001062  2240               	addwfc	dtoa@n+6,f,c
  1671  001064  2241               	addwfc	dtoa@n+7,f,c
  1672  001066                     i2l1569:
  1673                           
  1674                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1675  001066  AE72               	btfss	_prec+1,7,c
  1676                           
  1677                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1678  001068  9273               	bcf	_flags,1,c
  1679                           
  1680                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1681  00106A  BE72               	btfsc	_prec+1,7,c
  1682  00106C  D005               	goto	i2u90_40
  1683  00106E  5072               	movf	_prec+1,w,c
  1684  001070  E108               	bnz	i2l171
  1685  001072  0471               	decf	_prec,w,c
  1686  001074  B0D8               	btfsc	status,0,c
  1687  001076  D005               	goto	i2l171
  1688  001078                     i2u90_40:
  1689  001078  0E00               	movlw	0
  1690  00107A  6E35               	movwf	dtoa@p+1,c
  1691  00107C  0E01               	movlw	1
  1692  00107E  6E34               	movwf	dtoa@p,c
  1693  001080  D004               	goto	i2l173
  1694  001082                     i2l171:
  1695  001082  C071  F034         	movff	_prec,dtoa@p
  1696  001086  C072  F035         	movff	_prec+1,dtoa@p+1
  1697  00108A                     i2l173:
  1698                           
  1699                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1700  00108A  C06F  F036         	movff	_width,dtoa@w
  1701  00108E  C070  F037         	movff	_width+1,dtoa@w+1
  1702                           
  1703                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1704  001092  5038               	movf	dtoa@s,w,c
  1705  001094  1039               	iorwf	dtoa@s+1,w,c
  1706  001096  A4D8               	btfss	status,2,c
  1707  001098  D002               	goto	i2u92_40
  1708  00109A  A473               	btfss	_flags,2,c
  1709  00109C  D003               	goto	i2l1583
  1710  00109E                     i2u92_40:
  1711                           
  1712                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1713  00109E  0636               	decf	dtoa@w,f,c
  1714  0010A0  A0D8               	btfss	status,0,c
  1715  0010A2  0637               	decf	dtoa@w+1,f,c
  1716  0010A4                     i2l1583:
  1717                           
  1718                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1719  0010A4  0E00               	movlw	0
  1720  0010A6  6E43               	movwf	dtoa@i+1,c
  1721  0010A8  0E1F               	movlw	31
  1722  0010AA  6E42               	movwf	dtoa@i,c
  1723                           
  1724                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1725  0010AC  0E00               	movlw	0
  1726  0010AE  0100               	movlb	0	; () banked
  1727  0010B0  6FA1               	movwf	(_dbuf+31)& (0+255),b
  1728                           
  1729                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1730  0010B2  D07C               	goto	i2l1597
  1731  0010B4                     i2l1587:
  1732                           
  1733                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1734  0010B4  0642               	decf	dtoa@i,f,c
  1735  0010B6  A0D8               	btfss	status,0,c
  1736  0010B8  0643               	decf	dtoa@i+1,f,c
  1737                           
  1738                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1739  0010BA  0E82               	movlw	low _dbuf
  1740  0010BC  2442               	addwf	dtoa@i,w,c
  1741  0010BE  6ED9               	movwf	fsr2l,c
  1742  0010C0  0E00               	movlw	high _dbuf
  1743  0010C2  2043               	addwfc	dtoa@i+1,w,c
  1744  0010C4  6EDA               	movwf	fsr2h,c
  1745  0010C6  C03A  F001         	movff	dtoa@n,___aomod@dividend
  1746  0010CA  C03B  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1747  0010CE  C03C  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1748  0010D2  C03D  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1749  0010D6  C03E  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1750  0010DA  C03F  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1751  0010DE  C040  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1752  0010E2  C041  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1753  0010E6  0E0A               	movlw	10
  1754  0010E8  6E09               	movwf	___aomod@divisor,c
  1755  0010EA  0E00               	movlw	0
  1756  0010EC  6E0A               	movwf	___aomod@divisor+1,c
  1757  0010EE  0E00               	movlw	0
  1758  0010F0  6E0B               	movwf	___aomod@divisor+2,c
  1759  0010F2  0E00               	movlw	0
  1760  0010F4  6E0C               	movwf	___aomod@divisor+3,c
  1761  0010F6  0E00               	movlw	0
  1762  0010F8  6E0D               	movwf	___aomod@divisor+4,c
  1763  0010FA  0E00               	movlw	0
  1764  0010FC  6E0E               	movwf	___aomod@divisor+5,c
  1765  0010FE  0E00               	movlw	0
  1766  001100  6E0F               	movwf	___aomod@divisor+6,c
  1767  001102  0E00               	movlw	0
  1768  001104  6E10               	movwf	___aomod@divisor+7,c
  1769  001106  EC8D  F00A         	call	___aomod	;wreg free
  1770  00110A  C001  F02A         	movff	?___aomod,??_dtoa
  1771  00110E  C002  F02B         	movff	?___aomod+1,??_dtoa+1
  1772  001112  C003  F02C         	movff	?___aomod+2,??_dtoa+2
  1773  001116  C004  F02D         	movff	?___aomod+3,??_dtoa+3
  1774  00111A  C005  F02E         	movff	?___aomod+4,??_dtoa+4
  1775  00111E  C006  F02F         	movff	?___aomod+5,??_dtoa+5
  1776  001122  C007  F030         	movff	?___aomod+6,??_dtoa+6
  1777  001126  C008  F031         	movff	?___aomod+7,??_dtoa+7
  1778  00112A  C02A  F013         	movff	??_dtoa,abs@a
  1779  00112E  C02C  F014         	movff	??_dtoa+2,abs@a+1
  1780  001132  ECB8  F00C         	call	_abs	;wreg free
  1781  001136  5013               	movf	?_abs,w,c
  1782  001138  0F30               	addlw	48
  1783  00113A  6EDF               	movwf	indf2,c
  1784                           
  1785                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1786  00113C  0634               	decf	dtoa@p,f,c
  1787  00113E  A0D8               	btfss	status,0,c
  1788  001140  0635               	decf	dtoa@p+1,f,c
  1789                           
  1790                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1791  001142  0636               	decf	dtoa@w,f,c
  1792  001144  A0D8               	btfss	status,0,c
  1793  001146  0637               	decf	dtoa@w+1,f,c
  1794                           
  1795                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1796  001148  C03A  F001         	movff	dtoa@n,___aodiv@dividend
  1797  00114C  C03B  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1798  001150  C03C  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1799  001154  C03D  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1800  001158  C03E  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1801  00115C  C03F  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1802  001160  C040  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1803  001164  C041  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1804  001168  0E0A               	movlw	10
  1805  00116A  6E09               	movwf	___aodiv@divisor,c
  1806  00116C  0E00               	movlw	0
  1807  00116E  6E0A               	movwf	___aodiv@divisor+1,c
  1808  001170  0E00               	movlw	0
  1809  001172  6E0B               	movwf	___aodiv@divisor+2,c
  1810  001174  0E00               	movlw	0
  1811  001176  6E0C               	movwf	___aodiv@divisor+3,c
  1812  001178  0E00               	movlw	0
  1813  00117A  6E0D               	movwf	___aodiv@divisor+4,c
  1814  00117C  0E00               	movlw	0
  1815  00117E  6E0E               	movwf	___aodiv@divisor+5,c
  1816  001180  0E00               	movlw	0
  1817  001182  6E0F               	movwf	___aodiv@divisor+6,c
  1818  001184  0E00               	movlw	0
  1819  001186  6E10               	movwf	___aodiv@divisor+7,c
  1820  001188  ECE9  F009         	call	___aodiv	;wreg free
  1821  00118C  C001  F03A         	movff	?___aodiv,dtoa@n
  1822  001190  C002  F03B         	movff	?___aodiv+1,dtoa@n+1
  1823  001194  C003  F03C         	movff	?___aodiv+2,dtoa@n+2
  1824  001198  C004  F03D         	movff	?___aodiv+3,dtoa@n+3
  1825  00119C  C005  F03E         	movff	?___aodiv+4,dtoa@n+4
  1826  0011A0  C006  F03F         	movff	?___aodiv+5,dtoa@n+5
  1827  0011A4  C007  F040         	movff	?___aodiv+6,dtoa@n+6
  1828  0011A8  C008  F041         	movff	?___aodiv+7,dtoa@n+7
  1829  0011AC                     i2l1597:
  1830                           
  1831                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1832  0011AC  BE43               	btfsc	dtoa@i+1,7,c
  1833  0011AE  D01F               	goto	i2u97_40
  1834  0011B0  5043               	movf	dtoa@i+1,w,c
  1835  0011B2  E103               	bnz	i2u93_40
  1836  0011B4  0442               	decf	dtoa@i,w,c
  1837  0011B6  A0D8               	btfss	status,0,c
  1838  0011B8  D01A               	goto	i2u97_40
  1839  0011BA                     i2u93_40:
  1840  0011BA  503A               	movf	dtoa@n,w,c
  1841  0011BC  103B               	iorwf	dtoa@n+1,w,c
  1842  0011BE  103C               	iorwf	dtoa@n+2,w,c
  1843  0011C0  103D               	iorwf	dtoa@n+3,w,c
  1844  0011C2  103E               	iorwf	dtoa@n+4,w,c
  1845  0011C4  103F               	iorwf	dtoa@n+5,w,c
  1846  0011C6  1040               	iorwf	dtoa@n+6,w,c
  1847  0011C8  1041               	iorwf	dtoa@n+7,w,c
  1848  0011CA  A4D8               	btfss	status,2,c
  1849  0011CC  D773               	goto	i2l1587
  1850  0011CE  BE35               	btfsc	dtoa@p+1,7,c
  1851  0011D0  D005               	goto	i2u95_40
  1852  0011D2  5035               	movf	dtoa@p+1,w,c
  1853  0011D4  E102               	bnz	i2u95_41
  1854  0011D6  0434               	decf	dtoa@p,w,c
  1855  0011D8  B0D8               	btfsc	status,0,c
  1856  0011DA                     i2u95_41:
  1857  0011DA  D76C               	goto	i2l1587
  1858  0011DC                     i2u95_40:
  1859  0011DC  BE37               	btfsc	dtoa@w+1,7,c
  1860  0011DE  D007               	goto	i2u97_40
  1861  0011E0  5037               	movf	dtoa@w+1,w,c
  1862  0011E2  E103               	bnz	i2u96_40
  1863  0011E4  0436               	decf	dtoa@w,w,c
  1864  0011E6  A0D8               	btfss	status,0,c
  1865  0011E8  D002               	goto	i2u97_40
  1866  0011EA                     i2u96_40:
  1867  0011EA  B273               	btfsc	_flags,1,c
  1868  0011EC  D763               	goto	i2l1587
  1869  0011EE                     i2u97_40:
  1870                           
  1871                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1872  0011EE  5038               	movf	dtoa@s,w,c
  1873  0011F0  1039               	iorwf	dtoa@s+1,w,c
  1874  0011F2  A4D8               	btfss	status,2,c
  1875  0011F4  D002               	goto	i2u99_40
  1876  0011F6  A473               	btfss	_flags,2,c
  1877  0011F8  D017               	goto	i2l1621
  1878  0011FA                     i2u99_40:
  1879                           
  1880                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1881  0011FA  0642               	decf	dtoa@i,f,c
  1882  0011FC  A0D8               	btfss	status,0,c
  1883  0011FE  0643               	decf	dtoa@i+1,f,c
  1884                           
  1885                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1886  001200  5038               	movf	dtoa@s,w,c
  1887  001202  1039               	iorwf	dtoa@s+1,w,c
  1888  001204  A4D8               	btfss	status,2,c
  1889  001206  D004               	goto	i2l1617
  1890  001208  0E00               	movlw	0
  1891  00120A  6E33               	movwf	_dtoa$471+1,c
  1892  00120C  0E2B               	movlw	43
  1893  00120E  D003               	goto	L1
  1894  001210                     i2l1617:
  1895  001210  0E00               	movlw	0
  1896  001212  6E33               	movwf	_dtoa$471+1,c
  1897  001214  0E2D               	movlw	45
  1898  001216                     L1:
  1899  001216  6E32               	movwf	_dtoa$471,c
  1900  001218  0E82               	movlw	low _dbuf
  1901  00121A  2442               	addwf	dtoa@i,w,c
  1902  00121C  6ED9               	movwf	fsr2l,c
  1903  00121E  0E00               	movlw	high _dbuf
  1904  001220  2043               	addwfc	dtoa@i+1,w,c
  1905  001222  6EDA               	movwf	fsr2h,c
  1906  001224  C032  FFDF         	movff	_dtoa$471,indf2
  1907  001228                     i2l1621:
  1908                           
  1909                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1910  001228  C020  F015         	movff	dtoa@fp,pad@fp
  1911  00122C  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  1912  001230  0E82               	movlw	low _dbuf
  1913  001232  2442               	addwf	dtoa@i,w,c
  1914  001234  6E17               	movwf	pad@buf,c
  1915  001236  0E00               	movlw	high _dbuf
  1916  001238  2043               	addwfc	dtoa@i+1,w,c
  1917  00123A  6E18               	movwf	pad@buf+1,c
  1918  00123C  C036  F019         	movff	dtoa@w,pad@p
  1919  001240  C037  F01A         	movff	dtoa@w+1,pad@p+1
  1920  001244  EC78  F00B         	call	_pad	;wreg free
  1921  001248  C015  F020         	movff	?_pad,?_dtoa
  1922  00124C  C016  F021         	movff	?_pad+1,?_dtoa+1
  1923  001250  0012               	return		;funcret
  1924  001252                     __end_of_dtoa:
  1925                           	opt callstack 0
  1926                           
  1927 ;; *************** function _pad *****************
  1928 ;; Defined at:
  1929 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  1932 ;;		 -> NULL(0), 
  1933 ;;  buf             2   22[COMRAM] PTR unsigned char 
  1934 ;;		 -> dbuf(32), 
  1935 ;;  p               2   24[COMRAM] int 
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;  w               2   29[COMRAM] int 
  1938 ;;  i               2   27[COMRAM] int 
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  2   20[COMRAM] int 
  1941 ;; Registers used:
  1942 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1948 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1949 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;Total ram usage:       11 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    6
  1955 ;; This function calls:
  1956 ;;		_fputc
  1957 ;;		_fputs
  1958 ;;		_strlen
  1959 ;; This function is called by:
  1960 ;;		_dtoa
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           	psect	text13
  1965  0016F0                     __ptext13:
  1966                           	opt callstack 0
  1967  0016F0                     _pad:
  1968                           	opt callstack 14
  1969                           
  1970                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1971                           
  1972                           ;incstack = 0
  1973  0016F0  A073               	btfss	_flags,0,c
  1974  0016F2  D00A               	goto	i2l1457
  1975                           
  1976                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1977  0016F4  C017  F00E         	movff	pad@buf,fputs@s
  1978  0016F8  C018  F00F         	movff	pad@buf+1,fputs@s+1
  1979  0016FC  C015  F010         	movff	pad@fp,fputs@fp
  1980  001700  C016  F011         	movff	pad@fp+1,fputs@fp+1
  1981  001704  EC9C  F00C         	call	_fputs	;wreg free
  1982  001708                     i2l1457:
  1983                           
  1984                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1985  001708  BE1A               	btfsc	pad@p+1,7,c
  1986  00170A  D005               	goto	i2l1461
  1987  00170C  C019  F01E         	movff	pad@p,pad@w
  1988  001710  C01A  F01F         	movff	pad@p+1,pad@w+1
  1989  001714  D004               	goto	i2l160
  1990  001716                     i2l1461:
  1991  001716  0E00               	movlw	0
  1992  001718  6E1F               	movwf	pad@w+1,c
  1993  00171A  0E00               	movlw	0
  1994  00171C  6E1E               	movwf	pad@w,c
  1995  00171E                     i2l160:
  1996                           
  1997                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1998  00171E  0E00               	movlw	0
  1999  001720  6E1D               	movwf	pad@i+1,c
  2000  001722  0E00               	movlw	0
  2001  001724  6E1C               	movwf	pad@i,c
  2002                           
  2003                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2004  001726  D00C               	goto	i2l1467
  2005  001728                     i2l1463:
  2006                           
  2007                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  2008  001728  0E00               	movlw	0
  2009  00172A  6E06               	movwf	fputc@c+1,c
  2010  00172C  0E20               	movlw	32
  2011  00172E  6E05               	movwf	fputc@c,c
  2012  001730  C015  F007         	movff	pad@fp,fputc@fp
  2013  001734  C016  F008         	movff	pad@fp+1,fputc@fp+1
  2014  001738  EC3D  F00C         	call	_fputc	;wreg free
  2015                           
  2016                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  2017  00173C  4A1C               	infsnz	pad@i,f,c
  2018  00173E  2A1D               	incf	pad@i+1,f,c
  2019  001740                     i2l1467:
  2020                           
  2021                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2022  001740  501E               	movf	pad@w,w,c
  2023  001742  5C1C               	subwf	pad@i,w,c
  2024  001744  501D               	movf	pad@i+1,w,c
  2025  001746  0A80               	xorlw	128
  2026  001748  6E1B               	movwf	??_pad& (0+255),c
  2027  00174A  501F               	movf	pad@w+1,w,c
  2028  00174C  0A80               	xorlw	128
  2029  00174E  581B               	subwfb	??_pad& (0+255),w,c
  2030  001750  A0D8               	btfss	status,0,c
  2031  001752  D7EA               	goto	i2l1463
  2032                           
  2033                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  2034  001754  B073               	btfsc	_flags,0,c
  2035  001756  D00A               	goto	i2l1471
  2036                           
  2037                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  2038  001758  C017  F00E         	movff	pad@buf,fputs@s
  2039  00175C  C018  F00F         	movff	pad@buf+1,fputs@s+1
  2040  001760  C015  F010         	movff	pad@fp,fputs@fp
  2041  001764  C016  F011         	movff	pad@fp+1,fputs@fp+1
  2042  001768  EC9C  F00C         	call	_fputs	;wreg free
  2043  00176C                     i2l1471:
  2044                           
  2045                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  2046  00176C  C017  F001         	movff	pad@buf,strlen@s
  2047  001770  C018  F002         	movff	pad@buf+1,strlen@s+1
  2048  001774  ECFD  F00C         	call	_strlen	;wreg free
  2049  001778  501E               	movf	pad@w,w,c
  2050  00177A  2401               	addwf	?_strlen,w,c
  2051  00177C  6E15               	movwf	?_pad,c
  2052  00177E  501F               	movf	pad@w+1,w,c
  2053  001780  2002               	addwfc	?_strlen+1,w,c
  2054  001782  6E16               	movwf	?_pad+1,c
  2055  001784  0012               	return		;funcret
  2056  001786                     __end_of_pad:
  2057                           	opt callstack 0
  2058                           
  2059 ;; *************** function _strlen *****************
  2060 ;; Defined at:
  2061 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2064 ;;		 -> dbuf(32), 
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;  a               2    2[COMRAM] PTR const unsigned char 
  2067 ;;		 -> dbuf(32), 
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  2    0[COMRAM] unsigned int 
  2070 ;; Registers used:
  2071 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2072 ;; Tracked objects:
  2073 ;;		On entry : 0/0
  2074 ;;		On exit  : 0/0
  2075 ;;		Unchanged: 0/0
  2076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2077 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2078 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;Total ram usage:        4 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; This function calls:
  2084 ;;		Nothing
  2085 ;; This function is called by:
  2086 ;;		_pad
  2087 ;; This function uses a non-reentrant model
  2088 ;;
  2089                           
  2090                           	psect	text14
  2091  0019FA                     __ptext14:
  2092                           	opt callstack 0
  2093  0019FA                     _strlen:
  2094                           	opt callstack 19
  2095                           
  2096                           ;incstack = 0
  2097  0019FA  C001  F003         	movff	strlen@s,strlen@a
  2098  0019FE  C002  F004         	movff	strlen@s+1,strlen@a+1
  2099  001A02  D002               	goto	i2l1437
  2100  001A04                     i2l1435:
  2101  001A04  4A01               	infsnz	strlen@s,f,c
  2102  001A06  2A02               	incf	strlen@s+1,f,c
  2103  001A08                     i2l1437:
  2104  001A08  C001  FFD9         	movff	strlen@s,fsr2l
  2105  001A0C  C002  FFDA         	movff	strlen@s+1,fsr2h
  2106  001A10  50DF               	movf	indf2,w,c
  2107  001A12  A4D8               	btfss	status,2,c
  2108  001A14  D7F7               	goto	i2l1435
  2109  001A16  5003               	movf	strlen@a,w,c
  2110  001A18  5C01               	subwf	strlen@s,w,c
  2111  001A1A  6E01               	movwf	?_strlen,c
  2112  001A1C  5004               	movf	strlen@a+1,w,c
  2113  001A1E  5802               	subwfb	strlen@s+1,w,c
  2114  001A20  6E02               	movwf	?_strlen+1,c
  2115  001A22  0012               	return		;funcret
  2116  001A24                     __end_of_strlen:
  2117                           	opt callstack 0
  2118                           
  2119 ;; *************** function _fputs *****************
  2120 ;; Defined at:
  2121 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  2122 ;; Parameters:    Size  Location     Type
  2123 ;;  s               2   13[COMRAM] PTR const unsigned char 
  2124 ;;		 -> dbuf(32), 
  2125 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  2126 ;;		 -> NULL(0), 
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;  i               2   18[COMRAM] int 
  2129 ;;  c               1   17[COMRAM] unsigned char 
  2130 ;; Return value:  Size  Location     Type
  2131 ;;                  2   13[COMRAM] int 
  2132 ;; Registers used:
  2133 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2139 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2140 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2142 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2143 ;;Total ram usage:        7 bytes
  2144 ;; Hardware stack levels used:    1
  2145 ;; Hardware stack levels required when called:    5
  2146 ;; This function calls:
  2147 ;;		_fputc
  2148 ;; This function is called by:
  2149 ;;		_pad
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153                           	psect	text15
  2154  001938                     __ptext15:
  2155                           	opt callstack 0
  2156  001938                     _fputs:
  2157                           	opt callstack 14
  2158                           
  2159                           ;incstack = 0
  2160  001938  0E00               	movlw	0
  2161  00193A  6E14               	movwf	fputs@i+1,c
  2162  00193C  0E00               	movlw	0
  2163  00193E  6E13               	movwf	fputs@i,c
  2164  001940  D00B               	goto	i2l1431
  2165  001942                     i2l1427:
  2166  001942  C012  F005         	movff	fputs@c,fputc@c
  2167  001946  6A06               	clrf	fputc@c+1,c
  2168  001948  C010  F007         	movff	fputs@fp,fputc@fp
  2169  00194C  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  2170  001950  EC3D  F00C         	call	_fputc	;wreg free
  2171  001954  4A13               	infsnz	fputs@i,f,c
  2172  001956  2A14               	incf	fputs@i+1,f,c
  2173  001958                     i2l1431:
  2174  001958  5013               	movf	fputs@i,w,c
  2175  00195A  240E               	addwf	fputs@s,w,c
  2176  00195C  6ED9               	movwf	fsr2l,c
  2177  00195E  5014               	movf	fputs@i+1,w,c
  2178  001960  200F               	addwfc	fputs@s+1,w,c
  2179  001962  6EDA               	movwf	fsr2h,c
  2180  001964  50DF               	movf	indf2,w,c
  2181  001966  6E12               	movwf	fputs@c,c
  2182  001968  5012               	movf	fputs@c,w,c
  2183  00196A  B4D8               	btfsc	status,2,c
  2184  00196C  0012               	return	
  2185  00196E  D7E9               	goto	i2l1427
  2186  001970                     __end_of_fputs:
  2187                           	opt callstack 0
  2188                           
  2189 ;; *************** function _fputc *****************
  2190 ;; Defined at:
  2191 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;  c               2    4[COMRAM] int 
  2194 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  2195 ;;		 -> NULL(0), 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;		None
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  2    4[COMRAM] int 
  2200 ;; Registers used:
  2201 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2207 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2210 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;Total ram usage:        9 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; Hardware stack levels required when called:    4
  2214 ;; This function calls:
  2215 ;;		_putch
  2216 ;; This function is called by:
  2217 ;;		_pad
  2218 ;;		_vfpfcnvrt
  2219 ;;		_fputs
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           	psect	text16
  2224  00187A                     __ptext16:
  2225                           	opt callstack 0
  2226  00187A                     _fputc:
  2227                           	opt callstack 17
  2228                           
  2229                           ;incstack = 0
  2230  00187A  5007               	movf	fputc@fp,w,c
  2231  00187C  1008               	iorwf	fputc@fp+1,w,c
  2232  00187E  B4D8               	btfsc	status,2,c
  2233  001880  D004               	goto	i2u62_40
  2234  001882  5007               	movf	fputc@fp,w,c
  2235  001884  1008               	iorwf	fputc@fp+1,w,c
  2236  001886  A4D8               	btfss	status,2,c
  2237  001888  D004               	goto	i2l1417
  2238  00188A                     i2u62_40:
  2239  00188A  5005               	movf	fputc@c,w,c
  2240  00188C  EC92  F00D         	call	_putch
  2241  001890  0012               	return	
  2242  001892                     i2l1417:
  2243  001892  EE20 F004          	lfsr	2,4
  2244  001896  5007               	movf	fputc@fp,w,c
  2245  001898  26D9               	addwf	fsr2l,f,c
  2246  00189A  5008               	movf	fputc@fp+1,w,c
  2247  00189C  22DA               	addwfc	fsr2h,f,c
  2248  00189E  50DE               	movf	postinc2,w,c
  2249  0018A0  10DE               	iorwf	postinc2,w,c
  2250  0018A2  B4D8               	btfsc	status,2,c
  2251  0018A4  D016               	goto	i2u64_40
  2252  0018A6  EE20 F004          	lfsr	2,4
  2253  0018AA  5007               	movf	fputc@fp,w,c
  2254  0018AC  26D9               	addwf	fsr2l,f,c
  2255  0018AE  5008               	movf	fputc@fp+1,w,c
  2256  0018B0  22DA               	addwfc	fsr2h,f,c
  2257  0018B2  EE10 F002          	lfsr	1,2
  2258  0018B6  5007               	movf	fputc@fp,w,c
  2259  0018B8  26E1               	addwf	fsr1l,f,c
  2260  0018BA  5008               	movf	fputc@fp+1,w,c
  2261  0018BC  22E2               	addwfc	fsr1h,f,c
  2262  0018BE  50DE               	movf	postinc2,w,c
  2263  0018C0  5CE6               	subwf	postinc1,w,c
  2264  0018C2  50E6               	movf	postinc1,w,c
  2265  0018C4  0A80               	xorlw	128
  2266  0018C6  6E0D               	movwf	(??_fputc+4)& (0+255),c
  2267  0018C8  50DE               	movf	postinc2,w,c
  2268  0018CA  0A80               	xorlw	128
  2269  0018CC  580D               	subwfb	(??_fputc+4)& (0+255),w,c
  2270  0018CE  B0D8               	btfsc	status,0,c
  2271  0018D0  0012               	return	
  2272  0018D2                     i2u64_40:
  2273  0018D2  EE20 F002          	lfsr	2,2
  2274  0018D6  5007               	movf	fputc@fp,w,c
  2275  0018D8  26D9               	addwf	fsr2l,f,c
  2276  0018DA  5008               	movf	fputc@fp+1,w,c
  2277  0018DC  22DA               	addwfc	fsr2h,f,c
  2278  0018DE  2ADE               	incf	postinc2,f,c
  2279  0018E0  0E00               	movlw	0
  2280  0018E2  22DD               	addwfc	postdec2,f,c
  2281  0018E4  0012               	return		;funcret
  2282  0018E6                     __end_of_fputc:
  2283                           	opt callstack 0
  2284                           
  2285 ;; *************** function _putch *****************
  2286 ;; Defined at:
  2287 ;;		line 102 in file "lcd.c"
  2288 ;; Parameters:    Size  Location     Type
  2289 ;;  data            1    wreg     unsigned char 
  2290 ;; Auto vars:     Size  Location     Type
  2291 ;;  data            1    3[COMRAM] unsigned char 
  2292 ;; Return value:  Size  Location     Type
  2293 ;;                  1    wreg      void 
  2294 ;; Registers used:
  2295 ;;		wreg, status,2, status,0, cstack
  2296 ;; Tracked objects:
  2297 ;;		On entry : 0/0
  2298 ;;		On exit  : 0/0
  2299 ;;		Unchanged: 0/0
  2300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2302 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2304 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2305 ;;Total ram usage:        1 bytes
  2306 ;; Hardware stack levels used:    1
  2307 ;; Hardware stack levels required when called:    3
  2308 ;; This function calls:
  2309 ;;		i2_send_byte
  2310 ;; This function is called by:
  2311 ;;		_fputc
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           	psect	text17
  2316  001B24                     __ptext17:
  2317                           	opt callstack 0
  2318  001B24                     _putch:
  2319                           	opt callstack 17
  2320                           
  2321                           ;incstack = 0
  2322                           ;putch@data stored from wreg
  2323  001B24  6E04               	movwf	putch@data,c
  2324                           
  2325                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
  2326  001B26  848C               	bsf	3980,2,c	;volatile
  2327                           
  2328                           ;lcd.c: 104:     send_byte((unsigned char)data);
  2329  001B28  5004               	movf	putch@data,w,c
  2330  001B2A  EC7B  F00D         	call	i2_send_byte
  2331  001B2E  0012               	return		;funcret
  2332  001B30                     __end_of_putch:
  2333                           	opt callstack 0
  2334                           
  2335 ;; *************** function i2_send_byte *****************
  2336 ;; Defined at:
  2337 ;;		line 55 in file "lcd.c"
  2338 ;; Parameters:    Size  Location     Type
  2339 ;;  data            1    wreg     unsigned char 
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;  data            1    2[COMRAM] unsigned char 
  2342 ;; Return value:  Size  Location     Type
  2343 ;;                  1    wreg      void 
  2344 ;; Registers used:
  2345 ;;		wreg, status,2, status,0, cstack
  2346 ;; Tracked objects:
  2347 ;;		On entry : 0/0
  2348 ;;		On exit  : 0/0
  2349 ;;		Unchanged: 0/0
  2350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2352 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2354 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2355 ;;Total ram usage:        1 bytes
  2356 ;; Hardware stack levels used:    1
  2357 ;; Hardware stack levels required when called:    2
  2358 ;; This function calls:
  2359 ;;		i2_send_nibble
  2360 ;; This function is called by:
  2361 ;;		_putch
  2362 ;;		i2_lcdInst
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           	psect	text18
  2367  001AF6                     __ptext18:
  2368                           	opt callstack 0
  2369  001AF6                     i2_send_byte:
  2370                           	opt callstack 21
  2371                           
  2372                           ;incstack = 0
  2373                           ;i2send_byte@data stored from wreg
  2374  001AF6  6E03               	movwf	i2send_byte@data,c
  2375                           
  2376                           ;lcd.c: 57:     send_nibble(data >> 4);
  2377  001AF8  3803               	swapf	i2send_byte@data,w,c
  2378  001AFA  0B0F               	andlw	15
  2379  001AFC  EC70  F00D         	call	i2_send_nibble
  2380                           
  2381                           ;lcd.c: 60:     send_nibble(data);
  2382  001B00  5003               	movf	i2send_byte@data,w,c
  2383  001B02  EC70  F00D         	call	i2_send_nibble
  2384  001B06  0012               	return		;funcret
  2385  001B08                     __end_ofi2_send_byte:
  2386                           	opt callstack 0
  2387                           
  2388 ;; *************** function i2_send_nibble *****************
  2389 ;; Defined at:
  2390 ;;		line 44 in file "lcd.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;  data            1    wreg     unsigned char 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  data            1    1[COMRAM] unsigned char 
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  1    wreg      void 
  2397 ;; Registers used:
  2398 ;;		wreg, status,2, status,0, cstack
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2405 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;Total ram usage:        1 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:    1
  2411 ;; This function calls:
  2412 ;;		i2_pulse_e
  2413 ;; This function is called by:
  2414 ;;		i2_send_byte
  2415 ;; This function uses a non-reentrant model
  2416 ;;
  2417                           
  2418                           	psect	text19
  2419  001AE0                     __ptext19:
  2420                           	opt callstack 0
  2421  001AE0                     i2_send_nibble:
  2422                           	opt callstack 21
  2423                           
  2424                           ;incstack = 0
  2425                           ;i2send_nibble@data stored from wreg
  2426  001AE0  6E02               	movwf	i2send_nibble@data,c
  2427                           
  2428                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
  2429  001AE2  508C               	movf	3980,w,c	;volatile
  2430  001AE4  0B0F               	andlw	15
  2431  001AE6  6E8C               	movwf	3980,c	;volatile
  2432                           
  2433                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
  2434  001AE8  3802               	swapf	i2send_nibble@data,w,c
  2435  001AEA  0BF0               	andlw	240
  2436  001AEC  108C               	iorwf	3980,w,c	;volatile
  2437  001AEE  6E8C               	movwf	3980,c	;volatile
  2438                           
  2439                           ;lcd.c: 48:     pulse_e();
  2440  001AF0  EC12  F00D         	call	i2_pulse_e	;wreg free
  2441  001AF4  0012               	return		;funcret
  2442  001AF6                     __end_ofi2_send_nibble:
  2443                           	opt callstack 0
  2444                           
  2445 ;; *************** function i2_pulse_e *****************
  2446 ;; Defined at:
  2447 ;;		line 28 in file "lcd.c"
  2448 ;; Parameters:    Size  Location     Type
  2449 ;;		None
  2450 ;; Auto vars:     Size  Location     Type
  2451 ;;  pulse_e         1    0[COMRAM] unsigned char 
  2452 ;; Return value:  Size  Location     Type
  2453 ;;                  1    wreg      void 
  2454 ;; Registers used:
  2455 ;;		wreg
  2456 ;; Tracked objects:
  2457 ;;		On entry : 0/0
  2458 ;;		On exit  : 0/0
  2459 ;;		Unchanged: 0/0
  2460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2462 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2464 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2465 ;;Total ram usage:        1 bytes
  2466 ;; Hardware stack levels used:    1
  2467 ;; This function calls:
  2468 ;;		Nothing
  2469 ;; This function is called by:
  2470 ;;		i2_send_nibble
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text20
  2475  001A24                     __ptext20:
  2476                           	opt callstack 0
  2477  001A24                     i2_pulse_e:
  2478                           	opt callstack 21
  2479                           
  2480                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
  2481                           
  2482                           ;incstack = 0
  2483  001A24  0E00               	movlw	0
  2484  001A26  BEF2               	btfsc	4082,7,c	;volatile
  2485  001A28  0E01               	movlw	1
  2486  001A2A  6E01               	movwf	i2pulse_e@interruptState,c
  2487                           
  2488                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
  2489  001A2C  9EF2               	bcf	4082,7,c	;volatile
  2490                           
  2491                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
  2492  001A2E  868C               	bsf	3980,3,c	;volatile
  2493                           
  2494                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  2495  001A30  0E14               	movlw	20
  2496  001A32                     i2u122_47:
  2497  001A32  2EE8               	decfsz	wreg,f,c
  2498  001A34  D7FE               	bra	i2u122_47
  2499  001A36  D000               	nop2	
  2500                           
  2501                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
  2502  001A38  968C               	bcf	3980,3,c	;volatile
  2503                           
  2504                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  2505  001A3A  0E53               	movlw	83
  2506  001A3C                     i2u123_47:
  2507  001A3C  2EE8               	decfsz	wreg,f,c
  2508  001A3E  D7FE               	bra	i2u123_47
  2509  001A40  F000               	nop	
  2510                           
  2511                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
  2512  001A42  B001               	btfsc	i2pulse_e@interruptState,0,c
  2513  001A44  D002               	bra	i2u60_45
  2514  001A46  9EF2               	bcf	4082,7,c	;volatile
  2515  001A48  D001               	bra	i2u60_46
  2516  001A4A                     i2u60_45:
  2517  001A4A  8EF2               	bsf	4082,7,c	;volatile
  2518  001A4C                     i2u60_46:
  2519  001A4C  0012               	return		;funcret
  2520  001A4E                     __end_ofi2_pulse_e:
  2521                           	opt callstack 0
  2522                           
  2523 ;; *************** function _abs *****************
  2524 ;; Defined at:
  2525 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;  a               2   18[COMRAM] int 
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;		None
  2530 ;; Return value:  Size  Location     Type
  2531 ;;                  2   18[COMRAM] int 
  2532 ;; Registers used:
  2533 ;;		wreg, status,2, status,0
  2534 ;; Tracked objects:
  2535 ;;		On entry : 0/0
  2536 ;;		On exit  : 0/0
  2537 ;;		Unchanged: 0/0
  2538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2539 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2541 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2542 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2543 ;;Total ram usage:        4 bytes
  2544 ;; Hardware stack levels used:    1
  2545 ;; This function calls:
  2546 ;;		Nothing
  2547 ;; This function is called by:
  2548 ;;		_dtoa
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551                           
  2552                           	psect	text21
  2553  001970                     __ptext21:
  2554                           	opt callstack 0
  2555  001970                     _abs:
  2556                           	opt callstack 20
  2557                           
  2558                           ;incstack = 0
  2559  001970  BE14               	btfsc	abs@a+1,7,c
  2560  001972  D005               	goto	i2u72_40
  2561  001974  5014               	movf	abs@a+1,w,c
  2562  001976  E110               	bnz	i2l883
  2563  001978  0413               	decf	abs@a,w,c
  2564  00197A  B0D8               	btfsc	status,0,c
  2565  00197C  D00D               	goto	i2l883
  2566  00197E                     i2u72_40:
  2567  00197E  C013  F015         	movff	abs@a,??_abs
  2568  001982  C014  F016         	movff	abs@a+1,??_abs+1
  2569  001986  1E15               	comf	??_abs,f,c
  2570  001988  1E16               	comf	??_abs+1,f,c
  2571  00198A  4A15               	infsnz	??_abs,f,c
  2572  00198C  2A16               	incf	??_abs+1,f,c
  2573  00198E  C015  F013         	movff	??_abs,?_abs
  2574  001992  C016  F014         	movff	??_abs+1,?_abs+1
  2575  001996  0012               	return	
  2576  001998                     i2l883:
  2577  001998  C013  F013         	movff	abs@a,?_abs
  2578  00199C  C014  F014         	movff	abs@a+1,?_abs+1
  2579  0019A0  0012               	return		;funcret
  2580  0019A2                     __end_of_abs:
  2581                           	opt callstack 0
  2582                           
  2583 ;; *************** function ___aomod *****************
  2584 ;; Defined at:
  2585 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;  dividend        8    0[COMRAM] long long 
  2588 ;;  divisor         8    8[COMRAM] long long 
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;  sign            1   17[COMRAM] unsigned char 
  2591 ;;  counter         1   16[COMRAM] unsigned char 
  2592 ;; Return value:  Size  Location     Type
  2593 ;;                  8    0[COMRAM] long long 
  2594 ;; Registers used:
  2595 ;;		wreg, status,2, status,0
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2601 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2602 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;Total ram usage:       18 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; This function calls:
  2608 ;;		Nothing
  2609 ;; This function is called by:
  2610 ;;		_dtoa
  2611 ;; This function uses a non-reentrant model
  2612 ;;
  2613                           
  2614                           	psect	text22
  2615  00151A                     __ptext22:
  2616                           	opt callstack 0
  2617  00151A                     ___aomod:
  2618                           	opt callstack 20
  2619                           
  2620                           ;incstack = 0
  2621  00151A  0E00               	movlw	0
  2622  00151C  6E12               	movwf	___aomod@sign,c
  2623  00151E  AE08               	btfss	___aomod@dividend+7,7,c
  2624  001520  D012               	goto	i2l1531
  2625  001522  1E08               	comf	___aomod@dividend+7,f,c
  2626  001524  1E07               	comf	___aomod@dividend+6,f,c
  2627  001526  1E06               	comf	___aomod@dividend+5,f,c
  2628  001528  1E05               	comf	___aomod@dividend+4,f,c
  2629  00152A  1E04               	comf	___aomod@dividend+3,f,c
  2630  00152C  1E03               	comf	___aomod@dividend+2,f,c
  2631  00152E  1E02               	comf	___aomod@dividend+1,f,c
  2632  001530  6C01               	negf	___aomod@dividend,c
  2633  001532  0E00               	movlw	0
  2634  001534  2202               	addwfc	___aomod@dividend+1,f,c
  2635  001536  2203               	addwfc	___aomod@dividend+2,f,c
  2636  001538  2204               	addwfc	___aomod@dividend+3,f,c
  2637  00153A  2205               	addwfc	___aomod@dividend+4,f,c
  2638  00153C  2206               	addwfc	___aomod@dividend+5,f,c
  2639  00153E  2207               	addwfc	___aomod@dividend+6,f,c
  2640  001540  2208               	addwfc	___aomod@dividend+7,f,c
  2641  001542  0E01               	movlw	1
  2642  001544  6E12               	movwf	___aomod@sign,c
  2643  001546                     i2l1531:
  2644  001546  AE10               	btfss	___aomod@divisor+7,7,c
  2645  001548  D010               	goto	i2l1535
  2646  00154A  1E10               	comf	___aomod@divisor+7,f,c
  2647  00154C  1E0F               	comf	___aomod@divisor+6,f,c
  2648  00154E  1E0E               	comf	___aomod@divisor+5,f,c
  2649  001550  1E0D               	comf	___aomod@divisor+4,f,c
  2650  001552  1E0C               	comf	___aomod@divisor+3,f,c
  2651  001554  1E0B               	comf	___aomod@divisor+2,f,c
  2652  001556  1E0A               	comf	___aomod@divisor+1,f,c
  2653  001558  6C09               	negf	___aomod@divisor,c
  2654  00155A  0E00               	movlw	0
  2655  00155C  220A               	addwfc	___aomod@divisor+1,f,c
  2656  00155E  220B               	addwfc	___aomod@divisor+2,f,c
  2657  001560  220C               	addwfc	___aomod@divisor+3,f,c
  2658  001562  220D               	addwfc	___aomod@divisor+4,f,c
  2659  001564  220E               	addwfc	___aomod@divisor+5,f,c
  2660  001566  220F               	addwfc	___aomod@divisor+6,f,c
  2661  001568  2210               	addwfc	___aomod@divisor+7,f,c
  2662  00156A                     i2l1535:
  2663  00156A  5009               	movf	___aomod@divisor,w,c
  2664  00156C  100A               	iorwf	___aomod@divisor+1,w,c
  2665  00156E  100B               	iorwf	___aomod@divisor+2,w,c
  2666  001570  100C               	iorwf	___aomod@divisor+3,w,c
  2667  001572  100D               	iorwf	___aomod@divisor+4,w,c
  2668  001574  100E               	iorwf	___aomod@divisor+5,w,c
  2669  001576  100F               	iorwf	___aomod@divisor+6,w,c
  2670  001578  1010               	iorwf	___aomod@divisor+7,w,c
  2671  00157A  B4D8               	btfsc	status,2,c
  2672  00157C  D03C               	goto	i2l1551
  2673  00157E  0E01               	movlw	1
  2674  001580  6E11               	movwf	___aomod@counter,c
  2675  001582  D00A               	goto	i2l1541
  2676  001584                     i2l1539:
  2677  001584  90D8               	bcf	status,0,c
  2678  001586  3609               	rlcf	___aomod@divisor,f,c
  2679  001588  360A               	rlcf	___aomod@divisor+1,f,c
  2680  00158A  360B               	rlcf	___aomod@divisor+2,f,c
  2681  00158C  360C               	rlcf	___aomod@divisor+3,f,c
  2682  00158E  360D               	rlcf	___aomod@divisor+4,f,c
  2683  001590  360E               	rlcf	___aomod@divisor+5,f,c
  2684  001592  360F               	rlcf	___aomod@divisor+6,f,c
  2685  001594  3610               	rlcf	___aomod@divisor+7,f,c
  2686  001596  2A11               	incf	___aomod@counter,f,c
  2687  001598                     i2l1541:
  2688  001598  AE10               	btfss	___aomod@divisor+7,7,c
  2689  00159A  D7F4               	goto	i2l1539
  2690  00159C                     i2u83_40:
  2691  00159C  5009               	movf	___aomod@divisor,w,c
  2692  00159E  5C01               	subwf	___aomod@dividend,w,c
  2693  0015A0  500A               	movf	___aomod@divisor+1,w,c
  2694  0015A2  5802               	subwfb	___aomod@dividend+1,w,c
  2695  0015A4  500B               	movf	___aomod@divisor+2,w,c
  2696  0015A6  5803               	subwfb	___aomod@dividend+2,w,c
  2697  0015A8  500C               	movf	___aomod@divisor+3,w,c
  2698  0015AA  5804               	subwfb	___aomod@dividend+3,w,c
  2699  0015AC  500D               	movf	___aomod@divisor+4,w,c
  2700  0015AE  5805               	subwfb	___aomod@dividend+4,w,c
  2701  0015B0  500E               	movf	___aomod@divisor+5,w,c
  2702  0015B2  5806               	subwfb	___aomod@dividend+5,w,c
  2703  0015B4  500F               	movf	___aomod@divisor+6,w,c
  2704  0015B6  5807               	subwfb	___aomod@dividend+6,w,c
  2705  0015B8  5010               	movf	___aomod@divisor+7,w,c
  2706  0015BA  5808               	subwfb	___aomod@dividend+7,w,c
  2707  0015BC  A0D8               	btfss	status,0,c
  2708  0015BE  D010               	goto	i2l1547
  2709  0015C0  5009               	movf	___aomod@divisor,w,c
  2710  0015C2  5E01               	subwf	___aomod@dividend,f,c
  2711  0015C4  500A               	movf	___aomod@divisor+1,w,c
  2712  0015C6  5A02               	subwfb	___aomod@dividend+1,f,c
  2713  0015C8  500B               	movf	___aomod@divisor+2,w,c
  2714  0015CA  5A03               	subwfb	___aomod@dividend+2,f,c
  2715  0015CC  500C               	movf	___aomod@divisor+3,w,c
  2716  0015CE  5A04               	subwfb	___aomod@dividend+3,f,c
  2717  0015D0  500D               	movf	___aomod@divisor+4,w,c
  2718  0015D2  5A05               	subwfb	___aomod@dividend+4,f,c
  2719  0015D4  500E               	movf	___aomod@divisor+5,w,c
  2720  0015D6  5A06               	subwfb	___aomod@dividend+5,f,c
  2721  0015D8  500F               	movf	___aomod@divisor+6,w,c
  2722  0015DA  5A07               	subwfb	___aomod@dividend+6,f,c
  2723  0015DC  5010               	movf	___aomod@divisor+7,w,c
  2724  0015DE  5A08               	subwfb	___aomod@dividend+7,f,c
  2725  0015E0                     i2l1547:
  2726  0015E0  90D8               	bcf	status,0,c
  2727  0015E2  3210               	rrcf	___aomod@divisor+7,f,c
  2728  0015E4  320F               	rrcf	___aomod@divisor+6,f,c
  2729  0015E6  320E               	rrcf	___aomod@divisor+5,f,c
  2730  0015E8  320D               	rrcf	___aomod@divisor+4,f,c
  2731  0015EA  320C               	rrcf	___aomod@divisor+3,f,c
  2732  0015EC  320B               	rrcf	___aomod@divisor+2,f,c
  2733  0015EE  320A               	rrcf	___aomod@divisor+1,f,c
  2734  0015F0  3209               	rrcf	___aomod@divisor,f,c
  2735  0015F2  2E11               	decfsz	___aomod@counter,f,c
  2736  0015F4  D7D3               	goto	i2u83_40
  2737  0015F6                     i2l1551:
  2738  0015F6  5012               	movf	___aomod@sign,w,c
  2739  0015F8  B4D8               	btfsc	status,2,c
  2740  0015FA  D010               	goto	i2l1555
  2741  0015FC  1E08               	comf	___aomod@dividend+7,f,c
  2742  0015FE  1E07               	comf	___aomod@dividend+6,f,c
  2743  001600  1E06               	comf	___aomod@dividend+5,f,c
  2744  001602  1E05               	comf	___aomod@dividend+4,f,c
  2745  001604  1E04               	comf	___aomod@dividend+3,f,c
  2746  001606  1E03               	comf	___aomod@dividend+2,f,c
  2747  001608  1E02               	comf	___aomod@dividend+1,f,c
  2748  00160A  6C01               	negf	___aomod@dividend,c
  2749  00160C  0E00               	movlw	0
  2750  00160E  2202               	addwfc	___aomod@dividend+1,f,c
  2751  001610  2203               	addwfc	___aomod@dividend+2,f,c
  2752  001612  2204               	addwfc	___aomod@dividend+3,f,c
  2753  001614  2205               	addwfc	___aomod@dividend+4,f,c
  2754  001616  2206               	addwfc	___aomod@dividend+5,f,c
  2755  001618  2207               	addwfc	___aomod@dividend+6,f,c
  2756  00161A  2208               	addwfc	___aomod@dividend+7,f,c
  2757  00161C                     i2l1555:
  2758  00161C  C001  F001         	movff	___aomod@dividend,?___aomod
  2759  001620  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2760  001624  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2761  001628  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2762  00162C  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2763  001630  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2764  001634  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2765  001638  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2766  00163C  0012               	return		;funcret
  2767  00163E                     __end_of___aomod:
  2768                           	opt callstack 0
  2769                           
  2770 ;; *************** function ___aodiv *****************
  2771 ;; Defined at:
  2772 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;  dividend        8    0[COMRAM] long long 
  2775 ;;  divisor         8    8[COMRAM] long long 
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;  quotient        8   18[COMRAM] long long 
  2778 ;;  sign            1   17[COMRAM] unsigned char 
  2779 ;;  counter         1   16[COMRAM] unsigned char 
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  8    0[COMRAM] long long 
  2782 ;; Registers used:
  2783 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2789 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2790 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2792 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2793 ;;Total ram usage:       26 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; This function calls:
  2796 ;;		Nothing
  2797 ;; This function is called by:
  2798 ;;		_dtoa
  2799 ;; This function uses a non-reentrant model
  2800 ;;
  2801                           
  2802                           	psect	text23
  2803  0013D2                     __ptext23:
  2804                           	opt callstack 0
  2805  0013D2                     ___aodiv:
  2806                           	opt callstack 20
  2807                           
  2808                           ;incstack = 0
  2809  0013D2  0E00               	movlw	0
  2810  0013D4  6E12               	movwf	___aodiv@sign,c
  2811  0013D6  AE10               	btfss	___aodiv@divisor+7,7,c
  2812  0013D8  D012               	goto	i2l1487
  2813  0013DA  1E10               	comf	___aodiv@divisor+7,f,c
  2814  0013DC  1E0F               	comf	___aodiv@divisor+6,f,c
  2815  0013DE  1E0E               	comf	___aodiv@divisor+5,f,c
  2816  0013E0  1E0D               	comf	___aodiv@divisor+4,f,c
  2817  0013E2  1E0C               	comf	___aodiv@divisor+3,f,c
  2818  0013E4  1E0B               	comf	___aodiv@divisor+2,f,c
  2819  0013E6  1E0A               	comf	___aodiv@divisor+1,f,c
  2820  0013E8  6C09               	negf	___aodiv@divisor,c
  2821  0013EA  0E00               	movlw	0
  2822  0013EC  220A               	addwfc	___aodiv@divisor+1,f,c
  2823  0013EE  220B               	addwfc	___aodiv@divisor+2,f,c
  2824  0013F0  220C               	addwfc	___aodiv@divisor+3,f,c
  2825  0013F2  220D               	addwfc	___aodiv@divisor+4,f,c
  2826  0013F4  220E               	addwfc	___aodiv@divisor+5,f,c
  2827  0013F6  220F               	addwfc	___aodiv@divisor+6,f,c
  2828  0013F8  2210               	addwfc	___aodiv@divisor+7,f,c
  2829  0013FA  0E01               	movlw	1
  2830  0013FC  6E12               	movwf	___aodiv@sign,c
  2831  0013FE                     i2l1487:
  2832  0013FE  AE08               	btfss	___aodiv@dividend+7,7,c
  2833  001400  D012               	goto	i2l1493
  2834  001402  1E08               	comf	___aodiv@dividend+7,f,c
  2835  001404  1E07               	comf	___aodiv@dividend+6,f,c
  2836  001406  1E06               	comf	___aodiv@dividend+5,f,c
  2837  001408  1E05               	comf	___aodiv@dividend+4,f,c
  2838  00140A  1E04               	comf	___aodiv@dividend+3,f,c
  2839  00140C  1E03               	comf	___aodiv@dividend+2,f,c
  2840  00140E  1E02               	comf	___aodiv@dividend+1,f,c
  2841  001410  6C01               	negf	___aodiv@dividend,c
  2842  001412  0E00               	movlw	0
  2843  001414  2202               	addwfc	___aodiv@dividend+1,f,c
  2844  001416  2203               	addwfc	___aodiv@dividend+2,f,c
  2845  001418  2204               	addwfc	___aodiv@dividend+3,f,c
  2846  00141A  2205               	addwfc	___aodiv@dividend+4,f,c
  2847  00141C  2206               	addwfc	___aodiv@dividend+5,f,c
  2848  00141E  2207               	addwfc	___aodiv@dividend+6,f,c
  2849  001420  2208               	addwfc	___aodiv@dividend+7,f,c
  2850  001422  0E01               	movlw	1
  2851  001424  1A12               	xorwf	___aodiv@sign,f,c
  2852  001426                     i2l1493:
  2853  001426  EE20  F013         	lfsr	2,___aodiv@quotient
  2854  00142A  0E07               	movlw	7
  2855  00142C                     i2u75_41:
  2856  00142C  6ADE               	clrf	postinc2,c
  2857  00142E  06E8               	decf	wreg,f,c
  2858  001430  E2FD               	bc	i2u75_41
  2859  001432  5009               	movf	___aodiv@divisor,w,c
  2860  001434  100A               	iorwf	___aodiv@divisor+1,w,c
  2861  001436  100B               	iorwf	___aodiv@divisor+2,w,c
  2862  001438  100C               	iorwf	___aodiv@divisor+3,w,c
  2863  00143A  100D               	iorwf	___aodiv@divisor+4,w,c
  2864  00143C  100E               	iorwf	___aodiv@divisor+5,w,c
  2865  00143E  100F               	iorwf	___aodiv@divisor+6,w,c
  2866  001440  1010               	iorwf	___aodiv@divisor+7,w,c
  2867  001442  B4D8               	btfsc	status,2,c
  2868  001444  D046               	goto	i2l1515
  2869  001446  0E01               	movlw	1
  2870  001448  6E11               	movwf	___aodiv@counter,c
  2871  00144A  D00A               	goto	i2l1501
  2872  00144C                     i2l1499:
  2873  00144C  90D8               	bcf	status,0,c
  2874  00144E  3609               	rlcf	___aodiv@divisor,f,c
  2875  001450  360A               	rlcf	___aodiv@divisor+1,f,c
  2876  001452  360B               	rlcf	___aodiv@divisor+2,f,c
  2877  001454  360C               	rlcf	___aodiv@divisor+3,f,c
  2878  001456  360D               	rlcf	___aodiv@divisor+4,f,c
  2879  001458  360E               	rlcf	___aodiv@divisor+5,f,c
  2880  00145A  360F               	rlcf	___aodiv@divisor+6,f,c
  2881  00145C  3610               	rlcf	___aodiv@divisor+7,f,c
  2882  00145E  2A11               	incf	___aodiv@counter,f,c
  2883  001460                     i2l1501:
  2884  001460  AE10               	btfss	___aodiv@divisor+7,7,c
  2885  001462  D7F4               	goto	i2l1499
  2886  001464                     i2u77_40:
  2887  001464  90D8               	bcf	status,0,c
  2888  001466  3613               	rlcf	___aodiv@quotient,f,c
  2889  001468  3614               	rlcf	___aodiv@quotient+1,f,c
  2890  00146A  3615               	rlcf	___aodiv@quotient+2,f,c
  2891  00146C  3616               	rlcf	___aodiv@quotient+3,f,c
  2892  00146E  3617               	rlcf	___aodiv@quotient+4,f,c
  2893  001470  3618               	rlcf	___aodiv@quotient+5,f,c
  2894  001472  3619               	rlcf	___aodiv@quotient+6,f,c
  2895  001474  361A               	rlcf	___aodiv@quotient+7,f,c
  2896  001476  5009               	movf	___aodiv@divisor,w,c
  2897  001478  5C01               	subwf	___aodiv@dividend,w,c
  2898  00147A  500A               	movf	___aodiv@divisor+1,w,c
  2899  00147C  5802               	subwfb	___aodiv@dividend+1,w,c
  2900  00147E  500B               	movf	___aodiv@divisor+2,w,c
  2901  001480  5803               	subwfb	___aodiv@dividend+2,w,c
  2902  001482  500C               	movf	___aodiv@divisor+3,w,c
  2903  001484  5804               	subwfb	___aodiv@dividend+3,w,c
  2904  001486  500D               	movf	___aodiv@divisor+4,w,c
  2905  001488  5805               	subwfb	___aodiv@dividend+4,w,c
  2906  00148A  500E               	movf	___aodiv@divisor+5,w,c
  2907  00148C  5806               	subwfb	___aodiv@dividend+5,w,c
  2908  00148E  500F               	movf	___aodiv@divisor+6,w,c
  2909  001490  5807               	subwfb	___aodiv@dividend+6,w,c
  2910  001492  5010               	movf	___aodiv@divisor+7,w,c
  2911  001494  5808               	subwfb	___aodiv@dividend+7,w,c
  2912  001496  A0D8               	btfss	status,0,c
  2913  001498  D011               	goto	i2l1511
  2914  00149A  5009               	movf	___aodiv@divisor,w,c
  2915  00149C  5E01               	subwf	___aodiv@dividend,f,c
  2916  00149E  500A               	movf	___aodiv@divisor+1,w,c
  2917  0014A0  5A02               	subwfb	___aodiv@dividend+1,f,c
  2918  0014A2  500B               	movf	___aodiv@divisor+2,w,c
  2919  0014A4  5A03               	subwfb	___aodiv@dividend+2,f,c
  2920  0014A6  500C               	movf	___aodiv@divisor+3,w,c
  2921  0014A8  5A04               	subwfb	___aodiv@dividend+3,f,c
  2922  0014AA  500D               	movf	___aodiv@divisor+4,w,c
  2923  0014AC  5A05               	subwfb	___aodiv@dividend+4,f,c
  2924  0014AE  500E               	movf	___aodiv@divisor+5,w,c
  2925  0014B0  5A06               	subwfb	___aodiv@dividend+5,f,c
  2926  0014B2  500F               	movf	___aodiv@divisor+6,w,c
  2927  0014B4  5A07               	subwfb	___aodiv@dividend+6,f,c
  2928  0014B6  5010               	movf	___aodiv@divisor+7,w,c
  2929  0014B8  5A08               	subwfb	___aodiv@dividend+7,f,c
  2930  0014BA  8013               	bsf	___aodiv@quotient,0,c
  2931  0014BC                     i2l1511:
  2932  0014BC  90D8               	bcf	status,0,c
  2933  0014BE  3210               	rrcf	___aodiv@divisor+7,f,c
  2934  0014C0  320F               	rrcf	___aodiv@divisor+6,f,c
  2935  0014C2  320E               	rrcf	___aodiv@divisor+5,f,c
  2936  0014C4  320D               	rrcf	___aodiv@divisor+4,f,c
  2937  0014C6  320C               	rrcf	___aodiv@divisor+3,f,c
  2938  0014C8  320B               	rrcf	___aodiv@divisor+2,f,c
  2939  0014CA  320A               	rrcf	___aodiv@divisor+1,f,c
  2940  0014CC  3209               	rrcf	___aodiv@divisor,f,c
  2941  0014CE  2E11               	decfsz	___aodiv@counter,f,c
  2942  0014D0  D7C9               	goto	i2u77_40
  2943  0014D2                     i2l1515:
  2944  0014D2  5012               	movf	___aodiv@sign,w,c
  2945  0014D4  B4D8               	btfsc	status,2,c
  2946  0014D6  D010               	goto	i2l1519
  2947  0014D8  1E1A               	comf	___aodiv@quotient+7,f,c
  2948  0014DA  1E19               	comf	___aodiv@quotient+6,f,c
  2949  0014DC  1E18               	comf	___aodiv@quotient+5,f,c
  2950  0014DE  1E17               	comf	___aodiv@quotient+4,f,c
  2951  0014E0  1E16               	comf	___aodiv@quotient+3,f,c
  2952  0014E2  1E15               	comf	___aodiv@quotient+2,f,c
  2953  0014E4  1E14               	comf	___aodiv@quotient+1,f,c
  2954  0014E6  6C13               	negf	___aodiv@quotient,c
  2955  0014E8  0E00               	movlw	0
  2956  0014EA  2214               	addwfc	___aodiv@quotient+1,f,c
  2957  0014EC  2215               	addwfc	___aodiv@quotient+2,f,c
  2958  0014EE  2216               	addwfc	___aodiv@quotient+3,f,c
  2959  0014F0  2217               	addwfc	___aodiv@quotient+4,f,c
  2960  0014F2  2218               	addwfc	___aodiv@quotient+5,f,c
  2961  0014F4  2219               	addwfc	___aodiv@quotient+6,f,c
  2962  0014F6  221A               	addwfc	___aodiv@quotient+7,f,c
  2963  0014F8                     i2l1519:
  2964  0014F8  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2965  0014FC  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2966  001500  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2967  001504  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2968  001508  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2969  00150C  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2970  001510  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2971  001514  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2972  001518  0012               	return		;funcret
  2973  00151A                     __end_of___aodiv:
  2974                           	opt callstack 0
  2975                           
  2976 ;; *************** function ___awdiv *****************
  2977 ;; Defined at:
  2978 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  dividend        2    0[COMRAM] int 
  2981 ;;  divisor         2    2[COMRAM] int 
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;  quotient        2    6[COMRAM] int 
  2984 ;;  sign            1    5[COMRAM] unsigned char 
  2985 ;;  counter         1    4[COMRAM] unsigned char 
  2986 ;; Return value:  Size  Location     Type
  2987 ;;                  2    0[COMRAM] int 
  2988 ;; Registers used:
  2989 ;;		wreg, status,2, status,0
  2990 ;; Tracked objects:
  2991 ;;		On entry : 0/0
  2992 ;;		On exit  : 0/0
  2993 ;;		Unchanged: 0/0
  2994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2995 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2996 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;Total ram usage:        8 bytes
  3000 ;; Hardware stack levels used:    1
  3001 ;; This function calls:
  3002 ;;		Nothing
  3003 ;; This function is called by:
  3004 ;;		_SW_ISR
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           	psect	text24
  3009  001786                     __ptext24:
  3010                           	opt callstack 0
  3011  001786                     ___awdiv:
  3012                           	opt callstack 24
  3013                           
  3014                           ;incstack = 0
  3015  001786  0E00               	movlw	0
  3016  001788  6E06               	movwf	___awdiv@sign,c
  3017  00178A  AE04               	btfss	___awdiv@divisor+1,7,c
  3018  00178C  D006               	goto	i2l1727
  3019  00178E  6C03               	negf	___awdiv@divisor,c
  3020  001790  1E04               	comf	___awdiv@divisor+1,f,c
  3021  001792  B0D8               	btfsc	status,0,c
  3022  001794  2A04               	incf	___awdiv@divisor+1,f,c
  3023  001796  0E01               	movlw	1
  3024  001798  6E06               	movwf	___awdiv@sign,c
  3025  00179A                     i2l1727:
  3026  00179A  AE02               	btfss	___awdiv@dividend+1,7,c
  3027  00179C  D006               	goto	i2l1733
  3028  00179E  6C01               	negf	___awdiv@dividend,c
  3029  0017A0  1E02               	comf	___awdiv@dividend+1,f,c
  3030  0017A2  B0D8               	btfsc	status,0,c
  3031  0017A4  2A02               	incf	___awdiv@dividend+1,f,c
  3032  0017A6  0E01               	movlw	1
  3033  0017A8  1A06               	xorwf	___awdiv@sign,f,c
  3034  0017AA                     i2l1733:
  3035  0017AA  0E00               	movlw	0
  3036  0017AC  6E08               	movwf	___awdiv@quotient+1,c
  3037  0017AE  0E00               	movlw	0
  3038  0017B0  6E07               	movwf	___awdiv@quotient,c
  3039  0017B2  5003               	movf	___awdiv@divisor,w,c
  3040  0017B4  1004               	iorwf	___awdiv@divisor+1,w,c
  3041  0017B6  B4D8               	btfsc	status,2,c
  3042  0017B8  D01C               	goto	i2l1755
  3043  0017BA  0E01               	movlw	1
  3044  0017BC  6E05               	movwf	___awdiv@counter,c
  3045  0017BE  D004               	goto	i2l1741
  3046  0017C0                     i2l1739:
  3047  0017C0  90D8               	bcf	status,0,c
  3048  0017C2  3603               	rlcf	___awdiv@divisor,f,c
  3049  0017C4  3604               	rlcf	___awdiv@divisor+1,f,c
  3050  0017C6  2A05               	incf	___awdiv@counter,f,c
  3051  0017C8                     i2l1741:
  3052  0017C8  AE04               	btfss	___awdiv@divisor+1,7,c
  3053  0017CA  D7FA               	goto	i2l1739
  3054  0017CC                     i2u109_40:
  3055  0017CC  90D8               	bcf	status,0,c
  3056  0017CE  3607               	rlcf	___awdiv@quotient,f,c
  3057  0017D0  3608               	rlcf	___awdiv@quotient+1,f,c
  3058  0017D2  5003               	movf	___awdiv@divisor,w,c
  3059  0017D4  5C01               	subwf	___awdiv@dividend,w,c
  3060  0017D6  5004               	movf	___awdiv@divisor+1,w,c
  3061  0017D8  5802               	subwfb	___awdiv@dividend+1,w,c
  3062  0017DA  A0D8               	btfss	status,0,c
  3063  0017DC  D005               	goto	i2l1751
  3064  0017DE  5003               	movf	___awdiv@divisor,w,c
  3065  0017E0  5E01               	subwf	___awdiv@dividend,f,c
  3066  0017E2  5004               	movf	___awdiv@divisor+1,w,c
  3067  0017E4  5A02               	subwfb	___awdiv@dividend+1,f,c
  3068  0017E6  8007               	bsf	___awdiv@quotient,0,c
  3069  0017E8                     i2l1751:
  3070  0017E8  90D8               	bcf	status,0,c
  3071  0017EA  3204               	rrcf	___awdiv@divisor+1,f,c
  3072  0017EC  3203               	rrcf	___awdiv@divisor,f,c
  3073  0017EE  2E05               	decfsz	___awdiv@counter,f,c
  3074  0017F0  D7ED               	goto	i2u109_40
  3075  0017F2                     i2l1755:
  3076  0017F2  5006               	movf	___awdiv@sign,w,c
  3077  0017F4  B4D8               	btfsc	status,2,c
  3078  0017F6  D004               	goto	i2l1759
  3079  0017F8  6C07               	negf	___awdiv@quotient,c
  3080  0017FA  1E08               	comf	___awdiv@quotient+1,f,c
  3081  0017FC  B0D8               	btfsc	status,0,c
  3082  0017FE  2A08               	incf	___awdiv@quotient+1,f,c
  3083  001800                     i2l1759:
  3084  001800  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3085  001804  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3086  001808  0012               	return		;funcret
  3087  00180A                     __end_of___awdiv:
  3088                           	opt callstack 0
  3089                           
  3090                           	psect	rparam
  3091  0000                     
  3092                           	psect	temp
  3093  000077                     btemp:
  3094                           	opt callstack 0
  3095  000077                     	ds	1
  3096  0000                     int$flags	set	btemp
  3097  0000                     wtemp8	set	btemp+1
  3098  0000                     ttemp5	set	btemp+1
  3099  0000                     ttemp6	set	btemp+4
  3100  0000                     ttemp7	set	btemp+8
  3101                           tosu	equ	0xFFF
  3102                           tosh	equ	0xFFE
  3103                           tosl	equ	0xFFD
  3104                           stkptr	equ	0xFFC
  3105                           pclatu	equ	0xFFB
  3106                           pclath	equ	0xFFA
  3107                           pcl	equ	0xFF9
  3108                           tblptru	equ	0xFF8
  3109                           tblptrh	equ	0xFF7
  3110                           tblptrl	equ	0xFF6
  3111                           tablat	equ	0xFF5
  3112                           prodh	equ	0xFF4
  3113                           prodl	equ	0xFF3
  3114                           indf0	equ	0xFEF
  3115                           postinc0	equ	0xFEE
  3116                           postdec0	equ	0xFED
  3117                           preinc0	equ	0xFEC
  3118                           plusw0	equ	0xFEB
  3119                           fsr0h	equ	0xFEA
  3120                           fsr0l	equ	0xFE9
  3121                           wreg	equ	0xFE8
  3122                           indf1	equ	0xFE7
  3123                           postinc1	equ	0xFE6
  3124                           postdec1	equ	0xFE5
  3125                           preinc1	equ	0xFE4
  3126                           plusw1	equ	0xFE3
  3127                           fsr1h	equ	0xFE2
  3128                           fsr1l	equ	0xFE1
  3129                           bsr	equ	0xFE0
  3130                           indf2	equ	0xFDF
  3131                           postinc2	equ	0xFDE
  3132                           postdec2	equ	0xFDD
  3133                           preinc2	equ	0xFDC
  3134                           plusw2	equ	0xFDB
  3135                           fsr2h	equ	0xFDA
  3136                           fsr2l	equ	0xFD9
  3137                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    6
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    108     118
    BANK0           128      5      39
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[3]), STR_1(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S932_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[3]), STR_1(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[3]), STR_1(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _SW_ISR in COMRAM

    _SW_ISR->_printf
    i2_lcdInst->i2_send_byte
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->i2_send_byte
    i2_send_byte->i2_send_nibble
    i2_send_nibble->i2_pulse_e
    _abs->___aomod

Critical Paths under _main in BANK0

    _main->_initLCD
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _SW_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _SW_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _SW_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _SW_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _SW_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _SW_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _SW_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _SW_ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _SW_ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _SW_ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _SW_ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _SW_ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _SW_ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _SW_ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _SW_ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _SW_ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     245
                         _TIMER_INIT
                            _initLCD
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     245
                                              4 BANK0      1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     111
                                              3 BANK0      1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (2) _send_byte                                            1     1      0      89
                                              2 BANK0      1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _send_nibble                                          1     1      0      45
                                              1 BANK0      1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (3) _pulse_e                                              1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TIMER_INIT                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _SW_ISR                                               9     9      0    7009
                                             99 COMRAM     9     9      0
                            ___awdiv
                             _printf
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     111
                                              3 COMRAM     1     1      0
                        i2_send_byte
 ---------------------------------------------------------------------------------
 (7) _printf                                               8     4      4    6446
                                             91 COMRAM     8     4      4
                            ___awdiv (ARG)
                           _vfprintf
 ---------------------------------------------------------------------------------
 (8) _vfprintf                                             8     2      6    6240
                                             83 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (9) _vfpfcnvrt                                           42    36      6    5886
                                             67 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (10) _dtoa                                               36    26     10    4448
                                             31 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (11) _pad                                                11     5      6    2799
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (12) _strlen                                              4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (12) _fputs                                               7     3      4    1280
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (10) _fputc                                               9     5      4     879
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (11) _putch                                               1     1      0     111
                                              3 COMRAM     1     1      0
                        i2_send_byte
 ---------------------------------------------------------------------------------
 (8) i2_send_byte                                          1     1      0      89
                                              2 COMRAM     1     1      0
                      i2_send_nibble
 ---------------------------------------------------------------------------------
 (9) i2_send_nibble                                        1     1      0      45
                                              1 COMRAM     1     1      0
                          i2_pulse_e
 ---------------------------------------------------------------------------------
 (10) i2_pulse_e                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) _abs                                                 4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (11) ___aomod                                            18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (11) ___aodiv                                            26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _TIMER_INIT
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e

 _SW_ISR (ROOT)
   ___awdiv
   _printf
     ___awdiv (ARG)
     _vfprintf (ARG)
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 i2_send_byte
                   i2_send_nibble
                     i2_pulse_e
             _fputs
               _fputc
                 _putch
                   i2_send_byte
                     i2_send_nibble
                       i2_pulse_e
             _strlen
         _fputc
           _putch
             i2_send_byte
               i2_send_nibble
                 i2_pulse_e
   i2_lcdInst
     i2_send_byte
       i2_send_nibble
         i2_pulse_e

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      5      27       5       30.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6C      76       1       93.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9D      34        0.0%
DATA                 0      0      9D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Mar 11 11:17:42 2019

    __end_ofi2_send_byte 1B08                       l36 1AC6              __CFG_CPD$ON 000000  
           ___awdiv@sign 0006              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000             __CFG_CPB$OFF 000000                      u675 19CC  
                    u676 19CE                      _abs 1970                      _cnt 0075  
                    _pad 16F0                      wreg 000FE8             __CFG_LVP$OFF 000000  
  __end_ofi2_send_nibble 1AF6             __CFG_WDT$OFF 000000                     ?_abs 0013  
                   ?_pad 0015                     STR_1 1007                     STR_2 100C  
                   u1207 19BC                     u1157 1812                     u1167 182C  
                   _LATD 000F8C                     u1177 183E                     u1187 1862  
                   u1197 19B2                     i2l45 16CC                     abs@a 0013  
                   _dbuf 0082                     _main 1AB0                     _dtoa 1010  
                   _prec 0071                     _nout 006D                     pad@i 001C  
                   pad@p 0019                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf2 000FDF                     fsr1l 000FE1                     pad@w 001E  
                   fsr2l 000FD9                     btemp 0077                     start 000E  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_abs 0015                    ??_pad 001B              ?_TIMER_INIT 0001  
        __end_of___aodiv 151A                    ?_main 0001                    ?_dtoa 0020  
        __end_of___aomod 163E          __end_of___awdiv 180A          ___awdiv@divisor 0003  
                  i2l160 171E                    i2l171 1082                    i2l173 108A  
                  i2l883 1998          ___awdiv@counter 0005             vfpfcnvrt@fmt 0046  
                  _TMR0H 000FD7                    _TMR0L 000FD6                    _TRISD 000F95  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_lcdInst 1B18  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000          __end_of_initLCD 187A  
         __CFG_EBTRB$OFF 000000                    _flags 0073                    _count 0080  
                  _fputc 187A                    _fputs 1938                    pad@fp 0015  
                  _width 006F                    _putch 1B24                    dtoa@d 0022  
                  dtoa@i 0042                    dtoa@n 003A                    dtoa@p 0034  
                  dtoa@s 0038                    dtoa@w 0036                    tablat 000FF5  
        send_nibble@data 00A3          __end_of_pulse_e 19D0                    ttemp5 0078  
                  ttemp6 007B                    ttemp7 007F                    status 000FD8  
                  wtemp8 0078           __CFG_PBADEN$ON 000000              i2_send_byte 1AF6  
        __initialization 19D0       __size_ofi2_lcdInst 000C             __end_of_main 1AC8  
           __end_of_dtoa 1252                   ??_main 00A7                   ??_dtoa 002A  
          __activetblptr 000001       __size_ofi2_pulse_e 002A             ?_send_nibble 0001  
                 ?_fputc 0005                   ?_fputs 000E         ___awdiv@dividend 0001  
                 ?_putch 0001                   i2l1501 1460                   i2l1511 14BC  
                 i2l1431 1958                   i2l1417 1892                   i2l1515 14D2  
                 i2l1531 1546                   i2l1427 1942                   i2l1435 1A04  
                 i2l1541 1598                   i2l1437 1A08                   i2l1461 1716  
                 i2l1621 1228                   i2l1519 14F8                   i2l1551 15F6  
                 i2l1535 156A                   i2l1471 176C                   i2l1463 1728  
                 i2l1457 1708                   i2l1617 1210                   i2l1555 161C  
                 i2l1547 15E0                   i2l1539 1584                   i2l1467 1740  
                 i2l1651 137C                   i2l1741 17C8                   i2l1733 17AA  
                 i2l1493 1426                   i2l1645 1340                   i2l1661 139E  
                 i2l1751 17E8                   i2l1727 179A                   i2l1487 13FE  
                 i2l1583 10A4                   i2l1655 1386                   i2l1569 1066  
                 i2l1739 17C0                   i2l1755 17F2                   i2l1499 144C  
                 i2l1587 10B4                   i2l1597 11AC                   i2l1677 18F8  
                 i2l1759 1800                   i2l1679 191C                   _SSPADD 000FC8  
                 _SSPBUF 000FC9      __size_of_TIMER_INIT 0022                   _SW_ISR 0008  
         __CFG_XINST$OFF 000000             vfprintf@cfmt 005A                ??___aodiv 0011  
              ??___aomod 0011                ??___awdiv 0005           __CFG_STVREN$ON 000000  
                 clear_0 19D6                   clear_1 19E2         ___awdiv@quotient 0007  
              ??_lcdInst 00A5                   _printf 1A4E                   pad@buf 0017  
                 dtoa@fp 0020                   _strlen 19FA                ??_initLCD 00A6  
                 fputc@c 0005                   fputs@c 0012                   fputs@i 0013  
                 fputs@s 000E             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8         __end_of_vfprintf 1938  
              ??_pulse_e 00A2        __end_ofi2_lcdInst 1B24    pulse_e@interruptState 00A2  
             __accesstop 0080  __end_of__initialization 19E8            ___rparam_used 000001  
      __end_ofi2_pulse_e 1A4E           __pcstackCOMRAM 0001            __end_of_fputc 18E6  
          __end_of_fputs 1970            __end_of_putch 1B30                  ??_fputc 0009  
                ??_fputs 0012                  ??_putch 0004               __pbssBANK0 0080  
                ?_SW_ISR 0001       __size_of_send_byte 0018             ??_TIMER_INIT 00A2  
                ?_printf 005C                  ?_strlen 0001       __size_of_vfpfcnvrt 0180  
                i2u60_45 1A4A                  i2u60_46 1A4C                  i2u62_40 188A  
                i2u72_40 197E                  i2u64_40 18D2                  i2u90_40 1078  
                i2u83_40 159C                  i2u75_41 142C                  i2u92_40 109E  
                i2u77_40 1464                  i2u93_40 11BA                  i2u86_40 1038  
                i2u95_40 11DC                  i2u87_40 103A                  i2u95_41 11DA  
                i2u96_40 11EA                  i2u97_40 11EE                  i2u99_40 11FA  
                _SSPCON1 000FC6                  _SSPCON2 000FC5                  _SSPSTAT 000FC7  
   __size_of_send_nibble 001A          __size_of_SW_ISR 16E8       __end_of_TIMER_INIT 1A96  
           ?i2_send_byte 0001                  __Hparam 0000                  __Lparam 0000  
                ___aodiv 13D2                  ___aomod 151A                  ___awdiv 1786  
              ?_vfprintf 0054             __psmallconst 1000   __size_ofi2_send_nibble 0016  
                __pcinit 19D0                  __ramtop 1000                  _lcdInst 1B08  
                __ptext0 1AB0                  __ptext1 180A                  __ptext2 1B08  
                __ptext3 1AC8                  __ptext4 1A96                  __ptext5 19A2  
                __ptext6 1A74                  __ptext8 1B18                  __ptext9 1A4E  
        __size_of_printf 0026                _T0CONbits 000FD5          __size_of_strlen 002A  
                _initLCD 180A             __size_of_abs 0032             __size_of_pad 0096  
                _pulse_e 19A2  i2pulse_e@interruptState 0001           __pintcode_body 163E  
   end_of_initialization 19E8    __end_of_LCD_SIZE_HORZ 1006        __end_of_send_byte 1AE0  
  __end_of_LCD_SIZE_VERT 1005                  fputc@fp 0007                  int_func 163E  
                fputs@fp 0010        __end_of_vfpfcnvrt 13D2                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_vfprintf 005A                  strlen@a 0003                  strlen@s 0001  
              _TRISCbits 000F94            i2_send_nibble 1AE0                i2_lcdInst 1B18  
          send_byte@data 00A4           __end_of_SW_ISR 16F0                i2_pulse_e 1A24  
            vfpfcnvrt@ap 0048              vfpfcnvrt@fp 0044              vfpfcnvrt@ll 004C  
          i2lcdInst@data 0004           __end_of_printf 1A74           __end_of_strlen 1A24  
    start_initialization 19D0              __end_of_abs 19A2              __end_of_pad 1786  
         ?i2_send_nibble 0001               ?i2_lcdInst 0001                 ??_SW_ISR 0064  
            vfprintf@fmt 0056     __size_ofi2_send_byte 0012               ?i2_pulse_e 0001  
       __CFG_LPT1OSC$OFF 000000                 ??_printf 0060                 ??_strlen 0003  
            __pbssCOMRAM 006D            __pcstackBANK0 00A2         ___aodiv@dividend 0001  
      __CFG_CCP2MX$PORTC 000000                __pintcode 0008                 ?___aodiv 0001  
               ?___aomod 0001                 ?___awdiv 0001         ___aodiv@quotient 0013  
               ?_lcdInst 0001        __size_of_vfprintf 0052                 ?_initLCD 0001  
            __smallconst 1000          ??i2_send_nibble 0002            ??_send_nibble 00A3  
               ?_pulse_e 0001           __size_of_fputc 006C           __size_of_fputs 0038  
         __size_of_putch 000C              ??i2_lcdInst 0004                 _LATDbits 000F8C  
              _send_byte 1AC8           _LCD_LINE1_ADDR 1003           _LCD_LINE2_ADDR 1006  
         _LCD_LINE3_ADDR 1002                 i2u103_40 12C2           _LCD_LINE4_ADDR 1001  
               i2u121_47 167C                 i2u122_47 1A32                 i2u123_47 1A3C  
               i2u109_40 17CC         __CFG_WDTPS$32768 000000              ??i2_pulse_e 0001  
              _vfpfcnvrt 1252   __end_of_LCD_LINE1_ADDR 1004   __end_of_LCD_LINE2_ADDR 1007  
 __end_of_LCD_LINE3_ADDR 1003   __end_of_LCD_LINE4_ADDR 1002      __end_of_send_nibble 1AB0  
      i2send_nibble@data 0002               ?_send_byte 0001                 __Hrparam 0000  
             vfprintf@ap 0058                 __Lrparam 0000               vfprintf@fp 0054  
           __Lsmallconst 1000       __CFG_BOREN$SBORDIS 000000         __size_of___aodiv 0148  
       __size_of___aomod 0124         __size_of___awdiv 0084               ?_vfpfcnvrt 0044  
        ___aodiv@divisor 0009          ___aodiv@counter 0011         __size_of_lcdInst 0010  
       __size_of_initLCD 0070                 _dtoa$471 0032                 __ptext10 18E6  
               __ptext11 1252                 __ptext20 1A24                 __ptext12 1010  
               __ptext21 1970                 __ptext13 16F0                 __ptext22 151A  
               __ptext14 19FA                 __ptext23 13D2                 __ptext15 1938  
               __ptext24 1786                 __ptext16 187A                 __ptext17 1B24  
               __ptext18 1AF6                 __ptext19 1AE0         __size_of_pulse_e 002E  
          __size_of_main 0018            __size_of_dtoa 0242                 int$flags 0077  
               _vfprintf 18E6                printf@fmt 005C         ___aomod@dividend 0001  
              putch@data 0004               _INTCONbits 000FF2              _send_nibble 1A96  
               intlevel2 0000            _LCD_SIZE_HORZ 1005            _LCD_SIZE_VERT 1004  
          ??i2_send_byte 0003              ??_send_byte 00A4                 printf@ap 0062  
        i2send_byte@data 0003          ___aomod@divisor 0009              ??_vfpfcnvrt 004A  
            lcdInst@data 00A5          ___aomod@counter 0011               _TIMER_INIT 1A74  
            _SSPCON1bits 000FC6              _SSPCON2bits 000FC5             ___aodiv@sign 0012  
           ___aomod@sign 0012  
