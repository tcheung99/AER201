

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Apr 06 17:21:45 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,inline
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22  0000                     
    23                           ; Version 2.05
    24                           ; Generated 20/12/2018 GMT
    25                           ; 
    26                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4620 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	smallconst
    59  001000                     __psmallconst:
    60                           	opt callstack 0
    61  001000  00                 	db	0
    62  001001                     _LCD_LINE4_ADDR:
    63                           	opt callstack 0
    64  001001  50                 	db	80
    65  001002                     __end_of_LCD_LINE4_ADDR:
    66                           	opt callstack 0
    67  001002                     _LCD_LINE3_ADDR:
    68                           	opt callstack 0
    69  001002  10                 	db	16
    70  001003                     __end_of_LCD_LINE3_ADDR:
    71                           	opt callstack 0
    72  001003                     _LCD_LINE2_ADDR:
    73                           	opt callstack 0
    74  001003  40                 	db	64
    75  001004                     __end_of_LCD_LINE2_ADDR:
    76                           	opt callstack 0
    77  001004                     _LCD_LINE1_ADDR:
    78                           	opt callstack 0
    79  001004  00                 	db	0
    80  001005                     __end_of_LCD_LINE1_ADDR:
    81                           	opt callstack 0
    82  001005                     _LCD_SIZE_VERT:
    83                           	opt callstack 0
    84  001005  04                 	db	4
    85  001006                     __end_of_LCD_SIZE_VERT:
    86                           	opt callstack 0
    87  001006                     _LCD_SIZE_HORZ:
    88                           	opt callstack 0
    89  001006  10                 	db	16
    90  001007                     __end_of_LCD_SIZE_HORZ:
    91                           	opt callstack 0
    92  0000                     _LATDbits	set	3980
    93  0000                     _INTCONbits	set	4082
    94  0000                     _SSPBUF	set	4041
    95  0000                     _SSPCON2bits	set	4037
    96  0000                     _SSPCON1	set	4038
    97  0000                     _SSPADD	set	4040
    98  0000                     _TRISCbits	set	3988
    99  0000                     _SSPCON1bits	set	4038
   100  0000                     _SSPCON2	set	4037
   101  0000                     _SSPSTAT	set	4039
   102  0000                     _LATAbits	set	3977
   103  0000                     _PORTAbits	set	3968
   104  0000                     _TRISAbits	set	3986
   105  0000                     _TRISD	set	3989
   106  0000                     _LATD	set	3980
   107  001007                     STR_1:
   108  001007  66                 	db	102	;'f'
   109  001008  75                 	db	117	;'u'
   110  001009  63                 	db	99	;'c'
   111  00100A  6B                 	db	107	;'k'
   112  00100B  00                 	db	0
   113  00100C                     STR_2:
   114  00100C  68                 	db	104	;'h'
   115  00100D  65                 	db	101	;'e'
   116  00100E  70                 	db	112	;'p'
   117  00100F  00                 	db	0
   118                           
   119                           ; #config settings
   120  001010  00                 	db	0	; dummy byte at the end
   121  0000                     
   122                           	psect	cinit
   123  0012C2                     __pcinit:
   124                           	opt callstack 0
   125  0012C2                     start_initialization:
   126                           	opt callstack 0
   127  0012C2                     __initialization:
   128                           	opt callstack 0
   129                           
   130                           ; Clear objects allocated to COMRAM (40 bytes)
   131  0012C2  EE00  F001         	lfsr	0,__pbssCOMRAM
   132  0012C6  0E28               	movlw	40
   133  0012C8                     clear_0:
   134  0012C8  6AEE               	clrf	postinc0,c
   135  0012CA  06E8               	decf	wreg,f,c
   136  0012CC  E1FD               	bnz	clear_0
   137  0012CE                     end_of_initialization:
   138                           	opt callstack 0
   139  0012CE                     __end_of__initialization:
   140                           	opt callstack 0
   141  0012CE  0E00               	movlw	low (__Lsmallconst shr (0+16))
   142  0012D0  6EF8               	movwf	tblptru,c
   143  0012D2  0E10               	movlw	high __Lsmallconst
   144  0012D4  6EF7               	movwf	tblptrh,c
   145  0012D6  0100               	movlb	0
   146  0012D8  EFA6  F008         	goto	_main	;jump to C main() function
   147                           
   148                           	psect	bssCOMRAM
   149  000001                     __pbssCOMRAM:
   150                           	opt callstack 0
   151  000001                     	ds	32
   152  000021                     _nout:
   153                           	opt callstack 0
   154  000021                     	ds	2
   155  000023                     _width:
   156                           	opt callstack 0
   157  000023                     	ds	2
   158  000025                     _prec:
   159                           	opt callstack 0
   160  000025                     	ds	2
   161  000027                     _flags:
   162                           	opt callstack 0
   163  000027                     	ds	2
   164                           
   165                           	psect	cstackCOMRAM
   166  000029                     __pcstackCOMRAM:
   167                           	opt callstack 0
   168  000029                     pulse_e@interruptState:
   169                           	opt callstack 0
   170                           
   171                           ; 1 bytes @ 0x0
   172  000029                     	ds	1
   173  00002A                     send_nibble@data:
   174                           	opt callstack 0
   175                           
   176                           ; 1 bytes @ 0x1
   177  00002A                     	ds	1
   178  00002B                     send_byte@data:
   179                           	opt callstack 0
   180                           
   181                           ; 1 bytes @ 0x2
   182  00002B                     	ds	1
   183  00002C                     lcdInst@data:
   184                           	opt callstack 0
   185  00002C                     putch@data:
   186                           	opt callstack 0
   187                           
   188                           ; 1 bytes @ 0x3
   189  00002C                     	ds	1
   190  00002D                     ??_initLCD:
   191  00002D                     fputc@c:
   192                           	opt callstack 0
   193                           
   194                           ; 2 bytes @ 0x4
   195  00002D                     	ds	2
   196  00002F                     fputc@fp:
   197                           	opt callstack 0
   198                           
   199                           ; 2 bytes @ 0x6
   200  00002F                     	ds	2
   201  000031                     ??_fputc:
   202                           
   203                           ; 1 bytes @ 0x8
   204  000031                     	ds	5
   205  000036                     ?_vfpfcnvrt:
   206                           	opt callstack 0
   207  000036                     vfpfcnvrt@fp:
   208                           	opt callstack 0
   209                           
   210                           ; 2 bytes @ 0xD
   211  000036                     	ds	2
   212  000038                     vfpfcnvrt@fmt:
   213                           	opt callstack 0
   214                           
   215                           ; 2 bytes @ 0xF
   216  000038                     	ds	2
   217  00003A                     vfpfcnvrt@ap:
   218                           	opt callstack 0
   219                           
   220                           ; 2 bytes @ 0x11
   221  00003A                     	ds	2
   222  00003C                     ?_vfprintf:
   223                           	opt callstack 0
   224  00003C                     vfprintf@fp:
   225                           	opt callstack 0
   226                           
   227                           ; 2 bytes @ 0x13
   228  00003C                     	ds	2
   229  00003E                     vfprintf@fmt:
   230                           	opt callstack 0
   231                           
   232                           ; 2 bytes @ 0x15
   233  00003E                     	ds	2
   234  000040                     vfprintf@ap:
   235                           	opt callstack 0
   236                           
   237                           ; 2 bytes @ 0x17
   238  000040                     	ds	2
   239  000042                     vfprintf@cfmt:
   240                           	opt callstack 0
   241                           
   242                           ; 2 bytes @ 0x19
   243  000042                     	ds	2
   244  000044                     ?_printf:
   245                           	opt callstack 0
   246  000044                     printf@fmt:
   247                           	opt callstack 0
   248                           
   249                           ; 2 bytes @ 0x1B
   250  000044                     	ds	2
   251  000046                     
   252                           ; 1 bytes @ 0x1D
   253  000046                     	ds	2
   254  000048                     printf@ap:
   255                           	opt callstack 0
   256                           
   257                           ; 2 bytes @ 0x1F
   258  000048                     	ds	2
   259  00004A                     ??_main:
   260                           
   261                           ; 1 bytes @ 0x21
   262  00004A                     	ds	1
   263                           
   264 ;;
   265 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   266 ;;
   267 ;; *************** function _main *****************
   268 ;; Defined at:
   269 ;;		line 99 in file "main.c"
   270 ;; Parameters:    Size  Location     Type
   271 ;;		None
   272 ;; Auto vars:     Size  Location     Type
   273 ;;		None
   274 ;; Return value:  Size  Location     Type
   275 ;;                  1    wreg      void 
   276 ;; Registers used:
   277 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   278 ;; Tracked objects:
   279 ;;		On entry : 0/0
   280 ;;		On exit  : 0/0
   281 ;;		Unchanged: 0/0
   282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   285 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   286 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   287 ;;Total ram usage:        1 bytes
   288 ;; Hardware stack levels required when called:    8
   289 ;; This function calls:
   290 ;;		_initLCD
   291 ;;		_lcdInst
   292 ;;		_printf
   293 ;; This function is called by:
   294 ;;		Startup code after reset
   295 ;; This function uses a non-reentrant model
   296 ;;
   297                           
   298                           	psect	text0
   299  00114C                     __ptext0:
   300                           	opt callstack 0
   301  00114C                     _main:
   302                           	opt callstack 23
   303                           
   304                           ;main.c: 100:         LATD = 0x00;
   305                           
   306                           ;incstack = 0
   307  00114C  0E00               	movlw	0
   308  00114E  6E8C               	movwf	3980,c	;volatile
   309                           
   310                           ;main.c: 101:     TRISD = 0x00;
   311  001150  0E00               	movlw	0
   312  001152  6E95               	movwf	3989,c	;volatile
   313                           
   314                           ;main.c: 102:             initLCD();
   315  001154  ECDB  F008         	call	_initLCD	;wreg free
   316                           
   317                           ;main.c: 141:     TRISAbits.RA4 = 0;
   318  001158  9892               	bcf	3986,4,c	;volatile
   319                           
   320                           ;main.c: 145:                     PORTAbits.RA4 = LATAbits.LATA4;
   321  00115A  A889               	btfss	3977,4,c	;volatile
   322  00115C  D002               	bra	u255
   323  00115E  8880               	bsf	3968,4,c	;volatile
   324  001160  D001               	bra	u257
   325  001162                     u255:
   326  001162  9880               	bcf	3968,4,c	;volatile
   327  001164                     u257:
   328                           
   329                           ;main.c: 147:     if (!PORTAbits.RA4){
   330  001164  B880               	btfsc	3968,4,c	;volatile
   331  001166  D011               	goto	l1131
   332                           
   333                           ;main.c: 148:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   334  001168  0E01               	movlw	1
   335  00116A  EC88  F009         	call	_lcdInst
   336  00116E  0E11               	movlw	17
   337  001170  6E4A               	movwf	??_main& (0+255),c
   338  001172  0E3A               	movlw	58
   339  001174                     u287:
   340  001174  2EE8               	decfsz	wreg,f,c
   341  001176  D7FE               	bra	u287
   342  001178  2E4A               	decfsz	??_main& (0+255),f,c
   343  00117A  D7FC               	bra	u287
   344  00117C  D000               	nop2	
   345                           
   346                           ;main.c: 149:         printf("fuck");
   347  00117E  0E07               	movlw	low STR_1
   348  001180  6E44               	movwf	printf@fmt,c
   349  001182  0E10               	movlw	high STR_1
   350  001184  6E45               	movwf	printf@fmt+1,c
   351  001186  EC4E  F009         	call	_printf	;wreg free
   352  00118A                     l1131:
   353                           
   354                           ;main.c: 151:     if (PORTAbits.RA4){
   355  00118A  A880               	btfss	3968,4,c	;volatile
   356  00118C  EF00  F000         	goto	start
   357                           
   358                           ;main.c: 152:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   359  001190  0E01               	movlw	1
   360  001192  EC88  F009         	call	_lcdInst
   361  001196  0E11               	movlw	17
   362  001198  6E4A               	movwf	??_main& (0+255),c
   363  00119A  0E3A               	movlw	58
   364  00119C                     u297:
   365  00119C  2EE8               	decfsz	wreg,f,c
   366  00119E  D7FE               	bra	u297
   367  0011A0  2E4A               	decfsz	??_main& (0+255),f,c
   368  0011A2  D7FC               	bra	u297
   369  0011A4  D000               	nop2	
   370                           
   371                           ;main.c: 153:         printf("hep");
   372  0011A6  0E0C               	movlw	low STR_2
   373  0011A8  6E44               	movwf	printf@fmt,c
   374  0011AA  0E10               	movlw	high STR_2
   375  0011AC  6E45               	movwf	printf@fmt+1,c
   376  0011AE  EC4E  F009         	call	_printf	;wreg free
   377  0011B2  EF00  F000         	goto	start
   378  0011B6                     __end_of_main:
   379                           	opt callstack 0
   380                           
   381 ;; *************** function _printf *****************
   382 ;; Defined at:
   383 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
   384 ;; Parameters:    Size  Location     Type
   385 ;;  fmt             2   27[COMRAM] PTR const unsigned char 
   386 ;;		 -> STR_2(4), STR_1(5), 
   387 ;; Auto vars:     Size  Location     Type
   388 ;;  ap              2   31[COMRAM] PTR void [1]
   389 ;;		 -> ?_printf(2), 
   390 ;;  ret             2    0        int 
   391 ;; Return value:  Size  Location     Type
   392 ;;                  2   27[COMRAM] int 
   393 ;; Registers used:
   394 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   395 ;; Tracked objects:
   396 ;;		On entry : 0/0
   397 ;;		On exit  : 0/0
   398 ;;		Unchanged: 0/0
   399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   400 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   401 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   403 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   404 ;;Total ram usage:        6 bytes
   405 ;; Hardware stack levels used:    1
   406 ;; Hardware stack levels required when called:    7
   407 ;; This function calls:
   408 ;;		_vfprintf
   409 ;; This function is called by:
   410 ;;		_main
   411 ;; This function uses a non-reentrant model
   412 ;;
   413                           
   414                           	psect	text1
   415  00129C                     __ptext1:
   416                           	opt callstack 0
   417  00129C                     _printf:
   418                           	opt callstack 23
   419                           
   420                           ;incstack = 0
   421  00129C  0E46               	movlw	low (?_printf+2)
   422  00129E  6E48               	movwf	printf@ap,c
   423  0012A0  0E00               	movlw	high (?_printf+2)
   424  0012A2  6E49               	movwf	printf@ap+1,c
   425  0012A4  0E00               	movlw	0
   426  0012A6  6E3C               	movwf	vfprintf@fp,c
   427  0012A8  0E00               	movlw	0
   428  0012AA  6E3D               	movwf	vfprintf@fp+1,c
   429  0012AC  C044  F03E         	movff	printf@fmt,vfprintf@fmt
   430  0012B0  C045  F03F         	movff	printf@fmt+1,vfprintf@fmt+1
   431  0012B4  0E48               	movlw	low printf@ap
   432  0012B6  6E40               	movwf	vfprintf@ap,c
   433  0012B8  0E00               	movlw	high printf@ap
   434  0012BA  6E41               	movwf	vfprintf@ap+1,c
   435  0012BC  EC10  F009         	call	_vfprintf	;wreg free
   436  0012C0  0012               	return		;funcret
   437  0012C2                     __end_of_printf:
   438                           	opt callstack 0
   439                           
   440 ;; *************** function _vfprintf *****************
   441 ;; Defined at:
   442 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
   445 ;;		 -> NULL(0), 
   446 ;;  fmt             2   21[COMRAM] PTR const unsigned char 
   447 ;;		 -> STR_2(4), STR_1(5), 
   448 ;;  ap              2   23[COMRAM] PTR PTR void 
   449 ;;		 -> printf@ap(2), 
   450 ;; Auto vars:     Size  Location     Type
   451 ;;  cfmt            2   25[COMRAM] PTR unsigned char 
   452 ;;		 -> STR_2(4), STR_1(5), 
   453 ;; Return value:  Size  Location     Type
   454 ;;                  2   19[COMRAM] int 
   455 ;; Registers used:
   456 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   457 ;; Tracked objects:
   458 ;;		On entry : 0/0
   459 ;;		On exit  : 0/0
   460 ;;		Unchanged: 0/0
   461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   462 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   463 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   465 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   466 ;;Total ram usage:        8 bytes
   467 ;; Hardware stack levels used:    1
   468 ;; Hardware stack levels required when called:    6
   469 ;; This function calls:
   470 ;;		_vfpfcnvrt
   471 ;; This function is called by:
   472 ;;		_printf
   473 ;; This function uses a non-reentrant model
   474 ;;
   475                           
   476                           	psect	text2
   477  001220                     __ptext2:
   478                           	opt callstack 0
   479  001220                     _vfprintf:
   480                           	opt callstack 23
   481                           
   482                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   483                           
   484                           ;incstack = 0
   485  001220  C03E  F042         	movff	vfprintf@fmt,vfprintf@cfmt
   486  001224  C03F  F043         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   487                           
   488                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   489  001228  0E00               	movlw	0
   490  00122A  6E22               	movwf	_nout+1,c
   491  00122C  0E00               	movlw	0
   492  00122E  6E21               	movwf	_nout,c
   493                           
   494                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   495  001230  D012               	goto	l1107
   496  001232                     l1105:
   497                           
   498                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   499  001232  C03C  F036         	movff	vfprintf@fp,vfpfcnvrt@fp
   500  001236  C03D  F037         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   501  00123A  0E42               	movlw	low vfprintf@cfmt
   502  00123C  6E38               	movwf	vfpfcnvrt@fmt,c
   503  00123E  0E00               	movlw	high vfprintf@cfmt
   504  001240  6E39               	movwf	vfpfcnvrt@fmt+1,c
   505  001242  C040  F03A         	movff	vfprintf@ap,vfpfcnvrt@ap
   506  001246  C041  F03B         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   507  00124A  EC09  F008         	call	_vfpfcnvrt	;wreg free
   508  00124E  5036               	movf	?_vfpfcnvrt,w,c
   509  001250  2621               	addwf	_nout,f,c
   510  001252  5037               	movf	?_vfpfcnvrt+1,w,c
   511  001254  2222               	addwfc	_nout+1,f,c
   512  001256                     l1107:
   513                           
   514                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   515  001256  C042  FFF6         	movff	vfprintf@cfmt,tblptrl
   516  00125A  C043  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   517  00125E                     	if	0	;tblptru may be non-zero
   518  00125E                     	endif
   519  00125E                     	if	0	;tblptru may be non-zero
   520  00125E                     	endif
   521  00125E  0008               	tblrd		*
   522  001260  50F5               	movf	tablat,w,c
   523  001262  0900               	iorlw	0
   524  001264  A4D8               	btfss	status,2,c
   525  001266  D7E5               	goto	l1105
   526                           
   527                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   528  001268  C021  F03C         	movff	_nout,?_vfprintf
   529  00126C  C022  F03D         	movff	_nout+1,?_vfprintf+1
   530  001270  0012               	return		;funcret
   531  001272                     __end_of_vfprintf:
   532                           	opt callstack 0
   533                           
   534 ;; *************** function _vfpfcnvrt *****************
   535 ;; Defined at:
   536 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;  fp              2   13[COMRAM] PTR struct _IO_FILE
   539 ;;		 -> NULL(0), 
   540 ;;  fmt             2   15[COMRAM] PTR PTR unsigned char 
   541 ;;		 -> vfprintf@cfmt(2), 
   542 ;;  ap              2   17[COMRAM] PTR PTR void 
   543 ;;		 -> printf@ap(2), 
   544 ;; Auto vars:     Size  Location     Type
   545 ;;  llu             8    0        unsigned long long 
   546 ;;  ll              8    0        long long 
   547 ;;  f               4    0        long long 
   548 ;;  vp              3    0        PTR void 
   549 ;;  ct              3    0        unsigned char [3]
   550 ;;  cp              3    0        PTR unsigned char 
   551 ;;  i               2    0        int 
   552 ;;  done            2    0        int 
   553 ;;  c               1    0        unsigned char 
   554 ;; Return value:  Size  Location     Type
   555 ;;                  2   13[COMRAM] int 
   556 ;; Registers used:
   557 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   558 ;; Tracked objects:
   559 ;;		On entry : 0/0
   560 ;;		On exit  : 0/0
   561 ;;		Unchanged: 0/0
   562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   563 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   566 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   567 ;;Total ram usage:        6 bytes
   568 ;; Hardware stack levels used:    1
   569 ;; Hardware stack levels required when called:    5
   570 ;; This function calls:
   571 ;;		_fputc
   572 ;; This function is called by:
   573 ;;		_vfprintf
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577                           	psect	text3
   578  001012                     __ptext3:
   579                           	opt callstack 0
   580  001012                     _vfpfcnvrt:
   581                           	opt callstack 23
   582                           
   583                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   584                           
   585                           ;incstack = 0
   586  001012  C038  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   587  001016  C039  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   588  00101A  CFDE FFF6          	movff	postinc2,tblptrl
   589  00101E  CFDD FFF7          	movff	postdec2,tblptrh
   590  001022                     	if	0	;tblptru may be non-zero
   591  001022                     	endif
   592  001022                     	if	0	;tblptru may be non-zero
   593  001022                     	endif
   594  001022  0008               	tblrd		*
   595  001024  50F5               	movf	tablat,w,c
   596  001026  0A25               	xorlw	37
   597  001028  A4D8               	btfss	status,2,c
   598  00102A  D040               	goto	l1093
   599                           
   600                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   601  00102C  C038  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   602  001030  C039  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   603  001034  2ADE               	incf	postinc2,f,c
   604  001036  0E00               	movlw	0
   605  001038  22DD               	addwfc	postdec2,f,c
   606                           
   607                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   608  00103A  0E00               	movlw	0
   609  00103C  6E24               	movwf	_width+1,c
   610  00103E  0E00               	movlw	0
   611  001040  6E23               	movwf	_width,c
   612  001042  C023  F027         	movff	_width,_flags
   613  001046  C024  F028         	movff	_width+1,_flags+1
   614                           
   615                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   616  00104A  6825               	setf	_prec,c
   617  00104C  6826               	setf	_prec+1,c
   618                           
   619                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
   620  00104E  C038  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   621  001052  C039  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   622  001056  CFDE FFF6          	movff	postinc2,tblptrl
   623  00105A  CFDD FFF7          	movff	postdec2,tblptrh
   624  00105E                     	if	0	;tblptru may be non-zero
   625  00105E                     	endif
   626  00105E                     	if	0	;tblptru may be non-zero
   627  00105E                     	endif
   628  00105E  0008               	tblrd		*
   629  001060  50F5               	movf	tablat,w,c
   630  001062  0A25               	xorlw	37
   631  001064  A4D8               	btfss	status,2,c
   632  001066  D016               	goto	l1087
   633                           
   634                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
   635  001068  C038  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   636  00106C  C039  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   637  001070  2ADE               	incf	postinc2,f,c
   638  001072  0E00               	movlw	0
   639  001074  22DD               	addwfc	postdec2,f,c
   640                           
   641                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
   642  001076  0E00               	movlw	0
   643  001078  6E2E               	movwf	fputc@c+1,c
   644  00107A  0E25               	movlw	37
   645  00107C  6E2D               	movwf	fputc@c,c
   646  00107E  C036  F02F         	movff	vfpfcnvrt@fp,fputc@fp
   647  001082  C037  F030         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   648  001086  EC70  F008         	call	_fputc	;wreg free
   649  00108A                     l1083:
   650                           
   651                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
   652  00108A  0E00               	movlw	0
   653  00108C  6E37               	movwf	?_vfpfcnvrt+1,c
   654  00108E  0E01               	movlw	1
   655  001090  6E36               	movwf	?_vfpfcnvrt,c
   656  001092  0012               	return	
   657  001094                     l1087:
   658                           
   659                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
   660  001094  C038  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   661  001098  C039  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   662  00109C  2ADE               	incf	postinc2,f,c
   663  00109E  0E00               	movlw	0
   664  0010A0  22DD               	addwfc	postdec2,f,c
   665                           
   666                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
   667  0010A2  0E00               	movlw	0
   668  0010A4  6E37               	movwf	?_vfpfcnvrt+1,c
   669  0010A6  0E00               	movlw	0
   670  0010A8  6E36               	movwf	?_vfpfcnvrt,c
   671  0010AA  0012               	return	
   672  0010AC                     l1093:
   673                           
   674                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
   675  0010AC  C038  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   676  0010B0  C039  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   677  0010B4  CFDE FFF6          	movff	postinc2,tblptrl
   678  0010B8  CFDD FFF7          	movff	postdec2,tblptrh
   679  0010BC                     	if	0	;tblptru may be non-zero
   680  0010BC                     	endif
   681  0010BC                     	if	0	;tblptru may be non-zero
   682  0010BC                     	endif
   683  0010BC  0008               	tblrd		*
   684  0010BE  50F5               	movf	tablat,w,c
   685  0010C0  6E2D               	movwf	fputc@c,c
   686  0010C2  6A2E               	clrf	fputc@c+1,c
   687  0010C4  C036  F02F         	movff	vfpfcnvrt@fp,fputc@fp
   688  0010C8  C037  F030         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   689  0010CC  EC70  F008         	call	_fputc	;wreg free
   690                           
   691                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
   692  0010D0  C038  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   693  0010D4  C039  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   694  0010D8  2ADE               	incf	postinc2,f,c
   695  0010DA  0E00               	movlw	0
   696  0010DC  22DD               	addwfc	postdec2,f,c
   697  0010DE  D7D5               	goto	l1083
   698  0010E0                     __end_of_vfpfcnvrt:
   699                           	opt callstack 0
   700                           
   701 ;; *************** function _fputc *****************
   702 ;; Defined at:
   703 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
   704 ;; Parameters:    Size  Location     Type
   705 ;;  c               2    4[COMRAM] int 
   706 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
   707 ;;		 -> NULL(0), 
   708 ;; Auto vars:     Size  Location     Type
   709 ;;		None
   710 ;; Return value:  Size  Location     Type
   711 ;;                  2    4[COMRAM] int 
   712 ;; Registers used:
   713 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   714 ;; Tracked objects:
   715 ;;		On entry : 0/0
   716 ;;		On exit  : 0/0
   717 ;;		Unchanged: 0/0
   718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   719 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   721 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   722 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   723 ;;Total ram usage:        9 bytes
   724 ;; Hardware stack levels used:    1
   725 ;; Hardware stack levels required when called:    4
   726 ;; This function calls:
   727 ;;		_putch
   728 ;; This function is called by:
   729 ;;		_vfpfcnvrt
   730 ;; This function uses a non-reentrant model
   731 ;;
   732                           
   733                           	psect	text4
   734  0010E0                     __ptext4:
   735                           	opt callstack 0
   736  0010E0                     _fputc:
   737                           	opt callstack 23
   738                           
   739                           ;incstack = 0
   740  0010E0  502F               	movf	fputc@fp,w,c
   741  0010E2  1030               	iorwf	fputc@fp+1,w,c
   742  0010E4  B4D8               	btfsc	status,2,c
   743  0010E6  D004               	goto	u190
   744  0010E8  502F               	movf	fputc@fp,w,c
   745  0010EA  1030               	iorwf	fputc@fp+1,w,c
   746  0010EC  A4D8               	btfss	status,2,c
   747  0010EE  D004               	goto	l1061
   748  0010F0                     u190:
   749  0010F0  502D               	movf	fputc@c,w,c
   750  0010F2  EC82  F009         	call	_putch
   751  0010F6  0012               	return	
   752  0010F8                     l1061:
   753  0010F8  EE20 F004          	lfsr	2,4
   754  0010FC  502F               	movf	fputc@fp,w,c
   755  0010FE  26D9               	addwf	fsr2l,f,c
   756  001100  5030               	movf	fputc@fp+1,w,c
   757  001102  22DA               	addwfc	fsr2h,f,c
   758  001104  50DE               	movf	postinc2,w,c
   759  001106  10DE               	iorwf	postinc2,w,c
   760  001108  B4D8               	btfsc	status,2,c
   761  00110A  D016               	goto	u210
   762  00110C  EE20 F004          	lfsr	2,4
   763  001110  502F               	movf	fputc@fp,w,c
   764  001112  26D9               	addwf	fsr2l,f,c
   765  001114  5030               	movf	fputc@fp+1,w,c
   766  001116  22DA               	addwfc	fsr2h,f,c
   767  001118  EE10 F002          	lfsr	1,2
   768  00111C  502F               	movf	fputc@fp,w,c
   769  00111E  26E1               	addwf	fsr1l,f,c
   770  001120  5030               	movf	fputc@fp+1,w,c
   771  001122  22E2               	addwfc	fsr1h,f,c
   772  001124  50DE               	movf	postinc2,w,c
   773  001126  5CE6               	subwf	postinc1,w,c
   774  001128  50E6               	movf	postinc1,w,c
   775  00112A  0A80               	xorlw	128
   776  00112C  6E35               	movwf	(??_fputc+4)& (0+255),c
   777  00112E  50DE               	movf	postinc2,w,c
   778  001130  0A80               	xorlw	128
   779  001132  5835               	subwfb	(??_fputc+4)& (0+255),w,c
   780  001134  B0D8               	btfsc	status,0,c
   781  001136  0012               	return	
   782  001138                     u210:
   783  001138  EE20 F002          	lfsr	2,2
   784  00113C  502F               	movf	fputc@fp,w,c
   785  00113E  26D9               	addwf	fsr2l,f,c
   786  001140  5030               	movf	fputc@fp+1,w,c
   787  001142  22DA               	addwfc	fsr2h,f,c
   788  001144  2ADE               	incf	postinc2,f,c
   789  001146  0E00               	movlw	0
   790  001148  22DD               	addwfc	postdec2,f,c
   791  00114A  0012               	return		;funcret
   792  00114C                     __end_of_fputc:
   793                           	opt callstack 0
   794                           
   795 ;; *************** function _putch *****************
   796 ;; Defined at:
   797 ;;		line 102 in file "lcd.c"
   798 ;; Parameters:    Size  Location     Type
   799 ;;  data            1    wreg     unsigned char 
   800 ;; Auto vars:     Size  Location     Type
   801 ;;  data            1    3[COMRAM] unsigned char 
   802 ;; Return value:  Size  Location     Type
   803 ;;                  1    wreg      void 
   804 ;; Registers used:
   805 ;;		wreg, status,2, status,0, cstack
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   812 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   814 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   815 ;;Total ram usage:        1 bytes
   816 ;; Hardware stack levels used:    1
   817 ;; Hardware stack levels required when called:    3
   818 ;; This function calls:
   819 ;;		_send_byte
   820 ;; This function is called by:
   821 ;;		_fputc
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           	psect	text5
   826  001304                     __ptext5:
   827                           	opt callstack 0
   828  001304                     _putch:
   829                           	opt callstack 23
   830                           
   831                           ;incstack = 0
   832                           ;putch@data stored from wreg
   833  001304  6E2C               	movwf	putch@data,c
   834                           
   835                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
   836  001306  848C               	bsf	3980,2,c	;volatile
   837                           
   838                           ;lcd.c: 104:     send_byte((unsigned char)data);
   839  001308  502C               	movf	putch@data,w,c
   840  00130A  EC79  F009         	call	_send_byte
   841  00130E  0012               	return		;funcret
   842  001310                     __end_of_putch:
   843                           	opt callstack 0
   844                           
   845 ;; *************** function _initLCD *****************
   846 ;; Defined at:
   847 ;;		line 69 in file "lcd.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;		None
   850 ;; Auto vars:     Size  Location     Type
   851 ;;		None
   852 ;; Return value:  Size  Location     Type
   853 ;;                  1    wreg      void 
   854 ;; Registers used:
   855 ;;		wreg, status,2, status,0, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   863 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   864 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   865 ;;Total ram usage:        1 bytes
   866 ;; Hardware stack levels used:    1
   867 ;; Hardware stack levels required when called:    4
   868 ;; This function calls:
   869 ;;		_lcdInst
   870 ;;		_send_byte
   871 ;;		_send_nibble
   872 ;; This function is called by:
   873 ;;		_main
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           	psect	text6
   878  0011B6                     __ptext6:
   879                           	opt callstack 0
   880  0011B6                     _initLCD:
   881                           	opt callstack 26
   882                           
   883                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
   884                           
   885                           ;incstack = 0
   886  0011B6  0E31               	movlw	49
   887  0011B8  6E2D               	movwf	??_initLCD& (0+255),c
   888  0011BA  0EB2               	movlw	178
   889  0011BC                     u307:
   890  0011BC  2EE8               	decfsz	wreg,f,c
   891  0011BE  D7FE               	bra	u307
   892  0011C0  2E2D               	decfsz	??_initLCD& (0+255),f,c
   893  0011C2  D7FC               	bra	u307
   894  0011C4  D000               	nop2	
   895                           
   896                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
   897  0011C6  948C               	bcf	3980,2,c	;volatile
   898                           
   899                           ;lcd.c: 74:     send_nibble(0b0011);
   900  0011C8  0E03               	movlw	3
   901  0011CA  EC6E  F009         	call	_send_nibble
   902                           
   903                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
   904  0011CE  0E11               	movlw	17
   905  0011D0  6E2D               	movwf	??_initLCD& (0+255),c
   906  0011D2  0E3A               	movlw	58
   907  0011D4                     u317:
   908  0011D4  2EE8               	decfsz	wreg,f,c
   909  0011D6  D7FE               	bra	u317
   910  0011D8  2E2D               	decfsz	??_initLCD& (0+255),f,c
   911  0011DA  D7FC               	bra	u317
   912  0011DC  D000               	nop2	
   913                           
   914                           ;lcd.c: 76:     send_nibble(0b0011);
   915  0011DE  0E03               	movlw	3
   916  0011E0  EC6E  F009         	call	_send_nibble
   917                           
   918                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
   919  0011E4  0E7D               	movlw	125
   920  0011E6                     u327:
   921  0011E6  2EE8               	decfsz	wreg,f,c
   922  0011E8  D7FE               	bra	u327
   923                           
   924                           ;lcd.c: 78:     send_byte(0b00110010);
   925  0011EA  0E32               	movlw	50
   926  0011EC  EC79  F009         	call	_send_byte
   927                           
   928                           ;lcd.c: 80:     send_byte(0b00101000);
   929  0011F0  0E28               	movlw	40
   930  0011F2  EC79  F009         	call	_send_byte
   931                           
   932                           ;lcd.c: 81:     send_byte(0b00001000);
   933  0011F6  0E08               	movlw	8
   934  0011F8  EC79  F009         	call	_send_byte
   935                           
   936                           ;lcd.c: 82:     send_byte(0b00000001);
   937  0011FC  0E01               	movlw	1
   938  0011FE  EC79  F009         	call	_send_byte
   939                           
   940                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
   941  001202  0E11               	movlw	17
   942  001204  6E2D               	movwf	??_initLCD& (0+255),c
   943  001206  0E3A               	movlw	58
   944  001208                     u337:
   945  001208  2EE8               	decfsz	wreg,f,c
   946  00120A  D7FE               	bra	u337
   947  00120C  2E2D               	decfsz	??_initLCD& (0+255),f,c
   948  00120E  D7FC               	bra	u337
   949  001210  D000               	nop2	
   950                           
   951                           ;lcd.c: 84:     send_byte(0b00000110);
   952  001212  0E06               	movlw	6
   953  001214  EC79  F009         	call	_send_byte
   954                           
   955                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
   956  001218  0E0F               	movlw	15
   957  00121A  EC88  F009         	call	_lcdInst
   958  00121E  0012               	return		;funcret
   959  001220                     __end_of_initLCD:
   960                           	opt callstack 0
   961                           
   962 ;; *************** function _lcdInst *****************
   963 ;; Defined at:
   964 ;;		line 64 in file "lcd.c"
   965 ;; Parameters:    Size  Location     Type
   966 ;;  data            1    wreg     unsigned char 
   967 ;; Auto vars:     Size  Location     Type
   968 ;;  data            1    3[COMRAM] unsigned char 
   969 ;; Return value:  Size  Location     Type
   970 ;;                  1    wreg      void 
   971 ;; Registers used:
   972 ;;		wreg, status,2, status,0, cstack
   973 ;; Tracked objects:
   974 ;;		On entry : 0/0
   975 ;;		On exit  : 0/0
   976 ;;		Unchanged: 0/0
   977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   979 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   981 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   982 ;;Total ram usage:        1 bytes
   983 ;; Hardware stack levels used:    1
   984 ;; Hardware stack levels required when called:    3
   985 ;; This function calls:
   986 ;;		_send_byte
   987 ;; This function is called by:
   988 ;;		_main
   989 ;;		_initLCD
   990 ;;		_lcd_shift_cursor
   991 ;;		_lcd_shift_display
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           	psect	text7
   996  001310                     __ptext7:
   997                           	opt callstack 0
   998  001310                     _lcdInst:
   999                           	opt callstack 27
  1000                           
  1001                           ;incstack = 0
  1002                           ;lcdInst@data stored from wreg
  1003  001310  6E2C               	movwf	lcdInst@data,c
  1004                           
  1005                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
  1006  001312  948C               	bcf	3980,2,c	;volatile
  1007                           
  1008                           ;lcd.c: 66:     send_byte(data);
  1009  001314  502C               	movf	lcdInst@data,w,c
  1010  001316  EC79  F009         	call	_send_byte
  1011  00131A  0012               	return		;funcret
  1012  00131C                     __end_of_lcdInst:
  1013                           	opt callstack 0
  1014                           
  1015 ;; *************** function _send_byte *****************
  1016 ;; Defined at:
  1017 ;;		line 55 in file "lcd.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;  data            1    wreg     unsigned char 
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;  data            1    2[COMRAM] unsigned char 
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  1    wreg      void 
  1024 ;; Registers used:
  1025 ;;		wreg, status,2, status,0, cstack
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1032 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1034 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1035 ;;Total ram usage:        1 bytes
  1036 ;; Hardware stack levels used:    1
  1037 ;; Hardware stack levels required when called:    2
  1038 ;; This function calls:
  1039 ;;		_send_nibble
  1040 ;; This function is called by:
  1041 ;;		_lcdInst
  1042 ;;		_initLCD
  1043 ;;		_putch
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           	psect	text8
  1048  0012F2                     __ptext8:
  1049                           	opt callstack 0
  1050  0012F2                     _send_byte:
  1051                           	opt callstack 23
  1052                           
  1053                           ;incstack = 0
  1054                           ;send_byte@data stored from wreg
  1055  0012F2  6E2B               	movwf	send_byte@data,c
  1056                           
  1057                           ;lcd.c: 57:     send_nibble(data >> 4);
  1058  0012F4  382B               	swapf	send_byte@data,w,c
  1059  0012F6  0B0F               	andlw	15
  1060  0012F8  EC6E  F009         	call	_send_nibble
  1061                           
  1062                           ;lcd.c: 60:     send_nibble(data);
  1063  0012FC  502B               	movf	send_byte@data,w,c
  1064  0012FE  EC6E  F009         	call	_send_nibble
  1065  001302  0012               	return		;funcret
  1066  001304                     __end_of_send_byte:
  1067                           	opt callstack 0
  1068                           
  1069 ;; *************** function _send_nibble *****************
  1070 ;; Defined at:
  1071 ;;		line 44 in file "lcd.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;  data            1    wreg     unsigned char 
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;  data            1    1[COMRAM] unsigned char 
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  1    wreg      void 
  1078 ;; Registers used:
  1079 ;;		wreg, status,2, status,0, cstack
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1086 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1088 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1089 ;;Total ram usage:        1 bytes
  1090 ;; Hardware stack levels used:    1
  1091 ;; Hardware stack levels required when called:    1
  1092 ;; This function calls:
  1093 ;;		_pulse_e
  1094 ;; This function is called by:
  1095 ;;		_send_byte
  1096 ;;		_initLCD
  1097 ;; This function uses a non-reentrant model
  1098 ;;
  1099                           
  1100                           	psect	text9
  1101  0012DC                     __ptext9:
  1102                           	opt callstack 0
  1103  0012DC                     _send_nibble:
  1104                           	opt callstack 23
  1105                           
  1106                           ;incstack = 0
  1107                           ;send_nibble@data stored from wreg
  1108  0012DC  6E2A               	movwf	send_nibble@data,c
  1109                           
  1110                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
  1111  0012DE  508C               	movf	3980,w,c	;volatile
  1112  0012E0  0B0F               	andlw	15
  1113  0012E2  6E8C               	movwf	3980,c	;volatile
  1114                           
  1115                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
  1116  0012E4  382A               	swapf	send_nibble@data,w,c
  1117  0012E6  0BF0               	andlw	240
  1118  0012E8  108C               	iorwf	3980,w,c	;volatile
  1119  0012EA  6E8C               	movwf	3980,c	;volatile
  1120                           
  1121                           ;lcd.c: 48:     pulse_e();
  1122  0012EC  EC39  F009         	call	_pulse_e	;wreg free
  1123  0012F0  0012               	return		;funcret
  1124  0012F2                     __end_of_send_nibble:
  1125                           	opt callstack 0
  1126                           
  1127 ;; *************** function _pulse_e *****************
  1128 ;; Defined at:
  1129 ;;		line 28 in file "lcd.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;		None
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;  interruptSta    1    0[COMRAM] unsigned char 
  1134 ;; Return value:  Size  Location     Type
  1135 ;;                  1    wreg      void 
  1136 ;; Registers used:
  1137 ;;		wreg
  1138 ;; Tracked objects:
  1139 ;;		On entry : 0/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1144 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1146 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1147 ;;Total ram usage:        1 bytes
  1148 ;; Hardware stack levels used:    1
  1149 ;; This function calls:
  1150 ;;		Nothing
  1151 ;; This function is called by:
  1152 ;;		_send_nibble
  1153 ;; This function uses a non-reentrant model
  1154 ;;
  1155                           
  1156                           	psect	text10
  1157  001272                     __ptext10:
  1158                           	opt callstack 0
  1159  001272                     _pulse_e:
  1160                           	opt callstack 23
  1161                           
  1162                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
  1163                           
  1164                           ;incstack = 0
  1165  001272  0E00               	movlw	0
  1166  001274  BEF2               	btfsc	4082,7,c	;volatile
  1167  001276  0E01               	movlw	1
  1168  001278  6E29               	movwf	pulse_e@interruptState,c
  1169                           
  1170                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
  1171  00127A  9EF2               	bcf	4082,7,c	;volatile
  1172                           
  1173                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
  1174  00127C  868C               	bsf	3980,3,c	;volatile
  1175                           
  1176                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  1177  00127E  0E14               	movlw	20
  1178  001280                     u347:
  1179  001280  2EE8               	decfsz	wreg,f,c
  1180  001282  D7FE               	bra	u347
  1181  001284  D000               	nop2	
  1182                           
  1183                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
  1184  001286  968C               	bcf	3980,3,c	;volatile
  1185                           
  1186                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  1187  001288  0E53               	movlw	83
  1188  00128A                     u357:
  1189  00128A  2EE8               	decfsz	wreg,f,c
  1190  00128C  D7FE               	bra	u357
  1191  00128E  F000               	nop	
  1192                           
  1193                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
  1194  001290  B029               	btfsc	pulse_e@interruptState,0,c
  1195  001292  D002               	bra	u15
  1196  001294  9EF2               	bcf	4082,7,c	;volatile
  1197  001296  D001               	bra	u16
  1198  001298                     u15:
  1199  001298  8EF2               	bsf	4082,7,c	;volatile
  1200  00129A                     u16:
  1201  00129A  0012               	return		;funcret
  1202  00129C                     __end_of_pulse_e:
  1203                           	opt callstack 0
  1204                           
  1205                           	psect	rparam
  1206  0000                     tosu	equ	0xFFF
  1207                           tosh	equ	0xFFE
  1208                           tosl	equ	0xFFD
  1209                           stkptr	equ	0xFFC
  1210                           pclatu	equ	0xFFB
  1211                           pclath	equ	0xFFA
  1212                           pcl	equ	0xFF9
  1213                           tblptru	equ	0xFF8
  1214                           tblptrh	equ	0xFF7
  1215                           tblptrl	equ	0xFF6
  1216                           tablat	equ	0xFF5
  1217                           prodh	equ	0xFF4
  1218                           prodl	equ	0xFF3
  1219                           indf0	equ	0xFEF
  1220                           postinc0	equ	0xFEE
  1221                           postdec0	equ	0xFED
  1222                           preinc0	equ	0xFEC
  1223                           plusw0	equ	0xFEB
  1224                           fsr0h	equ	0xFEA
  1225                           fsr0l	equ	0xFE9
  1226                           wreg	equ	0xFE8
  1227                           indf1	equ	0xFE7
  1228                           postinc1	equ	0xFE6
  1229                           postdec1	equ	0xFE5
  1230                           preinc1	equ	0xFE4
  1231                           plusw1	equ	0xFE3
  1232                           fsr1h	equ	0xFE2
  1233                           fsr1l	equ	0xFE1
  1234                           bsr	equ	0xFE0
  1235                           indf2	equ	0xFDF
  1236                           postinc2	equ	0xFDE
  1237                           postdec2	equ	0xFDD
  1238                           preinc2	equ	0xFDC
  1239                           plusw2	equ	0xFDB
  1240                           fsr2h	equ	0xFDA
  1241                           fsr2l	equ	0xFD9
  1242                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    6
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     34      74
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[4]), STR_1(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    S982_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[4]), STR_1(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[4]), STR_1(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _fputc->_putch
    _putch->_send_byte
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    2011
                                             33 COMRAM     1     1      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               6     4      2    1771
                                             27 COMRAM     6     4      2
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    1567
                                             19 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           40    34      6    1217
                                             13 COMRAM     6     0      6
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     791
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      75
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     165
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0      75
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (6) _send_byte                                            1     1      0      60
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (7) _send_nibble                                          1     1      0      30
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (8) _pulse_e                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     _vfprintf
       _vfpfcnvrt
         _fputc
           _putch
             _send_byte
               _send_nibble
                 _pulse_e

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     22      4A       1       58.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4A      34        0.0%
DATA                 0      0      4A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Apr 06 17:21:45 2019

                     u15 1298                       u16 129A              __CFG_CPD$ON 000000  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000  
           __CFG_CPB$OFF 000000                      u210 1138                      u307 11BC  
                    u317 11D4                      u190 10F0                      u327 11E6  
                    u255 1162                      u337 1208                      u257 1164  
                    u347 1280                      u357 128A                      u287 1174  
                    u297 119C                      wreg 000FE8             __CFG_IESO$ON 000000  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l1105 1232  
                   l1107 1256                     l1131 118A                     l1061 10F8  
                   l1083 108A                     l1093 10AC                     l1087 1094  
                   STR_1 1007                     STR_2 100C                     _LATD 000F8C  
                   _dbuf 0001                     _main 114C                     _prec 0025  
                   _nout 0021                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr1l 000FE1                     fsr2l 000FD9                     start 0000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ?_main 0029  
           vfpfcnvrt@fmt 0038                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000          __end_of_lcdInst 131C           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000          __end_of_initLCD 1220           __CFG_EBTRB$OFF 000000  
                  _flags 0027                    _fputc 10E0                    _width 0023  
                  _putch 1304                    tablat 000FF5          send_nibble@data 002A  
        __end_of_pulse_e 129C                    status 000FD8           __CFG_PBADEN$ON 000000  
        __initialization 12C2             __end_of_main 11B6                   ??_main 004A  
          __activetblptr 000001             ?_send_nibble 0029                   ?_fputc 002D  
                 ?_putch 0029                   _SSPADD 000FC8                   _SSPBUF 000FC9  
         __CFG_XINST$OFF 000000             vfprintf@cfmt 0042           __CFG_STVREN$ON 000000  
                 clear_0 12C8                ??_lcdInst 002C                   _printf 129C  
              ??_initLCD 002D                   fputc@c 002D             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
       __end_of_vfprintf 1272                ??_pulse_e 0029    pulse_e@interruptState 0029  
             __accesstop 0080  __end_of__initialization 12CE            ___rparam_used 000001  
         __pcstackCOMRAM 0029            __end_of_fputc 114C            __end_of_putch 1310  
                ??_fputc 0031                  ??_putch 002C       __size_of_send_byte 0012  
                ?_printf 0044       __size_of_vfpfcnvrt 00CE                  _SSPCON1 000FC6  
                _SSPCON2 000FC5                  _SSPSTAT 000FC7     __size_of_send_nibble 0016  
                __Hparam 0000                  __Lparam 0000                ?_vfprintf 003C  
           __psmallconst 1000                  __pcinit 12C2                  __ramtop 1000  
                _lcdInst 1310                  __ptext0 114C                  __ptext1 129C  
                __ptext2 1220                  __ptext3 1012                  __ptext4 10E0  
                __ptext5 1304                  __ptext6 11B6                  __ptext7 1310  
                __ptext8 12F2                  __ptext9 12DC          __size_of_printf 0026  
                _initLCD 11B6                  _pulse_e 1272     end_of_initialization 12CE  
  __end_of_LCD_SIZE_HORZ 1007        __end_of_send_byte 1304    __end_of_LCD_SIZE_VERT 1006  
                fputc@fp 002F        __end_of_vfpfcnvrt 10E0                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
             ??_vfprintf 0042                _PORTAbits 000F80                _TRISAbits 000F92  
              _TRISCbits 000F94            send_byte@data 002B              vfpfcnvrt@ap 003A  
            vfpfcnvrt@fp 0036           __end_of_printf 12C2      start_initialization 12C2  
            vfprintf@fmt 003E         __CFG_LPT1OSC$OFF 000000                 ??_printf 0046  
            __pbssCOMRAM 0001        __CFG_CCP2MX$PORTC 000000                 ?_lcdInst 0029  
      __size_of_vfprintf 0052                 ?_initLCD 0029              __smallconst 1000  
          ??_send_nibble 002A                 ?_pulse_e 0029           __size_of_fputc 006C  
         __size_of_putch 000C                 _LATAbits 000F89                 _LATDbits 000F8C  
              _send_byte 12F2           _LCD_LINE1_ADDR 1004           _LCD_LINE2_ADDR 1003  
         _LCD_LINE3_ADDR 1002           _LCD_LINE4_ADDR 1001         __CFG_WDTPS$32768 000000  
              _vfpfcnvrt 1012   __end_of_LCD_LINE1_ADDR 1005   __end_of_LCD_LINE2_ADDR 1004  
 __end_of_LCD_LINE3_ADDR 1003   __end_of_LCD_LINE4_ADDR 1002      __end_of_send_nibble 12F2  
             ?_send_byte 0029                 __Hrparam 0000               vfprintf@ap 0040  
               __Lrparam 0000               vfprintf@fp 003C             __Lsmallconst 1000  
     __CFG_BOREN$SBORDIS 000000               ?_vfpfcnvrt 0036         __size_of_lcdInst 000C  
       __size_of_initLCD 006A                 __ptext10 1272         __size_of_pulse_e 002A  
          __size_of_main 006A                 _vfprintf 1220                printf@fmt 0044  
              putch@data 002C               _INTCONbits 000FF2              _send_nibble 12DC  
          _LCD_SIZE_HORZ 1006            _LCD_SIZE_VERT 1005              ??_send_byte 002B  
               printf@ap 0048              ??_vfpfcnvrt 003C              lcdInst@data 002C  
            _SSPCON1bits 000FC6              _SSPCON2bits 000FC5  
