

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 08 13:14:34 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,inline
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33  0000                     
    34                           ; Version 2.05
    35                           ; Generated 20/12/2018 GMT
    36                           ; 
    37                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F4620 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	smallconst
    70  001000                     __psmallconst:
    71                           	opt callstack 0
    72  001000  00                 	db	0
    73  001001                     _LCD_LINE4_ADDR:
    74                           	opt callstack 0
    75  001001  50                 	db	80
    76  001002                     __end_of_LCD_LINE4_ADDR:
    77                           	opt callstack 0
    78  001002                     _LCD_LINE3_ADDR:
    79                           	opt callstack 0
    80  001002  10                 	db	16
    81  001003                     __end_of_LCD_LINE3_ADDR:
    82                           	opt callstack 0
    83  001003                     _LCD_LINE1_ADDR:
    84                           	opt callstack 0
    85  001003  00                 	db	0
    86  001004                     __end_of_LCD_LINE1_ADDR:
    87                           	opt callstack 0
    88  001004                     _LCD_SIZE_VERT:
    89                           	opt callstack 0
    90  001004  04                 	db	4
    91  001005                     __end_of_LCD_SIZE_VERT:
    92                           	opt callstack 0
    93  001005                     _LCD_SIZE_HORZ:
    94                           	opt callstack 0
    95  001005  10                 	db	16
    96  001006                     __end_of_LCD_SIZE_HORZ:
    97                           	opt callstack 0
    98  001006  40                 	db	64
    99  001007                     __end_of_LCD_LINE2_ADDR:
   100                           	opt callstack 0
   101  0000                     _LATD	set	3980
   102  0000                     _LATDbits	set	3980
   103  0000                     _SSPBUF	set	4041
   104  0000                     _SSPCON2bits	set	4037
   105  0000                     _SSPCON1	set	4038
   106  0000                     _SSPADD	set	4040
   107  0000                     _TRISCbits	set	3988
   108  0000                     _SSPCON1bits	set	4038
   109  0000                     _SSPCON2	set	4037
   110  0000                     _SSPSTAT	set	4039
   111  0000                     _TRISD	set	3989
   112  0000                     _EECON2	set	4007
   113  0000                     _INTCONbits	set	4082
   114  0000                     _EECON1bits	set	4006
   115  0000                     _EEADR	set	4009
   116  0000                     _EEDATA	set	4008
   117  001007                     STR_4:
   118  001007  43                 	db	67	;'C'
   119  001008  68                 	db	104	;'h'
   120  001009  61                 	db	97	;'a'
   121  00100A  72                 	db	114	;'r'
   122  00100B  20                 	db	32
   123  00100C  77                 	db	119	;'w'
   124  00100D  72                 	db	114	;'r'
   125  00100E  69                 	db	105	;'i'
   126  00100F  74                 	db	116	;'t'
   127  001010  74                 	db	116	;'t'
   128  001011  65                 	db	101	;'e'
   129  001012  6E                 	db	110	;'n'
   130  001013  20                 	db	32
   131  001014  74                 	db	116	;'t'
   132  001015  6F                 	db	111	;'o'
   133  001016  20                 	db	32
   134  001017  30                 	db	48	;'0'
   135  001018  78                 	db	120	;'x'
   136  001019  30                 	db	48	;'0'
   137  00101A  30                 	db	48	;'0'
   138  00101B  3A                 	db	58	;':'
   139  00101C  20                 	db	32
   140  00101D  25                 	db	37
   141  00101E  63                 	db	99	;'c'
   142  00101F  00                 	db	0
   143  001020                     STR_2:
   144  001020  43                 	db	67	;'C'
   145  001021  68                 	db	104	;'h'
   146  001022  61                 	db	97	;'a'
   147  001023  72                 	db	114	;'r'
   148  001024  20                 	db	32
   149  001025  72                 	db	114	;'r'
   150  001026  65                 	db	101	;'e'
   151  001027  61                 	db	97	;'a'
   152  001028  64                 	db	100	;'d'
   153  001029  20                 	db	32
   154  00102A  66                 	db	102	;'f'
   155  00102B  72                 	db	114	;'r'
   156  00102C  6F                 	db	111	;'o'
   157  00102D  6D                 	db	109	;'m'
   158  00102E  20                 	db	32
   159  00102F  30                 	db	48	;'0'
   160  001030  78                 	db	120	;'x'
   161  001031  30                 	db	48	;'0'
   162  001032  30                 	db	48	;'0'
   163  001033  3A                 	db	58	;':'
   164  001034  20                 	db	32
   165  001035  25                 	db	37
   166  001036  63                 	db	99	;'c'
   167  001037  00                 	db	0
   168  001038                     STR_8:
   169  001038  43                 	db	67	;'C'
   170  001039  68                 	db	104	;'h'
   171  00103A  61                 	db	97	;'a'
   172  00103B  72                 	db	114	;'r'
   173  00103C  20                 	db	32
   174  00103D  72                 	db	114	;'r'
   175  00103E  65                 	db	101	;'e'
   176  00103F  61                 	db	97	;'a'
   177  001040  64                 	db	100	;'d'
   178  001041  20                 	db	32
   179  001042  66                 	db	102	;'f'
   180  001043  72                 	db	114	;'r'
   181  001044  6F                 	db	111	;'o'
   182  001045  6D                 	db	109	;'m'
   183  001046  20                 	db	32
   184  001047  30                 	db	48	;'0'
   185  001048  78                 	db	120	;'x'
   186  001049  30                 	db	48	;'0'
   187  00104A  31                 	db	49	;'1'
   188  00104B  3A                 	db	58	;':'
   189  00104C  20                 	db	32
   190  00104D  25                 	db	37
   191  00104E  63                 	db	99	;'c'
   192  00104F  00                 	db	0
   193  001050                     STR_10:
   194  001050  69                 	db	105	;'i'
   195  001051  6E                 	db	110	;'n'
   196  001052  74                 	db	116	;'t'
   197  001053  20                 	db	32
   198  001054  77                 	db	119	;'w'
   199  001055  72                 	db	114	;'r'
   200  001056  69                 	db	105	;'i'
   201  001057  74                 	db	116	;'t'
   202  001058  74                 	db	116	;'t'
   203  001059  65                 	db	101	;'e'
   204  00105A  6E                 	db	110	;'n'
   205  00105B  20                 	db	32
   206  00105C  74                 	db	116	;'t'
   207  00105D  6F                 	db	111	;'o'
   208  00105E  20                 	db	32
   209  00105F  30                 	db	48	;'0'
   210  001060  78                 	db	120	;'x'
   211  001061  30                 	db	48	;'0'
   212  001062  31                 	db	49	;'1'
   213  001063  3A                 	db	58	;':'
   214  001064  20                 	db	32
   215  001065  25                 	db	37
   216  001066  64                 	db	100	;'d'
   217  001067  00                 	db	0
   218  001068                     STR_12:
   219  001068  69                 	db	105	;'i'
   220  001069  6E                 	db	110	;'n'
   221  00106A  74                 	db	116	;'t'
   222  00106B  20                 	db	32
   223  00106C  72                 	db	114	;'r'
   224  00106D  65                 	db	101	;'e'
   225  00106E  61                 	db	97	;'a'
   226  00106F  64                 	db	100	;'d'
   227  001070  20                 	db	32
   228  001071  66                 	db	102	;'f'
   229  001072  72                 	db	114	;'r'
   230  001073  6F                 	db	111	;'o'
   231  001074  6D                 	db	109	;'m'
   232  001075  20                 	db	32
   233  001076  30                 	db	48	;'0'
   234  001077  78                 	db	120	;'x'
   235  001078  30                 	db	48	;'0'
   236  001079  31                 	db	49	;'1'
   237  00107A  3A                 	db	58	;':'
   238  00107B  20                 	db	32
   239  00107C  25                 	db	37
   240  00107D  64                 	db	100	;'d'
   241  00107E  00                 	db	0
   242  00107F                     STR_1:
   243  00107F  45                 	db	69	;'E'
   244  001080  45                 	db	69	;'E'
   245  001081  50                 	db	80	;'P'
   246  001082  52                 	db	82	;'R'
   247  001083  4F                 	db	79	;'O'
   248  001084  4D                 	db	77	;'M'
   249  001085  00                 	db	0
   250  0000                     
   251                           ; #config settings
   252  001086  00                 	db	0	; dummy byte at the end
   253  0000                     
   254                           	psect	cinit
   255  001C70                     __pcinit:
   256                           	opt callstack 0
   257  001C70                     start_initialization:
   258                           	opt callstack 0
   259  001C70                     __initialization:
   260                           	opt callstack 0
   261                           
   262                           ; Clear objects allocated to BANK0 (32 bytes)
   263  001C70  EE00  F080         	lfsr	0,__pbssBANK0
   264  001C74  0E20               	movlw	32
   265  001C76                     clear_0:
   266  001C76  6AEE               	clrf	postinc0,c
   267  001C78  06E8               	decf	wreg,f,c
   268  001C7A  E1FD               	bnz	clear_0
   269                           
   270                           ; Clear objects allocated to COMRAM (8 bytes)
   271  001C7C  EE00  F06B         	lfsr	0,__pbssCOMRAM
   272  001C80  0E08               	movlw	8
   273  001C82                     clear_1:
   274  001C82  6AEE               	clrf	postinc0,c
   275  001C84  06E8               	decf	wreg,f,c
   276  001C86  E1FD               	bnz	clear_1
   277  001C88                     end_of_initialization:
   278                           	opt callstack 0
   279  001C88                     __end_of__initialization:
   280                           	opt callstack 0
   281  001C88  0E00               	movlw	low (__Lsmallconst shr (0+16))
   282  001C8A  6EF8               	movwf	tblptru,c
   283  001C8C  0E10               	movlw	high __Lsmallconst
   284  001C8E  6EF7               	movwf	tblptrh,c
   285  001C90  0100               	movlb	0
   286  001C92  EF44  F008         	goto	_main	;jump to C main() function
   287                           
   288                           	psect	bssCOMRAM
   289  00006B                     __pbssCOMRAM:
   290                           	opt callstack 0
   291  00006B                     _nout:
   292                           	opt callstack 0
   293  00006B                     	ds	2
   294  00006D                     _width:
   295                           	opt callstack 0
   296  00006D                     	ds	2
   297  00006F                     _prec:
   298                           	opt callstack 0
   299  00006F                     	ds	2
   300  000071                     _flags:
   301                           	opt callstack 0
   302  000071                     	ds	2
   303                           
   304                           	psect	bssBANK0
   305  000080                     __pbssBANK0:
   306                           	opt callstack 0
   307  000080                     _dbuf:
   308                           	opt callstack 0
   309  000080                     	ds	32
   310                           
   311                           	psect	cstackCOMRAM
   312  000001                     __pcstackCOMRAM:
   313                           	opt callstack 0
   314  000001                     ?_strlen:
   315                           	opt callstack 0
   316  000001                     ?___aodiv:
   317                           	opt callstack 0
   318  000001                     ?___aomod:
   319                           	opt callstack 0
   320  000001                     pulse_e@interruptState:
   321                           	opt callstack 0
   322  000001                     ee_write_byte@_data:
   323                           	opt callstack 0
   324  000001                     ee_read_byte@_data:
   325                           	opt callstack 0
   326  000001                     strlen@s:
   327                           	opt callstack 0
   328  000001                     ___aodiv@dividend:
   329                           	opt callstack 0
   330  000001                     ___aomod@dividend:
   331                           	opt callstack 0
   332                           
   333                           ; 8 bytes @ 0x0
   334  000001                     	ds	1
   335  000002                     send_nibble@data:
   336                           	opt callstack 0
   337                           
   338                           ; 1 bytes @ 0x1
   339  000002                     	ds	1
   340  000003                     ee_write_byte@address:
   341                           	opt callstack 0
   342  000003                     ee_read_byte@address:
   343                           	opt callstack 0
   344  000003                     send_byte@data:
   345                           	opt callstack 0
   346  000003                     strlen@a:
   347                           	opt callstack 0
   348                           
   349                           ; 2 bytes @ 0x2
   350  000003                     	ds	1
   351  000004                     lcdInst@data:
   352                           	opt callstack 0
   353  000004                     putch@data:
   354                           	opt callstack 0
   355                           
   356                           ; 1 bytes @ 0x3
   357  000004                     	ds	1
   358  000005                     ??_initLCD:
   359  000005                     fputc@c:
   360                           	opt callstack 0
   361                           
   362                           ; 2 bytes @ 0x4
   363  000005                     	ds	2
   364  000007                     fputc@fp:
   365                           	opt callstack 0
   366                           
   367                           ; 2 bytes @ 0x6
   368  000007                     	ds	2
   369  000009                     ??_fputc:
   370  000009                     ___aodiv@divisor:
   371                           	opt callstack 0
   372  000009                     ___aomod@divisor:
   373                           	opt callstack 0
   374                           
   375                           ; 8 bytes @ 0x8
   376  000009                     	ds	5
   377  00000E                     fputs@s:
   378                           	opt callstack 0
   379                           
   380                           ; 2 bytes @ 0xD
   381  00000E                     	ds	2
   382  000010                     fputs@fp:
   383                           	opt callstack 0
   384                           
   385                           ; 2 bytes @ 0xF
   386  000010                     	ds	1
   387  000011                     ___aodiv@counter:
   388                           	opt callstack 0
   389  000011                     ___aomod@counter:
   390                           	opt callstack 0
   391                           
   392                           ; 1 bytes @ 0x10
   393  000011                     	ds	1
   394  000012                     ___aodiv@sign:
   395                           	opt callstack 0
   396  000012                     ___aomod@sign:
   397                           	opt callstack 0
   398  000012                     fputs@c:
   399                           	opt callstack 0
   400                           
   401                           ; 1 bytes @ 0x11
   402  000012                     	ds	1
   403  000013                     ?_abs:
   404                           	opt callstack 0
   405  000013                     abs@a:
   406                           	opt callstack 0
   407  000013                     fputs@i:
   408                           	opt callstack 0
   409  000013                     ___aodiv@quotient:
   410                           	opt callstack 0
   411                           
   412                           ; 8 bytes @ 0x12
   413  000013                     	ds	2
   414  000015                     ??_abs:
   415  000015                     ?_pad:
   416                           	opt callstack 0
   417  000015                     pad@fp:
   418                           	opt callstack 0
   419                           
   420                           ; 2 bytes @ 0x14
   421  000015                     	ds	2
   422  000017                     pad@buf:
   423                           	opt callstack 0
   424                           
   425                           ; 2 bytes @ 0x16
   426  000017                     	ds	2
   427  000019                     pad@p:
   428                           	opt callstack 0
   429                           
   430                           ; 2 bytes @ 0x18
   431  000019                     	ds	2
   432  00001B                     ??_pad:
   433                           
   434                           ; 1 bytes @ 0x1A
   435  00001B                     	ds	1
   436  00001C                     pad@i:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0x1B
   440  00001C                     	ds	2
   441  00001E                     pad@w:
   442                           	opt callstack 0
   443                           
   444                           ; 2 bytes @ 0x1D
   445  00001E                     	ds	2
   446  000020                     ?_ctoa:
   447                           	opt callstack 0
   448  000020                     ?_dtoa:
   449                           	opt callstack 0
   450  000020                     ctoa@fp:
   451                           	opt callstack 0
   452  000020                     dtoa@fp:
   453                           	opt callstack 0
   454                           
   455                           ; 2 bytes @ 0x1F
   456  000020                     	ds	2
   457  000022                     ctoa@c:
   458                           	opt callstack 0
   459  000022                     dtoa@d:
   460                           	opt callstack 0
   461                           
   462                           ; 8 bytes @ 0x21
   463  000022                     	ds	1
   464  000023                     ctoa@w:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0x22
   468  000023                     	ds	7
   469  00002A                     ??_dtoa:
   470                           
   471                           ; 1 bytes @ 0x29
   472  00002A                     	ds	8
   473  000032                     _dtoa$459:
   474                           	opt callstack 0
   475                           
   476                           ; 2 bytes @ 0x31
   477  000032                     	ds	2
   478  000034                     dtoa@p:
   479                           	opt callstack 0
   480                           
   481                           ; 2 bytes @ 0x33
   482  000034                     	ds	2
   483  000036                     dtoa@w:
   484                           	opt callstack 0
   485                           
   486                           ; 2 bytes @ 0x35
   487  000036                     	ds	2
   488  000038                     dtoa@s:
   489                           	opt callstack 0
   490                           
   491                           ; 2 bytes @ 0x37
   492  000038                     	ds	2
   493  00003A                     dtoa@n:
   494                           	opt callstack 0
   495                           
   496                           ; 8 bytes @ 0x39
   497  00003A                     	ds	8
   498  000042                     dtoa@i:
   499                           	opt callstack 0
   500                           
   501                           ; 2 bytes @ 0x41
   502  000042                     	ds	2
   503  000044                     ?_vfpfcnvrt:
   504                           	opt callstack 0
   505  000044                     vfpfcnvrt@fp:
   506                           	opt callstack 0
   507                           
   508                           ; 2 bytes @ 0x43
   509  000044                     	ds	2
   510  000046                     vfpfcnvrt@fmt:
   511                           	opt callstack 0
   512                           
   513                           ; 2 bytes @ 0x45
   514  000046                     	ds	2
   515  000048                     vfpfcnvrt@ap:
   516                           	opt callstack 0
   517                           
   518                           ; 2 bytes @ 0x47
   519  000048                     	ds	2
   520  00004A                     ??_vfpfcnvrt:
   521                           
   522                           ; 1 bytes @ 0x49
   523  00004A                     	ds	2
   524  00004C                     vfpfcnvrt@ll:
   525                           	opt callstack 0
   526                           
   527                           ; 8 bytes @ 0x4B
   528  00004C                     	ds	8
   529  000054                     vfpfcnvrt@c:
   530                           	opt callstack 0
   531                           
   532                           ; 1 bytes @ 0x53
   533  000054                     	ds	1
   534  000055                     ?_vfprintf:
   535                           	opt callstack 0
   536  000055                     vfprintf@fp:
   537                           	opt callstack 0
   538                           
   539                           ; 2 bytes @ 0x54
   540  000055                     	ds	2
   541  000057                     vfprintf@fmt:
   542                           	opt callstack 0
   543                           
   544                           ; 2 bytes @ 0x56
   545  000057                     	ds	2
   546  000059                     vfprintf@ap:
   547                           	opt callstack 0
   548                           
   549                           ; 2 bytes @ 0x58
   550  000059                     	ds	2
   551  00005B                     vfprintf@cfmt:
   552                           	opt callstack 0
   553                           
   554                           ; 2 bytes @ 0x5A
   555  00005B                     	ds	2
   556  00005D                     ?_printf:
   557                           	opt callstack 0
   558  00005D                     printf@fmt:
   559                           	opt callstack 0
   560                           
   561                           ; 2 bytes @ 0x5C
   562  00005D                     	ds	4
   563  000061                     
   564                           ; 1 bytes @ 0x60
   565  000061                     	ds	2
   566  000063                     printf@ap:
   567                           	opt callstack 0
   568                           
   569                           ; 2 bytes @ 0x62
   570  000063                     	ds	2
   571  000065                     ??_main:
   572                           
   573                           ; 1 bytes @ 0x64
   574  000065                     	ds	2
   575  000067                     main@help:
   576                           	opt callstack 0
   577                           
   578                           ; 2 bytes @ 0x66
   579  000067                     	ds	2
   580  000069                     main@save_me:
   581                           	opt callstack 0
   582                           
   583                           ; 1 bytes @ 0x68
   584  000069                     	ds	1
   585  00006A                     main@from_eeprom:
   586                           	opt callstack 0
   587                           
   588                           ; 1 bytes @ 0x69
   589  00006A                     	ds	1
   590                           
   591 ;;
   592 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   593 ;;
   594 ;; *************** function _main *****************
   595 ;; Defined at:
   596 ;;		line 144 in file "main.c"
   597 ;; Parameters:    Size  Location     Type
   598 ;;		None
   599 ;; Auto vars:     Size  Location     Type
   600 ;;  help            2  102[COMRAM] int 
   601 ;;  from_eeprom     1  105[COMRAM] unsigned char 
   602 ;;  save_me         1  104[COMRAM] unsigned char 
   603 ;; Return value:  Size  Location     Type
   604 ;;                  1    wreg      void 
   605 ;; Registers used:
   606 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   607 ;; Tracked objects:
   608 ;;		On entry : 0/0
   609 ;;		On exit  : 0/0
   610 ;;		Unchanged: 0/0
   611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   613 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   614 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   615 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   616 ;;Total ram usage:        6 bytes
   617 ;; Hardware stack levels required when called:   11
   618 ;; This function calls:
   619 ;;		_ee_read_byte
   620 ;;		_ee_write_byte
   621 ;;		_initLCD
   622 ;;		_lcdInst
   623 ;;		_printf
   624 ;; This function is called by:
   625 ;;		Startup code after reset
   626 ;; This function uses a non-reentrant model
   627 ;;
   628                           
   629                           	psect	text0
   630  001088                     __ptext0:
   631                           	opt callstack 0
   632  001088                     _main:
   633                           	opt callstack 20
   634                           
   635                           ;main.c: 145:     char save_me = 'x';
   636                           
   637                           ;incstack = 0
   638  001088  0E78               	movlw	120
   639  00108A  6E69               	movwf	main@save_me,c
   640                           
   641                           ;main.c: 146:     char from_eeprom;;main.c: 147:     int help = 65;
   642  00108C  0E00               	movlw	0
   643  00108E  6E68               	movwf	main@help+1,c
   644  001090  0E41               	movlw	65
   645  001092  6E67               	movwf	main@help,c
   646                           
   647                           ;main.c: 148:     initLCD();
   648  001094  EC3C  F00D         	call	_initLCD	;wreg free
   649                           
   650                           ;main.c: 149:     TRISD = 0x00;
   651  001098  0E00               	movlw	0
   652  00109A  6E95               	movwf	3989,c	;volatile
   653                           
   654                           ;main.c: 152:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   655  00109C  0E01               	movlw	1
   656  00109E  EC85  F00E         	call	_lcdInst
   657  0010A2  0E11               	movlw	17
   658  0010A4  6E65               	movwf	??_main& (0+255),c
   659  0010A6  0E3A               	movlw	58
   660  0010A8                     u1057:
   661  0010A8  2EE8               	decfsz	wreg,f,c
   662  0010AA  D7FE               	bra	u1057
   663  0010AC  2E65               	decfsz	??_main& (0+255),f,c
   664  0010AE  D7FC               	bra	u1057
   665  0010B0  D000               	nop2	
   666                           
   667                           ;main.c: 153:     printf("EEPROM");
   668  0010B2  0E7F               	movlw	low STR_1
   669  0010B4  6E5D               	movwf	printf@fmt,c
   670  0010B6  0E10               	movlw	high STR_1
   671  0010B8  6E5E               	movwf	printf@fmt+1,c
   672  0010BA  EC4B  F00E         	call	_printf	;wreg free
   673                           
   674                           ;main.c: 154:     ee_read_byte(0x00, &from_eeprom);
   675  0010BE  0E6A               	movlw	low main@from_eeprom
   676  0010C0  6E01               	movwf	ee_read_byte@_data,c
   677  0010C2  0E00               	movlw	high main@from_eeprom
   678  0010C4  6E02               	movwf	ee_read_byte@_data+1,c
   679  0010C6  0E00               	movlw	0
   680  0010C8  EC5E  F00E         	call	_ee_read_byte
   681  0010CC  0EC0               	movlw	192
   682  0010CE  EC85  F00E         	call	_lcdInst
   683                           
   684                           ;main.c: 156:     printf("Char read from 0x00: %c", from_eeprom);
   685  0010D2  0E20               	movlw	low STR_2
   686  0010D4  6E5D               	movwf	printf@fmt,c
   687  0010D6  0E10               	movlw	high STR_2
   688  0010D8  6E5E               	movwf	printf@fmt+1,c
   689  0010DA  C06A  F05F         	movff	main@from_eeprom,?_printf+2
   690  0010DE  6A60               	clrf	?_printf+3,c
   691  0010E0  EC4B  F00E         	call	_printf	;wreg free
   692                           
   693                           ;main.c: 157:     _delay((unsigned long)((1000)*(10000000/4000.0)));
   694  0010E4  0E0D               	movlw	13
   695  0010E6  6E66               	movwf	(??_main+1)& (0+255),c
   696  0010E8  0EAF               	movlw	175
   697  0010EA  6E65               	movwf	??_main& (0+255),c
   698  0010EC  0EB6               	movlw	182
   699  0010EE                     u1067:
   700  0010EE  2EE8               	decfsz	wreg,f,c
   701  0010F0  D7FE               	bra	u1067
   702  0010F2  2E65               	decfsz	??_main& (0+255),f,c
   703  0010F4  D7FC               	bra	u1067
   704  0010F6  2E66               	decfsz	(??_main+1)& (0+255),f,c
   705  0010F8  D7FA               	bra	u1067
   706  0010FA  D000               	nop2	
   707                           
   708                           ;main.c: 159:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   709  0010FC  0E01               	movlw	1
   710  0010FE  EC85  F00E         	call	_lcdInst
   711  001102  0E11               	movlw	17
   712  001104  6E65               	movwf	??_main& (0+255),c
   713  001106  0E3A               	movlw	58
   714  001108                     u1077:
   715  001108  2EE8               	decfsz	wreg,f,c
   716  00110A  D7FE               	bra	u1077
   717  00110C  2E65               	decfsz	??_main& (0+255),f,c
   718  00110E  D7FC               	bra	u1077
   719  001110  D000               	nop2	
   720                           
   721                           ;main.c: 160:     printf("EEPROM");
   722  001112  0E7F               	movlw	low STR_1
   723  001114  6E5D               	movwf	printf@fmt,c
   724  001116  0E10               	movlw	high STR_1
   725  001118  6E5E               	movwf	printf@fmt+1,c
   726  00111A  EC4B  F00E         	call	_printf	;wreg free
   727                           
   728                           ;main.c: 161:     ee_write_byte(0x00, &save_me);
   729  00111E  0E69               	movlw	low main@save_me
   730  001120  6E01               	movwf	ee_write_byte@_data,c
   731  001122  0E00               	movlw	high main@save_me
   732  001124  6E02               	movwf	ee_write_byte@_data+1,c
   733  001126  0E00               	movlw	0
   734  001128  ECF6  F00D         	call	_ee_write_byte
   735  00112C  0EC0               	movlw	192
   736  00112E  EC85  F00E         	call	_lcdInst
   737                           
   738                           ;main.c: 163:     printf("Char written to 0x00: %c", save_me);
   739  001132  0E07               	movlw	low STR_4
   740  001134  6E5D               	movwf	printf@fmt,c
   741  001136  0E10               	movlw	high STR_4
   742  001138  6E5E               	movwf	printf@fmt+1,c
   743  00113A  C069  F05F         	movff	main@save_me,?_printf+2
   744  00113E  6A60               	clrf	?_printf+3,c
   745  001140  EC4B  F00E         	call	_printf	;wreg free
   746                           
   747                           ;main.c: 165:     _delay((unsigned long)((1000)*(10000000/4000.0)));
   748  001144  0E0D               	movlw	13
   749  001146  6E66               	movwf	(??_main+1)& (0+255),c
   750  001148  0EAF               	movlw	175
   751  00114A  6E65               	movwf	??_main& (0+255),c
   752  00114C  0EB6               	movlw	182
   753  00114E                     u1087:
   754  00114E  2EE8               	decfsz	wreg,f,c
   755  001150  D7FE               	bra	u1087
   756  001152  2E65               	decfsz	??_main& (0+255),f,c
   757  001154  D7FC               	bra	u1087
   758  001156  2E66               	decfsz	(??_main+1)& (0+255),f,c
   759  001158  D7FA               	bra	u1087
   760  00115A  D000               	nop2	
   761                           
   762                           ;main.c: 167:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   763  00115C  0E01               	movlw	1
   764  00115E  EC85  F00E         	call	_lcdInst
   765  001162  0E11               	movlw	17
   766  001164  6E65               	movwf	??_main& (0+255),c
   767  001166  0E3A               	movlw	58
   768  001168                     u1097:
   769  001168  2EE8               	decfsz	wreg,f,c
   770  00116A  D7FE               	bra	u1097
   771  00116C  2E65               	decfsz	??_main& (0+255),f,c
   772  00116E  D7FC               	bra	u1097
   773  001170  D000               	nop2	
   774                           
   775                           ;main.c: 168:     printf("EEPROM");
   776  001172  0E7F               	movlw	low STR_1
   777  001174  6E5D               	movwf	printf@fmt,c
   778  001176  0E10               	movlw	high STR_1
   779  001178  6E5E               	movwf	printf@fmt+1,c
   780  00117A  EC4B  F00E         	call	_printf	;wreg free
   781                           
   782                           ;main.c: 169:     ee_read_byte(0x00, &from_eeprom);
   783  00117E  0E6A               	movlw	low main@from_eeprom
   784  001180  6E01               	movwf	ee_read_byte@_data,c
   785  001182  0E00               	movlw	high main@from_eeprom
   786  001184  6E02               	movwf	ee_read_byte@_data+1,c
   787  001186  0E00               	movlw	0
   788  001188  EC5E  F00E         	call	_ee_read_byte
   789  00118C  0EC0               	movlw	192
   790  00118E  EC85  F00E         	call	_lcdInst
   791                           
   792                           ;main.c: 171:     printf("Char read from 0x00: %c", from_eeprom);
   793  001192  0E20               	movlw	low STR_2
   794  001194  6E5D               	movwf	printf@fmt,c
   795  001196  0E10               	movlw	high STR_2
   796  001198  6E5E               	movwf	printf@fmt+1,c
   797  00119A  C06A  F05F         	movff	main@from_eeprom,?_printf+2
   798  00119E  6A60               	clrf	?_printf+3,c
   799  0011A0  EC4B  F00E         	call	_printf	;wreg free
   800                           
   801                           ;main.c: 173:     _delay((unsigned long)((1000)*(10000000/4000.0)));
   802  0011A4  0E0D               	movlw	13
   803  0011A6  6E66               	movwf	(??_main+1)& (0+255),c
   804  0011A8  0EAF               	movlw	175
   805  0011AA  6E65               	movwf	??_main& (0+255),c
   806  0011AC  0EB6               	movlw	182
   807  0011AE                     u1107:
   808  0011AE  2EE8               	decfsz	wreg,f,c
   809  0011B0  D7FE               	bra	u1107
   810  0011B2  2E65               	decfsz	??_main& (0+255),f,c
   811  0011B4  D7FC               	bra	u1107
   812  0011B6  2E66               	decfsz	(??_main+1)& (0+255),f,c
   813  0011B8  D7FA               	bra	u1107
   814  0011BA  D000               	nop2	
   815                           
   816                           ;main.c: 176:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   817  0011BC  0E01               	movlw	1
   818  0011BE  EC85  F00E         	call	_lcdInst
   819  0011C2  0E11               	movlw	17
   820  0011C4  6E65               	movwf	??_main& (0+255),c
   821  0011C6  0E3A               	movlw	58
   822  0011C8                     u1117:
   823  0011C8  2EE8               	decfsz	wreg,f,c
   824  0011CA  D7FE               	bra	u1117
   825  0011CC  2E65               	decfsz	??_main& (0+255),f,c
   826  0011CE  D7FC               	bra	u1117
   827  0011D0  D000               	nop2	
   828                           
   829                           ;main.c: 177:     printf("EEPROM");
   830  0011D2  0E7F               	movlw	low STR_1
   831  0011D4  6E5D               	movwf	printf@fmt,c
   832  0011D6  0E10               	movlw	high STR_1
   833  0011D8  6E5E               	movwf	printf@fmt+1,c
   834  0011DA  EC4B  F00E         	call	_printf	;wreg free
   835                           
   836                           ;main.c: 178:     ee_read_byte(0x01, &from_eeprom);
   837  0011DE  0E6A               	movlw	low main@from_eeprom
   838  0011E0  6E01               	movwf	ee_read_byte@_data,c
   839  0011E2  0E00               	movlw	high main@from_eeprom
   840  0011E4  6E02               	movwf	ee_read_byte@_data+1,c
   841  0011E6  0E01               	movlw	1
   842  0011E8  EC5E  F00E         	call	_ee_read_byte
   843  0011EC  0EC0               	movlw	192
   844  0011EE  EC85  F00E         	call	_lcdInst
   845                           
   846                           ;main.c: 180:     printf("Char read from 0x01: %c", from_eeprom);
   847  0011F2  0E38               	movlw	low STR_8
   848  0011F4  6E5D               	movwf	printf@fmt,c
   849  0011F6  0E10               	movlw	high STR_8
   850  0011F8  6E5E               	movwf	printf@fmt+1,c
   851  0011FA  C06A  F05F         	movff	main@from_eeprom,?_printf+2
   852  0011FE  6A60               	clrf	?_printf+3,c
   853  001200  EC4B  F00E         	call	_printf	;wreg free
   854                           
   855                           ;main.c: 182:     _delay((unsigned long)((1000)*(10000000/4000.0)));
   856  001204  0E0D               	movlw	13
   857  001206  6E66               	movwf	(??_main+1)& (0+255),c
   858  001208  0EAF               	movlw	175
   859  00120A  6E65               	movwf	??_main& (0+255),c
   860  00120C  0EB6               	movlw	182
   861  00120E                     u1127:
   862  00120E  2EE8               	decfsz	wreg,f,c
   863  001210  D7FE               	bra	u1127
   864  001212  2E65               	decfsz	??_main& (0+255),f,c
   865  001214  D7FC               	bra	u1127
   866  001216  2E66               	decfsz	(??_main+1)& (0+255),f,c
   867  001218  D7FA               	bra	u1127
   868  00121A  D000               	nop2	
   869                           
   870                           ;main.c: 184:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   871  00121C  0E01               	movlw	1
   872  00121E  EC85  F00E         	call	_lcdInst
   873  001222  0E11               	movlw	17
   874  001224  6E65               	movwf	??_main& (0+255),c
   875  001226  0E3A               	movlw	58
   876  001228                     u1137:
   877  001228  2EE8               	decfsz	wreg,f,c
   878  00122A  D7FE               	bra	u1137
   879  00122C  2E65               	decfsz	??_main& (0+255),f,c
   880  00122E  D7FC               	bra	u1137
   881  001230  D000               	nop2	
   882                           
   883                           ;main.c: 185:     printf("EEPROM");
   884  001232  0E7F               	movlw	low STR_1
   885  001234  6E5D               	movwf	printf@fmt,c
   886  001236  0E10               	movlw	high STR_1
   887  001238  6E5E               	movwf	printf@fmt+1,c
   888  00123A  EC4B  F00E         	call	_printf	;wreg free
   889                           
   890                           ;main.c: 186:     ee_write_byte(0x01, &help);
   891  00123E  0E67               	movlw	low main@help
   892  001240  6E01               	movwf	ee_write_byte@_data,c
   893  001242  0E00               	movlw	high main@help
   894  001244  6E02               	movwf	ee_write_byte@_data+1,c
   895  001246  0E01               	movlw	1
   896  001248  ECF6  F00D         	call	_ee_write_byte
   897  00124C  0EC0               	movlw	192
   898  00124E  EC85  F00E         	call	_lcdInst
   899                           
   900                           ;main.c: 188:     printf("int written to 0x01: %d", help);
   901  001252  0E50               	movlw	low STR_10
   902  001254  6E5D               	movwf	printf@fmt,c
   903  001256  0E10               	movlw	high STR_10
   904  001258  6E5E               	movwf	printf@fmt+1,c
   905  00125A  C067  F05F         	movff	main@help,?_printf+2
   906  00125E  C068  F060         	movff	main@help+1,?_printf+3
   907  001262  EC4B  F00E         	call	_printf	;wreg free
   908                           
   909                           ;main.c: 190:     _delay((unsigned long)((1000)*(10000000/4000.0)));
   910  001266  0E0D               	movlw	13
   911  001268  6E66               	movwf	(??_main+1)& (0+255),c
   912  00126A  0EAF               	movlw	175
   913  00126C  6E65               	movwf	??_main& (0+255),c
   914  00126E  0EB6               	movlw	182
   915  001270                     u1147:
   916  001270  2EE8               	decfsz	wreg,f,c
   917  001272  D7FE               	bra	u1147
   918  001274  2E65               	decfsz	??_main& (0+255),f,c
   919  001276  D7FC               	bra	u1147
   920  001278  2E66               	decfsz	(??_main+1)& (0+255),f,c
   921  00127A  D7FA               	bra	u1147
   922  00127C  D000               	nop2	
   923                           
   924                           ;main.c: 192:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   925  00127E  0E01               	movlw	1
   926  001280  EC85  F00E         	call	_lcdInst
   927  001284  0E11               	movlw	17
   928  001286  6E65               	movwf	??_main& (0+255),c
   929  001288  0E3A               	movlw	58
   930  00128A                     u1157:
   931  00128A  2EE8               	decfsz	wreg,f,c
   932  00128C  D7FE               	bra	u1157
   933  00128E  2E65               	decfsz	??_main& (0+255),f,c
   934  001290  D7FC               	bra	u1157
   935  001292  D000               	nop2	
   936                           
   937                           ;main.c: 193:     printf("EEPROM");
   938  001294  0E7F               	movlw	low STR_1
   939  001296  6E5D               	movwf	printf@fmt,c
   940  001298  0E10               	movlw	high STR_1
   941  00129A  6E5E               	movwf	printf@fmt+1,c
   942  00129C  EC4B  F00E         	call	_printf	;wreg free
   943                           
   944                           ;main.c: 194:     ee_read_byte(0x01, &from_eeprom);
   945  0012A0  0E6A               	movlw	low main@from_eeprom
   946  0012A2  6E01               	movwf	ee_read_byte@_data,c
   947  0012A4  0E00               	movlw	high main@from_eeprom
   948  0012A6  6E02               	movwf	ee_read_byte@_data+1,c
   949  0012A8  0E01               	movlw	1
   950  0012AA  EC5E  F00E         	call	_ee_read_byte
   951  0012AE  0EC0               	movlw	192
   952  0012B0  EC85  F00E         	call	_lcdInst
   953                           
   954                           ;main.c: 196:     printf("int read from 0x01: %d", from_eeprom);
   955  0012B4  0E68               	movlw	low STR_12
   956  0012B6  6E5D               	movwf	printf@fmt,c
   957  0012B8  0E10               	movlw	high STR_12
   958  0012BA  6E5E               	movwf	printf@fmt+1,c
   959  0012BC  C06A  F05F         	movff	main@from_eeprom,?_printf+2
   960  0012C0  6A60               	clrf	?_printf+3,c
   961  0012C2  EC4B  F00E         	call	_printf	;wreg free
   962                           
   963                           ;main.c: 198:     _delay((unsigned long)((1000)*(10000000/4000.0)));
   964  0012C6  0E0D               	movlw	13
   965  0012C8  6E66               	movwf	(??_main+1)& (0+255),c
   966  0012CA  0EAF               	movlw	175
   967  0012CC  6E65               	movwf	??_main& (0+255),c
   968  0012CE  0EB6               	movlw	182
   969  0012D0                     u1167:
   970  0012D0  2EE8               	decfsz	wreg,f,c
   971  0012D2  D7FE               	bra	u1167
   972  0012D4  2E65               	decfsz	??_main& (0+255),f,c
   973  0012D6  D7FC               	bra	u1167
   974  0012D8  2E66               	decfsz	(??_main+1)& (0+255),f,c
   975  0012DA  D7FA               	bra	u1167
   976  0012DC  D000               	nop2	
   977  0012DE  EF00  F000         	goto	start
   978  0012E2                     __end_of_main:
   979                           	opt callstack 0
   980                           
   981 ;; *************** function _printf *****************
   982 ;; Defined at:
   983 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
   984 ;; Parameters:    Size  Location     Type
   985 ;;  fmt             2   92[COMRAM] PTR const unsigned char 
   986 ;;		 -> STR_12(23), STR_11(7), STR_10(24), STR_9(7), 
   987 ;;		 -> STR_8(24), STR_7(7), STR_6(24), STR_5(7), 
   988 ;;		 -> STR_4(25), STR_3(7), STR_2(24), STR_1(7), 
   989 ;; Auto vars:     Size  Location     Type
   990 ;;  ap              2   98[COMRAM] PTR void [1]
   991 ;;		 -> ?_printf(2), 
   992 ;;  ret             2    0        int 
   993 ;; Return value:  Size  Location     Type
   994 ;;                  2   92[COMRAM] int 
   995 ;; Registers used:
   996 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1002 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1003 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1005 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1006 ;;Total ram usage:        8 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; Hardware stack levels required when called:   10
  1009 ;; This function calls:
  1010 ;;		_vfprintf
  1011 ;; This function is called by:
  1012 ;;		_main
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           	psect	text1
  1017  001C96                     __ptext1:
  1018                           	opt callstack 0
  1019  001C96                     _printf:
  1020                           	opt callstack 20
  1021                           
  1022                           ;incstack = 0
  1023  001C96  0E5F               	movlw	low (?_printf+2)
  1024  001C98  6E63               	movwf	printf@ap,c
  1025  001C9A  0E00               	movlw	high (?_printf+2)
  1026  001C9C  6E64               	movwf	printf@ap+1,c
  1027  001C9E  0E00               	movlw	0
  1028  001CA0  6E55               	movwf	vfprintf@fp,c
  1029  001CA2  0E00               	movlw	0
  1030  001CA4  6E56               	movwf	vfprintf@fp+1,c
  1031  001CA6  C05D  F057         	movff	printf@fmt,vfprintf@fmt
  1032  001CAA  C05E  F058         	movff	printf@fmt+1,vfprintf@fmt+1
  1033  001CAE  0E63               	movlw	low printf@ap
  1034  001CB0  6E59               	movwf	vfprintf@ap,c
  1035  001CB2  0E00               	movlw	high printf@ap
  1036  001CB4  6E5A               	movwf	vfprintf@ap+1,c
  1037  001CB6  EC71  F00D         	call	_vfprintf	;wreg free
  1038  001CBA  0012               	return		;funcret
  1039  001CBC                     __end_of_printf:
  1040                           	opt callstack 0
  1041                           
  1042 ;; *************** function _vfprintf *****************
  1043 ;; Defined at:
  1044 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1045 ;; Parameters:    Size  Location     Type
  1046 ;;  fp              2   84[COMRAM] PTR struct _IO_FILE
  1047 ;;		 -> NULL(0), 
  1048 ;;  fmt             2   86[COMRAM] PTR const unsigned char 
  1049 ;;		 -> STR_12(23), STR_11(7), STR_10(24), STR_9(7), 
  1050 ;;		 -> STR_8(24), STR_7(7), STR_6(24), STR_5(7), 
  1051 ;;		 -> STR_4(25), STR_3(7), STR_2(24), STR_1(7), 
  1052 ;;  ap              2   88[COMRAM] PTR PTR void 
  1053 ;;		 -> printf@ap(2), 
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  cfmt            2   90[COMRAM] PTR unsigned char 
  1056 ;;		 -> STR_12(23), STR_11(7), STR_10(24), STR_9(7), 
  1057 ;;		 -> STR_8(24), STR_7(7), STR_6(24), STR_5(7), 
  1058 ;;		 -> STR_4(25), STR_3(7), STR_2(24), STR_1(7), 
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  2   84[COMRAM] int 
  1061 ;; Registers used:
  1062 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1068 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1069 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1071 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1072 ;;Total ram usage:        8 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; Hardware stack levels required when called:    9
  1075 ;; This function calls:
  1076 ;;		_vfpfcnvrt
  1077 ;; This function is called by:
  1078 ;;		_printf
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082                           	psect	text2
  1083  001AE2                     __ptext2:
  1084                           	opt callstack 0
  1085  001AE2                     _vfprintf:
  1086                           	opt callstack 20
  1087                           
  1088                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1089                           
  1090                           ;incstack = 0
  1091  001AE2  C057  F05B         	movff	vfprintf@fmt,vfprintf@cfmt
  1092  001AE6  C058  F05C         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1093                           
  1094                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1095  001AEA  0E00               	movlw	0
  1096  001AEC  6E6C               	movwf	_nout+1,c
  1097  001AEE  0E00               	movlw	0
  1098  001AF0  6E6B               	movwf	_nout,c
  1099                           
  1100                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1101  001AF2  D012               	goto	l1713
  1102  001AF4                     l1711:
  1103                           
  1104                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1105  001AF4  C055  F044         	movff	vfprintf@fp,vfpfcnvrt@fp
  1106  001AF8  C056  F045         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1107  001AFC  0E5B               	movlw	low vfprintf@cfmt
  1108  001AFE  6E46               	movwf	vfpfcnvrt@fmt,c
  1109  001B00  0E00               	movlw	high vfprintf@cfmt
  1110  001B02  6E47               	movwf	vfpfcnvrt@fmt+1,c
  1111  001B04  C059  F048         	movff	vfprintf@ap,vfpfcnvrt@ap
  1112  001B08  C05A  F049         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1113  001B0C  EC92  F00A         	call	_vfpfcnvrt	;wreg free
  1114  001B10  5044               	movf	?_vfpfcnvrt,w,c
  1115  001B12  266B               	addwf	_nout,f,c
  1116  001B14  5045               	movf	?_vfpfcnvrt+1,w,c
  1117  001B16  226C               	addwfc	_nout+1,f,c
  1118  001B18                     l1713:
  1119                           
  1120                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1121  001B18  C05B  FFF6         	movff	vfprintf@cfmt,tblptrl
  1122  001B1C  C05C  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1123  001B20                     	if	0	;tblptru may be non-zero
  1124  001B20                     	endif
  1125  001B20                     	if	0	;tblptru may be non-zero
  1126  001B20                     	endif
  1127  001B20  0008               	tblrd		*
  1128  001B22  50F5               	movf	tablat,w,c
  1129  001B24  0900               	iorlw	0
  1130  001B26  A4D8               	btfss	status,2,c
  1131  001B28  D7E5               	goto	l1711
  1132                           
  1133                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1134  001B2A  C06B  F055         	movff	_nout,?_vfprintf
  1135  001B2E  C06C  F056         	movff	_nout+1,?_vfprintf+1
  1136  001B32  0012               	return		;funcret
  1137  001B34                     __end_of_vfprintf:
  1138                           	opt callstack 0
  1139                           
  1140 ;; *************** function _vfpfcnvrt *****************
  1141 ;; Defined at:
  1142 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1143 ;; Parameters:    Size  Location     Type
  1144 ;;  fp              2   67[COMRAM] PTR struct _IO_FILE
  1145 ;;		 -> NULL(0), 
  1146 ;;  fmt             2   69[COMRAM] PTR PTR unsigned char 
  1147 ;;		 -> vfprintf@cfmt(2), 
  1148 ;;  ap              2   71[COMRAM] PTR PTR void 
  1149 ;;		 -> printf@ap(2), 
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;  ll              8   75[COMRAM] long long 
  1152 ;;  llu             8    0        unsigned long long 
  1153 ;;  f               4    0        unsigned long long 
  1154 ;;  vp              3    0        PTR void 
  1155 ;;  ct              3    0        unsigned char [3]
  1156 ;;  cp              3    0        PTR unsigned char 
  1157 ;;  i               2    0        int 
  1158 ;;  done            2    0        int 
  1159 ;;  c               1   83[COMRAM] unsigned char 
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  2   67[COMRAM] int 
  1162 ;; Registers used:
  1163 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1169 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1170 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1171 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1172 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1173 ;;Total ram usage:       17 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; Hardware stack levels required when called:    8
  1176 ;; This function calls:
  1177 ;;		_ctoa
  1178 ;;		_dtoa
  1179 ;;		_fputc
  1180 ;; This function is called by:
  1181 ;;		_vfprintf
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text3
  1186  001524                     __ptext3:
  1187                           	opt callstack 0
  1188  001524                     _vfpfcnvrt:
  1189                           	opt callstack 20
  1190                           
  1191                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1192                           
  1193                           ;incstack = 0
  1194  001524  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1195  001528  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1196  00152C  CFDE FFF6          	movff	postinc2,tblptrl
  1197  001530  CFDD FFF7          	movff	postdec2,tblptrh
  1198  001534                     	if	0	;tblptru may be non-zero
  1199  001534                     	endif
  1200  001534                     	if	0	;tblptru may be non-zero
  1201  001534                     	endif
  1202  001534  0008               	tblrd		*
  1203  001536  50F5               	movf	tablat,w,c
  1204  001538  0A25               	xorlw	37
  1205  00153A  A4D8               	btfss	status,2,c
  1206  00153C  D0CC               	goto	l1695
  1207                           
  1208                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1209  00153E  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1210  001542  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1211  001546  2ADE               	incf	postinc2,f,c
  1212  001548  0E00               	movlw	0
  1213  00154A  22DD               	addwfc	postdec2,f,c
  1214                           
  1215                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1216  00154C  0E00               	movlw	0
  1217  00154E  6E6E               	movwf	_width+1,c
  1218  001550  0E00               	movlw	0
  1219  001552  6E6D               	movwf	_width,c
  1220  001554  C06D  F071         	movff	_width,_flags
  1221  001558  C06E  F072         	movff	_width+1,_flags+1
  1222                           
  1223                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1224  00155C  686F               	setf	_prec,c
  1225  00155E  6870               	setf	_prec+1,c
  1226                           
  1227                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  1228  001560  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1229  001564  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1230  001568  CFDE FFF6          	movff	postinc2,tblptrl
  1231  00156C  CFDD FFF7          	movff	postdec2,tblptrh
  1232  001570                     	if	0	;tblptru may be non-zero
  1233  001570                     	endif
  1234  001570                     	if	0	;tblptru may be non-zero
  1235  001570                     	endif
  1236  001570  0008               	tblrd		*
  1237  001572  50F5               	movf	tablat,w,c
  1238  001574  0A63               	xorlw	99
  1239  001576  A4D8               	btfss	status,2,c
  1240  001578  D026               	goto	l1669
  1241                           
  1242                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  1243  00157A  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1244  00157E  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1245  001582  2ADE               	incf	postinc2,f,c
  1246  001584  0E00               	movlw	0
  1247  001586  22DD               	addwfc	postdec2,f,c
  1248                           
  1249                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  1250  001588  C048  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1251  00158C  C049  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1252  001590  CFDF F04A          	movff	indf2,??_vfpfcnvrt
  1253  001594  0E02               	movlw	2
  1254  001596  26DE               	addwf	postinc2,f,c
  1255  001598  CFDF F04B          	movff	indf2,??_vfpfcnvrt+1
  1256  00159C  0E00               	movlw	0
  1257  00159E  22DD               	addwfc	postdec2,f,c
  1258  0015A0  C04A  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1259  0015A4  C04B  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1260  0015A8  50DF               	movf	indf2,w,c
  1261  0015AA  6E54               	movwf	vfpfcnvrt@c,c
  1262                           
  1263                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  1264  0015AC  C044  F020         	movff	vfpfcnvrt@fp,ctoa@fp
  1265  0015B0  C045  F021         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  1266  0015B4  C054  F022         	movff	vfpfcnvrt@c,ctoa@c
  1267  0015B8  EC9A  F00D         	call	_ctoa	;wreg free
  1268  0015BC  C020  F044         	movff	?_ctoa,?_vfpfcnvrt
  1269  0015C0  C021  F045         	movff	?_ctoa+1,?_vfpfcnvrt+1
  1270  0015C4  0012               	return	
  1271  0015C6                     l1669:
  1272                           
  1273                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1274  0015C6  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1275  0015CA  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1276  0015CE  CFDE FFF6          	movff	postinc2,tblptrl
  1277  0015D2  CFDD FFF7          	movff	postdec2,tblptrh
  1278  0015D6                     	if	0	;tblptru may be non-zero
  1279  0015D6                     	endif
  1280  0015D6                     	if	0	;tblptru may be non-zero
  1281  0015D6                     	endif
  1282  0015D6  0008               	tblrd		*
  1283  0015D8  50F5               	movf	tablat,w,c
  1284  0015DA  0A64               	xorlw	100
  1285  0015DC  B4D8               	btfsc	status,2,c
  1286  0015DE  D00D               	goto	u990
  1287  0015E0  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1288  0015E4  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1289  0015E8  CFDE FFF6          	movff	postinc2,tblptrl
  1290  0015EC  CFDD FFF7          	movff	postdec2,tblptrh
  1291  0015F0                     	if	0	;tblptru may be non-zero
  1292  0015F0                     	endif
  1293  0015F0                     	if	0	;tblptru may be non-zero
  1294  0015F0                     	endif
  1295  0015F0  0008               	tblrd		*
  1296  0015F2  50F5               	movf	tablat,w,c
  1297  0015F4  0A69               	xorlw	105
  1298  0015F6  A4D8               	btfss	status,2,c
  1299  0015F8  D03F               	goto	l1679
  1300  0015FA                     u990:
  1301                           
  1302                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  1303  0015FA  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1304  0015FE  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1305  001602  2ADE               	incf	postinc2,f,c
  1306  001604  0E00               	movlw	0
  1307  001606  22DD               	addwfc	postdec2,f,c
  1308                           
  1309                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1310  001608  C048  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1311  00160C  C049  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1312  001610  CFDF F04A          	movff	indf2,??_vfpfcnvrt
  1313  001614  0E02               	movlw	2
  1314  001616  26DE               	addwf	postinc2,f,c
  1315  001618  CFDF F04B          	movff	indf2,??_vfpfcnvrt+1
  1316  00161C  0E00               	movlw	0
  1317  00161E  22DD               	addwfc	postdec2,f,c
  1318  001620  C04A  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1319  001624  C04B  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1320  001628  CFDE F04C          	movff	postinc2,vfpfcnvrt@ll
  1321  00162C  CFDD F04D          	movff	postdec2,vfpfcnvrt@ll+1
  1322  001630  0E00               	movlw	0
  1323  001632  BE4D               	btfsc	vfpfcnvrt@ll+1,7,c
  1324  001634  0EFF               	movlw	-1
  1325  001636  6E4E               	movwf	vfpfcnvrt@ll+2,c
  1326  001638  6E4F               	movwf	vfpfcnvrt@ll+3,c
  1327  00163A  6E50               	movwf	vfpfcnvrt@ll+4,c
  1328  00163C  6E51               	movwf	vfpfcnvrt@ll+5,c
  1329  00163E  6E52               	movwf	vfpfcnvrt@ll+6,c
  1330  001640  6E53               	movwf	vfpfcnvrt@ll+7,c
  1331                           
  1332                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  1333  001642  C044  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  1334  001646  C045  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1335  00164A  C04C  F022         	movff	vfpfcnvrt@ll,dtoa@d
  1336  00164E  C04D  F023         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1337  001652  C04E  F024         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1338  001656  C04F  F025         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1339  00165A  C050  F026         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1340  00165E  C051  F027         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1341  001662  C052  F028         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1342  001666  C053  F029         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1343  00166A  EC71  F009         	call	_dtoa	;wreg free
  1344  00166E  C020  F044         	movff	?_dtoa,?_vfpfcnvrt
  1345  001672  C021  F045         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1346  001676  0012               	return	
  1347  001678                     l1679:
  1348                           
  1349                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  1350  001678  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1351  00167C  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1352  001680  CFDE FFF6          	movff	postinc2,tblptrl
  1353  001684  CFDD FFF7          	movff	postdec2,tblptrh
  1354  001688                     	if	0	;tblptru may be non-zero
  1355  001688                     	endif
  1356  001688                     	if	0	;tblptru may be non-zero
  1357  001688                     	endif
  1358  001688  0008               	tblrd		*
  1359  00168A  50F5               	movf	tablat,w,c
  1360  00168C  0A25               	xorlw	37
  1361  00168E  A4D8               	btfss	status,2,c
  1362  001690  D016               	goto	l1689
  1363                           
  1364                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  1365  001692  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1366  001696  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1367  00169A  2ADE               	incf	postinc2,f,c
  1368  00169C  0E00               	movlw	0
  1369  00169E  22DD               	addwfc	postdec2,f,c
  1370                           
  1371                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  1372  0016A0  0E00               	movlw	0
  1373  0016A2  6E06               	movwf	fputc@c+1,c
  1374  0016A4  0E25               	movlw	37
  1375  0016A6  6E05               	movwf	fputc@c,c
  1376  0016A8  C044  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1377  0016AC  C045  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1378  0016B0  EC06  F00D         	call	_fputc	;wreg free
  1379  0016B4                     l1685:
  1380                           
  1381                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  1382  0016B4  0E00               	movlw	0
  1383  0016B6  6E45               	movwf	?_vfpfcnvrt+1,c
  1384  0016B8  0E01               	movlw	1
  1385  0016BA  6E44               	movwf	?_vfpfcnvrt,c
  1386  0016BC  0012               	return	
  1387  0016BE                     l1689:
  1388                           
  1389                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  1390  0016BE  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1391  0016C2  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1392  0016C6  2ADE               	incf	postinc2,f,c
  1393  0016C8  0E00               	movlw	0
  1394  0016CA  22DD               	addwfc	postdec2,f,c
  1395                           
  1396                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  1397  0016CC  0E00               	movlw	0
  1398  0016CE  6E45               	movwf	?_vfpfcnvrt+1,c
  1399  0016D0  0E00               	movlw	0
  1400  0016D2  6E44               	movwf	?_vfpfcnvrt,c
  1401  0016D4  0012               	return	
  1402  0016D6                     l1695:
  1403                           
  1404                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  1405  0016D6  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1406  0016DA  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1407  0016DE  CFDE FFF6          	movff	postinc2,tblptrl
  1408  0016E2  CFDD FFF7          	movff	postdec2,tblptrh
  1409  0016E6                     	if	0	;tblptru may be non-zero
  1410  0016E6                     	endif
  1411  0016E6                     	if	0	;tblptru may be non-zero
  1412  0016E6                     	endif
  1413  0016E6  0008               	tblrd		*
  1414  0016E8  50F5               	movf	tablat,w,c
  1415  0016EA  6E05               	movwf	fputc@c,c
  1416  0016EC  6A06               	clrf	fputc@c+1,c
  1417  0016EE  C044  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1418  0016F2  C045  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1419  0016F6  EC06  F00D         	call	_fputc	;wreg free
  1420                           
  1421                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  1422  0016FA  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1423  0016FE  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1424  001702  2ADE               	incf	postinc2,f,c
  1425  001704  0E00               	movlw	0
  1426  001706  22DD               	addwfc	postdec2,f,c
  1427  001708  D7D5               	goto	l1685
  1428  00170A                     __end_of_vfpfcnvrt:
  1429                           	opt callstack 0
  1430                           
  1431 ;; *************** function _dtoa *****************
  1432 ;; Defined at:
  1433 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  1436 ;;		 -> NULL(0), 
  1437 ;;  d               8   33[COMRAM] long long 
  1438 ;; Auto vars:     Size  Location     Type
  1439 ;;  n               8   57[COMRAM] long long 
  1440 ;;  i               2   65[COMRAM] int 
  1441 ;;  s               2   55[COMRAM] int 
  1442 ;;  w               2   53[COMRAM] int 
  1443 ;;  p               2   51[COMRAM] int 
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  2   31[COMRAM] int 
  1446 ;; Registers used:
  1447 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1453 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1454 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1455 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1456 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1457 ;;Total ram usage:       36 bytes
  1458 ;; Hardware stack levels used:    1
  1459 ;; Hardware stack levels required when called:    7
  1460 ;; This function calls:
  1461 ;;		___aodiv
  1462 ;;		___aomod
  1463 ;;		_abs
  1464 ;;		_pad
  1465 ;; This function is called by:
  1466 ;;		_vfpfcnvrt
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text4
  1471  0012E2                     __ptext4:
  1472                           	opt callstack 0
  1473  0012E2                     _dtoa:
  1474                           	opt callstack 20
  1475                           
  1476                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1477                           
  1478                           ;incstack = 0
  1479  0012E2  C022  F03A         	movff	dtoa@d,dtoa@n
  1480  0012E6  C023  F03B         	movff	dtoa@d+1,dtoa@n+1
  1481  0012EA  C024  F03C         	movff	dtoa@d+2,dtoa@n+2
  1482  0012EE  C025  F03D         	movff	dtoa@d+3,dtoa@n+3
  1483  0012F2  C026  F03E         	movff	dtoa@d+4,dtoa@n+4
  1484  0012F6  C027  F03F         	movff	dtoa@d+5,dtoa@n+5
  1485  0012FA  C028  F040         	movff	dtoa@d+6,dtoa@n+6
  1486  0012FE  C029  F041         	movff	dtoa@d+7,dtoa@n+7
  1487                           
  1488                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1489  001302  AE41               	btfss	dtoa@n+7,7,c
  1490  001304  D002               	goto	u810
  1491  001306  0E01               	movlw	1
  1492  001308  D001               	goto	u820
  1493  00130A                     u810:
  1494  00130A  0E00               	movlw	0
  1495  00130C                     u820:
  1496  00130C  6E38               	movwf	dtoa@s,c
  1497  00130E  6A39               	clrf	dtoa@s+1,c
  1498                           
  1499                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1500  001310  5038               	movf	dtoa@s,w,c
  1501  001312  1039               	iorwf	dtoa@s+1,w,c
  1502  001314  B4D8               	btfsc	status,2,c
  1503  001316  D010               	goto	l1597
  1504                           
  1505                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1506  001318  1E41               	comf	dtoa@n+7,f,c
  1507  00131A  1E40               	comf	dtoa@n+6,f,c
  1508  00131C  1E3F               	comf	dtoa@n+5,f,c
  1509  00131E  1E3E               	comf	dtoa@n+4,f,c
  1510  001320  1E3D               	comf	dtoa@n+3,f,c
  1511  001322  1E3C               	comf	dtoa@n+2,f,c
  1512  001324  1E3B               	comf	dtoa@n+1,f,c
  1513  001326  6C3A               	negf	dtoa@n,c
  1514  001328  0E00               	movlw	0
  1515  00132A  223B               	addwfc	dtoa@n+1,f,c
  1516  00132C  223C               	addwfc	dtoa@n+2,f,c
  1517  00132E  223D               	addwfc	dtoa@n+3,f,c
  1518  001330  223E               	addwfc	dtoa@n+4,f,c
  1519  001332  223F               	addwfc	dtoa@n+5,f,c
  1520  001334  2240               	addwfc	dtoa@n+6,f,c
  1521  001336  2241               	addwfc	dtoa@n+7,f,c
  1522  001338                     l1597:
  1523                           
  1524                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1525  001338  AE70               	btfss	_prec+1,7,c
  1526                           
  1527                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1528  00133A  9271               	bcf	_flags,1,c
  1529                           
  1530                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1531  00133C  BE70               	btfsc	_prec+1,7,c
  1532  00133E  D005               	goto	u850
  1533  001340  5070               	movf	_prec+1,w,c
  1534  001342  E108               	bnz	l168
  1535  001344  046F               	decf	_prec,w,c
  1536  001346  B0D8               	btfsc	status,0,c
  1537  001348  D005               	goto	l168
  1538  00134A                     u850:
  1539  00134A  0E00               	movlw	0
  1540  00134C  6E35               	movwf	dtoa@p+1,c
  1541  00134E  0E01               	movlw	1
  1542  001350  6E34               	movwf	dtoa@p,c
  1543  001352  D004               	goto	l170
  1544  001354                     l168:
  1545  001354  C06F  F034         	movff	_prec,dtoa@p
  1546  001358  C070  F035         	movff	_prec+1,dtoa@p+1
  1547  00135C                     l170:
  1548                           
  1549                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1550  00135C  C06D  F036         	movff	_width,dtoa@w
  1551  001360  C06E  F037         	movff	_width+1,dtoa@w+1
  1552                           
  1553                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1554  001364  5038               	movf	dtoa@s,w,c
  1555  001366  1039               	iorwf	dtoa@s+1,w,c
  1556  001368  A4D8               	btfss	status,2,c
  1557  00136A  D002               	goto	u870
  1558  00136C  A471               	btfss	_flags,2,c
  1559  00136E  D003               	goto	l1611
  1560  001370                     u870:
  1561                           
  1562                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1563  001370  0636               	decf	dtoa@w,f,c
  1564  001372  A0D8               	btfss	status,0,c
  1565  001374  0637               	decf	dtoa@w+1,f,c
  1566  001376                     l1611:
  1567                           
  1568                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1569  001376  0E00               	movlw	0
  1570  001378  6E43               	movwf	dtoa@i+1,c
  1571  00137A  0E1F               	movlw	31
  1572  00137C  6E42               	movwf	dtoa@i,c
  1573                           
  1574                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1575  00137E  0E00               	movlw	0
  1576  001380  0100               	movlb	0	; () banked
  1577  001382  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1578                           
  1579                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1580  001384  D07C               	goto	l1625
  1581  001386                     l1615:
  1582                           
  1583                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1584  001386  0642               	decf	dtoa@i,f,c
  1585  001388  A0D8               	btfss	status,0,c
  1586  00138A  0643               	decf	dtoa@i+1,f,c
  1587                           
  1588                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1589  00138C  0E80               	movlw	low _dbuf
  1590  00138E  2442               	addwf	dtoa@i,w,c
  1591  001390  6ED9               	movwf	fsr2l,c
  1592  001392  0E00               	movlw	high _dbuf
  1593  001394  2043               	addwfc	dtoa@i+1,w,c
  1594  001396  6EDA               	movwf	fsr2h,c
  1595  001398  C03A  F001         	movff	dtoa@n,___aomod@dividend
  1596  00139C  C03B  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1597  0013A0  C03C  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1598  0013A4  C03D  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1599  0013A8  C03E  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1600  0013AC  C03F  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1601  0013B0  C040  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1602  0013B4  C041  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1603  0013B8  0E0A               	movlw	10
  1604  0013BA  6E09               	movwf	___aomod@divisor,c
  1605  0013BC  0E00               	movlw	0
  1606  0013BE  6E0A               	movwf	___aomod@divisor+1,c
  1607  0013C0  0E00               	movlw	0
  1608  0013C2  6E0B               	movwf	___aomod@divisor+2,c
  1609  0013C4  0E00               	movlw	0
  1610  0013C6  6E0C               	movwf	___aomod@divisor+3,c
  1611  0013C8  0E00               	movlw	0
  1612  0013CA  6E0D               	movwf	___aomod@divisor+4,c
  1613  0013CC  0E00               	movlw	0
  1614  0013CE  6E0E               	movwf	___aomod@divisor+5,c
  1615  0013D0  0E00               	movlw	0
  1616  0013D2  6E0F               	movwf	___aomod@divisor+6,c
  1617  0013D4  0E00               	movlw	0
  1618  0013D6  6E10               	movwf	___aomod@divisor+7,c
  1619  0013D8  EC29  F00C         	call	___aomod	;wreg free
  1620  0013DC  C001  F02A         	movff	?___aomod,??_dtoa
  1621  0013E0  C002  F02B         	movff	?___aomod+1,??_dtoa+1
  1622  0013E4  C003  F02C         	movff	?___aomod+2,??_dtoa+2
  1623  0013E8  C004  F02D         	movff	?___aomod+3,??_dtoa+3
  1624  0013EC  C005  F02E         	movff	?___aomod+4,??_dtoa+4
  1625  0013F0  C006  F02F         	movff	?___aomod+5,??_dtoa+5
  1626  0013F4  C007  F030         	movff	?___aomod+6,??_dtoa+6
  1627  0013F8  C008  F031         	movff	?___aomod+7,??_dtoa+7
  1628  0013FC  C02A  F013         	movff	??_dtoa,abs@a
  1629  001400  C02C  F014         	movff	??_dtoa+2,abs@a+1
  1630  001404  ECDD  F00D         	call	_abs	;wreg free
  1631  001408  5013               	movf	?_abs,w,c
  1632  00140A  0F30               	addlw	48
  1633  00140C  6EDF               	movwf	indf2,c
  1634                           
  1635                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1636  00140E  0634               	decf	dtoa@p,f,c
  1637  001410  A0D8               	btfss	status,0,c
  1638  001412  0635               	decf	dtoa@p+1,f,c
  1639                           
  1640                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1641  001414  0636               	decf	dtoa@w,f,c
  1642  001416  A0D8               	btfss	status,0,c
  1643  001418  0637               	decf	dtoa@w+1,f,c
  1644                           
  1645                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1646  00141A  C03A  F001         	movff	dtoa@n,___aodiv@dividend
  1647  00141E  C03B  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1648  001422  C03C  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1649  001426  C03D  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1650  00142A  C03E  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1651  00142E  C03F  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1652  001432  C040  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1653  001436  C041  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1654  00143A  0E0A               	movlw	10
  1655  00143C  6E09               	movwf	___aodiv@divisor,c
  1656  00143E  0E00               	movlw	0
  1657  001440  6E0A               	movwf	___aodiv@divisor+1,c
  1658  001442  0E00               	movlw	0
  1659  001444  6E0B               	movwf	___aodiv@divisor+2,c
  1660  001446  0E00               	movlw	0
  1661  001448  6E0C               	movwf	___aodiv@divisor+3,c
  1662  00144A  0E00               	movlw	0
  1663  00144C  6E0D               	movwf	___aodiv@divisor+4,c
  1664  00144E  0E00               	movlw	0
  1665  001450  6E0E               	movwf	___aodiv@divisor+5,c
  1666  001452  0E00               	movlw	0
  1667  001454  6E0F               	movwf	___aodiv@divisor+6,c
  1668  001456  0E00               	movlw	0
  1669  001458  6E10               	movwf	___aodiv@divisor+7,c
  1670  00145A  EC85  F00B         	call	___aodiv	;wreg free
  1671  00145E  C001  F03A         	movff	?___aodiv,dtoa@n
  1672  001462  C002  F03B         	movff	?___aodiv+1,dtoa@n+1
  1673  001466  C003  F03C         	movff	?___aodiv+2,dtoa@n+2
  1674  00146A  C004  F03D         	movff	?___aodiv+3,dtoa@n+3
  1675  00146E  C005  F03E         	movff	?___aodiv+4,dtoa@n+4
  1676  001472  C006  F03F         	movff	?___aodiv+5,dtoa@n+5
  1677  001476  C007  F040         	movff	?___aodiv+6,dtoa@n+6
  1678  00147A  C008  F041         	movff	?___aodiv+7,dtoa@n+7
  1679  00147E                     l1625:
  1680                           
  1681                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1682  00147E  BE43               	btfsc	dtoa@i+1,7,c
  1683  001480  D01F               	goto	u920
  1684  001482  5043               	movf	dtoa@i+1,w,c
  1685  001484  E103               	bnz	u880
  1686  001486  0442               	decf	dtoa@i,w,c
  1687  001488  A0D8               	btfss	status,0,c
  1688  00148A  D01A               	goto	u920
  1689  00148C                     u880:
  1690  00148C  503A               	movf	dtoa@n,w,c
  1691  00148E  103B               	iorwf	dtoa@n+1,w,c
  1692  001490  103C               	iorwf	dtoa@n+2,w,c
  1693  001492  103D               	iorwf	dtoa@n+3,w,c
  1694  001494  103E               	iorwf	dtoa@n+4,w,c
  1695  001496  103F               	iorwf	dtoa@n+5,w,c
  1696  001498  1040               	iorwf	dtoa@n+6,w,c
  1697  00149A  1041               	iorwf	dtoa@n+7,w,c
  1698  00149C  A4D8               	btfss	status,2,c
  1699  00149E  D773               	goto	l1615
  1700  0014A0  BE35               	btfsc	dtoa@p+1,7,c
  1701  0014A2  D005               	goto	u900
  1702  0014A4  5035               	movf	dtoa@p+1,w,c
  1703  0014A6  E102               	bnz	u901
  1704  0014A8  0434               	decf	dtoa@p,w,c
  1705  0014AA  B0D8               	btfsc	status,0,c
  1706  0014AC                     u901:
  1707  0014AC  D76C               	goto	l1615
  1708  0014AE                     u900:
  1709  0014AE  BE37               	btfsc	dtoa@w+1,7,c
  1710  0014B0  D007               	goto	u920
  1711  0014B2  5037               	movf	dtoa@w+1,w,c
  1712  0014B4  E103               	bnz	u910
  1713  0014B6  0436               	decf	dtoa@w,w,c
  1714  0014B8  A0D8               	btfss	status,0,c
  1715  0014BA  D002               	goto	u920
  1716  0014BC                     u910:
  1717  0014BC  B271               	btfsc	_flags,1,c
  1718  0014BE  D763               	goto	l1615
  1719  0014C0                     u920:
  1720                           
  1721                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1722  0014C0  5038               	movf	dtoa@s,w,c
  1723  0014C2  1039               	iorwf	dtoa@s+1,w,c
  1724  0014C4  A4D8               	btfss	status,2,c
  1725  0014C6  D002               	goto	u940
  1726  0014C8  A471               	btfss	_flags,2,c
  1727  0014CA  D017               	goto	l1649
  1728  0014CC                     u940:
  1729                           
  1730                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1731  0014CC  0642               	decf	dtoa@i,f,c
  1732  0014CE  A0D8               	btfss	status,0,c
  1733  0014D0  0643               	decf	dtoa@i+1,f,c
  1734                           
  1735                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1736  0014D2  5038               	movf	dtoa@s,w,c
  1737  0014D4  1039               	iorwf	dtoa@s+1,w,c
  1738  0014D6  A4D8               	btfss	status,2,c
  1739  0014D8  D004               	goto	l1645
  1740  0014DA  0E00               	movlw	0
  1741  0014DC  6E33               	movwf	_dtoa$459+1,c
  1742  0014DE  0E2B               	movlw	43
  1743  0014E0  D003               	goto	L1
  1744  0014E2                     l1645:
  1745  0014E2  0E00               	movlw	0
  1746  0014E4  6E33               	movwf	_dtoa$459+1,c
  1747  0014E6  0E2D               	movlw	45
  1748  0014E8                     L1:
  1749  0014E8  6E32               	movwf	_dtoa$459,c
  1750  0014EA  0E80               	movlw	low _dbuf
  1751  0014EC  2442               	addwf	dtoa@i,w,c
  1752  0014EE  6ED9               	movwf	fsr2l,c
  1753  0014F0  0E00               	movlw	high _dbuf
  1754  0014F2  2043               	addwfc	dtoa@i+1,w,c
  1755  0014F4  6EDA               	movwf	fsr2h,c
  1756  0014F6  C032  FFDF         	movff	_dtoa$459,indf2
  1757  0014FA                     l1649:
  1758                           
  1759                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1760  0014FA  C020  F015         	movff	dtoa@fp,pad@fp
  1761  0014FE  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  1762  001502  0E80               	movlw	low _dbuf
  1763  001504  2442               	addwf	dtoa@i,w,c
  1764  001506  6E17               	movwf	pad@buf,c
  1765  001508  0E00               	movlw	high _dbuf
  1766  00150A  2043               	addwfc	dtoa@i+1,w,c
  1767  00150C  6E18               	movwf	pad@buf+1,c
  1768  00150E  C036  F019         	movff	dtoa@w,pad@p
  1769  001512  C037  F01A         	movff	dtoa@w+1,pad@p+1
  1770  001516  ECBB  F00C         	call	_pad	;wreg free
  1771  00151A  C015  F020         	movff	?_pad,?_dtoa
  1772  00151E  C016  F021         	movff	?_pad+1,?_dtoa+1
  1773  001522  0012               	return		;funcret
  1774  001524                     __end_of_dtoa:
  1775                           	opt callstack 0
  1776                           
  1777 ;; *************** function _abs *****************
  1778 ;; Defined at:
  1779 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;  a               2   18[COMRAM] int 
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;		None
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  2   18[COMRAM] int 
  1786 ;; Registers used:
  1787 ;;		wreg, status,2, status,0
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1793 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;Total ram usage:        4 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; This function calls:
  1800 ;;		Nothing
  1801 ;; This function is called by:
  1802 ;;		_dtoa
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text5
  1807  001BBA                     __ptext5:
  1808                           	opt callstack 0
  1809  001BBA                     _abs:
  1810                           	opt callstack 26
  1811                           
  1812                           ;incstack = 0
  1813  001BBA  BE14               	btfsc	abs@a+1,7,c
  1814  001BBC  D005               	goto	u660
  1815  001BBE  5014               	movf	abs@a+1,w,c
  1816  001BC0  E110               	bnz	l881
  1817  001BC2  0413               	decf	abs@a,w,c
  1818  001BC4  B0D8               	btfsc	status,0,c
  1819  001BC6  D00D               	goto	l881
  1820  001BC8                     u660:
  1821  001BC8  C013  F015         	movff	abs@a,??_abs
  1822  001BCC  C014  F016         	movff	abs@a+1,??_abs+1
  1823  001BD0  1E15               	comf	??_abs,f,c
  1824  001BD2  1E16               	comf	??_abs+1,f,c
  1825  001BD4  4A15               	infsnz	??_abs,f,c
  1826  001BD6  2A16               	incf	??_abs+1,f,c
  1827  001BD8  C015  F013         	movff	??_abs,?_abs
  1828  001BDC  C016  F014         	movff	??_abs+1,?_abs+1
  1829  001BE0  0012               	return	
  1830  001BE2                     l881:
  1831  001BE2  C013  F013         	movff	abs@a,?_abs
  1832  001BE6  C014  F014         	movff	abs@a+1,?_abs+1
  1833  001BEA  0012               	return		;funcret
  1834  001BEC                     __end_of_abs:
  1835                           	opt callstack 0
  1836                           
  1837 ;; *************** function ___aomod *****************
  1838 ;; Defined at:
  1839 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;  dividend        8    0[COMRAM] long long 
  1842 ;;  divisor         8    8[COMRAM] long long 
  1843 ;; Auto vars:     Size  Location     Type
  1844 ;;  sign            1   17[COMRAM] unsigned char 
  1845 ;;  counter         1   16[COMRAM] unsigned char 
  1846 ;; Return value:  Size  Location     Type
  1847 ;;                  8    0[COMRAM] long long 
  1848 ;; Registers used:
  1849 ;;		wreg, status,2, status,0
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1855 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1858 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1859 ;;Total ram usage:       18 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; This function calls:
  1862 ;;		Nothing
  1863 ;; This function is called by:
  1864 ;;		_dtoa
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868                           	psect	text6
  1869  001852                     __ptext6:
  1870                           	opt callstack 0
  1871  001852                     ___aomod:
  1872                           	opt callstack 26
  1873                           
  1874                           ;incstack = 0
  1875  001852  0E00               	movlw	0
  1876  001854  6E12               	movwf	___aomod@sign,c
  1877  001856  AE08               	btfss	___aomod@dividend+7,7,c
  1878  001858  D012               	goto	l1549
  1879  00185A  1E08               	comf	___aomod@dividend+7,f,c
  1880  00185C  1E07               	comf	___aomod@dividend+6,f,c
  1881  00185E  1E06               	comf	___aomod@dividend+5,f,c
  1882  001860  1E05               	comf	___aomod@dividend+4,f,c
  1883  001862  1E04               	comf	___aomod@dividend+3,f,c
  1884  001864  1E03               	comf	___aomod@dividend+2,f,c
  1885  001866  1E02               	comf	___aomod@dividend+1,f,c
  1886  001868  6C01               	negf	___aomod@dividend,c
  1887  00186A  0E00               	movlw	0
  1888  00186C  2202               	addwfc	___aomod@dividend+1,f,c
  1889  00186E  2203               	addwfc	___aomod@dividend+2,f,c
  1890  001870  2204               	addwfc	___aomod@dividend+3,f,c
  1891  001872  2205               	addwfc	___aomod@dividend+4,f,c
  1892  001874  2206               	addwfc	___aomod@dividend+5,f,c
  1893  001876  2207               	addwfc	___aomod@dividend+6,f,c
  1894  001878  2208               	addwfc	___aomod@dividend+7,f,c
  1895  00187A  0E01               	movlw	1
  1896  00187C  6E12               	movwf	___aomod@sign,c
  1897  00187E                     l1549:
  1898  00187E  AE10               	btfss	___aomod@divisor+7,7,c
  1899  001880  D010               	goto	l1553
  1900  001882  1E10               	comf	___aomod@divisor+7,f,c
  1901  001884  1E0F               	comf	___aomod@divisor+6,f,c
  1902  001886  1E0E               	comf	___aomod@divisor+5,f,c
  1903  001888  1E0D               	comf	___aomod@divisor+4,f,c
  1904  00188A  1E0C               	comf	___aomod@divisor+3,f,c
  1905  00188C  1E0B               	comf	___aomod@divisor+2,f,c
  1906  00188E  1E0A               	comf	___aomod@divisor+1,f,c
  1907  001890  6C09               	negf	___aomod@divisor,c
  1908  001892  0E00               	movlw	0
  1909  001894  220A               	addwfc	___aomod@divisor+1,f,c
  1910  001896  220B               	addwfc	___aomod@divisor+2,f,c
  1911  001898  220C               	addwfc	___aomod@divisor+3,f,c
  1912  00189A  220D               	addwfc	___aomod@divisor+4,f,c
  1913  00189C  220E               	addwfc	___aomod@divisor+5,f,c
  1914  00189E  220F               	addwfc	___aomod@divisor+6,f,c
  1915  0018A0  2210               	addwfc	___aomod@divisor+7,f,c
  1916  0018A2                     l1553:
  1917  0018A2  5009               	movf	___aomod@divisor,w,c
  1918  0018A4  100A               	iorwf	___aomod@divisor+1,w,c
  1919  0018A6  100B               	iorwf	___aomod@divisor+2,w,c
  1920  0018A8  100C               	iorwf	___aomod@divisor+3,w,c
  1921  0018AA  100D               	iorwf	___aomod@divisor+4,w,c
  1922  0018AC  100E               	iorwf	___aomod@divisor+5,w,c
  1923  0018AE  100F               	iorwf	___aomod@divisor+6,w,c
  1924  0018B0  1010               	iorwf	___aomod@divisor+7,w,c
  1925  0018B2  B4D8               	btfsc	status,2,c
  1926  0018B4  D03C               	goto	l1569
  1927  0018B6  0E01               	movlw	1
  1928  0018B8  6E11               	movwf	___aomod@counter,c
  1929  0018BA  D00A               	goto	l1559
  1930  0018BC                     l1557:
  1931  0018BC  90D8               	bcf	status,0,c
  1932  0018BE  3609               	rlcf	___aomod@divisor,f,c
  1933  0018C0  360A               	rlcf	___aomod@divisor+1,f,c
  1934  0018C2  360B               	rlcf	___aomod@divisor+2,f,c
  1935  0018C4  360C               	rlcf	___aomod@divisor+3,f,c
  1936  0018C6  360D               	rlcf	___aomod@divisor+4,f,c
  1937  0018C8  360E               	rlcf	___aomod@divisor+5,f,c
  1938  0018CA  360F               	rlcf	___aomod@divisor+6,f,c
  1939  0018CC  3610               	rlcf	___aomod@divisor+7,f,c
  1940  0018CE  2A11               	incf	___aomod@counter,f,c
  1941  0018D0                     l1559:
  1942  0018D0  AE10               	btfss	___aomod@divisor+7,7,c
  1943  0018D2  D7F4               	goto	l1557
  1944  0018D4                     u770:
  1945  0018D4  5009               	movf	___aomod@divisor,w,c
  1946  0018D6  5C01               	subwf	___aomod@dividend,w,c
  1947  0018D8  500A               	movf	___aomod@divisor+1,w,c
  1948  0018DA  5802               	subwfb	___aomod@dividend+1,w,c
  1949  0018DC  500B               	movf	___aomod@divisor+2,w,c
  1950  0018DE  5803               	subwfb	___aomod@dividend+2,w,c
  1951  0018E0  500C               	movf	___aomod@divisor+3,w,c
  1952  0018E2  5804               	subwfb	___aomod@dividend+3,w,c
  1953  0018E4  500D               	movf	___aomod@divisor+4,w,c
  1954  0018E6  5805               	subwfb	___aomod@dividend+4,w,c
  1955  0018E8  500E               	movf	___aomod@divisor+5,w,c
  1956  0018EA  5806               	subwfb	___aomod@dividend+5,w,c
  1957  0018EC  500F               	movf	___aomod@divisor+6,w,c
  1958  0018EE  5807               	subwfb	___aomod@dividend+6,w,c
  1959  0018F0  5010               	movf	___aomod@divisor+7,w,c
  1960  0018F2  5808               	subwfb	___aomod@dividend+7,w,c
  1961  0018F4  A0D8               	btfss	status,0,c
  1962  0018F6  D010               	goto	l1565
  1963  0018F8  5009               	movf	___aomod@divisor,w,c
  1964  0018FA  5E01               	subwf	___aomod@dividend,f,c
  1965  0018FC  500A               	movf	___aomod@divisor+1,w,c
  1966  0018FE  5A02               	subwfb	___aomod@dividend+1,f,c
  1967  001900  500B               	movf	___aomod@divisor+2,w,c
  1968  001902  5A03               	subwfb	___aomod@dividend+2,f,c
  1969  001904  500C               	movf	___aomod@divisor+3,w,c
  1970  001906  5A04               	subwfb	___aomod@dividend+3,f,c
  1971  001908  500D               	movf	___aomod@divisor+4,w,c
  1972  00190A  5A05               	subwfb	___aomod@dividend+4,f,c
  1973  00190C  500E               	movf	___aomod@divisor+5,w,c
  1974  00190E  5A06               	subwfb	___aomod@dividend+5,f,c
  1975  001910  500F               	movf	___aomod@divisor+6,w,c
  1976  001912  5A07               	subwfb	___aomod@dividend+6,f,c
  1977  001914  5010               	movf	___aomod@divisor+7,w,c
  1978  001916  5A08               	subwfb	___aomod@dividend+7,f,c
  1979  001918                     l1565:
  1980  001918  90D8               	bcf	status,0,c
  1981  00191A  3210               	rrcf	___aomod@divisor+7,f,c
  1982  00191C  320F               	rrcf	___aomod@divisor+6,f,c
  1983  00191E  320E               	rrcf	___aomod@divisor+5,f,c
  1984  001920  320D               	rrcf	___aomod@divisor+4,f,c
  1985  001922  320C               	rrcf	___aomod@divisor+3,f,c
  1986  001924  320B               	rrcf	___aomod@divisor+2,f,c
  1987  001926  320A               	rrcf	___aomod@divisor+1,f,c
  1988  001928  3209               	rrcf	___aomod@divisor,f,c
  1989  00192A  2E11               	decfsz	___aomod@counter,f,c
  1990  00192C  D7D3               	goto	u770
  1991  00192E                     l1569:
  1992  00192E  5012               	movf	___aomod@sign,w,c
  1993  001930  B4D8               	btfsc	status,2,c
  1994  001932  D010               	goto	l1573
  1995  001934  1E08               	comf	___aomod@dividend+7,f,c
  1996  001936  1E07               	comf	___aomod@dividend+6,f,c
  1997  001938  1E06               	comf	___aomod@dividend+5,f,c
  1998  00193A  1E05               	comf	___aomod@dividend+4,f,c
  1999  00193C  1E04               	comf	___aomod@dividend+3,f,c
  2000  00193E  1E03               	comf	___aomod@dividend+2,f,c
  2001  001940  1E02               	comf	___aomod@dividend+1,f,c
  2002  001942  6C01               	negf	___aomod@dividend,c
  2003  001944  0E00               	movlw	0
  2004  001946  2202               	addwfc	___aomod@dividend+1,f,c
  2005  001948  2203               	addwfc	___aomod@dividend+2,f,c
  2006  00194A  2204               	addwfc	___aomod@dividend+3,f,c
  2007  00194C  2205               	addwfc	___aomod@dividend+4,f,c
  2008  00194E  2206               	addwfc	___aomod@dividend+5,f,c
  2009  001950  2207               	addwfc	___aomod@dividend+6,f,c
  2010  001952  2208               	addwfc	___aomod@dividend+7,f,c
  2011  001954                     l1573:
  2012  001954  C001  F001         	movff	___aomod@dividend,?___aomod
  2013  001958  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2014  00195C  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2015  001960  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2016  001964  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2017  001968  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2018  00196C  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2019  001970  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2020  001974  0012               	return		;funcret
  2021  001976                     __end_of___aomod:
  2022                           	opt callstack 0
  2023                           
  2024 ;; *************** function ___aodiv *****************
  2025 ;; Defined at:
  2026 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;  dividend        8    0[COMRAM] long long 
  2029 ;;  divisor         8    8[COMRAM] long long 
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;  quotient        8   18[COMRAM] long long 
  2032 ;;  sign            1   17[COMRAM] unsigned char 
  2033 ;;  counter         1   16[COMRAM] unsigned char 
  2034 ;; Return value:  Size  Location     Type
  2035 ;;                  8    0[COMRAM] long long 
  2036 ;; Registers used:
  2037 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2038 ;; Tracked objects:
  2039 ;;		On entry : 0/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2043 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2046 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2047 ;;Total ram usage:       26 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; This function calls:
  2050 ;;		Nothing
  2051 ;; This function is called by:
  2052 ;;		_dtoa
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           	psect	text7
  2057  00170A                     __ptext7:
  2058                           	opt callstack 0
  2059  00170A                     ___aodiv:
  2060                           	opt callstack 26
  2061                           
  2062                           ;incstack = 0
  2063  00170A  0E00               	movlw	0
  2064  00170C  6E12               	movwf	___aodiv@sign,c
  2065  00170E  AE10               	btfss	___aodiv@divisor+7,7,c
  2066  001710  D012               	goto	l1505
  2067  001712  1E10               	comf	___aodiv@divisor+7,f,c
  2068  001714  1E0F               	comf	___aodiv@divisor+6,f,c
  2069  001716  1E0E               	comf	___aodiv@divisor+5,f,c
  2070  001718  1E0D               	comf	___aodiv@divisor+4,f,c
  2071  00171A  1E0C               	comf	___aodiv@divisor+3,f,c
  2072  00171C  1E0B               	comf	___aodiv@divisor+2,f,c
  2073  00171E  1E0A               	comf	___aodiv@divisor+1,f,c
  2074  001720  6C09               	negf	___aodiv@divisor,c
  2075  001722  0E00               	movlw	0
  2076  001724  220A               	addwfc	___aodiv@divisor+1,f,c
  2077  001726  220B               	addwfc	___aodiv@divisor+2,f,c
  2078  001728  220C               	addwfc	___aodiv@divisor+3,f,c
  2079  00172A  220D               	addwfc	___aodiv@divisor+4,f,c
  2080  00172C  220E               	addwfc	___aodiv@divisor+5,f,c
  2081  00172E  220F               	addwfc	___aodiv@divisor+6,f,c
  2082  001730  2210               	addwfc	___aodiv@divisor+7,f,c
  2083  001732  0E01               	movlw	1
  2084  001734  6E12               	movwf	___aodiv@sign,c
  2085  001736                     l1505:
  2086  001736  AE08               	btfss	___aodiv@dividend+7,7,c
  2087  001738  D012               	goto	l1511
  2088  00173A  1E08               	comf	___aodiv@dividend+7,f,c
  2089  00173C  1E07               	comf	___aodiv@dividend+6,f,c
  2090  00173E  1E06               	comf	___aodiv@dividend+5,f,c
  2091  001740  1E05               	comf	___aodiv@dividend+4,f,c
  2092  001742  1E04               	comf	___aodiv@dividend+3,f,c
  2093  001744  1E03               	comf	___aodiv@dividend+2,f,c
  2094  001746  1E02               	comf	___aodiv@dividend+1,f,c
  2095  001748  6C01               	negf	___aodiv@dividend,c
  2096  00174A  0E00               	movlw	0
  2097  00174C  2202               	addwfc	___aodiv@dividend+1,f,c
  2098  00174E  2203               	addwfc	___aodiv@dividend+2,f,c
  2099  001750  2204               	addwfc	___aodiv@dividend+3,f,c
  2100  001752  2205               	addwfc	___aodiv@dividend+4,f,c
  2101  001754  2206               	addwfc	___aodiv@dividend+5,f,c
  2102  001756  2207               	addwfc	___aodiv@dividend+6,f,c
  2103  001758  2208               	addwfc	___aodiv@dividend+7,f,c
  2104  00175A  0E01               	movlw	1
  2105  00175C  1A12               	xorwf	___aodiv@sign,f,c
  2106  00175E                     l1511:
  2107  00175E  EE20  F013         	lfsr	2,___aodiv@quotient
  2108  001762  0E07               	movlw	7
  2109  001764                     u691:
  2110  001764  6ADE               	clrf	postinc2,c
  2111  001766  06E8               	decf	wreg,f,c
  2112  001768  E2FD               	bc	u691
  2113  00176A  5009               	movf	___aodiv@divisor,w,c
  2114  00176C  100A               	iorwf	___aodiv@divisor+1,w,c
  2115  00176E  100B               	iorwf	___aodiv@divisor+2,w,c
  2116  001770  100C               	iorwf	___aodiv@divisor+3,w,c
  2117  001772  100D               	iorwf	___aodiv@divisor+4,w,c
  2118  001774  100E               	iorwf	___aodiv@divisor+5,w,c
  2119  001776  100F               	iorwf	___aodiv@divisor+6,w,c
  2120  001778  1010               	iorwf	___aodiv@divisor+7,w,c
  2121  00177A  B4D8               	btfsc	status,2,c
  2122  00177C  D046               	goto	l1533
  2123  00177E  0E01               	movlw	1
  2124  001780  6E11               	movwf	___aodiv@counter,c
  2125  001782  D00A               	goto	l1519
  2126  001784                     l1517:
  2127  001784  90D8               	bcf	status,0,c
  2128  001786  3609               	rlcf	___aodiv@divisor,f,c
  2129  001788  360A               	rlcf	___aodiv@divisor+1,f,c
  2130  00178A  360B               	rlcf	___aodiv@divisor+2,f,c
  2131  00178C  360C               	rlcf	___aodiv@divisor+3,f,c
  2132  00178E  360D               	rlcf	___aodiv@divisor+4,f,c
  2133  001790  360E               	rlcf	___aodiv@divisor+5,f,c
  2134  001792  360F               	rlcf	___aodiv@divisor+6,f,c
  2135  001794  3610               	rlcf	___aodiv@divisor+7,f,c
  2136  001796  2A11               	incf	___aodiv@counter,f,c
  2137  001798                     l1519:
  2138  001798  AE10               	btfss	___aodiv@divisor+7,7,c
  2139  00179A  D7F4               	goto	l1517
  2140  00179C                     u710:
  2141  00179C  90D8               	bcf	status,0,c
  2142  00179E  3613               	rlcf	___aodiv@quotient,f,c
  2143  0017A0  3614               	rlcf	___aodiv@quotient+1,f,c
  2144  0017A2  3615               	rlcf	___aodiv@quotient+2,f,c
  2145  0017A4  3616               	rlcf	___aodiv@quotient+3,f,c
  2146  0017A6  3617               	rlcf	___aodiv@quotient+4,f,c
  2147  0017A8  3618               	rlcf	___aodiv@quotient+5,f,c
  2148  0017AA  3619               	rlcf	___aodiv@quotient+6,f,c
  2149  0017AC  361A               	rlcf	___aodiv@quotient+7,f,c
  2150  0017AE  5009               	movf	___aodiv@divisor,w,c
  2151  0017B0  5C01               	subwf	___aodiv@dividend,w,c
  2152  0017B2  500A               	movf	___aodiv@divisor+1,w,c
  2153  0017B4  5802               	subwfb	___aodiv@dividend+1,w,c
  2154  0017B6  500B               	movf	___aodiv@divisor+2,w,c
  2155  0017B8  5803               	subwfb	___aodiv@dividend+2,w,c
  2156  0017BA  500C               	movf	___aodiv@divisor+3,w,c
  2157  0017BC  5804               	subwfb	___aodiv@dividend+3,w,c
  2158  0017BE  500D               	movf	___aodiv@divisor+4,w,c
  2159  0017C0  5805               	subwfb	___aodiv@dividend+4,w,c
  2160  0017C2  500E               	movf	___aodiv@divisor+5,w,c
  2161  0017C4  5806               	subwfb	___aodiv@dividend+5,w,c
  2162  0017C6  500F               	movf	___aodiv@divisor+6,w,c
  2163  0017C8  5807               	subwfb	___aodiv@dividend+6,w,c
  2164  0017CA  5010               	movf	___aodiv@divisor+7,w,c
  2165  0017CC  5808               	subwfb	___aodiv@dividend+7,w,c
  2166  0017CE  A0D8               	btfss	status,0,c
  2167  0017D0  D011               	goto	l1529
  2168  0017D2  5009               	movf	___aodiv@divisor,w,c
  2169  0017D4  5E01               	subwf	___aodiv@dividend,f,c
  2170  0017D6  500A               	movf	___aodiv@divisor+1,w,c
  2171  0017D8  5A02               	subwfb	___aodiv@dividend+1,f,c
  2172  0017DA  500B               	movf	___aodiv@divisor+2,w,c
  2173  0017DC  5A03               	subwfb	___aodiv@dividend+2,f,c
  2174  0017DE  500C               	movf	___aodiv@divisor+3,w,c
  2175  0017E0  5A04               	subwfb	___aodiv@dividend+3,f,c
  2176  0017E2  500D               	movf	___aodiv@divisor+4,w,c
  2177  0017E4  5A05               	subwfb	___aodiv@dividend+4,f,c
  2178  0017E6  500E               	movf	___aodiv@divisor+5,w,c
  2179  0017E8  5A06               	subwfb	___aodiv@dividend+5,f,c
  2180  0017EA  500F               	movf	___aodiv@divisor+6,w,c
  2181  0017EC  5A07               	subwfb	___aodiv@dividend+6,f,c
  2182  0017EE  5010               	movf	___aodiv@divisor+7,w,c
  2183  0017F0  5A08               	subwfb	___aodiv@dividend+7,f,c
  2184  0017F2  8013               	bsf	___aodiv@quotient,0,c
  2185  0017F4                     l1529:
  2186  0017F4  90D8               	bcf	status,0,c
  2187  0017F6  3210               	rrcf	___aodiv@divisor+7,f,c
  2188  0017F8  320F               	rrcf	___aodiv@divisor+6,f,c
  2189  0017FA  320E               	rrcf	___aodiv@divisor+5,f,c
  2190  0017FC  320D               	rrcf	___aodiv@divisor+4,f,c
  2191  0017FE  320C               	rrcf	___aodiv@divisor+3,f,c
  2192  001800  320B               	rrcf	___aodiv@divisor+2,f,c
  2193  001802  320A               	rrcf	___aodiv@divisor+1,f,c
  2194  001804  3209               	rrcf	___aodiv@divisor,f,c
  2195  001806  2E11               	decfsz	___aodiv@counter,f,c
  2196  001808  D7C9               	goto	u710
  2197  00180A                     l1533:
  2198  00180A  5012               	movf	___aodiv@sign,w,c
  2199  00180C  B4D8               	btfsc	status,2,c
  2200  00180E  D010               	goto	l1537
  2201  001810  1E1A               	comf	___aodiv@quotient+7,f,c
  2202  001812  1E19               	comf	___aodiv@quotient+6,f,c
  2203  001814  1E18               	comf	___aodiv@quotient+5,f,c
  2204  001816  1E17               	comf	___aodiv@quotient+4,f,c
  2205  001818  1E16               	comf	___aodiv@quotient+3,f,c
  2206  00181A  1E15               	comf	___aodiv@quotient+2,f,c
  2207  00181C  1E14               	comf	___aodiv@quotient+1,f,c
  2208  00181E  6C13               	negf	___aodiv@quotient,c
  2209  001820  0E00               	movlw	0
  2210  001822  2214               	addwfc	___aodiv@quotient+1,f,c
  2211  001824  2215               	addwfc	___aodiv@quotient+2,f,c
  2212  001826  2216               	addwfc	___aodiv@quotient+3,f,c
  2213  001828  2217               	addwfc	___aodiv@quotient+4,f,c
  2214  00182A  2218               	addwfc	___aodiv@quotient+5,f,c
  2215  00182C  2219               	addwfc	___aodiv@quotient+6,f,c
  2216  00182E  221A               	addwfc	___aodiv@quotient+7,f,c
  2217  001830                     l1537:
  2218  001830  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2219  001834  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2220  001838  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2221  00183C  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2222  001840  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2223  001844  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2224  001848  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2225  00184C  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2226  001850  0012               	return		;funcret
  2227  001852                     __end_of___aodiv:
  2228                           	opt callstack 0
  2229                           
  2230 ;; *************** function _ctoa *****************
  2231 ;; Defined at:
  2232 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  2235 ;;		 -> NULL(0), 
  2236 ;;  c               1   33[COMRAM] unsigned char 
  2237 ;; Auto vars:     Size  Location     Type
  2238 ;;  w               2   34[COMRAM] int 
  2239 ;;  l               2    0        int 
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  2   31[COMRAM] int 
  2242 ;; Registers used:
  2243 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2249 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2252 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2253 ;;Total ram usage:        5 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    7
  2256 ;; This function calls:
  2257 ;;		_pad
  2258 ;; This function is called by:
  2259 ;;		_vfpfcnvrt
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text8
  2264  001B34                     __ptext8:
  2265                           	opt callstack 0
  2266  001B34                     _ctoa:
  2267                           	opt callstack 20
  2268                           
  2269                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
  2270                           
  2271                           ;incstack = 0
  2272  001B34  506D               	movf	_width,w,c
  2273  001B36  106E               	iorwf	_width+1,w,c
  2274  001B38  A4D8               	btfss	status,2,c
  2275  001B3A  D005               	goto	l1581
  2276  001B3C  C06D  F023         	movff	_width,ctoa@w
  2277  001B40  C06E  F024         	movff	_width+1,ctoa@w+1
  2278  001B44  D006               	goto	l1583
  2279  001B46                     l1581:
  2280  001B46  0EFF               	movlw	255
  2281  001B48  246D               	addwf	_width,w,c
  2282  001B4A  6E23               	movwf	ctoa@w,c
  2283  001B4C  0EFF               	movlw	255
  2284  001B4E  206E               	addwfc	_width+1,w,c
  2285  001B50  6E24               	movwf	ctoa@w+1,c
  2286  001B52                     l1583:
  2287                           
  2288                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
  2289  001B52  C022  F080         	movff	ctoa@c,_dbuf
  2290                           
  2291                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
  2292  001B56  0E00               	movlw	0
  2293  001B58  0100               	movlb	0	; () banked
  2294  001B5A  6F81               	movwf	(_dbuf+1)& (0+255),b
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
  2298  001B5C  C020  F015         	movff	ctoa@fp,pad@fp
  2299  001B60  C021  F016         	movff	ctoa@fp+1,pad@fp+1
  2300  001B64  0E80               	movlw	low _dbuf
  2301  001B66  6E17               	movwf	pad@buf,c
  2302  001B68  0E00               	movlw	high _dbuf
  2303  001B6A  6E18               	movwf	pad@buf+1,c
  2304  001B6C  C023  F019         	movff	ctoa@w,pad@p
  2305  001B70  C024  F01A         	movff	ctoa@w+1,pad@p+1
  2306  001B74  ECBB  F00C         	call	_pad	;wreg free
  2307  001B78  C015  F020         	movff	?_pad,?_ctoa
  2308  001B7C  C016  F021         	movff	?_pad+1,?_ctoa+1
  2309  001B80  0012               	return		;funcret
  2310  001B82                     __end_of_ctoa:
  2311                           	opt callstack 0
  2312                           
  2313 ;; *************** function _pad *****************
  2314 ;; Defined at:
  2315 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  2318 ;;		 -> NULL(0), 
  2319 ;;  buf             2   22[COMRAM] PTR unsigned char 
  2320 ;;		 -> dbuf(32), 
  2321 ;;  p               2   24[COMRAM] int 
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;  w               2   29[COMRAM] int 
  2324 ;;  i               2   27[COMRAM] int 
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  2   20[COMRAM] int 
  2327 ;; Registers used:
  2328 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2334 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2338 ;;Total ram usage:       11 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    6
  2341 ;; This function calls:
  2342 ;;		_fputc
  2343 ;;		_fputs
  2344 ;;		_strlen
  2345 ;; This function is called by:
  2346 ;;		_ctoa
  2347 ;;		_dtoa
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           	psect	text9
  2352  001976                     __ptext9:
  2353                           	opt callstack 0
  2354  001976                     _pad:
  2355                           	opt callstack 20
  2356                           
  2357                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  2358                           
  2359                           ;incstack = 0
  2360  001976  A071               	btfss	_flags,0,c
  2361  001978  D00A               	goto	l1475
  2362                           
  2363                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  2364  00197A  C017  F00E         	movff	pad@buf,fputs@s
  2365  00197E  C018  F00F         	movff	pad@buf+1,fputs@s+1
  2366  001982  C015  F010         	movff	pad@fp,fputs@fp
  2367  001986  C016  F011         	movff	pad@fp+1,fputs@fp+1
  2368  00198A  ECC1  F00D         	call	_fputs	;wreg free
  2369  00198E                     l1475:
  2370                           
  2371                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  2372  00198E  BE1A               	btfsc	pad@p+1,7,c
  2373  001990  D005               	goto	l1479
  2374  001992  C019  F01E         	movff	pad@p,pad@w
  2375  001996  C01A  F01F         	movff	pad@p+1,pad@w+1
  2376  00199A  D004               	goto	l150
  2377  00199C                     l1479:
  2378  00199C  0E00               	movlw	0
  2379  00199E  6E1F               	movwf	pad@w+1,c
  2380  0019A0  0E00               	movlw	0
  2381  0019A2  6E1E               	movwf	pad@w,c
  2382  0019A4                     l150:
  2383                           
  2384                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  2385  0019A4  0E00               	movlw	0
  2386  0019A6  6E1D               	movwf	pad@i+1,c
  2387  0019A8  0E00               	movlw	0
  2388  0019AA  6E1C               	movwf	pad@i,c
  2389                           
  2390                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2391  0019AC  D00C               	goto	l1485
  2392  0019AE                     l1481:
  2393                           
  2394                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  2395  0019AE  0E00               	movlw	0
  2396  0019B0  6E06               	movwf	fputc@c+1,c
  2397  0019B2  0E20               	movlw	32
  2398  0019B4  6E05               	movwf	fputc@c,c
  2399  0019B6  C015  F007         	movff	pad@fp,fputc@fp
  2400  0019BA  C016  F008         	movff	pad@fp+1,fputc@fp+1
  2401  0019BE  EC06  F00D         	call	_fputc	;wreg free
  2402                           
  2403                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  2404  0019C2  4A1C               	infsnz	pad@i,f,c
  2405  0019C4  2A1D               	incf	pad@i+1,f,c
  2406  0019C6                     l1485:
  2407                           
  2408                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2409  0019C6  501E               	movf	pad@w,w,c
  2410  0019C8  5C1C               	subwf	pad@i,w,c
  2411  0019CA  501D               	movf	pad@i+1,w,c
  2412  0019CC  0A80               	xorlw	128
  2413  0019CE  6E1B               	movwf	??_pad& (0+255),c
  2414  0019D0  501F               	movf	pad@w+1,w,c
  2415  0019D2  0A80               	xorlw	128
  2416  0019D4  581B               	subwfb	??_pad& (0+255),w,c
  2417  0019D6  A0D8               	btfss	status,0,c
  2418  0019D8  D7EA               	goto	l1481
  2419                           
  2420                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  2421  0019DA  B071               	btfsc	_flags,0,c
  2422  0019DC  D00A               	goto	l1489
  2423                           
  2424                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  2425  0019DE  C017  F00E         	movff	pad@buf,fputs@s
  2426  0019E2  C018  F00F         	movff	pad@buf+1,fputs@s+1
  2427  0019E6  C015  F010         	movff	pad@fp,fputs@fp
  2428  0019EA  C016  F011         	movff	pad@fp+1,fputs@fp+1
  2429  0019EE  ECC1  F00D         	call	_fputs	;wreg free
  2430  0019F2                     l1489:
  2431                           
  2432                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  2433  0019F2  C017  F001         	movff	pad@buf,strlen@s
  2434  0019F6  C018  F002         	movff	pad@buf+1,strlen@s+1
  2435  0019FA  EC0E  F00E         	call	_strlen	;wreg free
  2436  0019FE  501E               	movf	pad@w,w,c
  2437  001A00  2401               	addwf	?_strlen,w,c
  2438  001A02  6E15               	movwf	?_pad,c
  2439  001A04  501F               	movf	pad@w+1,w,c
  2440  001A06  2002               	addwfc	?_strlen+1,w,c
  2441  001A08  6E16               	movwf	?_pad+1,c
  2442  001A0A  0012               	return		;funcret
  2443  001A0C                     __end_of_pad:
  2444                           	opt callstack 0
  2445                           
  2446 ;; *************** function _strlen *****************
  2447 ;; Defined at:
  2448 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2451 ;;		 -> dbuf(32), 
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;  a               2    2[COMRAM] PTR const unsigned char 
  2454 ;;		 -> dbuf(32), 
  2455 ;; Return value:  Size  Location     Type
  2456 ;;                  2    0[COMRAM] unsigned int 
  2457 ;; Registers used:
  2458 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2464 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2465 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2467 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2468 ;;Total ram usage:        4 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; This function calls:
  2471 ;;		Nothing
  2472 ;; This function is called by:
  2473 ;;		_pad
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477                           	psect	text10
  2478  001C1C                     __ptext10:
  2479                           	opt callstack 0
  2480  001C1C                     _strlen:
  2481                           	opt callstack 25
  2482                           
  2483                           ;incstack = 0
  2484  001C1C  C001  F003         	movff	strlen@s,strlen@a
  2485  001C20  C002  F004         	movff	strlen@s+1,strlen@a+1
  2486  001C24  D002               	goto	l1465
  2487  001C26                     l1463:
  2488  001C26  4A01               	infsnz	strlen@s,f,c
  2489  001C28  2A02               	incf	strlen@s+1,f,c
  2490  001C2A                     l1465:
  2491  001C2A  C001  FFD9         	movff	strlen@s,fsr2l
  2492  001C2E  C002  FFDA         	movff	strlen@s+1,fsr2h
  2493  001C32  50DF               	movf	indf2,w,c
  2494  001C34  A4D8               	btfss	status,2,c
  2495  001C36  D7F7               	goto	l1463
  2496  001C38  5003               	movf	strlen@a,w,c
  2497  001C3A  5C01               	subwf	strlen@s,w,c
  2498  001C3C  6E01               	movwf	?_strlen,c
  2499  001C3E  5004               	movf	strlen@a+1,w,c
  2500  001C40  5802               	subwfb	strlen@s+1,w,c
  2501  001C42  6E02               	movwf	?_strlen+1,c
  2502  001C44  0012               	return		;funcret
  2503  001C46                     __end_of_strlen:
  2504                           	opt callstack 0
  2505                           
  2506 ;; *************** function _fputs *****************
  2507 ;; Defined at:
  2508 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;  s               2   13[COMRAM] PTR const unsigned char 
  2511 ;;		 -> dbuf(32), 
  2512 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  2513 ;;		 -> NULL(0), 
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;  i               2   18[COMRAM] int 
  2516 ;;  c               1   17[COMRAM] unsigned char 
  2517 ;; Return value:  Size  Location     Type
  2518 ;;                  2   13[COMRAM] int 
  2519 ;; Registers used:
  2520 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2521 ;; Tracked objects:
  2522 ;;		On entry : 0/0
  2523 ;;		On exit  : 0/0
  2524 ;;		Unchanged: 0/0
  2525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2526 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2527 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2529 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2530 ;;Total ram usage:        7 bytes
  2531 ;; Hardware stack levels used:    1
  2532 ;; Hardware stack levels required when called:    5
  2533 ;; This function calls:
  2534 ;;		_fputc
  2535 ;; This function is called by:
  2536 ;;		_pad
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text11
  2541  001B82                     __ptext11:
  2542                           	opt callstack 0
  2543  001B82                     _fputs:
  2544                           	opt callstack 20
  2545                           
  2546                           ;incstack = 0
  2547  001B82  0E00               	movlw	0
  2548  001B84  6E14               	movwf	fputs@i+1,c
  2549  001B86  0E00               	movlw	0
  2550  001B88  6E13               	movwf	fputs@i,c
  2551  001B8A  D00B               	goto	l1459
  2552  001B8C                     l1455:
  2553  001B8C  C012  F005         	movff	fputs@c,fputc@c
  2554  001B90  6A06               	clrf	fputc@c+1,c
  2555  001B92  C010  F007         	movff	fputs@fp,fputc@fp
  2556  001B96  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  2557  001B9A  EC06  F00D         	call	_fputc	;wreg free
  2558  001B9E  4A13               	infsnz	fputs@i,f,c
  2559  001BA0  2A14               	incf	fputs@i+1,f,c
  2560  001BA2                     l1459:
  2561  001BA2  5013               	movf	fputs@i,w,c
  2562  001BA4  240E               	addwf	fputs@s,w,c
  2563  001BA6  6ED9               	movwf	fsr2l,c
  2564  001BA8  5014               	movf	fputs@i+1,w,c
  2565  001BAA  200F               	addwfc	fputs@s+1,w,c
  2566  001BAC  6EDA               	movwf	fsr2h,c
  2567  001BAE  50DF               	movf	indf2,w,c
  2568  001BB0  6E12               	movwf	fputs@c,c
  2569  001BB2  5012               	movf	fputs@c,w,c
  2570  001BB4  B4D8               	btfsc	status,2,c
  2571  001BB6  0012               	return	
  2572  001BB8  D7E9               	goto	l1455
  2573  001BBA                     __end_of_fputs:
  2574                           	opt callstack 0
  2575                           
  2576 ;; *************** function _fputc *****************
  2577 ;; Defined at:
  2578 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;  c               2    4[COMRAM] int 
  2581 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  2582 ;;		 -> NULL(0), 
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;		None
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  2    4[COMRAM] int 
  2587 ;; Registers used:
  2588 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2594 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2596 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2597 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2598 ;;Total ram usage:        9 bytes
  2599 ;; Hardware stack levels used:    1
  2600 ;; Hardware stack levels required when called:    4
  2601 ;; This function calls:
  2602 ;;		_putch
  2603 ;; This function is called by:
  2604 ;;		_pad
  2605 ;;		_vfpfcnvrt
  2606 ;;		_fputs
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           	psect	text12
  2611  001A0C                     __ptext12:
  2612                           	opt callstack 0
  2613  001A0C                     _fputc:
  2614                           	opt callstack 23
  2615                           
  2616                           ;incstack = 0
  2617  001A0C  5007               	movf	fputc@fp,w,c
  2618  001A0E  1008               	iorwf	fputc@fp+1,w,c
  2619  001A10  B4D8               	btfsc	status,2,c
  2620  001A12  D004               	goto	u570
  2621  001A14  5007               	movf	fputc@fp,w,c
  2622  001A16  1008               	iorwf	fputc@fp+1,w,c
  2623  001A18  A4D8               	btfss	status,2,c
  2624  001A1A  D004               	goto	l1445
  2625  001A1C                     u570:
  2626  001A1C  5005               	movf	fputc@c,w,c
  2627  001A1E  EC7F  F00E         	call	_putch
  2628  001A22  0012               	return	
  2629  001A24                     l1445:
  2630  001A24  EE20 F004          	lfsr	2,4
  2631  001A28  5007               	movf	fputc@fp,w,c
  2632  001A2A  26D9               	addwf	fsr2l,f,c
  2633  001A2C  5008               	movf	fputc@fp+1,w,c
  2634  001A2E  22DA               	addwfc	fsr2h,f,c
  2635  001A30  50DE               	movf	postinc2,w,c
  2636  001A32  10DE               	iorwf	postinc2,w,c
  2637  001A34  B4D8               	btfsc	status,2,c
  2638  001A36  D016               	goto	u590
  2639  001A38  EE20 F004          	lfsr	2,4
  2640  001A3C  5007               	movf	fputc@fp,w,c
  2641  001A3E  26D9               	addwf	fsr2l,f,c
  2642  001A40  5008               	movf	fputc@fp+1,w,c
  2643  001A42  22DA               	addwfc	fsr2h,f,c
  2644  001A44  EE10 F002          	lfsr	1,2
  2645  001A48  5007               	movf	fputc@fp,w,c
  2646  001A4A  26E1               	addwf	fsr1l,f,c
  2647  001A4C  5008               	movf	fputc@fp+1,w,c
  2648  001A4E  22E2               	addwfc	fsr1h,f,c
  2649  001A50  50DE               	movf	postinc2,w,c
  2650  001A52  5CE6               	subwf	postinc1,w,c
  2651  001A54  50E6               	movf	postinc1,w,c
  2652  001A56  0A80               	xorlw	128
  2653  001A58  6E0D               	movwf	(??_fputc+4)& (0+255),c
  2654  001A5A  50DE               	movf	postinc2,w,c
  2655  001A5C  0A80               	xorlw	128
  2656  001A5E  580D               	subwfb	(??_fputc+4)& (0+255),w,c
  2657  001A60  B0D8               	btfsc	status,0,c
  2658  001A62  0012               	return	
  2659  001A64                     u590:
  2660  001A64  EE20 F002          	lfsr	2,2
  2661  001A68  5007               	movf	fputc@fp,w,c
  2662  001A6A  26D9               	addwf	fsr2l,f,c
  2663  001A6C  5008               	movf	fputc@fp+1,w,c
  2664  001A6E  22DA               	addwfc	fsr2h,f,c
  2665  001A70  2ADE               	incf	postinc2,f,c
  2666  001A72  0E00               	movlw	0
  2667  001A74  22DD               	addwfc	postdec2,f,c
  2668  001A76  0012               	return		;funcret
  2669  001A78                     __end_of_fputc:
  2670                           	opt callstack 0
  2671                           
  2672 ;; *************** function _putch *****************
  2673 ;; Defined at:
  2674 ;;		line 102 in file "lcd.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;  data            1    wreg     unsigned char 
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;  data            1    3[COMRAM] unsigned char 
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  1    wreg      void 
  2681 ;; Registers used:
  2682 ;;		wreg, status,2, status,0, cstack
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2691 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2692 ;;Total ram usage:        1 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    3
  2695 ;; This function calls:
  2696 ;;		_send_byte
  2697 ;; This function is called by:
  2698 ;;		_fputc
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           	psect	text13
  2703  001CFE                     __ptext13:
  2704                           	opt callstack 0
  2705  001CFE                     _putch:
  2706                           	opt callstack 23
  2707                           
  2708                           ;incstack = 0
  2709                           ;putch@data stored from wreg
  2710  001CFE  6E04               	movwf	putch@data,c
  2711                           
  2712                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
  2713  001D00  848C               	bsf	3980,2,c	;volatile
  2714                           
  2715                           ;lcd.c: 104:     send_byte((unsigned char)data);
  2716  001D02  5004               	movf	putch@data,w,c
  2717  001D04  EC76  F00E         	call	_send_byte
  2718  001D08  0012               	return		;funcret
  2719  001D0A                     __end_of_putch:
  2720                           	opt callstack 0
  2721                           
  2722 ;; *************** function _initLCD *****************
  2723 ;; Defined at:
  2724 ;;		line 69 in file "lcd.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;		None
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;		None
  2729 ;; Return value:  Size  Location     Type
  2730 ;;                  1    wreg      void 
  2731 ;; Registers used:
  2732 ;;		wreg, status,2, status,0, cstack
  2733 ;; Tracked objects:
  2734 ;;		On entry : 0/0
  2735 ;;		On exit  : 0/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;Total ram usage:        1 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    4
  2745 ;; This function calls:
  2746 ;;		_lcdInst
  2747 ;;		_send_byte
  2748 ;;		_send_nibble
  2749 ;; This function is called by:
  2750 ;;		_main
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text14
  2755  001A78                     __ptext14:
  2756                           	opt callstack 0
  2757  001A78                     _initLCD:
  2758                           	opt callstack 26
  2759                           
  2760                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
  2761                           
  2762                           ;incstack = 0
  2763  001A78  0E31               	movlw	49
  2764  001A7A  6E05               	movwf	??_initLCD& (0+255),c
  2765  001A7C  0EB2               	movlw	178
  2766  001A7E                     u1177:
  2767  001A7E  2EE8               	decfsz	wreg,f,c
  2768  001A80  D7FE               	bra	u1177
  2769  001A82  2E05               	decfsz	??_initLCD& (0+255),f,c
  2770  001A84  D7FC               	bra	u1177
  2771  001A86  D000               	nop2	
  2772                           
  2773                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
  2774  001A88  948C               	bcf	3980,2,c	;volatile
  2775                           
  2776                           ;lcd.c: 74:     send_nibble(0b0011);
  2777  001A8A  0E03               	movlw	3
  2778  001A8C  EC6B  F00E         	call	_send_nibble
  2779                           
  2780                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
  2781  001A90  0E11               	movlw	17
  2782  001A92  6E05               	movwf	??_initLCD& (0+255),c
  2783  001A94  0E3A               	movlw	58
  2784  001A96                     u1187:
  2785  001A96  2EE8               	decfsz	wreg,f,c
  2786  001A98  D7FE               	bra	u1187
  2787  001A9A  2E05               	decfsz	??_initLCD& (0+255),f,c
  2788  001A9C  D7FC               	bra	u1187
  2789  001A9E  D000               	nop2	
  2790                           
  2791                           ;lcd.c: 76:     send_nibble(0b0011);
  2792  001AA0  0E03               	movlw	3
  2793  001AA2  EC6B  F00E         	call	_send_nibble
  2794                           
  2795                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  2796  001AA6  0E7D               	movlw	125
  2797  001AA8                     u1197:
  2798  001AA8  2EE8               	decfsz	wreg,f,c
  2799  001AAA  D7FE               	bra	u1197
  2800                           
  2801                           ;lcd.c: 78:     send_byte(0b00110010);
  2802  001AAC  0E32               	movlw	50
  2803  001AAE  EC76  F00E         	call	_send_byte
  2804                           
  2805                           ;lcd.c: 80:     send_byte(0b00101000);
  2806  001AB2  0E28               	movlw	40
  2807  001AB4  EC76  F00E         	call	_send_byte
  2808                           
  2809                           ;lcd.c: 81:     send_byte(0b00001000);
  2810  001AB8  0E08               	movlw	8
  2811  001ABA  EC76  F00E         	call	_send_byte
  2812                           
  2813                           ;lcd.c: 82:     send_byte(0b00000001);
  2814  001ABE  0E01               	movlw	1
  2815  001AC0  EC76  F00E         	call	_send_byte
  2816                           
  2817                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
  2818  001AC4  0E11               	movlw	17
  2819  001AC6  6E05               	movwf	??_initLCD& (0+255),c
  2820  001AC8  0E3A               	movlw	58
  2821  001ACA                     u1207:
  2822  001ACA  2EE8               	decfsz	wreg,f,c
  2823  001ACC  D7FE               	bra	u1207
  2824  001ACE  2E05               	decfsz	??_initLCD& (0+255),f,c
  2825  001AD0  D7FC               	bra	u1207
  2826  001AD2  D000               	nop2	
  2827                           
  2828                           ;lcd.c: 84:     send_byte(0b00000110);
  2829  001AD4  0E06               	movlw	6
  2830  001AD6  EC76  F00E         	call	_send_byte
  2831                           
  2832                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  2833  001ADA  0E0F               	movlw	15
  2834  001ADC  EC85  F00E         	call	_lcdInst
  2835  001AE0  0012               	return		;funcret
  2836  001AE2                     __end_of_initLCD:
  2837                           	opt callstack 0
  2838                           
  2839 ;; *************** function _lcdInst *****************
  2840 ;; Defined at:
  2841 ;;		line 64 in file "lcd.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;  data            1    wreg     unsigned char 
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;  data            1    3[COMRAM] unsigned char 
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  1    wreg      void 
  2848 ;; Registers used:
  2849 ;;		wreg, status,2, status,0, cstack
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2856 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2859 ;;Total ram usage:        1 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    3
  2862 ;; This function calls:
  2863 ;;		_send_byte
  2864 ;; This function is called by:
  2865 ;;		_main
  2866 ;;		_initLCD
  2867 ;;		_lcd_shift_cursor
  2868 ;;		_lcd_shift_display
  2869 ;; This function uses a non-reentrant model
  2870 ;;
  2871                           
  2872                           	psect	text15
  2873  001D0A                     __ptext15:
  2874                           	opt callstack 0
  2875  001D0A                     _lcdInst:
  2876                           	opt callstack 27
  2877                           
  2878                           ;incstack = 0
  2879                           ;lcdInst@data stored from wreg
  2880  001D0A  6E04               	movwf	lcdInst@data,c
  2881                           
  2882                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
  2883  001D0C  948C               	bcf	3980,2,c	;volatile
  2884                           
  2885                           ;lcd.c: 66:     send_byte(data);
  2886  001D0E  5004               	movf	lcdInst@data,w,c
  2887  001D10  EC76  F00E         	call	_send_byte
  2888  001D14  0012               	return		;funcret
  2889  001D16                     __end_of_lcdInst:
  2890                           	opt callstack 0
  2891                           
  2892 ;; *************** function _send_byte *****************
  2893 ;; Defined at:
  2894 ;;		line 55 in file "lcd.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;  data            1    wreg     unsigned char 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;  data            1    2[COMRAM] unsigned char 
  2899 ;; Return value:  Size  Location     Type
  2900 ;;                  1    wreg      void 
  2901 ;; Registers used:
  2902 ;;		wreg, status,2, status,0, cstack
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;Total ram usage:        1 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    2
  2915 ;; This function calls:
  2916 ;;		_send_nibble
  2917 ;; This function is called by:
  2918 ;;		_lcdInst
  2919 ;;		_initLCD
  2920 ;;		_putch
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text16
  2925  001CEC                     __ptext16:
  2926                           	opt callstack 0
  2927  001CEC                     _send_byte:
  2928                           	opt callstack 23
  2929                           
  2930                           ;incstack = 0
  2931                           ;send_byte@data stored from wreg
  2932  001CEC  6E03               	movwf	send_byte@data,c
  2933                           
  2934                           ;lcd.c: 57:     send_nibble(data >> 4);
  2935  001CEE  3803               	swapf	send_byte@data,w,c
  2936  001CF0  0B0F               	andlw	15
  2937  001CF2  EC6B  F00E         	call	_send_nibble
  2938                           
  2939                           ;lcd.c: 60:     send_nibble(data);
  2940  001CF6  5003               	movf	send_byte@data,w,c
  2941  001CF8  EC6B  F00E         	call	_send_nibble
  2942  001CFC  0012               	return		;funcret
  2943  001CFE                     __end_of_send_byte:
  2944                           	opt callstack 0
  2945                           
  2946 ;; *************** function _send_nibble *****************
  2947 ;; Defined at:
  2948 ;;		line 44 in file "lcd.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;  data            1    wreg     unsigned char 
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;  data            1    1[COMRAM] unsigned char 
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, status,0, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2963 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2965 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2966 ;;Total ram usage:        1 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    1
  2969 ;; This function calls:
  2970 ;;		_pulse_e
  2971 ;; This function is called by:
  2972 ;;		_send_byte
  2973 ;;		_initLCD
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text17
  2978  001CD6                     __ptext17:
  2979                           	opt callstack 0
  2980  001CD6                     _send_nibble:
  2981                           	opt callstack 23
  2982                           
  2983                           ;incstack = 0
  2984                           ;send_nibble@data stored from wreg
  2985  001CD6  6E02               	movwf	send_nibble@data,c
  2986                           
  2987                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
  2988  001CD8  508C               	movf	3980,w,c	;volatile
  2989  001CDA  0B0F               	andlw	15
  2990  001CDC  6E8C               	movwf	3980,c	;volatile
  2991                           
  2992                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
  2993  001CDE  3802               	swapf	send_nibble@data,w,c
  2994  001CE0  0BF0               	andlw	240
  2995  001CE2  108C               	iorwf	3980,w,c	;volatile
  2996  001CE4  6E8C               	movwf	3980,c	;volatile
  2997                           
  2998                           ;lcd.c: 48:     pulse_e();
  2999  001CE6  EC23  F00E         	call	_pulse_e	;wreg free
  3000  001CEA  0012               	return		;funcret
  3001  001CEC                     __end_of_send_nibble:
  3002                           	opt callstack 0
  3003                           
  3004 ;; *************** function _pulse_e *****************
  3005 ;; Defined at:
  3006 ;;		line 28 in file "lcd.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;		None
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  interruptSta    1    0[COMRAM] unsigned char 
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  1    wreg      void 
  3013 ;; Registers used:
  3014 ;;		wreg
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3023 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3024 ;;Total ram usage:        1 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; This function calls:
  3027 ;;		Nothing
  3028 ;; This function is called by:
  3029 ;;		_send_nibble
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           	psect	text18
  3034  001C46                     __ptext18:
  3035                           	opt callstack 0
  3036  001C46                     _pulse_e:
  3037                           	opt callstack 23
  3038                           
  3039                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
  3040                           
  3041                           ;incstack = 0
  3042  001C46  0E00               	movlw	0
  3043  001C48  BEF2               	btfsc	4082,7,c	;volatile
  3044  001C4A  0E01               	movlw	1
  3045  001C4C  6E01               	movwf	pulse_e@interruptState,c
  3046                           
  3047                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
  3048  001C4E  9EF2               	bcf	4082,7,c	;volatile
  3049                           
  3050                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
  3051  001C50  868C               	bsf	3980,3,c	;volatile
  3052                           
  3053                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  3054  001C52  0E14               	movlw	20
  3055  001C54                     u1217:
  3056  001C54  2EE8               	decfsz	wreg,f,c
  3057  001C56  D7FE               	bra	u1217
  3058  001C58  D000               	nop2	
  3059                           
  3060                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
  3061  001C5A  968C               	bcf	3980,3,c	;volatile
  3062                           
  3063                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  3064  001C5C  0E53               	movlw	83
  3065  001C5E                     u1227:
  3066  001C5E  2EE8               	decfsz	wreg,f,c
  3067  001C60  D7FE               	bra	u1227
  3068  001C62  F000               	nop	
  3069                           
  3070                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
  3071  001C64  B001               	btfsc	pulse_e@interruptState,0,c
  3072  001C66  D002               	bra	u555
  3073  001C68  9EF2               	bcf	4082,7,c	;volatile
  3074  001C6A  D001               	bra	u556
  3075  001C6C                     u555:
  3076  001C6C  8EF2               	bsf	4082,7,c	;volatile
  3077  001C6E                     u556:
  3078  001C6E  0012               	return		;funcret
  3079  001C70                     __end_of_pulse_e:
  3080                           	opt callstack 0
  3081                           
  3082 ;; *************** function _ee_write_byte *****************
  3083 ;; Defined at:
  3084 ;;		line 94 in file "main.c"
  3085 ;; Parameters:    Size  Location     Type
  3086 ;;  address         1    wreg     unsigned char 
  3087 ;;  _data           2    0[COMRAM] PTR unsigned char 
  3088 ;;		 -> main@help(2), main@save_me(1), 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;  address         1    2[COMRAM] unsigned char 
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      void 
  3093 ;; Registers used:
  3094 ;;		wreg, fsr2l, fsr2h, status,2
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3100 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;Total ram usage:        3 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; This function calls:
  3107 ;;		Nothing
  3108 ;; This function is called by:
  3109 ;;		_main
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text19
  3114  001BEC                     __ptext19:
  3115                           	opt callstack 0
  3116  001BEC                     _ee_write_byte:
  3117                           	opt callstack 30
  3118                           
  3119                           ;incstack = 0
  3120                           ;ee_write_byte@address stored from wreg
  3121  001BEC  6E03               	movwf	ee_write_byte@address,c
  3122  001BEE  C001  FFD9         	movff	ee_write_byte@_data,fsr2l
  3123  001BF2  C002  FFDA         	movff	ee_write_byte@_data+1,fsr2h
  3124  001BF6  50DF               	movf	indf2,w,c
  3125  001BF8  6EA8               	movwf	4008,c	;volatile
  3126  001BFA  C003  FFA9         	movff	ee_write_byte@address,4009	;volatile
  3127  001BFE  9EA6               	bcf	4006,7,c	;volsfr
  3128  001C00  9CA6               	bcf	4006,6,c	;volsfr
  3129  001C02  84A6               	bsf	4006,2,c	;volsfr
  3130  001C04  9EF2               	bcf	4082,7,c	;volatile
  3131  001C06  0E55               	movlw	85
  3132  001C08  6EA7               	movwf	4007,c	;volsfr
  3133  001C0A  0EAA               	movlw	170
  3134  001C0C  6EA7               	movwf	4007,c	;volsfr
  3135  001C0E  82A6               	bsf	4006,1,c	;volsfr
  3136  001C10                     l25:
  3137  001C10  0004               	clrwdt		;# 
  3138                           
  3139                           ;main.c: 118:       } while(EECON1bits.WR);
  3140  001C12  B2A6               	btfsc	4006,1,c	;volsfr
  3141  001C14  D7FD               	goto	l25
  3142                           
  3143                           ;main.c: 119:     EECON1bits.WREN = 0;
  3144  001C16  94A6               	bcf	4006,2,c	;volsfr
  3145                           
  3146                           ;main.c: 120:     INTCONbits.GIE = 1;
  3147  001C18  8EF2               	bsf	4082,7,c	;volatile
  3148  001C1A  0012               	return		;funcret
  3149  001C1C                     __end_of_ee_write_byte:
  3150                           	opt callstack 0
  3151                           
  3152 ;; *************** function _ee_read_byte *****************
  3153 ;; Defined at:
  3154 ;;		line 123 in file "main.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;  address         1    wreg     unsigned char 
  3157 ;;  _data           2    0[COMRAM] PTR unsigned char 
  3158 ;;		 -> main@from_eeprom(1), 
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  address         1    2[COMRAM] unsigned char 
  3161 ;; Return value:  Size  Location     Type
  3162 ;;                  1    wreg      void 
  3163 ;; Registers used:
  3164 ;;		wreg, fsr2l, fsr2h
  3165 ;; Tracked objects:
  3166 ;;		On entry : 0/0
  3167 ;;		On exit  : 0/0
  3168 ;;		Unchanged: 0/0
  3169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3170 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3173 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;Total ram usage:        3 bytes
  3175 ;; Hardware stack levels used:    1
  3176 ;; This function calls:
  3177 ;;		Nothing
  3178 ;; This function is called by:
  3179 ;;		_main
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           	psect	text20
  3184  001CBC                     __ptext20:
  3185                           	opt callstack 0
  3186  001CBC                     _ee_read_byte:
  3187                           	opt callstack 30
  3188                           
  3189                           ;incstack = 0
  3190                           ;ee_read_byte@address stored from wreg
  3191  001CBC  6E03               	movwf	ee_read_byte@address,c
  3192                           
  3193                           ;main.c: 124:     EEADR = address;
  3194  001CBE  C003  FFA9         	movff	ee_read_byte@address,4009	;volatile
  3195                           
  3196                           ;main.c: 125:     EECON1bits.CFGS = 0;
  3197  001CC2  9CA6               	bcf	4006,6,c	;volsfr
  3198                           
  3199                           ;main.c: 126:     EECON1bits.EEPGD = 0;
  3200  001CC4  9EA6               	bcf	4006,7,c	;volsfr
  3201                           
  3202                           ;main.c: 127:     EECON1bits.RD = 1;
  3203  001CC6  80A6               	bsf	4006,0,c	;volsfr
  3204                           
  3205                           ;main.c: 128:     *_data = EEDATA;
  3206  001CC8  C001  FFD9         	movff	ee_read_byte@_data,fsr2l
  3207  001CCC  C002  FFDA         	movff	ee_read_byte@_data+1,fsr2h
  3208  001CD0  CFA8 FFDF          	movff	4008,indf2	;volatile
  3209  001CD4  0012               	return		;funcret
  3210  001CD6                     __end_of_ee_read_byte:
  3211                           	opt callstack 0
  3212                           
  3213                           	psect	rparam
  3214  0000                     tosu	equ	0xFFF
  3215                           tosh	equ	0xFFE
  3216                           tosl	equ	0xFFD
  3217                           stkptr	equ	0xFFC
  3218                           pclatu	equ	0xFFB
  3219                           pclath	equ	0xFFA
  3220                           pcl	equ	0xFF9
  3221                           tblptru	equ	0xFF8
  3222                           tblptrh	equ	0xFF7
  3223                           tblptrl	equ	0xFF6
  3224                           tablat	equ	0xFF5
  3225                           prodh	equ	0xFF4
  3226                           prodl	equ	0xFF3
  3227                           indf0	equ	0xFEF
  3228                           postinc0	equ	0xFEE
  3229                           postdec0	equ	0xFED
  3230                           preinc0	equ	0xFEC
  3231                           plusw0	equ	0xFEB
  3232                           fsr0h	equ	0xFEA
  3233                           fsr0l	equ	0xFE9
  3234                           wreg	equ	0xFE8
  3235                           indf1	equ	0xFE7
  3236                           postinc1	equ	0xFE6
  3237                           postdec1	equ	0xFE5
  3238                           preinc1	equ	0xFE4
  3239                           plusw1	equ	0xFE3
  3240                           fsr1h	equ	0xFE2
  3241                           fsr1l	equ	0xFE1
  3242                           bsr	equ	0xFE0
  3243                           indf2	equ	0xFDF
  3244                           postinc2	equ	0xFDE
  3245                           postdec2	equ	0xFDD
  3246                           preinc2	equ	0xFDC
  3247                           plusw2	equ	0xFDB
  3248                           fsr2h	equ	0xFDA
  3249                           fsr2l	equ	0xFD9
  3250                           status	equ	0xFD8


Data Sizes:
    Strings     127
    Constant    6
    Data        0
    BSS         40
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    106     114
    BANK0           128      0      32
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_12(CODE[23]), STR_11(CODE[7]), STR_10(CODE[24]), STR_9(CODE[7]), 
		 -> STR_8(CODE[24]), STR_7(CODE[7]), STR_6(CODE[24]), STR_5(CODE[7]), 
		 -> STR_4(CODE[25]), STR_3(CODE[7]), STR_2(CODE[24]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S920_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_12(CODE[23]), STR_11(CODE[7]), STR_10(CODE[24]), STR_9(CODE[7]), 
		 -> STR_8(CODE[24]), STR_7(CODE[7]), STR_6(CODE[24]), STR_5(CODE[7]), 
		 -> STR_4(CODE[25]), STR_3(CODE[7]), STR_2(CODE[24]), STR_1(CODE[7]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 25
		 -> STR_12(CODE[23]), STR_11(CODE[7]), STR_10(CODE[24]), STR_9(CODE[7]), 
		 -> STR_8(CODE[24]), STR_7(CODE[7]), STR_6(CODE[24]), STR_5(CODE[7]), 
		 -> STR_4(CODE[25]), STR_3(CODE[7]), STR_2(CODE[24]), STR_1(CODE[7]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    ee_read_byte@_data	PTR unsigned char  size(2) Largest target is 1
		 -> main@from_eeprom(COMRAM[1]), 

    ee_write_byte@_data	PTR unsigned char  size(2) Largest target is 2
		 -> main@help(COMRAM[2]), main@save_me(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _abs->___aomod
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_send_byte
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   11967
                                            100 COMRAM     6     6      0
                       _ee_read_byte
                      _ee_write_byte
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4   10797
                                             92 COMRAM     8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    9829
                                             84 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    9472
                                             67 COMRAM    17    11      6
                               _ctoa
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4676
                                             31 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 7     4      3    3247
                                             31 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3027
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1280
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     879
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     245
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (6) _send_byte                                            1     1      0      89
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (7) _send_nibble                                          1     1      0      45
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (8) _pulse_e                                              1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ee_write_byte                                        3     1      2     196
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ee_read_byte                                         3     1      2     348
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ee_read_byte
   _ee_write_byte
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _fputc
           _putch
             _send_byte
               _send_nibble
                 _pulse_e

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      20       5       25.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6A      72       1       89.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      92      34        0.0%
DATA                 0      0      92       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 08 13:14:34 2019

                     l25 1C10              __CFG_CPD$ON 000000              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000                      l150 19A4  
                    l170 135C                      l168 1354                      l881 1BE2  
           __CFG_CPB$OFF 000000                      u710 179C                      u570 1A1C  
                    u810 130A                      u555 1C6C                      u556 1C6E  
                    u660 1BC8                      u900 14AE                      u820 130C  
                    u901 14AC                      u590 1A64                      u910 14BC  
                    u920 14C0                      u770 18D4                      u850 134A  
                    u691 1764                      u940 14CC                      u870 1370  
                    u880 148C                      u990 15FA                      _abs 1BBA  
                    _pad 1976                      wreg 000FE8             __CFG_IESO$ON 000000  
   __end_of_ee_read_byte 1CD6             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   ?_abs 0013                     l1511 175E                     l1505 1736  
                   l1611 1376                     l1445 1A24                     l1517 1784  
                   l1533 180A                     l1455 1B8C                     l1463 1C26  
                   l1519 1798                     l1615 1386                     l1711 1AF4  
                   l1465 1C2A                     l1481 19AE                     l1537 1830  
                   l1529 17F4                     l1553 18A2                     l1625 147E  
                   l1713 1B18                     l1459 1BA2                     l1475 198E  
                   l1485 19C6                     l1581 1B46                     l1573 1954  
                   l1565 1918                     l1557 18BC                     l1549 187E  
                   l1645 14E2                     l1479 199C                     l1583 1B52  
                   l1559 18D0                     l1489 19F2                     l1569 192E  
                   l1649 14FA                     l1597 1338                     l1685 16B4  
                   l1669 15C6                     l1679 1678                     l1695 16D6  
                   l1689 16BE                     ?_pad 0015                     STR_1 107F  
                   STR_2 1020                     STR_3 107F                     STR_4 1007  
                   STR_5 107F                     STR_6 1020                     STR_7 107F  
                   STR_8 1038                     STR_9 107F                     u1107 11AE  
                   u1117 11C8                     u1207 1ACA                     u1127 120E  
                   u1217 1C54                     u1137 1228                     u1057 10A8  
                   u1227 1C5E                     u1147 1270                     u1067 10EE  
                   u1157 128A                     u1077 1108                     u1167 12D0  
                   u1087 114E                     _LATD 000F8C                     u1177 1A7E  
                   u1097 1168                     u1187 1A96                     u1197 1AA8  
                   abs@a 0013                     _dbuf 0080              main@save_me 0069  
                   _ctoa 1B34                     _main 1088                     _dtoa 12E2  
                   _prec 006F                     _nout 006B                     pad@i 001C  
                   pad@p 0019                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf2 000FDF                     fsr1l 000FE1                     pad@w 001E  
                   fsr2l 000FD9                     start 0000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ??_abs 0015                    ??_pad 001B  
        __end_of___aodiv 1852                    ?_ctoa 0020                    ?_main 0001  
                  ?_dtoa 0020          __end_of___aomod 1976                    _EEADR 000FA9  
                  STR_10 1050                    STR_11 107F                    STR_12 1068  
           vfpfcnvrt@fmt 0046                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000          __end_of_lcdInst 1D16           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000          __end_of_initLCD 1AE2           __CFG_EBTRB$OFF 000000  
                  _flags 0071                    _fputc 1A0C                    _fputs 1B82  
                  pad@fp 0015                    _width 006D                    ctoa@c 0022  
                  _putch 1CFE                    ctoa@w 0023                    dtoa@d 0022  
                  dtoa@i 0042                    dtoa@n 003A                    dtoa@p 0034  
                  dtoa@s 0038                    dtoa@w 0036                    tablat 000FF5  
        send_nibble@data 0002          __end_of_pulse_e 1C70                    status 000FD8  
         __CFG_PBADEN$ON 000000          __initialization 1C70             __end_of_ctoa 1B82  
           __end_of_main 12E2             __end_of_dtoa 1524                   ??_ctoa 0023  
                 ??_main 0065                   ??_dtoa 002A            __activetblptr 000001  
           ?_send_nibble 0001                   ?_fputc 0005                   ?_fputs 000E  
                 _EEDATA 000FA8                   _EECON2 000FA7                   ?_putch 0001  
                 _SSPADD 000FC8                   _SSPBUF 000FC9           __CFG_XINST$OFF 000000  
           vfprintf@cfmt 005B    __end_of_ee_write_byte 1C1C                ??___aodiv 0011  
              ??___aomod 0011           __CFG_STVREN$ON 000000                   clear_0 1C76  
                 clear_1 1C82                ??_lcdInst 0004                   _printf 1C96  
                 pad@buf 0017                   ctoa@fp 0020                   dtoa@fp 0020  
                 _strlen 1C1C    __size_of_ee_read_byte 001A                ??_initLCD 0005  
                 fputc@c 0005                   fputs@c 0012                   fputs@i 0013  
                 fputs@s 000E             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8         __end_of_vfprintf 1B34  
              ??_pulse_e 0001    pulse_e@interruptState 0001               __accesstop 0080  
__end_of__initialization 1C88            ___rparam_used 000001           __pcstackCOMRAM 0001  
           _ee_read_byte 1CBC            __end_of_fputc 1A78            __end_of_fputs 1BBA  
          __end_of_putch 1D0A                  ??_fputc 0009                  ??_fputs 0012  
                ??_putch 0004               __pbssBANK0 0080       __size_of_send_byte 0012  
                ?_printf 005D                  ?_strlen 0001       __size_of_vfpfcnvrt 01E6  
                _SSPCON1 000FC6                  _SSPCON2 000FC5                  _SSPSTAT 000FC7  
   __size_of_send_nibble 0016                  __Hparam 0000                  __Lparam 0000  
                ___aodiv 170A                  ___aomod 1852                ?_vfprintf 0055  
           __psmallconst 1000                  __pcinit 1C70                  __ramtop 1000  
                _lcdInst 1D0A                  __ptext0 1088                  __ptext1 1C96  
                __ptext2 1AE2                  __ptext3 1524                  __ptext4 12E2  
                __ptext5 1BBA                  __ptext6 1852                  __ptext7 170A  
                __ptext8 1B34                  __ptext9 1976          __size_of_printf 0026  
        __size_of_strlen 002A                  _initLCD 1A78             __size_of_abs 0032  
           __size_of_pad 0096                  _pulse_e 1C46     end_of_initialization 1C88  
  __end_of_LCD_SIZE_HORZ 1006        __end_of_send_byte 1CFE    __end_of_LCD_SIZE_VERT 1005  
                fputc@fp 0007                  fputs@fp 0010      ee_read_byte@address 0003  
      __end_of_vfpfcnvrt 170A                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 005B  
                strlen@a 0003                  strlen@s 0001                _TRISCbits 000F94  
          send_byte@data 0003              vfpfcnvrt@ap 0048              vfpfcnvrt@fp 0044  
            vfpfcnvrt@ll 004C           __end_of_printf 1CBC           __end_of_strlen 1C46  
    start_initialization 1C70              __end_of_abs 1BEC              __end_of_pad 1A0C  
 __size_of_ee_write_byte 0030              vfprintf@fmt 0057         __CFG_LPT1OSC$OFF 000000  
      ee_read_byte@_data 0001                 ??_printf 0061                 ??_strlen 0003  
   ee_write_byte@address 0003              __pbssCOMRAM 006B         ___aodiv@dividend 0001  
     ee_write_byte@_data 0001        __CFG_CCP2MX$PORTC 000000            _ee_write_byte 1BEC  
               ?___aodiv 0001                 ?___aomod 0001         ___aodiv@quotient 0013  
               ?_lcdInst 0001        __size_of_vfprintf 0052                 ?_initLCD 0001  
            __smallconst 1000            ??_send_nibble 0002                 ?_pulse_e 0001  
         __size_of_fputc 006C           __size_of_fputs 0038           __size_of_putch 000C  
               _LATDbits 000F8C                _send_byte 1CEC           _LCD_LINE1_ADDR 1003  
         _LCD_LINE2_ADDR 1006           _LCD_LINE3_ADDR 1002           _LCD_LINE4_ADDR 1001  
         ?_ee_write_byte 0001         __CFG_WDTPS$32768 000000                _vfpfcnvrt 1524  
        main@from_eeprom 006A               vfpfcnvrt@c 0054   __end_of_LCD_LINE1_ADDR 1004  
 __end_of_LCD_LINE2_ADDR 1007   __end_of_LCD_LINE3_ADDR 1003   __end_of_LCD_LINE4_ADDR 1002  
    __end_of_send_nibble 1CEC               _EECON1bits 000FA6               ?_send_byte 0001  
               __Hrparam 0000               vfprintf@ap 0059                 __Lrparam 0000  
             vfprintf@fp 0055             __Lsmallconst 1000            ?_ee_read_byte 0001  
     __CFG_BOREN$SBORDIS 000000         __size_of___aodiv 0148         __size_of___aomod 0124  
             ?_vfpfcnvrt 0044          ___aodiv@divisor 0009          ___aodiv@counter 0011  
       __size_of_lcdInst 000C         __size_of_initLCD 006A                 _dtoa$459 0032  
               __ptext10 1C1C                 __ptext11 1B82                 __ptext20 1CBC  
               __ptext12 1A0C                 __ptext13 1CFE                 __ptext14 1A78  
               __ptext15 1D0A                 __ptext16 1CEC                 __ptext17 1CD6  
               __ptext18 1C46                 __ptext19 1BEC         __size_of_pulse_e 002A  
          __size_of_ctoa 004E            __size_of_main 025A            __size_of_dtoa 0242  
        ??_ee_write_byte 0003           ??_ee_read_byte 0003                 _vfprintf 1AE2  
              printf@fmt 005D                 main@help 0067         ___aomod@dividend 0001  
              putch@data 0004               _INTCONbits 000FF2              _send_nibble 1CD6  
          _LCD_SIZE_HORZ 1005            _LCD_SIZE_VERT 1004              ??_send_byte 0003  
               printf@ap 0063          ___aomod@divisor 0009              ??_vfpfcnvrt 004A  
            lcdInst@data 0004          ___aomod@counter 0011              _SSPCON1bits 000FC6  
            _SSPCON2bits 000FC5             ___aodiv@sign 0012             ___aomod@sign 0012  
