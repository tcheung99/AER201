#include <Wire.h>

//Motor setup
const int wheel_d = 60;           // Wheel diameter (mm)
const float wheel_c = PI * wheel_d; // Wheel circumference (mm)
const int counts_per_rev = 1920;   // (8 pairs N-S) * (120:1 gearbox) * (2 falling/rising edges)
const float count_to_dist = (wheel_c / counts_per_rev) ; // (1 tick = mm)
const float random_coeff= 2.4; 
const int pwm_l = 11 ;  
const int mot_l_1 = 9 ;
const int mot_l_2 = 10 ;

const int pwm_r = 6 ;
const int mot_r_1 = 7 ; 
const int mot_r_2 = 8 ;

const int encoder1PinA = 2;
const int encoder1PinB = 4;

const int encoder2PinA = 3; 
const int encoder2PinB = 5;


int LED = 13; // Use the onboard Uno LED
int isObstaclePin = A0; // This is our input pin
int isObstacle = HIGH; // HIGH MEANS NO OBSTACLE

int isObstaclePin2 = A1; // This is our input pin
int isObstacle2 = HIGH; // HIGH MEANS NO OBSTACLE

//Variables 
long dist1;
long dist2;
//volatile long avg_dist; 
volatile float avg_dist_float; 
volatile int avg_dist; 
long prev_avg_dist=0; 

volatile unsigned long encoder1Pos = 0;
volatile unsigned long encoder2Pos = 0;

volatile int speed1; 
volatile int speed2; 

volatile bool forward = true; 
volatile int stopp=0; 

int currentSpeed = 0;
long startTime = 0;

//const int offset = 5;

//I2C setup 
volatile bool action = false ; 
volatile bool delaygo = false ; 
volatile bool send_to_pic = false;
volatile uint8_t incomingByte; //unsigned integer of length 8 bits (1 byte) 
volatile uint8_t prev_incomingByte;

long loop_cnt=0;

void setup(){
  Wire.begin(8); // Join I2C bus with address 8 (slave address)
  
  // Register callback functions
  Wire.onReceive(receiveEvent); // Called when this slave device receives a data transmission from master
  Wire.onRequest(requestEvent); // Called when master requests data from this slave device  

  //Motor pin assignments 
  pinMode(pwm_l,OUTPUT) ;   
  pinMode(pwm_r,OUTPUT) ;
  pinMode(mot_l_1,OUTPUT) ;  
  pinMode(mot_l_2,OUTPUT) ;
  pinMode(mot_r_1,OUTPUT) ;  
  pinMode(mot_r_2,OUTPUT) ;
  
  pinMode (encoder1PinA, INPUT);
  pinMode (encoder1PinB, INPUT);
  pinMode (encoder2PinA, INPUT);
  pinMode (encoder2PinB, INPUT);   

      pinMode(LED, OUTPUT);
    pinMode(isObstaclePin, INPUT);
    pinMode(isObstaclePin2, INPUT);
  
  attachInterrupt(digitalPinToInterrupt(encoder1PinA), count1, RISING);
  attachInterrupt(digitalPinToInterrupt(encoder2PinA), count2, RISING);
  
  startTime = millis();
  // Open serial port to PC (hardware UART)
  Serial.begin(9600);  
}

void loop(){
  bool sense = false;
    // If we should send to the PIC, then we wait to receive a byte from the PC
    if (action&&!delaygo) {
        ir_sensor();
        set_speed();
    }
    if (action&&delaygo){
//      if ((loop_cnt%30)==0){
      if (loop_cnt==30){
        sense=true;
        loop_cnt = 0; 
      }
      if (sense==true){
        ir_sensor();
        set_speed();
      }
      else if (sense==false){
        set_speed();
      }
    }
    if (send_to_pic && !action && !incomingByte) { //if sending to PIC, not moving, and the sending byte is not empty
        incomingByte = avg_dist; 
        Serial.println(incomingByte);         
    }
    loop_cnt++;
}

//void set_incomingByte
  
void requestEvent(void){
//    prev_incomingByte = incomingByte;
  if (action)
    incomingByte = avg_dist; 
    Wire.write(incomingByte); // Respond with message of 1 byte for sensor distance
    incomingByte = 0; // Clear output buffer
    send_to_pic = false; 
}
/** @brief Callback for when the master transmits data */
void receiveEvent(int){
    static uint8_t buf[3] = {0};
    static uint8_t counter = 0;
    
    uint8_t x = Wire.read(); // Receive byte
    Serial.println((char)x); // Print to serial output as char (ASCII representation)

    if (x == '1'){
      action = true;
      forward = true; 
      delaygo = false; 
      prev_incomingByte =0;
    }    
    if (x == '2'){
      action = true;
      forward = true; 
      delaygo = true; 
      prev_incomingByte =0;
      loop_cnt=0;
    }
    if (x == '5'){
      action = true;
      forward = false;      
      prev_incomingByte =0;
    }
    if (x == '9'){
      action = false; //brake
      send_to_pic = true;
    }
}

void set_speed() { 
//    ir_sensor();
    if (stopp == 0){

  //Constrain speed
  speed1 = constrain(speed1, 0, 255);
  speed2 = constrain(speed2, 0, 255);

  //Sample encoders 
  volatile unsigned long ticks1 = encoder1Pos; 
  volatile unsigned long ticks2 = encoder2Pos; 
  Serial.print("Ticks: ");
  Serial.print(ticks1);
  Serial.print("\t");
  Serial.println(ticks2);
  
  Serial.print("Dist: ");
  Serial.print(dist1);
  Serial.print("\t");
  Serial.println(dist2);

  avg_dist_float = float(((float((dist1 + dist2 ))/float(2)))/10); //avg distance in cm 
  avg_dist = (int)(avg_dist_float + 0.5); //casting avg distance into an int and rounding 
  Serial.println("Avgdist: ");
  Serial.print(avg_dist_float);
  Serial.print("\t");
  Serial.println(avg_dist);
  
  int diff = abs(ticks1-ticks2); 
  int offset = abs(dist1-dist2); ;    
  if (diff != 0){
    if (ticks1>ticks2){
      speed1 = speed1 - offset; 
      speed2 = speed2 + offset; 
//      Serial.println("  Unveven: ");
  
    }
    if (ticks2>ticks1){
      speed1 = speed1 + offset; 
      speed2 = speed2 - offset; 
//      Serial.println("  Uneven ");
  
    }
  }
//  else if (ticks1==ticks1){
  if (diff == 0){
    speed1 = 255;
    speed2 = 255;
//    Serial.println("  wtf ");
  }
  Serial.print("Speed: ");
  Serial.print(speed1);
  Serial.print("\t");
  Serial.println(speed2);
//  if (forward == true){
  if ((speed1 && speed2)<20){
//  if ((speed1 && speed2)<25){
    speed1 = 255; 
    speed2 = 255; 
  }    
  drive(speed1, speed2);
  if (!delaygo){
    ir_sensor;
  }
  
//  }
//  if (forward == false){
//    
//  }
    }
}
void drive(int speed1, int speed2){
  if ((action)&&(forward==true)){   
    Serial.print("Driving");       
    digitalWrite(mot_l_1,LOW) ;    
    digitalWrite(mot_l_2,HIGH) ;
    
    digitalWrite(mot_r_1,LOW) ;    
    digitalWrite(mot_r_2,HIGH) ;

    analogWrite(pwm_l,speed2) ;
    analogWrite(pwm_r,speed1) ;
  }
  if ((action)&&(forward==false)){
    digitalWrite(mot_l_1,HIGH) ;    
    digitalWrite(mot_l_2,LOW) ;
    
    digitalWrite(mot_r_1,HIGH) ;    
    digitalWrite(mot_r_2,LOW) ;

    analogWrite(pwm_l,speed2) ;
    analogWrite(pwm_r,speed1) ;
  }
  if (!action){ //If action is false, brake
    digitalWrite(mot_l_1,LOW) ;    
    digitalWrite(mot_l_2,LOW) ;
    
    digitalWrite(mot_r_1,LOW) ;    
    digitalWrite(mot_r_2,LOW) ;
    
//    Serial.println("brake");
//    avg_dist_float = (((dist1 + dist2 )/2)/1000); //avg distance is cm 
//    avg_dist = (int)(avg_dist_float + 0.5); //casting avg distance into an int and rounding 
//    //  avg_dist = (dist1 );
//    Serial.print("Avgdist: ");
//    Serial.print(avg_dist_float);
//    Serial.print("\t");
//    Serial.println(avg_dist);
  }
//  dist1 = 100;
//  dist2 = 23;
//  avg_dist = 90;
}

void brake(){
  stopp = 1; 
     digitalWrite(mot_l_1,LOW) ;    
    digitalWrite(mot_l_2,LOW) ;
    
    digitalWrite(mot_r_1,LOW) ;    
    digitalWrite(mot_r_2,LOW) ;
    
      analogWrite(pwm_l,0) ;
  analogWrite(pwm_r,0) ;
  
}

void ir_sensor(){
    isObstacle = digitalRead(isObstaclePin);
  if (isObstacle == LOW) {
//    Serial.println("OBSTACLE!!, OBSTACLE!!");
    brake();
    digitalWrite(LED, HIGH);
  } 
  else {
//    Serial.println("clear");
    digitalWrite(LED, LOW);
    stopp=0;
  }
}

//void ir_sensor(){
//    isObstacle = digitalRead(isObstaclePin);
//    isObstacle2 = digitalRead(isObstaclePin2);
//  if ((isObstacle == LOW)||(isObstacle2 == LOW)) {
////    Serial.println("OBSTACLE!!, OBSTACLE!!");
//    brake();
//    digitalWrite(LED, HIGH);
//  } 
//  else {
////    Serial.println("clear");
//    digitalWrite(LED, LOW);
//    stopp=0;
//  }
//}

void count1() {
  if (action){
    encoder1Pos++;
    dist1 = (encoder1Pos * count_to_dist * random_coeff); //distance in mm
  }
}
void count2() {
  if (action){
    encoder2Pos++;
    dist2 = (encoder2Pos * count_to_dist * random_coeff); //distance in mm
  }
}